
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  000013c2  00001456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080027c  0080027c  000015d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001743  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049a  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2f  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b95  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001024  00000000  00000000  0000cc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000dc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002c72  00000000  00000000  0000dea1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 03 	jmp	0x668	; 0x668 <__ctors_end>
       4:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
       8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
       c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      10:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      14:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      18:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      1c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      20:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      24:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_9>
      28:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      2c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      30:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      34:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      38:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      3c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      40:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      44:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      48:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_18>
      4c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      50:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      54:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__vector_21>
      58:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      5c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      60:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      64:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z5setupv+0x114>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <__vector_9+0x3c0>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <__vector_9+0x40c>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <__vector_18+0xe>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z5setupv+0x172>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <__vector_9+0x60>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <__vector_9+0x86>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <__stack+0x26d>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <__muluhisi3+0x2>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <__stack+0x253>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z5setupv+0x12a>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <__vector_18+0x8>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <__do_clear_bss+0x2>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <_Z20lfoRouteFilterCutoffv+0x2e>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <__stack+0x215>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <__vector_9+0x468>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <__stack+0x23b>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <__mulsi3+0xe>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <__vector_9+0x356>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <.do_clear_bss_start>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <__ctors_end>:
     668:	11 24       	eor	r1, r1
     66a:	1f be       	out	0x3f, r1	; 63
     66c:	cf ef       	ldi	r28, 0xFF	; 255
     66e:	d8 e0       	ldi	r29, 0x08	; 8
     670:	de bf       	out	0x3e, r29	; 62
     672:	cd bf       	out	0x3d, r28	; 61

00000674 <__do_copy_data>:
     674:	12 e0       	ldi	r17, 0x02	; 2
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b1 e0       	ldi	r27, 0x01	; 1
     67a:	e2 ec       	ldi	r30, 0xC2	; 194
     67c:	f3 e1       	ldi	r31, 0x13	; 19
     67e:	02 c0       	rjmp	.+4      	; 0x684 <__do_copy_data+0x10>
     680:	05 90       	lpm	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	ac 37       	cpi	r26, 0x7C	; 124
     686:	b1 07       	cpc	r27, r17
     688:	d9 f7       	brne	.-10     	; 0x680 <__do_copy_data+0xc>

0000068a <__do_clear_bss>:
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	ac e7       	ldi	r26, 0x7C	; 124
     68e:	b2 e0       	ldi	r27, 0x02	; 2
     690:	01 c0       	rjmp	.+2      	; 0x694 <.do_clear_bss_start>

00000692 <.do_clear_bss_loop>:
     692:	1d 92       	st	X+, r1

00000694 <.do_clear_bss_start>:
     694:	a7 3e       	cpi	r26, 0xE7	; 231
     696:	b2 07       	cpc	r27, r18
     698:	e1 f7       	brne	.-8      	; 0x692 <.do_clear_bss_loop>
     69a:	0e 94 28 06 	call	0xc50	; 0xc50 <main>
     69e:	0c 94 df 09 	jmp	0x13be	; 0x13be <_exit>

000006a2 <__bad_interrupt>:
     6a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a6 <__vector_18>:
 */

#include "MIDILib.h"

ISR(USART_RX_vect)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
	
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <_Z10serialInitv>:

RXEvent rxEvent = 0;

void serialInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     6ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     6be:	8f e1       	ldi	r24, 0x1F	; 31
     6c0:	80 93 c4 00 	sts	0x00C4, r24
		
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     6c4:	88 ed       	ldi	r24, 0xD8	; 216
     6c6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	80 93 c2 00 	sts	0x00C2, r24
     6d0:	08 95       	ret

000006d2 <_Z20lfoRouteFilterCutoffv>:

void lfoRouteOc2Sync()
{}

void lfoRouteFilterCutoff()
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <_Z20lfoRouteFilterCutoffv+0x6>
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
	bool isNegative = lfoOut[1] < 0;
	lfoOut[1] *= lfoOut[1] > 0 ? 1 : -1;
     6dc:	20 91 9a 02 	lds	r18, 0x029A
     6e0:	30 91 9b 02 	lds	r19, 0x029B
     6e4:	21 15       	cp	r18, r1
     6e6:	31 05       	cpc	r19, r1
     6e8:	f1 f4       	brne	.+60     	; 0x726 <_Z20lfoRouteFilterCutoffv+0x54>
     6ea:	4f ef       	ldi	r20, 0xFF	; 255
     6ec:	5f ef       	ldi	r21, 0xFF	; 255
     6ee:	42 9f       	mul	r20, r18
     6f0:	c0 01       	movw	r24, r0
     6f2:	43 9f       	mul	r20, r19
     6f4:	90 0d       	add	r25, r0
     6f6:	52 9f       	mul	r21, r18
     6f8:	90 0d       	add	r25, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	90 93 9b 02 	sts	0x029B, r25
     700:	80 93 9a 02 	sts	0x029A, r24
	unsigned short temp = lfoOut[1]*lfoDepth;
     704:	40 91 07 01 	lds	r20, 0x0107
     708:	48 9f       	mul	r20, r24
     70a:	90 01       	movw	r18, r0
     70c:	49 9f       	mul	r20, r25
     70e:	30 0d       	add	r19, r0
     710:	11 24       	eor	r1, r1
     712:	3a 83       	std	Y+2, r19	; 0x02
     714:	29 83       	std	Y+1, r18	; 0x01
	{
		dFilterCutoff = -1*(*(((char*)&temp) + 1));
		lfoOut[1] *= -1;
	}
	else
		dFilterCutoff = *(((char*)&temp) + 1);	
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	80 93 7c 02 	sts	0x027C, r24
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret
{}

void lfoRouteFilterCutoff()
{
	bool isNegative = lfoOut[1] < 0;
	lfoOut[1] *= lfoOut[1] > 0 ? 1 : -1;
     726:	41 e0       	ldi	r20, 0x01	; 1
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	e1 cf       	rjmp	.-62     	; 0x6ee <_Z20lfoRouteFilterCutoffv+0x1c>

0000072c <_Z5setupv>:
		putString("\r\n");*/
	}
}

void setup()
{
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	00 d0       	rcall	.+0      	; 0x752 <_Z5setupv+0x26>
     752:	00 d0       	rcall	.+0      	; 0x754 <_Z5setupv+0x28>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	9d e8       	ldi	r25, 0x8D	; 141
     75c:	ac e8       	ldi	r26, 0x8C	; 140
     75e:	ba e7       	ldi	r27, 0x7A	; 122
     760:	80 93 89 02 	sts	0x0289, r24
     764:	90 93 8a 02 	sts	0x028A, r25
     768:	a0 93 8b 02 	sts	0x028B, r26
     76c:	b0 93 8c 02 	sts	0x028C, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
     778:	1a 82       	std	Y+2, r1	; 0x02
     77a:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     77c:	89 80       	ldd	r8, Y+1	; 0x01
     77e:	9a 80       	ldd	r9, Y+2	; 0x02
     780:	ab 80       	ldd	r10, Y+3	; 0x03
     782:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     784:	94 01       	movw	r18, r8
     786:	a5 01       	movw	r20, r10
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	00 e1       	ldi	r16, 0x10	; 16
     792:	0e 94 99 09 	call	0x1332	; 0x1332 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     796:	a1 2c       	mov	r10, r1
     798:	ed e8       	ldi	r30, 0x8D	; 141
     79a:	be 2e       	mov	r11, r30
     79c:	fc e8       	ldi	r31, 0x8C	; 140
     79e:	cf 2e       	mov	r12, r31
     7a0:	aa e7       	ldi	r26, 0x7A	; 122
     7a2:	da 2e       	mov	r13, r26
     7a4:	e1 2c       	mov	r14, r1
     7a6:	f1 2c       	mov	r15, r1
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	0e 94 3c 09 	call	0x1278	; 0x1278 <__udivdi3>
     7b0:	20 93 85 02 	sts	0x0285, r18
     7b4:	30 93 86 02 	sts	0x0286, r19
     7b8:	40 93 87 02 	sts	0x0287, r20
     7bc:	50 93 88 02 	sts	0x0288, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     7c8:	89 80       	ldd	r8, Y+1	; 0x01
     7ca:	9a 80       	ldd	r9, Y+2	; 0x02
     7cc:	ab 80       	ldd	r10, Y+3	; 0x03
     7ce:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     7d0:	94 01       	movw	r18, r8
     7d2:	a5 01       	movw	r20, r10
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	00 e1       	ldi	r16, 0x10	; 16
     7de:	0e 94 99 09 	call	0x1332	; 0x1332 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     7e2:	a1 2c       	mov	r10, r1
     7e4:	bd e8       	ldi	r27, 0x8D	; 141
     7e6:	bb 2e       	mov	r11, r27
     7e8:	0c e8       	ldi	r16, 0x8C	; 140
     7ea:	c0 2e       	mov	r12, r16
     7ec:	ea e7       	ldi	r30, 0x7A	; 122
     7ee:	de 2e       	mov	r13, r30
     7f0:	e1 2c       	mov	r14, r1
     7f2:	f1 2c       	mov	r15, r1
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__udivdi3>
     7fa:	39 01       	movw	r6, r18
     7fc:	4a 01       	movw	r8, r20
     7fe:	1b 01       	movw	r2, r22
     800:	2c 01       	movw	r4, r24
     802:	32 2f       	mov	r19, r18
     804:	30 93 8d 02 	sts	0x028D, r19
     808:	70 92 8e 02 	sts	0x028E, r7
     80c:	80 92 8f 02 	sts	0x028F, r8
     810:	90 92 90 02 	sts	0x0290, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     814:	80 e7       	ldi	r24, 0x70	; 112
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	90 93 dd 02 	sts	0x02DD, r25
     81c:	80 93 dc 02 	sts	0x02DC, r24
	*((unsigned short*)&(b)) = 0;
     820:	10 92 db 02 	sts	0x02DB, r1
     824:	10 92 da 02 	sts	0x02DA, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     828:	00 91 da 02 	lds	r16, 0x02DA
     82c:	10 91 db 02 	lds	r17, 0x02DB
     830:	20 91 dc 02 	lds	r18, 0x02DC
     834:	30 91 dd 02 	lds	r19, 0x02DD
	temp *= rhs;
     838:	58 01       	movw	r10, r16
     83a:	69 01       	movw	r12, r18
     83c:	00 e0       	ldi	r16, 0x00	; 0
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	93 01       	movw	r18, r6
     842:	a4 01       	movw	r20, r8
     844:	b1 01       	movw	r22, r2
     846:	c2 01       	movw	r24, r4
     848:	0e 94 b6 08 	call	0x116c	; 0x116c <__muldi3>
	
	return (unsigned long)(temp >> 16);
     84c:	00 e1       	ldi	r16, 0x10	; 16
     84e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__lshrdi3>
     852:	c9 01       	movw	r24, r18
     854:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);

	toFixed(880, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
     856:	80 93 ca 02 	sts	0x02CA, r24
     85a:	90 93 cb 02 	sts	0x02CB, r25
     85e:	a0 93 cc 02 	sts	0x02CC, r26
     862:	b0 93 cd 02 	sts	0x02CD, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     866:	80 e7       	ldi	r24, 0x70	; 112
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	90 93 bc 02 	sts	0x02BC, r25
     86e:	80 93 bb 02 	sts	0x02BB, r24
	*((unsigned short*)&(b)) = 0;
     872:	10 92 ba 02 	sts	0x02BA, r1
     876:	10 92 b9 02 	sts	0x02B9, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     87a:	00 91 b9 02 	lds	r16, 0x02B9
     87e:	10 91 ba 02 	lds	r17, 0x02BA
     882:	20 91 bb 02 	lds	r18, 0x02BB
     886:	30 91 bc 02 	lds	r19, 0x02BC
	temp *= rhs;
     88a:	58 01       	movw	r10, r16
     88c:	69 01       	movw	r12, r18
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	93 01       	movw	r18, r6
     894:	a4 01       	movw	r20, r8
     896:	b1 01       	movw	r22, r2
     898:	c2 01       	movw	r24, r4
     89a:	0e 94 b6 08 	call	0x116c	; 0x116c <__muldi3>
	
	return (unsigned long)(temp >> 16);
     89e:	00 e1       	ldi	r16, 0x10	; 16
     8a0:	0e 94 b4 09 	call	0x1368	; 0x1368 <__lshrdi3>
     8a4:	c9 01       	movw	r24, r18
     8a6:	da 01       	movw	r26, r20

	toFixed(880, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);

	toFixed(880, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
     8a8:	80 93 b1 02 	sts	0x02B1, r24
     8ac:	90 93 b2 02 	sts	0x02B2, r25
     8b0:	a0 93 b3 02 	sts	0x02B3, r26
     8b4:	b0 93 b4 02 	sts	0x02B4, r27
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e8       	ldi	r25, 0x80	; 128
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	80 93 94 02 	sts	0x0294, r24
     8c4:	90 93 95 02 	sts	0x0295, r25
     8c8:	a0 93 96 02 	sts	0x0296, r26
     8cc:	b0 93 97 02 	sts	0x0297, r27

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     8d0:	93 01       	movw	r18, r6
     8d2:	a4 01       	movw	r20, r8
     8d4:	b1 01       	movw	r22, r2
     8d6:	c2 01       	movw	r24, r4
     8d8:	0f e0       	ldi	r16, 0x0F	; 15
     8da:	0e 94 99 09 	call	0x1332	; 0x1332 <__ashldi3>
	
	return (unsigned long)(temp >> 16);
     8de:	00 e1       	ldi	r16, 0x10	; 16
     8e0:	0e 94 b4 09 	call	0x1368	; 0x1368 <__lshrdi3>
     8e4:	c9 01       	movw	r24, r18
     8e6:	da 01       	movw	r26, r20

	toFixed(880, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	
	toFixed(0.5, lfoFreq);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);	
     8e8:	80 93 a0 02 	sts	0x02A0, r24
     8ec:	90 93 a1 02 	sts	0x02A1, r25
     8f0:	a0 93 a2 02 	sts	0x02A2, r26
     8f4:	b0 93 a3 02 	sts	0x02A3, r27
	lfoRouteFunction = lfoRouteFilterCutoff;
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
     8f8:	8f e0       	ldi	r24, 0x0F	; 15
     8fa:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1);
     8fe:	82 e8       	ldi	r24, 0x82	; 130
     900:	80 93 7a 00 	sts	0x007A, r24
	
	toFixed(0.5, lfoFreq);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);	
	
	adcInit();
	serialInit();
     904:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z10serialInitv>
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
     908:	80 91 b1 00 	lds	r24, 0x00B1
     90c:	81 60       	ori	r24, 0x01	; 1
     90e:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
     912:	80 91 b1 00 	lds	r24, 0x00B1
     916:	8d 7f       	andi	r24, 0xFD	; 253
     918:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
     91c:	80 91 b1 00 	lds	r24, 0x00B1
     920:	8b 7f       	andi	r24, 0xFB	; 251
     922:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
     926:	80 91 b0 00 	lds	r24, 0x00B0
     92a:	8f 7b       	andi	r24, 0xBF	; 191
     92c:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
     930:	80 91 b0 00 	lds	r24, 0x00B0
     934:	80 68       	ori	r24, 0x80	; 128
     936:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
     93a:	80 91 b0 00 	lds	r24, 0x00B0
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
     944:	80 91 b0 00 	lds	r24, 0x00B0
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
     94e:	80 91 b1 00 	lds	r24, 0x00B1
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	80 93 b1 00 	sts	0x00B1, r24
	sei();
}

void noteUpdate()
{
	sei();
     958:	78 94       	sei
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     95a:	20 91 94 02 	lds	r18, 0x0294
     95e:	30 91 95 02 	lds	r19, 0x0295
     962:	40 91 96 02 	lds	r20, 0x0296
     966:	50 91 97 02 	lds	r21, 0x0297
     96a:	60 91 8d 02 	lds	r22, 0x028D
     96e:	70 91 8e 02 	lds	r23, 0x028E
     972:	80 91 8f 02 	lds	r24, 0x028F
     976:	90 91 90 02 	lds	r25, 0x0290

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     97a:	0e 94 0f 09 	call	0x121e	; 0x121e <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     97e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__lshrdi3>
     982:	c9 01       	movw	r24, r18
     984:	da 01       	movw	r26, r20
}

void noteUpdate()
{
	sei();
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     986:	80 93 a0 02 	sts	0x02A0, r24
     98a:	90 93 a1 02 	sts	0x02A1, r25
     98e:	a0 93 a2 02 	sts	0x02A2, r26
     992:	b0 93 a3 02 	sts	0x02A3, r27
	cli();
     996:	f8 94       	cli
	cbi (TCCR2B, WGM22);
}

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
     998:	20 91 c4 02 	lds	r18, 0x02C4
     99c:	30 91 0d 01 	lds	r19, 0x010D
     9a0:	40 91 c6 02 	lds	r20, 0x02C6
     9a4:	80 91 c5 02 	lds	r24, 0x02C5
     9a8:	99 27       	eor	r25, r25
     9aa:	87 fd       	sbrc	r24, 7
     9ac:	90 95       	com	r25
     9ae:	84 0f       	add	r24, r20
     9b0:	91 1d       	adc	r25, r1
     9b2:	47 fd       	sbrc	r20, 7
     9b4:	9a 95       	dec	r25
     9b6:	83 0f       	add	r24, r19
     9b8:	91 1d       	adc	r25, r1
     9ba:	3c e0       	ldi	r19, 0x0C	; 12
     9bc:	23 02       	muls	r18, r19
     9be:	80 0d       	add	r24, r0
     9c0:	91 1d       	adc	r25, r1
     9c2:	11 24       	eor	r1, r1
     9c4:	97 fd       	sbrc	r25, 7
     9c6:	35 c1       	rjmp	.+618    	; 0xc32 <__stack+0x333>
	{
		cli();
		osc1TWord = keyFreq[0];	
		sei();
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
     9c8:	88 35       	cpi	r24, 0x58	; 88
     9ca:	91 05       	cpc	r25, r1
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	04 c1       	rjmp	.+520    	; 0xbd8 <__stack+0x2d9>
		osc1TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     9d0:	f8 94       	cli
		osc1TWord = keyFreq[osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)];
     9d2:	80 91 c4 02 	lds	r24, 0x02C4
     9d6:	20 91 0d 01 	lds	r18, 0x010D
     9da:	e0 91 c6 02 	lds	r30, 0x02C6
     9de:	ff 27       	eor	r31, r31
     9e0:	e7 fd       	sbrc	r30, 7
     9e2:	f0 95       	com	r31
     9e4:	90 91 c5 02 	lds	r25, 0x02C5
     9e8:	e2 0f       	add	r30, r18
     9ea:	f1 1d       	adc	r31, r1
     9ec:	e9 0f       	add	r30, r25
     9ee:	f1 1d       	adc	r31, r1
     9f0:	97 fd       	sbrc	r25, 7
     9f2:	fa 95       	dec	r31
     9f4:	9c e0       	ldi	r25, 0x0C	; 12
     9f6:	89 02       	muls	r24, r25
     9f8:	e0 0d       	add	r30, r0
     9fa:	f1 1d       	adc	r31, r1
     9fc:	11 24       	eor	r1, r1
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e2 5f       	subi	r30, 0xF2	; 242
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	a2 81       	ldd	r26, Z+2	; 0x02
     a10:	b3 81       	ldd	r27, Z+3	; 0x03
     a12:	80 93 ca 02 	sts	0x02CA, r24
     a16:	90 93 cb 02 	sts	0x02CB, r25
     a1a:	a0 93 cc 02 	sts	0x02CC, r26
     a1e:	b0 93 cd 02 	sts	0x02CD, r27
		sei();
     a22:	78 94       	sei
	}
}

inline void osc1CentsUpdate()
{
	unsigned long cents1Coef = 0x27*(osc1CentsShift + dOsc1CentsShift);
     a24:	20 91 c7 02 	lds	r18, 0x02C7
     a28:	80 91 c8 02 	lds	r24, 0x02C8
     a2c:	90 91 c9 02 	lds	r25, 0x02C9
     a30:	82 0f       	add	r24, r18
     a32:	91 1d       	adc	r25, r1
     a34:	27 fd       	sbrc	r18, 7
     a36:	9a 95       	dec	r25
     a38:	47 e2       	ldi	r20, 0x27	; 39
     a3a:	48 9f       	mul	r20, r24
     a3c:	90 01       	movw	r18, r0
     a3e:	49 9f       	mul	r20, r25
     a40:	30 0d       	add	r19, r0
     a42:	11 24       	eor	r1, r1
     a44:	44 27       	eor	r20, r20
     a46:	37 fd       	sbrc	r19, 7
     a48:	40 95       	com	r20
     a4a:	54 2f       	mov	r21, r20
	
	cli();
     a4c:	f8 94       	cli
	cents1Coef *= osc1TWord;
     a4e:	60 91 ca 02 	lds	r22, 0x02CA
     a52:	70 91 cb 02 	lds	r23, 0x02CB
     a56:	80 91 cc 02 	lds	r24, 0x02CC
     a5a:	90 91 cd 02 	lds	r25, 0x02CD
     a5e:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsi3>
	cents1Coef = ((long)cents1Coef) >> 16;
     a62:	bb 27       	eor	r27, r27
     a64:	97 fd       	sbrc	r25, 7
     a66:	b0 95       	com	r27
     a68:	ab 2f       	mov	r26, r27
	osc1TWord += cents1Coef;
     a6a:	40 91 ca 02 	lds	r20, 0x02CA
     a6e:	50 91 cb 02 	lds	r21, 0x02CB
     a72:	60 91 cc 02 	lds	r22, 0x02CC
     a76:	70 91 cd 02 	lds	r23, 0x02CD
     a7a:	84 0f       	add	r24, r20
     a7c:	95 1f       	adc	r25, r21
     a7e:	a6 1f       	adc	r26, r22
     a80:	b7 1f       	adc	r27, r23
     a82:	80 93 ca 02 	sts	0x02CA, r24
     a86:	90 93 cb 02 	sts	0x02CB, r25
     a8a:	a0 93 cc 02 	sts	0x02CC, r26
     a8e:	b0 93 cd 02 	sts	0x02CD, r27
	sei();
     a92:	78 94       	sei
}

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
     a94:	20 91 ad 02 	lds	r18, 0x02AD
     a98:	30 91 08 01 	lds	r19, 0x0108
     a9c:	40 91 af 02 	lds	r20, 0x02AF
     aa0:	80 91 ae 02 	lds	r24, 0x02AE
     aa4:	99 27       	eor	r25, r25
     aa6:	87 fd       	sbrc	r24, 7
     aa8:	90 95       	com	r25
     aaa:	84 0f       	add	r24, r20
     aac:	91 1d       	adc	r25, r1
     aae:	47 fd       	sbrc	r20, 7
     ab0:	9a 95       	dec	r25
     ab2:	83 0f       	add	r24, r19
     ab4:	91 1d       	adc	r25, r1
     ab6:	3c e0       	ldi	r19, 0x0C	; 12
     ab8:	23 02       	muls	r18, r19
     aba:	80 0d       	add	r24, r0
     abc:	91 1d       	adc	r25, r1
     abe:	11 24       	eor	r1, r1
     ac0:	97 fd       	sbrc	r25, 7
     ac2:	a8 c0       	rjmp	.+336    	; 0xc14 <__stack+0x315>
	{
		cli();
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
     ac4:	88 35       	cpi	r24, 0x58	; 88
     ac6:	91 05       	cpc	r25, r1
     ac8:	0c f0       	brlt	.+2      	; 0xacc <__stack+0x1cd>
     aca:	95 c0       	rjmp	.+298    	; 0xbf6 <__stack+0x2f7>
		osc2TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     acc:	f8 94       	cli
		osc2TWord = keyFreq[osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)];
     ace:	80 91 ad 02 	lds	r24, 0x02AD
     ad2:	20 91 08 01 	lds	r18, 0x0108
     ad6:	e0 91 af 02 	lds	r30, 0x02AF
     ada:	ff 27       	eor	r31, r31
     adc:	e7 fd       	sbrc	r30, 7
     ade:	f0 95       	com	r31
     ae0:	90 91 ae 02 	lds	r25, 0x02AE
     ae4:	e2 0f       	add	r30, r18
     ae6:	f1 1d       	adc	r31, r1
     ae8:	e9 0f       	add	r30, r25
     aea:	f1 1d       	adc	r31, r1
     aec:	97 fd       	sbrc	r25, 7
     aee:	fa 95       	dec	r31
     af0:	9c e0       	ldi	r25, 0x0C	; 12
     af2:	89 02       	muls	r24, r25
     af4:	e0 0d       	add	r30, r0
     af6:	f1 1d       	adc	r31, r1
     af8:	11 24       	eor	r1, r1
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	e2 5f       	subi	r30, 0xF2	; 242
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	a2 81       	ldd	r26, Z+2	; 0x02
     b0c:	b3 81       	ldd	r27, Z+3	; 0x03
     b0e:	80 93 b1 02 	sts	0x02B1, r24
     b12:	90 93 b2 02 	sts	0x02B2, r25
     b16:	a0 93 b3 02 	sts	0x02B3, r26
     b1a:	b0 93 b4 02 	sts	0x02B4, r27
		sei();
     b1e:	78 94       	sei
	}	
}

inline void osc2CentsUpdate()
{
	unsigned long cents2Coef = 0x27*(osc2CentsShift + dOsc2CentsShift);
     b20:	20 91 b0 02 	lds	r18, 0x02B0
     b24:	80 91 0a 01 	lds	r24, 0x010A
     b28:	90 91 0b 01 	lds	r25, 0x010B
     b2c:	82 0f       	add	r24, r18
     b2e:	91 1d       	adc	r25, r1
     b30:	27 fd       	sbrc	r18, 7
     b32:	9a 95       	dec	r25
     b34:	47 e2       	ldi	r20, 0x27	; 39
     b36:	48 9f       	mul	r20, r24
     b38:	90 01       	movw	r18, r0
     b3a:	49 9f       	mul	r20, r25
     b3c:	30 0d       	add	r19, r0
     b3e:	11 24       	eor	r1, r1
     b40:	44 27       	eor	r20, r20
     b42:	37 fd       	sbrc	r19, 7
     b44:	40 95       	com	r20
     b46:	54 2f       	mov	r21, r20
	
	cli();
     b48:	f8 94       	cli
	cents2Coef *= osc2TWord;
     b4a:	60 91 b1 02 	lds	r22, 0x02B1
     b4e:	70 91 b2 02 	lds	r23, 0x02B2
     b52:	80 91 b3 02 	lds	r24, 0x02B3
     b56:	90 91 b4 02 	lds	r25, 0x02B4
     b5a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsi3>
	cents2Coef = ((long)cents2Coef) >> 16;
     b5e:	bb 27       	eor	r27, r27
     b60:	97 fd       	sbrc	r25, 7
     b62:	b0 95       	com	r27
     b64:	ab 2f       	mov	r26, r27
	osc2TWord += cents2Coef;
     b66:	40 91 b1 02 	lds	r20, 0x02B1
     b6a:	50 91 b2 02 	lds	r21, 0x02B2
     b6e:	60 91 b3 02 	lds	r22, 0x02B3
     b72:	70 91 b4 02 	lds	r23, 0x02B4
     b76:	84 0f       	add	r24, r20
     b78:	95 1f       	adc	r25, r21
     b7a:	a6 1f       	adc	r26, r22
     b7c:	b7 1f       	adc	r27, r23
     b7e:	80 93 b1 02 	sts	0x02B1, r24
     b82:	90 93 b2 02 	sts	0x02B2, r25
     b86:	a0 93 b3 02 	sts	0x02B3, r26
     b8a:	b0 93 b4 02 	sts	0x02B4, r27
	sei();
     b8e:	78 94       	sei
	serialInit();
	oscInit();
	
	noteUpdate();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
     b90:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
     b92:	80 91 70 00 	lds	r24, 0x0070
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 70 00 	sts	0x0070, r24
	sei();
     b9c:	78 94       	sei

	lfoRouteFunction = lfoRouteFilterCutoff;
     b9e:	89 e6       	ldi	r24, 0x69	; 105
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	90 93 92 02 	sts	0x0292, r25
     ba6:	80 93 91 02 	sts	0x0291, r24
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	bf 90       	pop	r11
     bc4:	af 90       	pop	r10
     bc6:	9f 90       	pop	r9
     bc8:	8f 90       	pop	r8
     bca:	7f 90       	pop	r7
     bcc:	6f 90       	pop	r6
     bce:	5f 90       	pop	r5
     bd0:	4f 90       	pop	r4
     bd2:	3f 90       	pop	r3
     bd4:	2f 90       	pop	r2
     bd6:	08 95       	ret
		osc1TWord = keyFreq[0];	
		sei();
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
	{
		cli();
     bd8:	f8 94       	cli
		osc1TWord = keyFreq[87];
     bda:	80 e8       	ldi	r24, 0x80	; 128
     bdc:	9b e1       	ldi	r25, 0x1B	; 27
     bde:	a2 e2       	ldi	r26, 0x22	; 34
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	80 93 ca 02 	sts	0x02CA, r24
     be6:	90 93 cb 02 	sts	0x02CB, r25
     bea:	a0 93 cc 02 	sts	0x02CC, r26
     bee:	b0 93 cd 02 	sts	0x02CD, r27
		sei();
     bf2:	78 94       	sei
     bf4:	17 cf       	rjmp	.-466    	; 0xa24 <__stack+0x125>
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
	{
		cli();
     bf6:	f8 94       	cli
		osc2TWord = keyFreq[87];
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	9b e1       	ldi	r25, 0x1B	; 27
     bfc:	a2 e2       	ldi	r26, 0x22	; 34
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	80 93 b1 02 	sts	0x02B1, r24
     c04:	90 93 b2 02 	sts	0x02B2, r25
     c08:	a0 93 b3 02 	sts	0x02B3, r26
     c0c:	b0 93 b4 02 	sts	0x02B4, r27
		sei();
     c10:	78 94       	sei
     c12:	86 cf       	rjmp	.-244    	; 0xb20 <__stack+0x221>

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
	{
		cli();
     c14:	f8 94       	cli
		osc2TWord = keyFreq[0];
     c16:	8d e5       	ldi	r24, 0x5D	; 93
     c18:	99 e3       	ldi	r25, 0x39	; 57
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	80 93 b1 02 	sts	0x02B1, r24
     c22:	90 93 b2 02 	sts	0x02B2, r25
     c26:	a0 93 b3 02 	sts	0x02B3, r26
     c2a:	b0 93 b4 02 	sts	0x02B4, r27
		sei();
     c2e:	78 94       	sei
     c30:	77 cf       	rjmp	.-274    	; 0xb20 <__stack+0x221>

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
	{
		cli();
     c32:	f8 94       	cli
		osc1TWord = keyFreq[0];	
     c34:	8d e5       	ldi	r24, 0x5D	; 93
     c36:	99 e3       	ldi	r25, 0x39	; 57
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	80 93 ca 02 	sts	0x02CA, r24
     c40:	90 93 cb 02 	sts	0x02CB, r25
     c44:	a0 93 cc 02 	sts	0x02CC, r26
     c48:	b0 93 cd 02 	sts	0x02CD, r27
		sei();
     c4c:	78 94       	sei
     c4e:	ea ce       	rjmp	.-556    	; 0xa24 <__stack+0x125>

00000c50 <main>:
inline void osc2NoteUpdate();
inline void osc2CentsUpdate();

int main(void)
{
	setup();
     c50:	0e 94 96 03 	call	0x72c	; 0x72c <_Z5setupv>
     c54:	ff cf       	rjmp	.-2      	; 0xc54 <main+0x4>

00000c56 <__vector_21>:
		lfsrState ^= 0xB400;
	}
}

ISR(ADC_vect)
{
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	2f 93       	push	r18
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
     c6a:	20 91 e6 02 	lds	r18, 0x02E6
     c6e:	e2 2f       	mov	r30, r18
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 91 78 00 	lds	r24, 0x0078
     c76:	90 91 79 00 	lds	r25, 0x0079
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	e2 52       	subi	r30, 0x22	; 34
     c80:	fd 4f       	sbci	r31, 0xFD	; 253
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24

	adcSelect++;
     c86:	2f 5f       	subi	r18, 0xFF	; 255
	
	if(adcSelect > 3)
     c88:	24 30       	cpi	r18, 0x04	; 4
     c8a:	78 f0       	brcs	.+30     	; 0xcaa <__vector_21+0x54>
	adcSelect = 0;
     c8c:	10 92 e6 02 	sts	0x02E6, r1
     c90:	20 e0       	ldi	r18, 0x00	; 0
	
	ADMUX = adcSelect;
     c92:	20 93 7c 00 	sts	0x007C, r18
}
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;

	adcSelect++;
     caa:	20 93 e6 02 	sts	0x02E6, r18
     cae:	f1 cf       	rjmp	.-30     	; 0xc92 <__vector_21+0x3c>

00000cb0 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{	
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	1f 93       	push	r17
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 d0       	rcall	.+0      	; 0xcea <__vector_9+0x3a>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
     cee:	80 91 06 01 	lds	r24, 0x0106
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <__vector_9+0x48>
     cf6:	5b c1       	rjmp	.+694    	; 0xfae <__vector_9+0x2fe>
	osc2CentsUpdate();
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
     cf8:	80 91 00 01 	lds	r24, 0x0100
     cfc:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
     d00:	9c 01       	movw	r18, r24
     d02:	36 95       	lsr	r19
     d04:	27 95       	ror	r18
	
	if(lsb == 1)
     d06:	80 fd       	sbrc	r24, 0
     d08:	b8 c1       	rjmp	.+880    	; 0x107a <__vector_9+0x3ca>
	{
		lfsrState ^= 0xB400;
     d0a:	30 93 01 01 	sts	0x0101, r19
     d0e:	20 93 00 01 	sts	0x0100, r18
{	
	if(notePlaying)
	{
		lfsrUpdate();
		
		osc1Phaccu[0] = osc1Phaccu[1];
     d12:	80 91 d2 02 	lds	r24, 0x02D2
     d16:	90 91 d3 02 	lds	r25, 0x02D3
     d1a:	a0 91 d4 02 	lds	r26, 0x02D4
     d1e:	b0 91 d5 02 	lds	r27, 0x02D5
     d22:	80 93 ce 02 	sts	0x02CE, r24
     d26:	90 93 cf 02 	sts	0x02CF, r25
     d2a:	a0 93 d0 02 	sts	0x02D0, r26
     d2e:	b0 93 d1 02 	sts	0x02D1, r27
		osc1Phaccu[1] = osc1Phaccu[2];
     d32:	40 91 d6 02 	lds	r20, 0x02D6
     d36:	50 91 d7 02 	lds	r21, 0x02D7
     d3a:	60 91 d8 02 	lds	r22, 0x02D8
     d3e:	70 91 d9 02 	lds	r23, 0x02D9
     d42:	40 93 d2 02 	sts	0x02D2, r20
     d46:	50 93 d3 02 	sts	0x02D3, r21
     d4a:	60 93 d4 02 	sts	0x02D4, r22
     d4e:	70 93 d5 02 	sts	0x02D5, r23
		osc1Phaccu[2] += osc1TWord;
     d52:	80 91 ca 02 	lds	r24, 0x02CA
     d56:	90 91 cb 02 	lds	r25, 0x02CB
     d5a:	a0 91 cc 02 	lds	r26, 0x02CC
     d5e:	b0 91 cd 02 	lds	r27, 0x02CD
     d62:	84 0f       	add	r24, r20
     d64:	95 1f       	adc	r25, r21
     d66:	a6 1f       	adc	r26, r22
     d68:	b7 1f       	adc	r27, r23
     d6a:	80 93 d6 02 	sts	0x02D6, r24
     d6e:	90 93 d7 02 	sts	0x02D7, r25
     d72:	a0 93 d8 02 	sts	0x02D8, r26
     d76:	b0 93 d9 02 	sts	0x02D9, r27

		osc1Out[0] = osc1Out[1];
     d7a:	40 91 bf 02 	lds	r20, 0x02BF
     d7e:	50 91 c0 02 	lds	r21, 0x02C0
     d82:	50 93 be 02 	sts	0x02BE, r21
     d86:	40 93 bd 02 	sts	0x02BD, r20
		osc1Out[1] = osc1Out[2];
     d8a:	40 91 c1 02 	lds	r20, 0x02C1
     d8e:	50 91 c2 02 	lds	r21, 0x02C2
     d92:	50 93 c0 02 	sts	0x02C0, r21
     d96:	40 93 bf 02 	sts	0x02BF, r20
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     d9a:	50 91 05 01 	lds	r21, 0x0105
     d9e:	60 91 d8 02 	lds	r22, 0x02D8
     da2:	40 91 c3 02 	lds	r20, 0x02C3
     da6:	46 0f       	add	r20, r22
     da8:	e5 2f       	mov	r30, r21
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	e2 59       	subi	r30, 0x92	; 146
     db2:	fd 4f       	sbci	r31, 0xFD	; 253
     db4:	01 90       	ld	r0, Z+
     db6:	f0 81       	ld	r31, Z
     db8:	e0 2d       	mov	r30, r0
     dba:	e4 0f       	add	r30, r20
     dbc:	f1 1d       	adc	r31, r1
     dbe:	e8 59       	subi	r30, 0x98	; 152
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	e4 91       	lpm	r30, Z
	
		if(osc1WaveForm == WAVE_NOISE)
     dc4:	55 30       	cpi	r21, 0x05	; 5
     dc6:	09 f4       	brne	.+2      	; 0xdca <__vector_9+0x11a>
     dc8:	52 c1       	rjmp	.+676    	; 0x106e <__vector_9+0x3be>
		osc1Phaccu[1] = osc1Phaccu[2];
		osc1Phaccu[2] += osc1TWord;

		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     dca:	4e 2f       	mov	r20, r30
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	50 93 c2 02 	sts	0x02C2, r21
     dd2:	40 93 c1 02 	sts	0x02C1, r20
	
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
		
		osc2Phaccu += osc2TWord;
     dd6:	80 90 b1 02 	lds	r8, 0x02B1
     dda:	90 90 b2 02 	lds	r9, 0x02B2
     dde:	a0 90 b3 02 	lds	r10, 0x02B3
     de2:	b0 90 b4 02 	lds	r11, 0x02B4
     de6:	c0 90 b5 02 	lds	r12, 0x02B5
     dea:	d0 90 b6 02 	lds	r13, 0x02B6
     dee:	e0 90 b7 02 	lds	r14, 0x02B7
     df2:	f0 90 b8 02 	lds	r15, 0x02B8
     df6:	c8 0c       	add	r12, r8
     df8:	d9 1c       	adc	r13, r9
     dfa:	ea 1c       	adc	r14, r10
     dfc:	fb 1c       	adc	r15, r11
     dfe:	c0 92 b5 02 	sts	0x02B5, r12
     e02:	d0 92 b6 02 	sts	0x02B6, r13
     e06:	e0 92 b7 02 	sts	0x02B7, r14
     e0a:	f0 92 b8 02 	sts	0x02B8, r15

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
     e0e:	70 91 a5 02 	lds	r23, 0x02A5
     e12:	77 23       	and	r23, r23
     e14:	39 f0       	breq	.+14     	; 0xe24 <__vector_9+0x174>
     e16:	70 91 d4 02 	lds	r23, 0x02D4
     e1a:	e0 91 d0 02 	lds	r30, 0x02D0
     e1e:	7e 17       	cp	r23, r30
     e20:	08 f4       	brcc	.+2      	; 0xe24 <__vector_9+0x174>
     e22:	2e c1       	rjmp	.+604    	; 0x1080 <__vector_9+0x3d0>
		{
			osc2Phaccu = osc1Phaccu[2];
		}

		if(osc2WaveForm != WAVE_NOISE)
     e24:	a0 91 04 01 	lds	r26, 0x0104
     e28:	a5 30       	cpi	r26, 0x05	; 5
     e2a:	b1 f0       	breq	.+44     	; 0xe58 <__vector_9+0x1a8>
			osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
     e2c:	80 91 ac 02 	lds	r24, 0x02AC
     e30:	e0 91 b7 02 	lds	r30, 0x02B7
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	e8 0f       	add	r30, r24
     e38:	f1 1d       	adc	r31, r1
     e3a:	87 fd       	sbrc	r24, 7
     e3c:	fa 95       	dec	r31
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	aa 0f       	add	r26, r26
     e42:	bb 1f       	adc	r27, r27
     e44:	a2 59       	subi	r26, 0x92	; 146
     e46:	bd 4f       	sbci	r27, 0xFD	; 253
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	e8 0f       	add	r30, r24
     e4e:	f9 1f       	adc	r31, r25
     e50:	e8 59       	subi	r30, 0x98	; 152
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	24 91       	lpm	r18, Z
     e56:	30 e0       	ldi	r19, 0x00	; 0
		else
			osc2Out[2] = lfsrState;

		lfoPhaccu += lfoTWord;
     e58:	c0 90 a0 02 	lds	r12, 0x02A0
     e5c:	d0 90 a1 02 	lds	r13, 0x02A1
     e60:	e0 90 a2 02 	lds	r14, 0x02A2
     e64:	f0 90 a3 02 	lds	r15, 0x02A3
     e68:	80 91 9c 02 	lds	r24, 0x029C
     e6c:	90 91 9d 02 	lds	r25, 0x029D
     e70:	a0 91 9e 02 	lds	r26, 0x029E
     e74:	b0 91 9f 02 	lds	r27, 0x029F
     e78:	8c 0d       	add	r24, r12
     e7a:	9d 1d       	adc	r25, r13
     e7c:	ae 1d       	adc	r26, r14
     e7e:	bf 1d       	adc	r27, r15
     e80:	80 93 9c 02 	sts	0x029C, r24
     e84:	90 93 9d 02 	sts	0x029D, r25
     e88:	a0 93 9e 02 	sts	0x029E, r26
     e8c:	b0 93 9f 02 	sts	0x029F, r27
		
		lfoOut[0] = lfoOut[1];
     e90:	60 91 9a 02 	lds	r22, 0x029A
     e94:	70 91 9b 02 	lds	r23, 0x029B
     e98:	70 93 99 02 	sts	0x0299, r23
     e9c:	60 93 98 02 	sts	0x0298, r22
		lfoOut[1] = pgm_read_byte(analogWaveTable + waveformOffset[lfoWaveForm] + (unsigned char)*((unsigned char*)(&lfoPhaccu)+2));
     ea0:	e0 91 93 02 	lds	r30, 0x0293
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	e2 59       	subi	r30, 0x92	; 146
     eac:	fd 4f       	sbci	r31, 0xFD	; 253
     eae:	80 91 9e 02 	lds	r24, 0x029E
     eb2:	01 90       	ld	r0, Z+
     eb4:	f0 81       	ld	r31, Z
     eb6:	e0 2d       	mov	r30, r0
     eb8:	e8 0f       	add	r30, r24
     eba:	f1 1d       	adc	r31, r1
     ebc:	e8 59       	subi	r30, 0x98	; 152
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	e4 91       	lpm	r30, Z
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
		lfoOut[1] -= 128;
     ec4:	e0 58       	subi	r30, 0x80	; 128
     ec6:	f1 09       	sbc	r31, r1
     ec8:	f0 93 9b 02 	sts	0x029B, r31
     ecc:	e0 93 9a 02 	sts	0x029A, r30

		unsigned short temp = 0;
	
		osc1Out[2] *= osc1Weight;
     ed0:	a0 91 0c 01 	lds	r26, 0x010C
     ed4:	a4 9f       	mul	r26, r20
     ed6:	c0 01       	movw	r24, r0
     ed8:	a5 9f       	mul	r26, r21
     eda:	90 0d       	add	r25, r0
     edc:	11 24       	eor	r1, r1
     ede:	90 93 c2 02 	sts	0x02C2, r25
     ee2:	80 93 c1 02 	sts	0x02C1, r24
		osc2Out[2] *= osc2Weight;
     ee6:	a0 91 09 01 	lds	r26, 0x0109
     eea:	a2 9f       	mul	r26, r18
     eec:	a0 01       	movw	r20, r0
     eee:	a3 9f       	mul	r26, r19
     ef0:	50 0d       	add	r21, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	50 93 ab 02 	sts	0x02AB, r21
     ef8:	40 93 aa 02 	sts	0x02AA, r20

		if(ringMod)
     efc:	20 91 a4 02 	lds	r18, 0x02A4
     f00:	22 23       	and	r18, r18
     f02:	09 f4       	brne	.+2      	; 0xf06 <__vector_9+0x256>
     f04:	72 c0       	rjmp	.+228    	; 0xfea <__vector_9+0x33a>
			temp = osc1Out[2] ^ osc2Out[2];
     f06:	48 27       	eor	r20, r24
     f08:	59 27       	eor	r21, r25
     f0a:	5a 83       	std	Y+2, r21	; 0x02
     f0c:	49 83       	std	Y+1, r20	; 0x01
		{
			temp = osc1Out[2];
			temp += osc2Out[2];
		}
		
		if(osc1Out[2] > temp)
     f0e:	48 17       	cp	r20, r24
     f10:	59 07       	cpc	r21, r25
     f12:	20 f4       	brcc	.+8      	; 0xf1c <__vector_9+0x26c>
			temp = 0xFF00;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
			
		temp = *(((unsigned char*)&temp) + 1);
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3a 83       	std	Y+2, r19	; 0x02
     f24:	29 83       	std	Y+1, r18	; 0x01
		
		switch(poles)
     f26:	90 91 02 01 	lds	r25, 0x0102
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__vector_9+0x280>
     f2e:	d6 c0       	rjmp	.+428    	; 0x10dc <__vector_9+0x42c>
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__vector_9+0x284>
     f32:	60 c0       	rjmp	.+192    	; 0xff4 <__vector_9+0x344>
     f34:	99 23       	and	r25, r25
     f36:	09 f4       	brne	.+2      	; 0xf3a <__vector_9+0x28a>
     f38:	af c0       	rjmp	.+350    	; 0x1098 <__vector_9+0x3e8>
     f3a:	91 30       	cpi	r25, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <__vector_9+0x290>
     f3e:	ed c0       	rjmp	.+474    	; 0x111a <__vector_9+0x46a>
     f40:	40 91 7d 02 	lds	r20, 0x027D
     f44:	50 91 7e 02 	lds	r21, 0x027E
     f48:	80 91 7c 02 	lds	r24, 0x027C
     f4c:	a0 91 03 01 	lds	r26, 0x0103
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	a8 0f       	add	r26, r24
     f54:	b1 1d       	adc	r27, r1
     f56:	87 fd       	sbrc	r24, 7
     f58:	ba 95       	dec	r27
     f5a:	b7 fd       	sbrc	r27, 7
     f5c:	e0 c0       	rjmp	.+448    	; 0x111e <__vector_9+0x46e>
     f5e:	af 3f       	cpi	r26, 0xFF	; 255
     f60:	b1 05       	cpc	r27, r1
     f62:	19 f0       	breq	.+6      	; 0xf6a <__vector_9+0x2ba>
     f64:	14 f0       	brlt	.+4      	; 0xf6a <__vector_9+0x2ba>
     f66:	af ef       	ldi	r26, 0xFF	; 255
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	24 1b       	sub	r18, r20
     f6c:	35 0b       	sbc	r19, r21
     f6e:	a2 9f       	mul	r26, r18
     f70:	c0 01       	movw	r24, r0
     f72:	a3 9f       	mul	r26, r19
     f74:	90 0d       	add	r25, r0
     f76:	b2 9f       	mul	r27, r18
     f78:	90 0d       	add	r25, r0
     f7a:	11 24       	eor	r1, r1
		temp = 255;
	else if(temp < 0)
		temp = 0;
	
	*val = (*val - prevOutput[0]);
	*val = (*val*((unsigned char)temp));
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	
	prevOutput[0] = *val;
     f8c:	90 93 7e 02 	sts	0x027E, r25
     f90:	80 93 7d 02 	sts	0x027D, r24
     f94:	18 2f       	mov	r17, r24
			case 1:
			lowPassFilter(&temp);
			break;
		}			
		
		if(lfoOut[0] != lfoOut[1] && lfoRouteFunction != NULL)
     f96:	6e 17       	cp	r22, r30
     f98:	7f 07       	cpc	r23, r31
     f9a:	39 f0       	breq	.+14     	; 0xfaa <__vector_9+0x2fa>
     f9c:	e0 91 91 02 	lds	r30, 0x0291
     fa0:	f0 91 92 02 	lds	r31, 0x0292
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_9+0x2fa>
			lfoRouteFunction();
     fa8:	09 95       	icall
		
		OCR2A = (unsigned char)temp;
     faa:	10 93 b3 00 	sts	0x00B3, r17
	}
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	1f 91       	pop	r17
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti
		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
		else
		{
			temp = osc1Out[2];
			temp += osc2Out[2];
     fea:	48 0f       	add	r20, r24
     fec:	59 1f       	adc	r21, r25
     fee:	5a 83       	std	Y+2, r21	; 0x02
     ff0:	49 83       	std	Y+1, r20	; 0x01
     ff2:	8d cf       	rjmp	.-230    	; 0xf0e <__vector_9+0x25e>
		if(osc1Out[2] > temp)
			temp = 0xFF00;
			
		temp = *(((unsigned char*)&temp) + 1);
		
		switch(poles)
     ff4:	93 30       	cpi	r25, 0x03	; 3
     ff6:	09 f4       	brne	.+2      	; 0xffa <__vector_9+0x34a>
     ff8:	52 c0       	rjmp	.+164    	; 0x109e <__vector_9+0x3ee>
     ffa:	94 30       	cpi	r25, 0x04	; 4
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_9+0x350>
     ffe:	8d c0       	rjmp	.+282    	; 0x111a <__vector_9+0x46a>
	}
}

inline void lowPassFilter(unsigned short *val)
{
	short temp = filterCutoff;
    1000:	40 91 03 01 	lds	r20, 0x0103
	temp += dFilterCutoff;
    1004:	80 91 7c 02 	lds	r24, 0x027C
    1008:	99 27       	eor	r25, r25
    100a:	87 fd       	sbrc	r24, 7
    100c:	90 95       	com	r25
    100e:	84 0f       	add	r24, r20
    1010:	91 1d       	adc	r25, r1
    1012:	97 fd       	sbrc	r25, 7
    1014:	8d c0       	rjmp	.+282    	; 0x1130 <__vector_9+0x480>
	if(temp > 255)
		temp = 255;
	else if(temp < 0)
		temp = 0;
	
	*val = (*val - prevOutput[0]);
    1016:	a0 91 7d 02 	lds	r26, 0x027D
    101a:	b0 91 7e 02 	lds	r27, 0x027E
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	91 05       	cpc	r25, r1
    1022:	19 f0       	breq	.+6      	; 0x102a <__vector_9+0x37a>
    1024:	14 f0       	brlt	.+4      	; 0x102a <__vector_9+0x37a>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	2a 1b       	sub	r18, r26
    102c:	3b 0b       	sbc	r19, r27
	*val = (*val*((unsigned char)temp));
    102e:	82 9f       	mul	r24, r18
    1030:	a0 01       	movw	r20, r0
    1032:	83 9f       	mul	r24, r19
    1034:	50 0d       	add	r21, r0
    1036:	92 9f       	mul	r25, r18
    1038:	50 0d       	add	r21, r0
    103a:	11 24       	eor	r1, r1
    103c:	5a 83       	std	Y+2, r21	; 0x02
    103e:	49 83       	std	Y+1, r20	; 0x01
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
    1040:	4a 81       	ldd	r20, Y+2	; 0x02
    1042:	5b 81       	ldd	r21, Y+3	; 0x03
    1044:	4a 0f       	add	r20, r26
    1046:	5b 1f       	adc	r21, r27
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
		temp = 255;
	else if(temp < 0)
		temp = 0;
	
	*val = (*val - prevOutput[0]);
	*val = (*val*((unsigned char)temp));
    104c:	ba 83       	std	Y+2, r27	; 0x02
    104e:	a9 83       	std	Y+1, r26	; 0x01
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	84 0f       	add	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
		temp = 255;
	else if(temp < 0)
		temp = 0;
	
	*val = (*val - prevOutput[0]);
	*val = (*val*((unsigned char)temp));
    105c:	ba 83       	std	Y+2, r27	; 0x02
    105e:	a9 83       	std	Y+1, r26	; 0x01
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
    1060:	4a 81       	ldd	r20, Y+2	; 0x02
    1062:	5b 81       	ldd	r21, Y+3	; 0x03
    1064:	48 0f       	add	r20, r24
    1066:	59 1f       	adc	r21, r25
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	87 cf       	rjmp	.-242    	; 0xf7c <__vector_9+0x2cc>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
	
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    106e:	30 93 c2 02 	sts	0x02C2, r19
    1072:	20 93 c1 02 	sts	0x02C1, r18
    1076:	a9 01       	movw	r20, r18
    1078:	ae ce       	rjmp	.-676    	; 0xdd6 <__vector_9+0x126>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    107a:	84 eb       	ldi	r24, 0xB4	; 180
    107c:	38 27       	eor	r19, r24
    107e:	45 ce       	rjmp	.-886    	; 0xd0a <__vector_9+0x5a>
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
		
		osc2Phaccu += osc2TWord;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    1080:	76 17       	cp	r23, r22
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__vector_9+0x3d6>
    1084:	cf ce       	rjmp	.-610    	; 0xe24 <__vector_9+0x174>
		{
			osc2Phaccu = osc1Phaccu[2];
    1086:	80 93 b5 02 	sts	0x02B5, r24
    108a:	90 93 b6 02 	sts	0x02B6, r25
    108e:	a0 93 b7 02 	sts	0x02B7, r26
    1092:	b0 93 b8 02 	sts	0x02B8, r27
    1096:	c6 ce       	rjmp	.-628    	; 0xe24 <__vector_9+0x174>
		temp = *(((unsigned char*)&temp) + 1);
		
		switch(poles)
		{
			case 0:
			__asm__("nop"); //Prevent empty case from being optimized out
    1098:	00 00       	nop
			break;
    109a:	18 2f       	mov	r17, r24
    109c:	7c cf       	rjmp	.-264    	; 0xf96 <__vector_9+0x2e6>
    109e:	40 91 7d 02 	lds	r20, 0x027D
    10a2:	50 91 7e 02 	lds	r21, 0x027E
    10a6:	a0 91 03 01 	lds	r26, 0x0103
    10aa:	80 91 7c 02 	lds	r24, 0x027C
    10ae:	99 27       	eor	r25, r25
    10b0:	87 fd       	sbrc	r24, 7
    10b2:	90 95       	com	r25
    10b4:	8a 0f       	add	r24, r26
    10b6:	91 1d       	adc	r25, r1
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	37 c0       	rjmp	.+110    	; 0x112a <__vector_9+0x47a>
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	91 05       	cpc	r25, r1
    10c0:	19 f0       	breq	.+6      	; 0x10c8 <__vector_9+0x418>
    10c2:	14 f0       	brlt	.+4      	; 0x10c8 <__vector_9+0x418>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	24 1b       	sub	r18, r20
    10ca:	35 0b       	sbc	r19, r21
    10cc:	82 9f       	mul	r24, r18
    10ce:	d0 01       	movw	r26, r0
    10d0:	83 9f       	mul	r24, r19
    10d2:	b0 0d       	add	r27, r0
    10d4:	92 9f       	mul	r25, r18
    10d6:	b0 0d       	add	r27, r0
    10d8:	11 24       	eor	r1, r1
    10da:	b8 cf       	rjmp	.-144    	; 0x104c <__vector_9+0x39c>
    10dc:	80 91 7d 02 	lds	r24, 0x027D
    10e0:	90 91 7e 02 	lds	r25, 0x027E
    10e4:	a0 91 03 01 	lds	r26, 0x0103
    10e8:	40 91 7c 02 	lds	r20, 0x027C
    10ec:	55 27       	eor	r21, r21
    10ee:	47 fd       	sbrc	r20, 7
    10f0:	50 95       	com	r21
    10f2:	4a 0f       	add	r20, r26
    10f4:	51 1d       	adc	r21, r1
    10f6:	57 fd       	sbrc	r21, 7
    10f8:	15 c0       	rjmp	.+42     	; 0x1124 <__vector_9+0x474>
    10fa:	4f 3f       	cpi	r20, 0xFF	; 255
    10fc:	51 05       	cpc	r21, r1
    10fe:	19 f0       	breq	.+6      	; 0x1106 <__vector_9+0x456>
    1100:	14 f0       	brlt	.+4      	; 0x1106 <__vector_9+0x456>
    1102:	4f ef       	ldi	r20, 0xFF	; 255
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	28 1b       	sub	r18, r24
    1108:	39 0b       	sbc	r19, r25
    110a:	42 9f       	mul	r20, r18
    110c:	d0 01       	movw	r26, r0
    110e:	43 9f       	mul	r20, r19
    1110:	b0 0d       	add	r27, r0
    1112:	52 9f       	mul	r21, r18
    1114:	b0 0d       	add	r27, r0
    1116:	11 24       	eor	r1, r1
    1118:	a1 cf       	rjmp	.-190    	; 0x105c <__vector_9+0x3ac>
		if(osc1Out[2] > temp)
			temp = 0xFF00;
			
		temp = *(((unsigned char*)&temp) + 1);
		
		switch(poles)
    111a:	18 2f       	mov	r17, r24
    111c:	3c cf       	rjmp	.-392    	; 0xf96 <__vector_9+0x2e6>
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	1d cf       	rjmp	.-454    	; 0xf5e <__vector_9+0x2ae>
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	e8 cf       	rjmp	.-48     	; 0x10fa <__vector_9+0x44a>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	c6 cf       	rjmp	.-116    	; 0x10bc <__vector_9+0x40c>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	70 cf       	rjmp	.-288    	; 0x1016 <__vector_9+0x366>

00001136 <__mulsi3>:
    1136:	db 01       	movw	r26, r22
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	0e 94 ab 08 	call	0x1156	; 0x1156 <__muluhisi3>
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	a2 9f       	mul	r26, r18
    1146:	80 0d       	add	r24, r0
    1148:	91 1d       	adc	r25, r1
    114a:	a3 9f       	mul	r26, r19
    114c:	90 0d       	add	r25, r0
    114e:	b2 9f       	mul	r27, r18
    1150:	90 0d       	add	r25, r0
    1152:	11 24       	eor	r1, r1
    1154:	08 95       	ret

00001156 <__muluhisi3>:
    1156:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    115a:	a5 9f       	mul	r26, r21
    115c:	90 0d       	add	r25, r0
    115e:	b4 9f       	mul	r27, r20
    1160:	90 0d       	add	r25, r0
    1162:	a4 9f       	mul	r26, r20
    1164:	80 0d       	add	r24, r0
    1166:	91 1d       	adc	r25, r1
    1168:	11 24       	eor	r1, r1
    116a:	08 95       	ret

0000116c <__muldi3>:
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	1f 93       	push	r17
    1172:	0f 93       	push	r16
    1174:	9a 9d       	mul	r25, r10
    1176:	f0 2d       	mov	r31, r0
    1178:	21 9f       	mul	r18, r17
    117a:	f0 0d       	add	r31, r0
    117c:	8b 9d       	mul	r24, r11
    117e:	f0 0d       	add	r31, r0
    1180:	8a 9d       	mul	r24, r10
    1182:	e0 2d       	mov	r30, r0
    1184:	f1 0d       	add	r31, r1
    1186:	03 9f       	mul	r16, r19
    1188:	f0 0d       	add	r31, r0
    118a:	02 9f       	mul	r16, r18
    118c:	e0 0d       	add	r30, r0
    118e:	f1 1d       	adc	r31, r1
    1190:	4e 9d       	mul	r20, r14
    1192:	e0 0d       	add	r30, r0
    1194:	f1 1d       	adc	r31, r1
    1196:	5e 9d       	mul	r21, r14
    1198:	f0 0d       	add	r31, r0
    119a:	4f 9d       	mul	r20, r15
    119c:	f0 0d       	add	r31, r0
    119e:	7f 93       	push	r23
    11a0:	6f 93       	push	r22
    11a2:	bf 92       	push	r11
    11a4:	af 92       	push	r10
    11a6:	5f 93       	push	r21
    11a8:	4f 93       	push	r20
    11aa:	d5 01       	movw	r26, r10
    11ac:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    11b0:	8b 01       	movw	r16, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	d7 01       	movw	r26, r14
    11b6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    11ba:	eb 01       	movw	r28, r22
    11bc:	e8 0f       	add	r30, r24
    11be:	f9 1f       	adc	r31, r25
    11c0:	d6 01       	movw	r26, r12
    11c2:	0e 94 06 09 	call	0x120c	; 0x120c <__muldi3_6>
    11c6:	2f 91       	pop	r18
    11c8:	3f 91       	pop	r19
    11ca:	d6 01       	movw	r26, r12
    11cc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    11d0:	c6 0f       	add	r28, r22
    11d2:	d7 1f       	adc	r29, r23
    11d4:	e8 1f       	adc	r30, r24
    11d6:	f9 1f       	adc	r31, r25
    11d8:	af 91       	pop	r26
    11da:	bf 91       	pop	r27
    11dc:	0e 94 06 09 	call	0x120c	; 0x120c <__muldi3_6>
    11e0:	2f 91       	pop	r18
    11e2:	3f 91       	pop	r19
    11e4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    11e8:	c6 0f       	add	r28, r22
    11ea:	d7 1f       	adc	r29, r23
    11ec:	e8 1f       	adc	r30, r24
    11ee:	f9 1f       	adc	r31, r25
    11f0:	d6 01       	movw	r26, r12
    11f2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    11f6:	e6 0f       	add	r30, r22
    11f8:	f7 1f       	adc	r31, r23
    11fa:	98 01       	movw	r18, r16
    11fc:	be 01       	movw	r22, r28
    11fe:	cf 01       	movw	r24, r30
    1200:	11 24       	eor	r1, r1
    1202:	0f 91       	pop	r16
    1204:	1f 91       	pop	r17
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <__muldi3_6>:
    120c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    1210:	46 0f       	add	r20, r22
    1212:	57 1f       	adc	r21, r23
    1214:	c8 1f       	adc	r28, r24
    1216:	d9 1f       	adc	r29, r25
    1218:	08 f4       	brcc	.+2      	; 0x121c <__muldi3_6+0x10>
    121a:	31 96       	adiw	r30, 0x01	; 1
    121c:	08 95       	ret

0000121e <__umulsidi3>:
    121e:	e8 94       	clt

00001220 <__umulsidi3_helper>:
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	fc 01       	movw	r30, r24
    1226:	db 01       	movw	r26, r22
    1228:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    122c:	7f 93       	push	r23
    122e:	6f 93       	push	r22
    1230:	e9 01       	movw	r28, r18
    1232:	9a 01       	movw	r18, r20
    1234:	ac 01       	movw	r20, r24
    1236:	bf 93       	push	r27
    1238:	af 93       	push	r26
    123a:	3f 93       	push	r19
    123c:	2f 93       	push	r18
    123e:	df 01       	movw	r26, r30
    1240:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    1244:	26 f4       	brtc	.+8      	; 0x124e <__umulsidi3_helper+0x2e>
    1246:	6c 1b       	sub	r22, r28
    1248:	7d 0b       	sbc	r23, r29
    124a:	82 0b       	sbc	r24, r18
    124c:	93 0b       	sbc	r25, r19
    124e:	9e 01       	movw	r18, r28
    1250:	eb 01       	movw	r28, r22
    1252:	fc 01       	movw	r30, r24
    1254:	0e 94 06 09 	call	0x120c	; 0x120c <__muldi3_6>
    1258:	af 91       	pop	r26
    125a:	bf 91       	pop	r27
    125c:	2f 91       	pop	r18
    125e:	3f 91       	pop	r19
    1260:	0e 94 06 09 	call	0x120c	; 0x120c <__muldi3_6>
    1264:	be 01       	movw	r22, r28
    1266:	cf 01       	movw	r24, r30
    1268:	f9 01       	movw	r30, r18
    126a:	2f 91       	pop	r18
    126c:	3f 91       	pop	r19
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <__umoddi3>:
    1274:	68 94       	set
    1276:	01 c0       	rjmp	.+2      	; 0x127a <__udivdi3_umoddi3>

00001278 <__udivdi3>:
    1278:	e8 94       	clt

0000127a <__udivdi3_umoddi3>:
    127a:	8f 92       	push	r8
    127c:	9f 92       	push	r9
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	0e 94 48 09 	call	0x1290	; 0x1290 <__udivmod64>
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	9f 90       	pop	r9
    128c:	8f 90       	pop	r8
    128e:	08 95       	ret

00001290 <__udivmod64>:
    1290:	88 24       	eor	r8, r8
    1292:	99 24       	eor	r9, r9
    1294:	f4 01       	movw	r30, r8
    1296:	e4 01       	movw	r28, r8
    1298:	b0 e4       	ldi	r27, 0x40	; 64
    129a:	9f 93       	push	r25
    129c:	aa 27       	eor	r26, r26
    129e:	9a 15       	cp	r25, r10
    12a0:	8b 04       	cpc	r8, r11
    12a2:	9c 04       	cpc	r9, r12
    12a4:	ed 05       	cpc	r30, r13
    12a6:	fe 05       	cpc	r31, r14
    12a8:	cf 05       	cpc	r28, r15
    12aa:	d0 07       	cpc	r29, r16
    12ac:	a1 07       	cpc	r26, r17
    12ae:	98 f4       	brcc	.+38     	; 0x12d6 <__udivmod64+0x46>
    12b0:	ad 2f       	mov	r26, r29
    12b2:	dc 2f       	mov	r29, r28
    12b4:	cf 2f       	mov	r28, r31
    12b6:	fe 2f       	mov	r31, r30
    12b8:	e9 2d       	mov	r30, r9
    12ba:	98 2c       	mov	r9, r8
    12bc:	89 2e       	mov	r8, r25
    12be:	98 2f       	mov	r25, r24
    12c0:	87 2f       	mov	r24, r23
    12c2:	76 2f       	mov	r23, r22
    12c4:	65 2f       	mov	r22, r21
    12c6:	54 2f       	mov	r21, r20
    12c8:	43 2f       	mov	r20, r19
    12ca:	32 2f       	mov	r19, r18
    12cc:	22 27       	eor	r18, r18
    12ce:	b8 50       	subi	r27, 0x08	; 8
    12d0:	31 f7       	brne	.-52     	; 0x129e <__udivmod64+0xe>
    12d2:	bf 91       	pop	r27
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <__udivmod64+0x94>
    12d6:	1b 2e       	mov	r1, r27
    12d8:	bf 91       	pop	r27
    12da:	bb 27       	eor	r27, r27
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	44 1f       	adc	r20, r20
    12e2:	55 1f       	adc	r21, r21
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 1c       	adc	r8, r8
    12ee:	99 1c       	adc	r9, r9
    12f0:	ee 1f       	adc	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	cc 1f       	adc	r28, r28
    12f6:	dd 1f       	adc	r29, r29
    12f8:	aa 1f       	adc	r26, r26
    12fa:	bb 1f       	adc	r27, r27
    12fc:	8a 14       	cp	r8, r10
    12fe:	9b 04       	cpc	r9, r11
    1300:	ec 05       	cpc	r30, r12
    1302:	fd 05       	cpc	r31, r13
    1304:	ce 05       	cpc	r28, r14
    1306:	df 05       	cpc	r29, r15
    1308:	a0 07       	cpc	r26, r16
    130a:	b1 07       	cpc	r27, r17
    130c:	48 f0       	brcs	.+18     	; 0x1320 <__udivmod64+0x90>
    130e:	8a 18       	sub	r8, r10
    1310:	9b 08       	sbc	r9, r11
    1312:	ec 09       	sbc	r30, r12
    1314:	fd 09       	sbc	r31, r13
    1316:	ce 09       	sbc	r28, r14
    1318:	df 09       	sbc	r29, r15
    131a:	a0 0b       	sbc	r26, r16
    131c:	b1 0b       	sbc	r27, r17
    131e:	21 60       	ori	r18, 0x01	; 1
    1320:	1a 94       	dec	r1
    1322:	e1 f6       	brne	.-72     	; 0x12dc <__udivmod64+0x4c>
    1324:	2e f4       	brtc	.+10     	; 0x1330 <__udivmod64+0xa0>
    1326:	94 01       	movw	r18, r8
    1328:	af 01       	movw	r20, r30
    132a:	be 01       	movw	r22, r28
    132c:	cd 01       	movw	r24, r26
    132e:	00 0c       	add	r0, r0
    1330:	08 95       	ret

00001332 <__ashldi3>:
    1332:	0f 93       	push	r16
    1334:	08 30       	cpi	r16, 0x08	; 8
    1336:	90 f0       	brcs	.+36     	; 0x135c <__ashldi3+0x2a>
    1338:	98 2f       	mov	r25, r24
    133a:	87 2f       	mov	r24, r23
    133c:	76 2f       	mov	r23, r22
    133e:	65 2f       	mov	r22, r21
    1340:	54 2f       	mov	r21, r20
    1342:	43 2f       	mov	r20, r19
    1344:	32 2f       	mov	r19, r18
    1346:	22 27       	eor	r18, r18
    1348:	08 50       	subi	r16, 0x08	; 8
    134a:	f4 cf       	rjmp	.-24     	; 0x1334 <__ashldi3+0x2>
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	44 1f       	adc	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	66 1f       	adc	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 95       	dec	r16
    135e:	b2 f7       	brpl	.-20     	; 0x134c <__ashldi3+0x1a>
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <__ashrdi3>:
    1364:	97 fb       	bst	r25, 7
    1366:	10 f8       	bld	r1, 0

00001368 <__lshrdi3>:
    1368:	16 94       	lsr	r1
    136a:	00 08       	sbc	r0, r0
    136c:	0f 93       	push	r16
    136e:	08 30       	cpi	r16, 0x08	; 8
    1370:	98 f0       	brcs	.+38     	; 0x1398 <__lshrdi3+0x30>
    1372:	08 50       	subi	r16, 0x08	; 8
    1374:	23 2f       	mov	r18, r19
    1376:	34 2f       	mov	r19, r20
    1378:	45 2f       	mov	r20, r21
    137a:	56 2f       	mov	r21, r22
    137c:	67 2f       	mov	r22, r23
    137e:	78 2f       	mov	r23, r24
    1380:	89 2f       	mov	r24, r25
    1382:	90 2d       	mov	r25, r0
    1384:	f4 cf       	rjmp	.-24     	; 0x136e <__lshrdi3+0x6>
    1386:	05 94       	asr	r0
    1388:	97 95       	ror	r25
    138a:	87 95       	ror	r24
    138c:	77 95       	ror	r23
    138e:	67 95       	ror	r22
    1390:	57 95       	ror	r21
    1392:	47 95       	ror	r20
    1394:	37 95       	ror	r19
    1396:	27 95       	ror	r18
    1398:	0a 95       	dec	r16
    139a:	aa f7       	brpl	.-22     	; 0x1386 <__lshrdi3+0x1e>
    139c:	0f 91       	pop	r16
    139e:	08 95       	ret

000013a0 <__umulhisi3>:
    13a0:	a2 9f       	mul	r26, r18
    13a2:	b0 01       	movw	r22, r0
    13a4:	b3 9f       	mul	r27, r19
    13a6:	c0 01       	movw	r24, r0
    13a8:	a3 9f       	mul	r26, r19
    13aa:	70 0d       	add	r23, r0
    13ac:	81 1d       	adc	r24, r1
    13ae:	11 24       	eor	r1, r1
    13b0:	91 1d       	adc	r25, r1
    13b2:	b2 9f       	mul	r27, r18
    13b4:	70 0d       	add	r23, r0
    13b6:	81 1d       	adc	r24, r1
    13b8:	11 24       	eor	r1, r1
    13ba:	91 1d       	adc	r25, r1
    13bc:	08 95       	ret

000013be <_exit>:
    13be:	f8 94       	cli

000013c0 <__stop_program>:
    13c0:	ff cf       	rjmp	.-2      	; 0x13c0 <__stop_program>
