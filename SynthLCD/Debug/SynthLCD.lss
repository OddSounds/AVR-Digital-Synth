
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  000013ba  0000144e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026a  008002a4  008002a4  000015f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016fc  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050c  00000000  00000000  00002de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000468  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  0000375c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b17  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012d5  00000000  00000000  000045bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__ctors_end>
       4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       8:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      10:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      18:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      1c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      20:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      24:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_9>
      28:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      2c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      30:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      34:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      38:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      3c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      40:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      44:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      48:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_18>
      4c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_20>
      54:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_21>
      58:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      5c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      60:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      64:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z14lfoRouteSemis1v+0x62>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <__vector_9+0x244>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <__vector_9+0x290>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <__do_global_ctors+0x18>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z14lfoRouteSemis1v+0xc0>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <_Z5setupv+0x208>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <_Z5setupv+0x22e>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <_Z5setupv+0x64>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <__muldi3>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <_Z5setupv+0x4a>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z14lfoRouteSemis1v+0x78>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <__do_global_ctors+0x12>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <__do_clear_bss>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__vector_20+0xc>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <_Z5setupv+0xc>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <_GLOBAL__sub_I_adcSelect>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <_Z5setupv+0x32>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <__muluhisi3+0x2>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <__vector_9+0x1da>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <.do_clear_bss_loop>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <__ctors_start>:
     668:	8c 08       	sbc	r8, r12

0000066a <__ctors_end>:
     66a:	11 24       	eor	r1, r1
     66c:	1f be       	out	0x3f, r1	; 63
     66e:	cf ef       	ldi	r28, 0xFF	; 255
     670:	d8 e0       	ldi	r29, 0x08	; 8
     672:	de bf       	out	0x3e, r29	; 62
     674:	cd bf       	out	0x3d, r28	; 61

00000676 <__do_copy_data>:
     676:	12 e0       	ldi	r17, 0x02	; 2
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	ea eb       	ldi	r30, 0xBA	; 186
     67e:	f3 e1       	ldi	r31, 0x13	; 19
     680:	02 c0       	rjmp	.+4      	; 0x686 <__do_copy_data+0x10>
     682:	05 90       	lpm	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	a4 3a       	cpi	r26, 0xA4	; 164
     688:	b1 07       	cpc	r27, r17
     68a:	d9 f7       	brne	.-10     	; 0x682 <__do_copy_data+0xc>

0000068c <__do_clear_bss>:
     68c:	25 e0       	ldi	r18, 0x05	; 5
     68e:	a4 ea       	ldi	r26, 0xA4	; 164
     690:	b2 e0       	ldi	r27, 0x02	; 2
     692:	01 c0       	rjmp	.+2      	; 0x696 <.do_clear_bss_start>

00000694 <.do_clear_bss_loop>:
     694:	1d 92       	st	X+, r1

00000696 <.do_clear_bss_start>:
     696:	ae 30       	cpi	r26, 0x0E	; 14
     698:	b2 07       	cpc	r27, r18
     69a:	e1 f7       	brne	.-8      	; 0x694 <.do_clear_bss_loop>

0000069c <__do_global_ctors>:
     69c:	16 e0       	ldi	r17, 0x06	; 6
     69e:	ca e6       	ldi	r28, 0x6A	; 106
     6a0:	d6 e0       	ldi	r29, 0x06	; 6
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__do_global_ctors+0x10>
     6a4:	22 97       	sbiw	r28, 0x02	; 2
     6a6:	fe 01       	movw	r30, r28
     6a8:	0e 94 c8 09 	call	0x1390	; 0x1390 <__tablejump__>
     6ac:	c8 36       	cpi	r28, 0x68	; 104
     6ae:	d1 07       	cpc	r29, r17
     6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__do_global_ctors+0x8>
     6b2:	0e 94 d0 06 	call	0xda0	; 0xda0 <main>
     6b6:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <_exit>

000006ba <__bad_interrupt>:
     6ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006be <_Z10serialInitv>:

RXEvent rxEvent = 0;

void serialInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     6be:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     6c2:	8f e1       	ldi	r24, 0x1F	; 31
     6c4:	80 93 c4 00 	sts	0x00C4, r24
		
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     6c8:	88 ed       	ldi	r24, 0xD8	; 216
     6ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	80 93 c2 00 	sts	0x00C2, r24
     6d4:	08 95       	ret

000006d6 <_Z9putStringPc>:
	UDR0 = c;
}

void putString(char* c)
{
	while(*c)
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 81       	ld	r18, Z
     6da:	22 23       	and	r18, r18
     6dc:	51 f0       	breq	.+20     	; 0x6f2 <_Z9putStringPc+0x1c>
     6de:	31 96       	adiw	r30, 0x01	; 1
	rxEvent = handler;
}

void putChar(char c)
{
	while(!( UCSR0A & (1<<UDRE0)));
     6e0:	80 91 c0 00 	lds	r24, 0x00C0
     6e4:	85 ff       	sbrs	r24, 5
     6e6:	fc cf       	rjmp	.-8      	; 0x6e0 <_Z9putStringPc+0xa>
	UDR0 = c;
     6e8:	20 93 c6 00 	sts	0x00C6, r18
}

void putString(char* c)
{
	while(*c)
     6ec:	21 91       	ld	r18, Z+
     6ee:	21 11       	cpse	r18, r1
     6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <_Z9putStringPc+0xa>
     6f2:	08 95       	ret

000006f4 <__vector_20>:
{
	return rxMessagesRemaining;
}

ISR(USART_TX_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	txMessagesRemaining--;
     706:	80 91 aa 03 	lds	r24, 0x03AA
     70a:	90 91 ab 03 	lds	r25, 0x03AB
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	90 93 ab 03 	sts	0x03AB, r25
     714:	80 93 aa 03 	sts	0x03AA, r24
	
	if(txMessagesRemaining > 0)
     718:	18 16       	cp	r1, r24
     71a:	19 06       	cpc	r1, r25
     71c:	5c f4       	brge	.+22     	; 0x734 <__vector_20+0x40>
		UDR0 = txBuffer[txBufferReadIndex & TX_BUFFER_SIZE];
     71e:	e0 91 ac 03 	lds	r30, 0x03AC
     722:	f0 91 ad 03 	lds	r31, 0x03AD
     726:	ee 27       	eor	r30, r30
     728:	f1 70       	andi	r31, 0x01	; 1
     72a:	e2 55       	subi	r30, 0x52	; 82
     72c:	fc 4f       	sbci	r31, 0xFC	; 252
     72e:	80 81       	ld	r24, Z
     730:	80 93 c6 00 	sts	0x00C6, r24
	
	txBufferReadIndex++;
     734:	80 91 ac 03 	lds	r24, 0x03AC
     738:	90 91 ad 03 	lds	r25, 0x03AD
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 ad 03 	sts	0x03AD, r25
     742:	80 93 ac 03 	sts	0x03AC, r24
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <__vector_18>:

ISR(USART_RX_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
	rxBuffer[rxBufferWriteIndex & RX_BUFFER_SIZE] = UDR0;
     77a:	80 91 a8 02 	lds	r24, 0x02A8
     77e:	90 91 a9 02 	lds	r25, 0x02A9
     782:	20 91 c6 00 	lds	r18, 0x00C6
     786:	fc 01       	movw	r30, r24
     788:	ee 27       	eor	r30, r30
     78a:	f1 70       	andi	r31, 0x01	; 1
     78c:	e6 55       	subi	r30, 0x56	; 86
     78e:	fd 4f       	sbci	r31, 0xFD	; 253
     790:	20 83       	st	Z, r18
	
	rxBufferWriteIndex++;
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	90 93 a9 02 	sts	0x02A9, r25
     798:	80 93 a8 02 	sts	0x02A8, r24
	rxMessagesRemaining++;
     79c:	80 91 a6 02 	lds	r24, 0x02A6
     7a0:	90 91 a7 02 	lds	r25, 0x02A7
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	90 93 a7 02 	sts	0x02A7, r25
     7aa:	80 93 a6 02 	sts	0x02A6, r24
	
	if(rxEvent != 0)
     7ae:	e0 91 a4 02 	lds	r30, 0x02A4
     7b2:	f0 91 a5 02 	lds	r31, 0x02A5
     7b6:	30 97       	sbiw	r30, 0x00	; 0
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_18+0x64>
		rxEvent(rxMessagesRemaining);
     7ba:	09 95       	icall
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <_Z14lfoRouteSemis1v>:
	osc1NoteUpdate();
	osc1CentsUpdate();
}

void lfoRouteSemis1()
{
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <_Z14lfoRouteSemis1v+0xe>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
	bool isNegative = lfoOut[1] < 0;
	lfoOut[1] *= lfoOut[1] > 0 ? 1 : -1;
     7f0:	20 91 c8 04 	lds	r18, 0x04C8
     7f4:	30 91 c9 04 	lds	r19, 0x04C9
     7f8:	21 15       	cp	r18, r1
     7fa:	31 05       	cpc	r19, r1
     7fc:	09 f0       	breq	.+2      	; 0x800 <_Z14lfoRouteSemis1v+0x22>
     7fe:	6f c0       	rjmp	.+222    	; 0x8de <_Z14lfoRouteSemis1v+0x100>
     800:	4f ef       	ldi	r20, 0xFF	; 255
     802:	5f ef       	ldi	r21, 0xFF	; 255
     804:	42 9f       	mul	r20, r18
     806:	c0 01       	movw	r24, r0
     808:	43 9f       	mul	r20, r19
     80a:	90 0d       	add	r25, r0
     80c:	52 9f       	mul	r21, r18
     80e:	90 0d       	add	r25, r0
     810:	11 24       	eor	r1, r1
     812:	90 93 c9 04 	sts	0x04C9, r25
     816:	80 93 c8 04 	sts	0x04C8, r24
	unsigned short temp = lfoOut[1]*lfoDepth;
     81a:	40 91 06 01 	lds	r20, 0x0106
     81e:	48 9f       	mul	r20, r24
     820:	90 01       	movw	r18, r0
     822:	49 9f       	mul	r20, r25
     824:	30 0d       	add	r19, r0
     826:	11 24       	eor	r1, r1
     828:	3a 83       	std	Y+2, r19	; 0x02
     82a:	29 83       	std	Y+1, r18	; 0x01
	{
		dOsc1SemisShift = -1*(*(((char*)&temp) + 1));
		lfoOut[1] *= -1;
	}
	else
		dOsc1SemisShift = *(((char*)&temp) + 1);
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	80 93 ee 04 	sts	0x04EE, r24
	cbi (TCCR2B, WGM22);
}

inline void osc1NoteUpdate()
{	
	if(48 + (osc1SemisShift + dOsc1SemisShift) > 0)
     832:	20 91 ef 04 	lds	r18, 0x04EF
     836:	99 27       	eor	r25, r25
     838:	87 fd       	sbrc	r24, 7
     83a:	90 95       	com	r25
     83c:	82 0f       	add	r24, r18
     83e:	91 1d       	adc	r25, r1
     840:	27 fd       	sbrc	r18, 7
     842:	9a 95       	dec	r25
     844:	81 3d       	cpi	r24, 0xD1	; 209
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	0c f0       	brlt	.+2      	; 0x84c <_Z14lfoRouteSemis1v+0x6e>
     84a:	4c c0       	rjmp	.+152    	; 0x8e4 <_Z14lfoRouteSemis1v+0x106>
		osc1TWord = keyFreq[48 + (osc1SemisShift + dOsc1SemisShift)];
		sei();
	}
	else
	{
		cli();
     84c:	f8 94       	cli
		osc1TWord = keyFreq[0];
     84e:	8d e5       	ldi	r24, 0x5D	; 93
     850:	99 e3       	ldi	r25, 0x39	; 57
     852:	a0 e0       	ldi	r26, 0x00	; 0
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	80 93 f1 04 	sts	0x04F1, r24
     85a:	90 93 f2 04 	sts	0x04F2, r25
     85e:	a0 93 f3 04 	sts	0x04F3, r26
     862:	b0 93 f4 04 	sts	0x04F4, r27
		sei();
     866:	78 94       	sei
	}
}

inline void osc1CentsUpdate()
{
	unsigned long centsCoef = 0x27*(osc1CentsShift + dOsc1CentsShift);
     868:	20 91 f0 04 	lds	r18, 0x04F0
     86c:	80 91 09 01 	lds	r24, 0x0109
     870:	90 91 0a 01 	lds	r25, 0x010A
     874:	82 0f       	add	r24, r18
     876:	91 1d       	adc	r25, r1
     878:	27 fd       	sbrc	r18, 7
     87a:	9a 95       	dec	r25
     87c:	47 e2       	ldi	r20, 0x27	; 39
     87e:	48 9f       	mul	r20, r24
     880:	90 01       	movw	r18, r0
     882:	49 9f       	mul	r20, r25
     884:	30 0d       	add	r19, r0
     886:	11 24       	eor	r1, r1
     888:	44 27       	eor	r20, r20
     88a:	37 fd       	sbrc	r19, 7
     88c:	40 95       	com	r20
     88e:	54 2f       	mov	r21, r20
	
	cli();
     890:	f8 94       	cli
	centsCoef *= osc1TWord;
     892:	c0 90 f1 04 	lds	r12, 0x04F1
     896:	d0 90 f2 04 	lds	r13, 0x04F2
     89a:	e0 90 f3 04 	lds	r14, 0x04F3
     89e:	f0 90 f4 04 	lds	r15, 0x04F4
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 91 08 	call	0x1122	; 0x1122 <__mulsi3>
	centsCoef = ((long)centsCoef) >> 16;
     8aa:	bb 27       	eor	r27, r27
     8ac:	97 fd       	sbrc	r25, 7
     8ae:	b0 95       	com	r27
     8b0:	ab 2f       	mov	r26, r27
	osc1TWord += centsCoef;
     8b2:	8c 0d       	add	r24, r12
     8b4:	9d 1d       	adc	r25, r13
     8b6:	ae 1d       	adc	r26, r14
     8b8:	bf 1d       	adc	r27, r15
     8ba:	80 93 f1 04 	sts	0x04F1, r24
     8be:	90 93 f2 04 	sts	0x04F2, r25
     8c2:	a0 93 f3 04 	sts	0x04F3, r26
     8c6:	b0 93 f4 04 	sts	0x04F4, r27
	sei();
     8ca:	78 94       	sei
	else
		dOsc1SemisShift = *(((char*)&temp) + 1);
		
	osc1NoteUpdate();
	osc1CentsUpdate();
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	08 95       	ret
}

void lfoRouteSemis1()
{
	bool isNegative = lfoOut[1] < 0;
	lfoOut[1] *= lfoOut[1] > 0 ? 1 : -1;
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	90 cf       	rjmp	.-224    	; 0x804 <_Z14lfoRouteSemis1v+0x26>

inline void osc1NoteUpdate()
{	
	if(48 + (osc1SemisShift + dOsc1SemisShift) > 0)
	{
		cli();
     8e4:	f8 94       	cli
		osc1TWord = keyFreq[48 + (osc1SemisShift + dOsc1SemisShift)];
     8e6:	80 91 ef 04 	lds	r24, 0x04EF
     8ea:	e0 91 ee 04 	lds	r30, 0x04EE
     8ee:	ff 27       	eor	r31, r31
     8f0:	e7 fd       	sbrc	r30, 7
     8f2:	f0 95       	com	r31
     8f4:	e8 0f       	add	r30, r24
     8f6:	f1 1d       	adc	r31, r1
     8f8:	87 fd       	sbrc	r24, 7
     8fa:	fa 95       	dec	r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	eb 50       	subi	r30, 0x0B	; 11
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	a2 81       	ldd	r26, Z+2	; 0x02
     90e:	b3 81       	ldd	r27, Z+3	; 0x03
     910:	80 93 f1 04 	sts	0x04F1, r24
     914:	90 93 f2 04 	sts	0x04F2, r25
     918:	a0 93 f3 04 	sts	0x04F3, r26
     91c:	b0 93 f4 04 	sts	0x04F4, r27
		sei();
     920:	78 94       	sei
     922:	a2 cf       	rjmp	.-188    	; 0x868 <_Z14lfoRouteSemis1v+0x8a>

00000924 <_Z10noteUpdatev>:
	osc1TWord += centsCoef;
	sei();
}

void noteUpdate()
{
     924:	8f 92       	push	r8
     926:	9f 92       	push	r9
     928:	af 92       	push	r10
     92a:	bf 92       	push	r11
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
	osc1Freq = keyFreq[48];
	//osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*(osc1CentsShift + dOsc1CentsShift);
     936:	20 91 f0 04 	lds	r18, 0x04F0
     93a:	80 91 09 01 	lds	r24, 0x0109
     93e:	90 91 0a 01 	lds	r25, 0x010A
     942:	82 0f       	add	r24, r18
     944:	91 1d       	adc	r25, r1
     946:	27 fd       	sbrc	r18, 7
     948:	9a 95       	dec	r25
     94a:	27 e2       	ldi	r18, 0x27	; 39
     94c:	28 9f       	mul	r18, r24
     94e:	b0 01       	movw	r22, r0
     950:	29 9f       	mul	r18, r25
     952:	70 0d       	add	r23, r0
     954:	11 24       	eor	r1, r1
     956:	88 27       	eor	r24, r24
     958:	77 fd       	sbrc	r23, 7
     95a:	80 95       	com	r24
     95c:	98 2f       	mov	r25, r24

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     95e:	20 ed       	ldi	r18, 0xD0	; 208
     960:	35 e9       	ldi	r19, 0x95	; 149
     962:	43 e0       	ldi	r20, 0x03	; 3
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	0e 94 05 09 	call	0x120a	; 0x120a <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     96a:	00 e1       	ldi	r16, 0x10	; 16
     96c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     970:	49 01       	movw	r8, r18
     972:	5a 01       	movw	r10, r20
{
	osc1Freq = keyFreq[48];
	//osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*(osc1CentsShift + dOsc1CentsShift);
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
     974:	20 ed       	ldi	r18, 0xD0	; 208
     976:	82 0e       	add	r8, r18
     978:	25 e9       	ldi	r18, 0x95	; 149
     97a:	92 1e       	adc	r9, r18
     97c:	23 e0       	ldi	r18, 0x03	; 3
     97e:	a2 1e       	adc	r10, r18
     980:	b1 1c       	adc	r11, r1
     982:	80 92 01 05 	sts	0x0501, r8
     986:	90 92 02 05 	sts	0x0502, r9
     98a:	a0 92 03 05 	sts	0x0503, r10
     98e:	b0 92 04 05 	sts	0x0504, r11

	//centsConst = 0x27*osc2CentsShift;
	//osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
     992:	f8 94       	cli
	osc1TWord = keyFreq[48];
     994:	80 ed       	ldi	r24, 0xD0	; 208
     996:	95 e9       	ldi	r25, 0x95	; 149
     998:	a3 e0       	ldi	r26, 0x03	; 3
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	80 93 f1 04 	sts	0x04F1, r24
     9a0:	90 93 f2 04 	sts	0x04F2, r25
     9a4:	a0 93 f3 04 	sts	0x04F3, r26
     9a8:	b0 93 f4 04 	sts	0x04F4, r27
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
     9ac:	20 91 e3 04 	lds	r18, 0x04E3
     9b0:	30 91 e4 04 	lds	r19, 0x04E4
     9b4:	40 91 e5 04 	lds	r20, 0x04E5
     9b8:	50 91 e6 04 	lds	r21, 0x04E6
     9bc:	c0 90 b7 04 	lds	r12, 0x04B7
     9c0:	d0 90 b8 04 	lds	r13, 0x04B8
     9c4:	e0 90 b9 04 	lds	r14, 0x04B9
     9c8:	f0 90 ba 04 	lds	r15, 0x04BA

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 05 09 	call	0x120a	; 0x120a <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     9d4:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     9d8:	20 93 db 04 	sts	0x04DB, r18
     9dc:	30 93 dc 04 	sts	0x04DC, r19
     9e0:	40 93 dd 04 	sts	0x04DD, r20
     9e4:	50 93 de 04 	sts	0x04DE, r21
	//osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
	osc1TWord = keyFreq[48];
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     9e8:	60 91 c2 04 	lds	r22, 0x04C2
     9ec:	70 91 c3 04 	lds	r23, 0x04C3
     9f0:	80 91 c4 04 	lds	r24, 0x04C4
     9f4:	90 91 c5 04 	lds	r25, 0x04C5

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	0e 94 05 09 	call	0x120a	; 0x120a <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     a00:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     a04:	20 93 ce 04 	sts	0x04CE, r18
     a08:	30 93 cf 04 	sts	0x04CF, r19
     a0c:	40 93 d0 04 	sts	0x04D0, r20
     a10:	50 93 d1 04 	sts	0x04D1, r21

	cli();
	osc1TWord = keyFreq[48];
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	sei();
     a14:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

inline void osc1NoteUpdate()
{	
	if(48 + (osc1SemisShift + dOsc1SemisShift) > 0)
     a16:	20 91 ef 04 	lds	r18, 0x04EF
     a1a:	80 91 ee 04 	lds	r24, 0x04EE
     a1e:	99 27       	eor	r25, r25
     a20:	87 fd       	sbrc	r24, 7
     a22:	90 95       	com	r25
     a24:	82 0f       	add	r24, r18
     a26:	91 1d       	adc	r25, r1
     a28:	27 fd       	sbrc	r18, 7
     a2a:	9a 95       	dec	r25
     a2c:	81 3d       	cpi	r24, 0xD1	; 209
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	0c f0       	brlt	.+2      	; 0xa34 <_Z10noteUpdatev+0x110>
     a32:	4a c0       	rjmp	.+148    	; 0xac8 <_Z10noteUpdatev+0x1a4>
		osc1TWord = keyFreq[48 + (osc1SemisShift + dOsc1SemisShift)];
		sei();
	}
	else
	{
		cli();
     a34:	f8 94       	cli
		osc1TWord = keyFreq[0];
     a36:	8d e5       	ldi	r24, 0x5D	; 93
     a38:	99 e3       	ldi	r25, 0x39	; 57
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	80 93 f1 04 	sts	0x04F1, r24
     a42:	90 93 f2 04 	sts	0x04F2, r25
     a46:	a0 93 f3 04 	sts	0x04F3, r26
     a4a:	b0 93 f4 04 	sts	0x04F4, r27
		sei();
     a4e:	78 94       	sei
	}
}

inline void osc1CentsUpdate()
{
	unsigned long centsCoef = 0x27*(osc1CentsShift + dOsc1CentsShift);
     a50:	20 91 f0 04 	lds	r18, 0x04F0
     a54:	80 91 09 01 	lds	r24, 0x0109
     a58:	90 91 0a 01 	lds	r25, 0x010A
     a5c:	82 0f       	add	r24, r18
     a5e:	91 1d       	adc	r25, r1
     a60:	27 fd       	sbrc	r18, 7
     a62:	9a 95       	dec	r25
     a64:	47 e2       	ldi	r20, 0x27	; 39
     a66:	48 9f       	mul	r20, r24
     a68:	90 01       	movw	r18, r0
     a6a:	49 9f       	mul	r20, r25
     a6c:	30 0d       	add	r19, r0
     a6e:	11 24       	eor	r1, r1
     a70:	44 27       	eor	r20, r20
     a72:	37 fd       	sbrc	r19, 7
     a74:	40 95       	com	r20
     a76:	54 2f       	mov	r21, r20
	
	cli();
     a78:	f8 94       	cli
	centsCoef *= osc1TWord;
     a7a:	c0 90 f1 04 	lds	r12, 0x04F1
     a7e:	d0 90 f2 04 	lds	r13, 0x04F2
     a82:	e0 90 f3 04 	lds	r14, 0x04F3
     a86:	f0 90 f4 04 	lds	r15, 0x04F4
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 91 08 	call	0x1122	; 0x1122 <__mulsi3>
	centsCoef = ((long)centsCoef) >> 16;
     a92:	bb 27       	eor	r27, r27
     a94:	97 fd       	sbrc	r25, 7
     a96:	b0 95       	com	r27
     a98:	ab 2f       	mov	r26, r27
	osc1TWord += centsCoef;
     a9a:	8c 0d       	add	r24, r12
     a9c:	9d 1d       	adc	r25, r13
     a9e:	ae 1d       	adc	r26, r14
     aa0:	bf 1d       	adc	r27, r15
     aa2:	80 93 f1 04 	sts	0x04F1, r24
     aa6:	90 93 f2 04 	sts	0x04F2, r25
     aaa:	a0 93 f3 04 	sts	0x04F3, r26
     aae:	b0 93 f4 04 	sts	0x04F4, r27
	sei();
     ab2:	78 94       	sei
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	sei();
	
	osc1NoteUpdate();
	osc1CentsUpdate();
}
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	08 95       	ret

inline void osc1NoteUpdate()
{	
	if(48 + (osc1SemisShift + dOsc1SemisShift) > 0)
	{
		cli();
     ac8:	f8 94       	cli
		osc1TWord = keyFreq[48 + (osc1SemisShift + dOsc1SemisShift)];
     aca:	80 91 ef 04 	lds	r24, 0x04EF
     ace:	e0 91 ee 04 	lds	r30, 0x04EE
     ad2:	ff 27       	eor	r31, r31
     ad4:	e7 fd       	sbrc	r30, 7
     ad6:	f0 95       	com	r31
     ad8:	e8 0f       	add	r30, r24
     ada:	f1 1d       	adc	r31, r1
     adc:	87 fd       	sbrc	r24, 7
     ade:	fa 95       	dec	r31
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	eb 50       	subi	r30, 0x0B	; 11
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	a2 81       	ldd	r26, Z+2	; 0x02
     af2:	b3 81       	ldd	r27, Z+3	; 0x03
     af4:	80 93 f1 04 	sts	0x04F1, r24
     af8:	90 93 f2 04 	sts	0x04F2, r25
     afc:	a0 93 f3 04 	sts	0x04F3, r26
     b00:	b0 93 f4 04 	sts	0x04F4, r27
		sei();
     b04:	78 94       	sei
     b06:	a4 cf       	rjmp	.-184    	; 0xa50 <_Z10noteUpdatev+0x12c>

00000b08 <_Z5setupv>:
		putString("\r\n");*/
	}
}

void setup()
{
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <_Z5setupv+0x26>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <_Z5setupv+0x28>
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e8       	ldi	r25, 0x80	; 128
     b38:	ac e8       	ldi	r26, 0x8C	; 140
     b3a:	ba e7       	ldi	r27, 0x7A	; 122
     b3c:	80 93 b3 04 	sts	0x04B3, r24
     b40:	90 93 b4 04 	sts	0x04B4, r25
     b44:	a0 93 b5 04 	sts	0x04B5, r26
     b48:	b0 93 b6 04 	sts	0x04B6, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
     b54:	1a 82       	std	Y+2, r1	; 0x02
     b56:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     b58:	89 80       	ldd	r8, Y+1	; 0x01
     b5a:	9a 80       	ldd	r9, Y+2	; 0x02
     b5c:	ab 80       	ldd	r10, Y+3	; 0x03
     b5e:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     b60:	94 01       	movw	r18, r8
     b62:	a5 01       	movw	r20, r10
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	00 e1       	ldi	r16, 0x10	; 16
     b6e:	0e 94 8f 09 	call	0x131e	; 0x131e <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     b72:	a1 2c       	mov	r10, r1
     b74:	e0 e8       	ldi	r30, 0x80	; 128
     b76:	be 2e       	mov	r11, r30
     b78:	fc e8       	ldi	r31, 0x8C	; 140
     b7a:	cf 2e       	mov	r12, r31
     b7c:	aa e7       	ldi	r26, 0x7A	; 122
     b7e:	da 2e       	mov	r13, r26
     b80:	e1 2c       	mov	r14, r1
     b82:	f1 2c       	mov	r15, r1
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	0e 94 32 09 	call	0x1264	; 0x1264 <__udivdi3>
     b8c:	20 93 af 04 	sts	0x04AF, r18
     b90:	30 93 b0 04 	sts	0x04B0, r19
     b94:	40 93 b1 04 	sts	0x04B1, r20
     b98:	50 93 b2 04 	sts	0x04B2, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	9c 83       	std	Y+4, r25	; 0x04
     ba2:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     ba4:	89 80       	ldd	r8, Y+1	; 0x01
     ba6:	9a 80       	ldd	r9, Y+2	; 0x02
     ba8:	ab 80       	ldd	r10, Y+3	; 0x03
     baa:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     bac:	94 01       	movw	r18, r8
     bae:	a5 01       	movw	r20, r10
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	00 e1       	ldi	r16, 0x10	; 16
     bba:	0e 94 8f 09 	call	0x131e	; 0x131e <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     bbe:	a1 2c       	mov	r10, r1
     bc0:	b0 e8       	ldi	r27, 0x80	; 128
     bc2:	bb 2e       	mov	r11, r27
     bc4:	0c e8       	ldi	r16, 0x8C	; 140
     bc6:	c0 2e       	mov	r12, r16
     bc8:	ea e7       	ldi	r30, 0x7A	; 122
     bca:	de 2e       	mov	r13, r30
     bcc:	e1 2c       	mov	r14, r1
     bce:	f1 2c       	mov	r15, r1
     bd0:	00 e0       	ldi	r16, 0x00	; 0
     bd2:	0e 94 32 09 	call	0x1264	; 0x1264 <__udivdi3>
     bd6:	39 01       	movw	r6, r18
     bd8:	4a 01       	movw	r8, r20
     bda:	1b 01       	movw	r2, r22
     bdc:	2c 01       	movw	r4, r24
     bde:	32 2f       	mov	r19, r18
     be0:	30 93 b7 04 	sts	0x04B7, r19
     be4:	70 92 b8 04 	sts	0x04B8, r7
     be8:	80 92 b9 04 	sts	0x04B9, r8
     bec:	90 92 ba 04 	sts	0x04BA, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     bf0:	e1 e0       	ldi	r30, 0x01	; 1
     bf2:	f5 e0       	ldi	r31, 0x05	; 5
     bf4:	80 e7       	ldi	r24, 0x70	; 112
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	93 83       	std	Z+3, r25	; 0x03
     bfa:	82 83       	std	Z+2, r24	; 0x02
	*((unsigned short*)&(b)) = 0;
     bfc:	11 82       	std	Z+1, r1	; 0x01
     bfe:	10 82       	st	Z, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     c00:	00 91 01 05 	lds	r16, 0x0501
     c04:	10 91 02 05 	lds	r17, 0x0502
     c08:	20 91 03 05 	lds	r18, 0x0503
     c0c:	30 91 04 05 	lds	r19, 0x0504
	temp *= rhs;
     c10:	58 01       	movw	r10, r16
     c12:	69 01       	movw	r12, r18
     c14:	00 e0       	ldi	r16, 0x00	; 0
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	93 01       	movw	r18, r6
     c1a:	a4 01       	movw	r20, r8
     c1c:	b1 01       	movw	r22, r2
     c1e:	c2 01       	movw	r24, r4
     c20:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     c24:	00 e1       	ldi	r16, 0x10	; 16
     c26:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     c2a:	20 93 f1 04 	sts	0x04F1, r18
     c2e:	30 93 f2 04 	sts	0x04F2, r19
     c32:	40 93 f3 04 	sts	0x04F3, r20
     c36:	50 93 f4 04 	sts	0x04F4, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     c3a:	e3 ee       	ldi	r30, 0xE3	; 227
     c3c:	f4 e0       	ldi	r31, 0x04	; 4
     c3e:	80 e7       	ldi	r24, 0x70	; 112
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	93 83       	std	Z+3, r25	; 0x03
     c44:	82 83       	std	Z+2, r24	; 0x02
	*((unsigned short*)&(b)) = 0;
     c46:	11 82       	std	Z+1, r1	; 0x01
     c48:	10 82       	st	Z, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     c4a:	00 91 e3 04 	lds	r16, 0x04E3
     c4e:	10 91 e4 04 	lds	r17, 0x04E4
     c52:	20 91 e5 04 	lds	r18, 0x04E5
     c56:	30 91 e6 04 	lds	r19, 0x04E6
	temp *= rhs;
     c5a:	58 01       	movw	r10, r16
     c5c:	69 01       	movw	r12, r18
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	93 01       	movw	r18, r6
     c64:	a4 01       	movw	r20, r8
     c66:	b1 01       	movw	r22, r2
     c68:	c2 01       	movw	r24, r4
     c6a:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     c6e:	00 e1       	ldi	r16, 0x10	; 16
     c70:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     c74:	20 93 db 04 	sts	0x04DB, r18
     c78:	30 93 dc 04 	sts	0x04DC, r19
     c7c:	40 93 dd 04 	sts	0x04DD, r20
     c80:	50 93 de 04 	sts	0x04DE, r21
	unsigned char exponent = 0;
	exponent = (unsigned char)(*(doubleingPointer + 3) & 0x7F);
	exponent = exponent << 1;
	exponent |= (unsigned char)((*(doubleingPointer + 2) & 0x80) >> 7);
	
	b = fraction | 0x10000;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e8       	ldi	r25, 0x80	; 128
     c88:	a1 e0       	ldi	r26, 0x01	; 1
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	80 93 c2 04 	sts	0x04C2, r24
     c90:	90 93 c3 04 	sts	0x04C3, r25
     c94:	a0 93 c4 04 	sts	0x04C4, r26
     c98:	b0 93 c5 04 	sts	0x04C5, r27

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     c9c:	a1 2c       	mov	r10, r1
     c9e:	f0 e8       	ldi	r31, 0x80	; 128
     ca0:	bf 2e       	mov	r11, r31
     ca2:	cc 24       	eor	r12, r12
     ca4:	c3 94       	inc	r12
     ca6:	d1 2c       	mov	r13, r1
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	93 01       	movw	r18, r6
     cac:	a4 01       	movw	r20, r8
     cae:	b1 01       	movw	r22, r2
     cb0:	c2 01       	movw	r24, r4
     cb2:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     cb6:	00 e1       	ldi	r16, 0x10	; 16
     cb8:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
     cbc:	20 93 ce 04 	sts	0x04CE, r18
     cc0:	30 93 cf 04 	sts	0x04CF, r19
     cc4:	40 93 d0 04 	sts	0x04D0, r20
     cc8:	50 93 d1 04 	sts	0x04D1, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     ccc:	87 e2       	ldi	r24, 0x27	; 39
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9c 83       	std	Y+4, r25	; 0x04
     cd2:	8b 83       	std	Y+3, r24	; 0x03

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     cd4:	09 81       	ldd	r16, Y+1	; 0x01
     cd6:	1a 81       	ldd	r17, Y+2	; 0x02
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	58 01       	movw	r10, r16
     cde:	69 01       	movw	r12, r18
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	93 01       	movw	r18, r6
     ce6:	a4 01       	movw	r20, r8
     ce8:	b1 01       	movw	r22, r2
     cea:	c2 01       	movw	r24, r4
     cec:	0e 94 ac 08 	call	0x1158	; 0x1158 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     cf0:	00 e1       	ldi	r16, 0x10	; 16
     cf2:	0e 94 aa 09 	call	0x1354	; 0x1354 <__lshrdi3>
	toFixed(1.5, lfoFreq);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	
	char buf[100];
	
	centsConst = fixedMultiply(stepConst, 0x27);
     cf6:	20 93 bb 04 	sts	0x04BB, r18
     cfa:	30 93 bc 04 	sts	0x04BC, r19
     cfe:	40 93 bd 04 	sts	0x04BD, r20
     d02:	50 93 be 04 	sts	0x04BE, r21
{
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
     d06:	8f e0       	ldi	r24, 0x0F	; 15
     d08:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1);
     d0c:	82 e8       	ldi	r24, 0x82	; 130
     d0e:	80 93 7a 00 	sts	0x007A, r24
	char buf[100];
	
	centsConst = fixedMultiply(stepConst, 0x27);
	
	adcInit();
	serialInit();
     d12:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z10serialInitv>
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
     d16:	e1 eb       	ldi	r30, 0xB1	; 177
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 83       	st	Z, r24
	cbi (TCCR2B, CS21);
     d20:	80 81       	ld	r24, Z
     d22:	8d 7f       	andi	r24, 0xFD	; 253
     d24:	80 83       	st	Z, r24
	cbi (TCCR2B, CS22);
     d26:	80 81       	ld	r24, Z
     d28:	8b 7f       	andi	r24, 0xFB	; 251
     d2a:	80 83       	st	Z, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
     d2c:	a0 eb       	ldi	r26, 0xB0	; 176
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	8c 91       	ld	r24, X
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	8c 93       	st	X, r24
	sbi (TCCR2A, COM2A1);
     d36:	8c 91       	ld	r24, X
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	8c 93       	st	X, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
     d3c:	8c 91       	ld	r24, X
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	8c 93       	st	X, r24
	cbi (TCCR2A, WGM21);
     d42:	8c 91       	ld	r24, X
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	8c 93       	st	X, r24
	cbi (TCCR2B, WGM22);
     d48:	80 81       	ld	r24, Z
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	80 83       	st	Z, r24
	adcInit();
	serialInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
     d4e:	23 9a       	sbi	0x04, 3	; 4
		
	putString("ADC Setup\r\n");
     d50:	8b e0       	ldi	r24, 0x0B	; 11
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
	sbi (TIMSK2,TOIE2);
     d58:	e0 e7       	ldi	r30, 0x70	; 112
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	80 83       	st	Z, r24
	sei();
     d62:	78 94       	sei

	lfoRouteFunction = lfoRouteSemis1;
     d64:	8f ee       	ldi	r24, 0xEF	; 239
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	90 93 c0 04 	sts	0x04C0, r25
     d6c:	80 93 bf 04 	sts	0x04BF, r24

	noteUpdate();
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	3f 90       	pop	r3
     d9a:	2f 90       	pop	r2
	sbi (TIMSK2,TOIE2);
	sei();

	lfoRouteFunction = lfoRouteSemis1;

	noteUpdate();
     d9c:	0c 94 92 04 	jmp	0x924	; 0x924 <_Z10noteUpdatev>

00000da0 <main>:

inline void osc2Update();

int main(void)
{
	setup();
     da0:	0e 94 84 05 	call	0xb08	; 0xb08 <_Z5setupv>

	char buf[100];

	putString("HELLO WORLD\r\n\r\n");
     da4:	87 e1       	ldi	r24, 0x17	; 23
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
     dac:	ff cf       	rjmp	.-2      	; 0xdac <main+0xc>

00000dae <__vector_21>:
		lfsrState ^= 0xB400;
	}
}

ISR(ADC_vect)
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
	putString("ADC Updated\r\n");
     dd0:	87 e2       	ldi	r24, 0x27	; 39
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
	adcValue[adcSelect] = ADC;
     dd8:	20 91 0d 05 	lds	r18, 0x050D
     ddc:	e2 2f       	mov	r30, r18
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 91 78 00 	lds	r24, 0x0078
     de4:	90 91 79 00 	lds	r25, 0x0079
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	eb 5f       	subi	r30, 0xFB	; 251
     dee:	fa 4f       	sbci	r31, 0xFA	; 250
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24

	adcSelect++;
     df4:	2f 5f       	subi	r18, 0xFF	; 255
	
	if(adcSelect > 3)
     df6:	24 30       	cpi	r18, 0x04	; 4
     df8:	b0 f0       	brcs	.+44     	; 0xe26 <__vector_21+0x78>
	adcSelect = 0;
     dfa:	10 92 0d 05 	sts	0x050D, r1
     dfe:	20 e0       	ldi	r18, 0x00	; 0
	
	ADMUX = adcSelect;
     e00:	20 93 7c 00 	sts	0x007C, r18
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti
ISR(ADC_vect)
{
	putString("ADC Updated\r\n");
	adcValue[adcSelect] = ADC;

	adcSelect++;
     e26:	20 93 0d 05 	sts	0x050D, r18
     e2a:	ea cf       	rjmp	.-44     	; 0xe00 <__vector_21+0x52>

00000e2c <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <__vector_9+0x30>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <__vector_9+0x32>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
     e62:	80 91 05 01 	lds	r24, 0x0105
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <__vector_9+0x40>
     e6a:	1b c1       	rjmp	.+566    	; 0x10a2 <__vector_9+0x276>
	{
		osc1Phaccu[0] = osc1Phaccu[1];
     e6c:	80 91 f9 04 	lds	r24, 0x04F9
     e70:	90 91 fa 04 	lds	r25, 0x04FA
     e74:	a0 91 fb 04 	lds	r26, 0x04FB
     e78:	b0 91 fc 04 	lds	r27, 0x04FC
     e7c:	80 93 f5 04 	sts	0x04F5, r24
     e80:	90 93 f6 04 	sts	0x04F6, r25
     e84:	a0 93 f7 04 	sts	0x04F7, r26
     e88:	b0 93 f8 04 	sts	0x04F8, r27
		osc1Phaccu[1] = osc1Phaccu[2];
     e8c:	40 91 fd 04 	lds	r20, 0x04FD
     e90:	50 91 fe 04 	lds	r21, 0x04FE
     e94:	60 91 ff 04 	lds	r22, 0x04FF
     e98:	70 91 00 05 	lds	r23, 0x0500
     e9c:	40 93 f9 04 	sts	0x04F9, r20
     ea0:	50 93 fa 04 	sts	0x04FA, r21
     ea4:	60 93 fb 04 	sts	0x04FB, r22
     ea8:	70 93 fc 04 	sts	0x04FC, r23
		osc1Phaccu[2] += osc1TWord;
     eac:	80 91 f1 04 	lds	r24, 0x04F1
     eb0:	90 91 f2 04 	lds	r25, 0x04F2
     eb4:	a0 91 f3 04 	lds	r26, 0x04F3
     eb8:	b0 91 f4 04 	lds	r27, 0x04F4
     ebc:	84 0f       	add	r24, r20
     ebe:	95 1f       	adc	r25, r21
     ec0:	a6 1f       	adc	r26, r22
     ec2:	b7 1f       	adc	r27, r23
     ec4:	80 93 fd 04 	sts	0x04FD, r24
     ec8:	90 93 fe 04 	sts	0x04FE, r25
     ecc:	a0 93 ff 04 	sts	0x04FF, r26
     ed0:	b0 93 00 05 	sts	0x0500, r27

		osc2Phaccu += osc2TWord;
     ed4:	40 91 df 04 	lds	r20, 0x04DF
     ed8:	50 91 e0 04 	lds	r21, 0x04E0
     edc:	60 91 e1 04 	lds	r22, 0x04E1
     ee0:	70 91 e2 04 	lds	r23, 0x04E2
     ee4:	c0 90 db 04 	lds	r12, 0x04DB
     ee8:	d0 90 dc 04 	lds	r13, 0x04DC
     eec:	e0 90 dd 04 	lds	r14, 0x04DD
     ef0:	f0 90 de 04 	lds	r15, 0x04DE
     ef4:	4c 0d       	add	r20, r12
     ef6:	5d 1d       	adc	r21, r13
     ef8:	6e 1d       	adc	r22, r14
     efa:	7f 1d       	adc	r23, r15
     efc:	40 93 df 04 	sts	0x04DF, r20
     f00:	50 93 e0 04 	sts	0x04E0, r21
     f04:	60 93 e1 04 	sts	0x04E1, r22
     f08:	70 93 e2 04 	sts	0x04E2, r23
	osc1CentsUpdate();
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
     f0c:	40 91 00 01 	lds	r20, 0x0100
     f10:	50 91 01 01 	lds	r21, 0x0101
	lfsrState = lfsrState >> 1;
     f14:	9a 01       	movw	r18, r20
     f16:	36 95       	lsr	r19
     f18:	27 95       	ror	r18
	
	if(lsb == 1)
     f1a:	40 fd       	sbrc	r20, 0
     f1c:	ee c0       	rjmp	.+476    	; 0x10fa <__vector_9+0x2ce>
	{
		lfsrState ^= 0xB400;
     f1e:	30 93 01 01 	sts	0x0101, r19
     f22:	20 93 00 01 	sts	0x0100, r18

		osc2Phaccu += osc2TWord;
		
		lfsrUpdate();

		osc1Out[0] = osc1Out[1];
     f26:	40 91 e9 04 	lds	r20, 0x04E9
     f2a:	50 91 ea 04 	lds	r21, 0x04EA
     f2e:	50 93 e8 04 	sts	0x04E8, r21
     f32:	40 93 e7 04 	sts	0x04E7, r20
		osc1Out[1] = osc1Out[2];
     f36:	40 91 eb 04 	lds	r20, 0x04EB
     f3a:	50 91 ec 04 	lds	r21, 0x04EC
     f3e:	50 93 ea 04 	sts	0x04EA, r21
     f42:	40 93 e9 04 	sts	0x04E9, r20
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     f46:	50 91 03 01 	lds	r21, 0x0103
     f4a:	60 91 ff 04 	lds	r22, 0x04FF
     f4e:	40 91 ed 04 	lds	r20, 0x04ED
     f52:	46 0f       	add	r20, r22
     f54:	e5 2f       	mov	r30, r21
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	eb 56       	subi	r30, 0x6B	; 107
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	e4 0f       	add	r30, r20
     f68:	f1 1d       	adc	r31, r1
     f6a:	e8 59       	subi	r30, 0x98	; 152
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	e4 91       	lpm	r30, Z
		
		if(osc1WaveForm == WAVE_NOISE)
     f70:	55 30       	cpi	r21, 0x05	; 5
     f72:	09 f4       	brne	.+2      	; 0xf76 <__vector_9+0x14a>
     f74:	bc c0       	rjmp	.+376    	; 0x10ee <__vector_9+0x2c2>
		
		lfsrUpdate();

		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     f76:	4e 2f       	mov	r20, r30
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	50 93 ec 04 	sts	0x04EC, r21
     f7e:	40 93 eb 04 	sts	0x04EB, r20
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
     f82:	70 91 07 01 	lds	r23, 0x0107
     f86:	77 23       	and	r23, r23
     f88:	39 f0       	breq	.+14     	; 0xf98 <__vector_9+0x16c>
     f8a:	70 91 fb 04 	lds	r23, 0x04FB
     f8e:	e0 91 f7 04 	lds	r30, 0x04F7
     f92:	7e 17       	cp	r23, r30
     f94:	08 f4       	brcc	.+2      	; 0xf98 <__vector_9+0x16c>
     f96:	b4 c0       	rjmp	.+360    	; 0x1100 <__vector_9+0x2d4>
		{
			osc2Phaccu = osc1Phaccu[2];
		}

		if(osc2WaveForm != WAVE_NOISE)
     f98:	a0 91 02 01 	lds	r26, 0x0102
     f9c:	a5 30       	cpi	r26, 0x05	; 5
     f9e:	b1 f0       	breq	.+44     	; 0xfcc <__vector_9+0x1a0>
			osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
     fa0:	80 91 da 04 	lds	r24, 0x04DA
     fa4:	e0 91 e1 04 	lds	r30, 0x04E1
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	e8 0f       	add	r30, r24
     fac:	f1 1d       	adc	r31, r1
     fae:	87 fd       	sbrc	r24, 7
     fb0:	fa 95       	dec	r31
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	aa 0f       	add	r26, r26
     fb6:	bb 1f       	adc	r27, r27
     fb8:	ab 56       	subi	r26, 0x6B	; 107
     fba:	bd 4f       	sbci	r27, 0xFD	; 253
     fbc:	8d 91       	ld	r24, X+
     fbe:	9c 91       	ld	r25, X
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
     fc4:	e8 59       	subi	r30, 0x98	; 152
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	24 91       	lpm	r18, Z
     fca:	30 e0       	ldi	r19, 0x00	; 0
		else
			osc2Out[2] = lfsrState;

		lfoPhaccu += lfoTWord;
     fcc:	80 91 ca 04 	lds	r24, 0x04CA
     fd0:	90 91 cb 04 	lds	r25, 0x04CB
     fd4:	a0 91 cc 04 	lds	r26, 0x04CC
     fd8:	b0 91 cd 04 	lds	r27, 0x04CD
     fdc:	c0 90 ce 04 	lds	r12, 0x04CE
     fe0:	d0 90 cf 04 	lds	r13, 0x04CF
     fe4:	e0 90 d0 04 	lds	r14, 0x04D0
     fe8:	f0 90 d1 04 	lds	r15, 0x04D1
     fec:	8c 0d       	add	r24, r12
     fee:	9d 1d       	adc	r25, r13
     ff0:	ae 1d       	adc	r26, r14
     ff2:	bf 1d       	adc	r27, r15
     ff4:	80 93 ca 04 	sts	0x04CA, r24
     ff8:	90 93 cb 04 	sts	0x04CB, r25
     ffc:	a0 93 cc 04 	sts	0x04CC, r26
    1000:	b0 93 cd 04 	sts	0x04CD, r27
		
		lfoOut[0] = lfoOut[1];
    1004:	60 91 c8 04 	lds	r22, 0x04C8
    1008:	70 91 c9 04 	lds	r23, 0x04C9
    100c:	70 93 c7 04 	sts	0x04C7, r23
    1010:	60 93 c6 04 	sts	0x04C6, r22
		lfoOut[1] = pgm_read_byte(analogWaveTable + waveformOffset[lfoWaveForm] + (unsigned char)*((unsigned char*)(&lfoPhaccu)+2));
    1014:	e0 91 c1 04 	lds	r30, 0x04C1
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	eb 56       	subi	r30, 0x6B	; 107
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	80 91 cc 04 	lds	r24, 0x04CC
    1026:	01 90       	ld	r0, Z+
    1028:	f0 81       	ld	r31, Z
    102a:	e0 2d       	mov	r30, r0
    102c:	e8 0f       	add	r30, r24
    102e:	f1 1d       	adc	r31, r1
    1030:	e8 59       	subi	r30, 0x98	; 152
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	e4 91       	lpm	r30, Z
    1036:	f0 e0       	ldi	r31, 0x00	; 0
		lfoOut[1] -= 128;
    1038:	e0 58       	subi	r30, 0x80	; 128
    103a:	f1 09       	sbc	r31, r1
    103c:	f0 93 c9 04 	sts	0x04C9, r31
    1040:	e0 93 c8 04 	sts	0x04C8, r30

		unsigned long temp = 0;
	
		osc1Out[2] *= osc1Weight;
    1044:	a0 91 08 01 	lds	r26, 0x0108
    1048:	a4 9f       	mul	r26, r20
    104a:	c0 01       	movw	r24, r0
    104c:	a5 9f       	mul	r26, r21
    104e:	90 0d       	add	r25, r0
    1050:	11 24       	eor	r1, r1
    1052:	90 93 ec 04 	sts	0x04EC, r25
    1056:	80 93 eb 04 	sts	0x04EB, r24
		osc2Out[2] *= osc2Weight;
    105a:	a0 91 d9 04 	lds	r26, 0x04D9
    105e:	a2 9f       	mul	r26, r18
    1060:	a0 01       	movw	r20, r0
    1062:	a3 9f       	mul	r26, r19
    1064:	50 0d       	add	r21, r0
    1066:	11 24       	eor	r1, r1
    1068:	50 93 d8 04 	sts	0x04D8, r21
    106c:	40 93 d7 04 	sts	0x04D7, r20

		if(ringMod)
    1070:	20 91 d2 04 	lds	r18, 0x04D2
    1074:	22 23       	and	r18, r18
    1076:	81 f1       	breq	.+96     	; 0x10d8 <__vector_9+0x2ac>
			temp = osc1Out[2] ^ osc2Out[2];
    1078:	84 27       	eor	r24, r20
    107a:	95 27       	eor	r25, r21
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	ab 83       	std	Y+3, r26	; 0x03
    1086:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		if(lfoOut[0] != lfoOut[1] && lfoRouteFunction != NULL)
    1088:	6e 17       	cp	r22, r30
    108a:	7f 07       	cpc	r23, r31
    108c:	39 f0       	breq	.+14     	; 0x109c <__vector_9+0x270>
    108e:	e0 91 bf 04 	lds	r30, 0x04BF
    1092:	f0 91 c0 04 	lds	r31, 0x04C0
    1096:	30 97       	sbiw	r30, 0x00	; 0
    1098:	09 f0       	breq	.+2      	; 0x109c <__vector_9+0x270>
			lfoRouteFunction();
    109a:	09 95       	icall
		/*delayLine[delayWriteIndex] = *((unsigned char*)(&temp) + 1);
		delayWriteIndex--;
		if(delayWriteIndex > delayLineTap)
			delayWriteIndex = delayLineTap;*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
		else
		{
			temp = osc1Out[2];
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
			temp += osc2Out[2];
    10dc:	84 0f       	add	r24, r20
    10de:	95 1f       	adc	r25, r21
    10e0:	a1 1d       	adc	r26, r1
    10e2:	b1 1d       	adc	r27, r1
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	bc 83       	std	Y+4, r27	; 0x04
    10ec:	cd cf       	rjmp	.-102    	; 0x1088 <__vector_9+0x25c>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;
    10ee:	30 93 ec 04 	sts	0x04EC, r19
    10f2:	20 93 eb 04 	sts	0x04EB, r18
    10f6:	a9 01       	movw	r20, r18
    10f8:	44 cf       	rjmp	.-376    	; 0xf82 <__vector_9+0x156>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    10fa:	44 eb       	ldi	r20, 0xB4	; 180
    10fc:	34 27       	eor	r19, r20
    10fe:	0f cf       	rjmp	.-482    	; 0xf1e <__vector_9+0xf2>
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    1100:	76 17       	cp	r23, r22
    1102:	08 f0       	brcs	.+2      	; 0x1106 <__vector_9+0x2da>
    1104:	49 cf       	rjmp	.-366    	; 0xf98 <__vector_9+0x16c>
		{
			osc2Phaccu = osc1Phaccu[2];
    1106:	80 93 df 04 	sts	0x04DF, r24
    110a:	90 93 e0 04 	sts	0x04E0, r25
    110e:	a0 93 e1 04 	sts	0x04E1, r26
    1112:	b0 93 e2 04 	sts	0x04E2, r27
    1116:	40 cf       	rjmp	.-384    	; 0xf98 <__vector_9+0x16c>

00001118 <_GLOBAL__sub_I_adcSelect>:
char keyArrayWrite = 0;
char keyArrayRead = 0;

unsigned char delayLine[256];
unsigned char delayLineTap = 10;
unsigned char delayWriteIndex = delayLineTap;
    1118:	80 91 04 01 	lds	r24, 0x0104
    111c:	80 93 ae 04 	sts	0x04AE, r24
    1120:	08 95       	ret

00001122 <__mulsi3>:
    1122:	db 01       	movw	r26, r22
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	0e 94 a1 08 	call	0x1142	; 0x1142 <__muluhisi3>
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	a2 9f       	mul	r26, r18
    1132:	80 0d       	add	r24, r0
    1134:	91 1d       	adc	r25, r1
    1136:	a3 9f       	mul	r26, r19
    1138:	90 0d       	add	r25, r0
    113a:	b2 9f       	mul	r27, r18
    113c:	90 0d       	add	r25, r0
    113e:	11 24       	eor	r1, r1
    1140:	08 95       	ret

00001142 <__muluhisi3>:
    1142:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    1146:	a5 9f       	mul	r26, r21
    1148:	90 0d       	add	r25, r0
    114a:	b4 9f       	mul	r27, r20
    114c:	90 0d       	add	r25, r0
    114e:	a4 9f       	mul	r26, r20
    1150:	80 0d       	add	r24, r0
    1152:	91 1d       	adc	r25, r1
    1154:	11 24       	eor	r1, r1
    1156:	08 95       	ret

00001158 <__muldi3>:
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	1f 93       	push	r17
    115e:	0f 93       	push	r16
    1160:	9a 9d       	mul	r25, r10
    1162:	f0 2d       	mov	r31, r0
    1164:	21 9f       	mul	r18, r17
    1166:	f0 0d       	add	r31, r0
    1168:	8b 9d       	mul	r24, r11
    116a:	f0 0d       	add	r31, r0
    116c:	8a 9d       	mul	r24, r10
    116e:	e0 2d       	mov	r30, r0
    1170:	f1 0d       	add	r31, r1
    1172:	03 9f       	mul	r16, r19
    1174:	f0 0d       	add	r31, r0
    1176:	02 9f       	mul	r16, r18
    1178:	e0 0d       	add	r30, r0
    117a:	f1 1d       	adc	r31, r1
    117c:	4e 9d       	mul	r20, r14
    117e:	e0 0d       	add	r30, r0
    1180:	f1 1d       	adc	r31, r1
    1182:	5e 9d       	mul	r21, r14
    1184:	f0 0d       	add	r31, r0
    1186:	4f 9d       	mul	r20, r15
    1188:	f0 0d       	add	r31, r0
    118a:	7f 93       	push	r23
    118c:	6f 93       	push	r22
    118e:	bf 92       	push	r11
    1190:	af 92       	push	r10
    1192:	5f 93       	push	r21
    1194:	4f 93       	push	r20
    1196:	d5 01       	movw	r26, r10
    1198:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    119c:	8b 01       	movw	r16, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	d7 01       	movw	r26, r14
    11a2:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    11a6:	eb 01       	movw	r28, r22
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	d6 01       	movw	r26, r12
    11ae:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muldi3_6>
    11b2:	2f 91       	pop	r18
    11b4:	3f 91       	pop	r19
    11b6:	d6 01       	movw	r26, r12
    11b8:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    11bc:	c6 0f       	add	r28, r22
    11be:	d7 1f       	adc	r29, r23
    11c0:	e8 1f       	adc	r30, r24
    11c2:	f9 1f       	adc	r31, r25
    11c4:	af 91       	pop	r26
    11c6:	bf 91       	pop	r27
    11c8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muldi3_6>
    11cc:	2f 91       	pop	r18
    11ce:	3f 91       	pop	r19
    11d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    11d4:	c6 0f       	add	r28, r22
    11d6:	d7 1f       	adc	r29, r23
    11d8:	e8 1f       	adc	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	d6 01       	movw	r26, r12
    11de:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    11e2:	e6 0f       	add	r30, r22
    11e4:	f7 1f       	adc	r31, r23
    11e6:	98 01       	movw	r18, r16
    11e8:	be 01       	movw	r22, r28
    11ea:	cf 01       	movw	r24, r30
    11ec:	11 24       	eor	r1, r1
    11ee:	0f 91       	pop	r16
    11f0:	1f 91       	pop	r17
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <__muldi3_6>:
    11f8:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    11fc:	46 0f       	add	r20, r22
    11fe:	57 1f       	adc	r21, r23
    1200:	c8 1f       	adc	r28, r24
    1202:	d9 1f       	adc	r29, r25
    1204:	08 f4       	brcc	.+2      	; 0x1208 <__muldi3_6+0x10>
    1206:	31 96       	adiw	r30, 0x01	; 1
    1208:	08 95       	ret

0000120a <__umulsidi3>:
    120a:	e8 94       	clt

0000120c <__umulsidi3_helper>:
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	fc 01       	movw	r30, r24
    1212:	db 01       	movw	r26, r22
    1214:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    1218:	7f 93       	push	r23
    121a:	6f 93       	push	r22
    121c:	e9 01       	movw	r28, r18
    121e:	9a 01       	movw	r18, r20
    1220:	ac 01       	movw	r20, r24
    1222:	bf 93       	push	r27
    1224:	af 93       	push	r26
    1226:	3f 93       	push	r19
    1228:	2f 93       	push	r18
    122a:	df 01       	movw	r26, r30
    122c:	0e 94 cc 09 	call	0x1398	; 0x1398 <__umulhisi3>
    1230:	26 f4       	brtc	.+8      	; 0x123a <__umulsidi3_helper+0x2e>
    1232:	6c 1b       	sub	r22, r28
    1234:	7d 0b       	sbc	r23, r29
    1236:	82 0b       	sbc	r24, r18
    1238:	93 0b       	sbc	r25, r19
    123a:	9e 01       	movw	r18, r28
    123c:	eb 01       	movw	r28, r22
    123e:	fc 01       	movw	r30, r24
    1240:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muldi3_6>
    1244:	af 91       	pop	r26
    1246:	bf 91       	pop	r27
    1248:	2f 91       	pop	r18
    124a:	3f 91       	pop	r19
    124c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__muldi3_6>
    1250:	be 01       	movw	r22, r28
    1252:	cf 01       	movw	r24, r30
    1254:	f9 01       	movw	r30, r18
    1256:	2f 91       	pop	r18
    1258:	3f 91       	pop	r19
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <__umoddi3>:
    1260:	68 94       	set
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <__udivdi3_umoddi3>

00001264 <__udivdi3>:
    1264:	e8 94       	clt

00001266 <__udivdi3_umoddi3>:
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	0e 94 3e 09 	call	0x127c	; 0x127c <__udivmod64>
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	08 95       	ret

0000127c <__udivmod64>:
    127c:	88 24       	eor	r8, r8
    127e:	99 24       	eor	r9, r9
    1280:	f4 01       	movw	r30, r8
    1282:	e4 01       	movw	r28, r8
    1284:	b0 e4       	ldi	r27, 0x40	; 64
    1286:	9f 93       	push	r25
    1288:	aa 27       	eor	r26, r26
    128a:	9a 15       	cp	r25, r10
    128c:	8b 04       	cpc	r8, r11
    128e:	9c 04       	cpc	r9, r12
    1290:	ed 05       	cpc	r30, r13
    1292:	fe 05       	cpc	r31, r14
    1294:	cf 05       	cpc	r28, r15
    1296:	d0 07       	cpc	r29, r16
    1298:	a1 07       	cpc	r26, r17
    129a:	98 f4       	brcc	.+38     	; 0x12c2 <__udivmod64+0x46>
    129c:	ad 2f       	mov	r26, r29
    129e:	dc 2f       	mov	r29, r28
    12a0:	cf 2f       	mov	r28, r31
    12a2:	fe 2f       	mov	r31, r30
    12a4:	e9 2d       	mov	r30, r9
    12a6:	98 2c       	mov	r9, r8
    12a8:	89 2e       	mov	r8, r25
    12aa:	98 2f       	mov	r25, r24
    12ac:	87 2f       	mov	r24, r23
    12ae:	76 2f       	mov	r23, r22
    12b0:	65 2f       	mov	r22, r21
    12b2:	54 2f       	mov	r21, r20
    12b4:	43 2f       	mov	r20, r19
    12b6:	32 2f       	mov	r19, r18
    12b8:	22 27       	eor	r18, r18
    12ba:	b8 50       	subi	r27, 0x08	; 8
    12bc:	31 f7       	brne	.-52     	; 0x128a <__udivmod64+0xe>
    12be:	bf 91       	pop	r27
    12c0:	27 c0       	rjmp	.+78     	; 0x1310 <__udivmod64+0x94>
    12c2:	1b 2e       	mov	r1, r27
    12c4:	bf 91       	pop	r27
    12c6:	bb 27       	eor	r27, r27
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	44 1f       	adc	r20, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	66 1f       	adc	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	88 1f       	adc	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	88 1c       	adc	r8, r8
    12da:	99 1c       	adc	r9, r9
    12dc:	ee 1f       	adc	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	cc 1f       	adc	r28, r28
    12e2:	dd 1f       	adc	r29, r29
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	8a 14       	cp	r8, r10
    12ea:	9b 04       	cpc	r9, r11
    12ec:	ec 05       	cpc	r30, r12
    12ee:	fd 05       	cpc	r31, r13
    12f0:	ce 05       	cpc	r28, r14
    12f2:	df 05       	cpc	r29, r15
    12f4:	a0 07       	cpc	r26, r16
    12f6:	b1 07       	cpc	r27, r17
    12f8:	48 f0       	brcs	.+18     	; 0x130c <__udivmod64+0x90>
    12fa:	8a 18       	sub	r8, r10
    12fc:	9b 08       	sbc	r9, r11
    12fe:	ec 09       	sbc	r30, r12
    1300:	fd 09       	sbc	r31, r13
    1302:	ce 09       	sbc	r28, r14
    1304:	df 09       	sbc	r29, r15
    1306:	a0 0b       	sbc	r26, r16
    1308:	b1 0b       	sbc	r27, r17
    130a:	21 60       	ori	r18, 0x01	; 1
    130c:	1a 94       	dec	r1
    130e:	e1 f6       	brne	.-72     	; 0x12c8 <__udivmod64+0x4c>
    1310:	2e f4       	brtc	.+10     	; 0x131c <__udivmod64+0xa0>
    1312:	94 01       	movw	r18, r8
    1314:	af 01       	movw	r20, r30
    1316:	be 01       	movw	r22, r28
    1318:	cd 01       	movw	r24, r26
    131a:	00 0c       	add	r0, r0
    131c:	08 95       	ret

0000131e <__ashldi3>:
    131e:	0f 93       	push	r16
    1320:	08 30       	cpi	r16, 0x08	; 8
    1322:	90 f0       	brcs	.+36     	; 0x1348 <__ashldi3+0x2a>
    1324:	98 2f       	mov	r25, r24
    1326:	87 2f       	mov	r24, r23
    1328:	76 2f       	mov	r23, r22
    132a:	65 2f       	mov	r22, r21
    132c:	54 2f       	mov	r21, r20
    132e:	43 2f       	mov	r20, r19
    1330:	32 2f       	mov	r19, r18
    1332:	22 27       	eor	r18, r18
    1334:	08 50       	subi	r16, 0x08	; 8
    1336:	f4 cf       	rjmp	.-24     	; 0x1320 <__ashldi3+0x2>
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	44 1f       	adc	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 95       	dec	r16
    134a:	b2 f7       	brpl	.-20     	; 0x1338 <__ashldi3+0x1a>
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <__ashrdi3>:
    1350:	97 fb       	bst	r25, 7
    1352:	10 f8       	bld	r1, 0

00001354 <__lshrdi3>:
    1354:	16 94       	lsr	r1
    1356:	00 08       	sbc	r0, r0
    1358:	0f 93       	push	r16
    135a:	08 30       	cpi	r16, 0x08	; 8
    135c:	98 f0       	brcs	.+38     	; 0x1384 <__lshrdi3+0x30>
    135e:	08 50       	subi	r16, 0x08	; 8
    1360:	23 2f       	mov	r18, r19
    1362:	34 2f       	mov	r19, r20
    1364:	45 2f       	mov	r20, r21
    1366:	56 2f       	mov	r21, r22
    1368:	67 2f       	mov	r22, r23
    136a:	78 2f       	mov	r23, r24
    136c:	89 2f       	mov	r24, r25
    136e:	90 2d       	mov	r25, r0
    1370:	f4 cf       	rjmp	.-24     	; 0x135a <__lshrdi3+0x6>
    1372:	05 94       	asr	r0
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	57 95       	ror	r21
    137e:	47 95       	ror	r20
    1380:	37 95       	ror	r19
    1382:	27 95       	ror	r18
    1384:	0a 95       	dec	r16
    1386:	aa f7       	brpl	.-22     	; 0x1372 <__lshrdi3+0x1e>
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <__tablejump2__>:
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31

00001390 <__tablejump__>:
    1390:	05 90       	lpm	r0, Z+
    1392:	f4 91       	lpm	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	09 94       	ijmp

00001398 <__umulhisi3>:
    1398:	a2 9f       	mul	r26, r18
    139a:	b0 01       	movw	r22, r0
    139c:	b3 9f       	mul	r27, r19
    139e:	c0 01       	movw	r24, r0
    13a0:	a3 9f       	mul	r26, r19
    13a2:	70 0d       	add	r23, r0
    13a4:	81 1d       	adc	r24, r1
    13a6:	11 24       	eor	r1, r1
    13a8:	91 1d       	adc	r25, r1
    13aa:	b2 9f       	mul	r27, r18
    13ac:	70 0d       	add	r23, r0
    13ae:	81 1d       	adc	r24, r1
    13b0:	11 24       	eor	r1, r1
    13b2:	91 1d       	adc	r25, r1
    13b4:	08 95       	ret

000013b6 <_exit>:
    13b6:	f8 94       	cli

000013b8 <__stop_program>:
    13b8:	ff cf       	rjmp	.-2      	; 0x13b8 <__stop_program>
