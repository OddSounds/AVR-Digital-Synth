
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800100  00001386  0000141a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  00800278  00800278  00001592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014c1  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000349  00000000  00000000  00002af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000985  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012e7  00000000  00000000  00003e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__ctors_end>
       4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       8:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      10:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      18:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      1c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      20:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      24:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_9>
      28:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      2c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      30:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      34:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      38:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      3c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      40:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      44:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      48:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_18>
      4c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      50:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      54:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_21>
      58:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      5c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      60:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      64:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z5setupv+0x182>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <__vector_9+0x2c0>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <__vector_9+0x30c>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <__do_global_ctors+0x18>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z5setupv+0x1e0>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <__vector_18+0x29a>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <__vector_18+0x2c0>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <__vector_18+0xf6>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <__muldi3+0x34>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <__vector_18+0xdc>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z5setupv+0x198>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <__do_global_ctors+0x12>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <__do_clear_bss>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <_Z5setupv+0x42>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <__vector_18+0x9e>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <__muluhisi3+0xa>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <__vector_18+0xc4>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <__muldi3+0x20>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <__vector_9+0x256>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <.do_clear_bss_loop>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <__ctors_start>:
     668:	82 08       	sbc	r8, r2

0000066a <__ctors_end>:
     66a:	11 24       	eor	r1, r1
     66c:	1f be       	out	0x3f, r1	; 63
     66e:	cf ef       	ldi	r28, 0xFF	; 255
     670:	d8 e0       	ldi	r29, 0x08	; 8
     672:	de bf       	out	0x3e, r29	; 62
     674:	cd bf       	out	0x3d, r28	; 61

00000676 <__do_copy_data>:
     676:	12 e0       	ldi	r17, 0x02	; 2
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	e6 e8       	ldi	r30, 0x86	; 134
     67e:	f3 e1       	ldi	r31, 0x13	; 19
     680:	02 c0       	rjmp	.+4      	; 0x686 <__do_copy_data+0x10>
     682:	05 90       	lpm	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	a8 37       	cpi	r26, 0x78	; 120
     688:	b1 07       	cpc	r27, r17
     68a:	d9 f7       	brne	.-10     	; 0x682 <__do_copy_data+0xc>

0000068c <__do_clear_bss>:
     68c:	23 e0       	ldi	r18, 0x03	; 3
     68e:	a8 e7       	ldi	r26, 0x78	; 120
     690:	b2 e0       	ldi	r27, 0x02	; 2
     692:	01 c0       	rjmp	.+2      	; 0x696 <.do_clear_bss_start>

00000694 <.do_clear_bss_loop>:
     694:	1d 92       	st	X+, r1

00000696 <.do_clear_bss_start>:
     696:	a0 3f       	cpi	r26, 0xF0	; 240
     698:	b2 07       	cpc	r27, r18
     69a:	e1 f7       	brne	.-8      	; 0x694 <.do_clear_bss_loop>

0000069c <__do_global_ctors>:
     69c:	16 e0       	ldi	r17, 0x06	; 6
     69e:	ca e6       	ldi	r28, 0x6A	; 106
     6a0:	d6 e0       	ldi	r29, 0x06	; 6
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__do_global_ctors+0x10>
     6a4:	22 97       	sbiw	r28, 0x02	; 2
     6a6:	fe 01       	movw	r30, r28
     6a8:	0e 94 ae 09 	call	0x135c	; 0x135c <__tablejump__>
     6ac:	c8 36       	cpi	r28, 0x68	; 104
     6ae:	d1 07       	cpc	r29, r17
     6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__do_global_ctors+0x8>
     6b2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <main>
     6b6:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <_exit>

000006ba <__bad_interrupt>:
     6ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006be <_Z5setupv>:
		_delay_us(100);
	}
}

void setup()
{
     6be:	2f 92       	push	r2
     6c0:	3f 92       	push	r3
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	2c 97       	sbiw	r28, 0x0c	; 12
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e8       	ldi	r25, 0x80	; 128
     6f6:	ac e8       	ldi	r26, 0x8C	; 140
     6f8:	ba e7       	ldi	r27, 0x7A	; 122
     6fa:	80 93 96 03 	sts	0x0396, r24
     6fe:	90 93 97 03 	sts	0x0397, r25
     702:	a0 93 98 03 	sts	0x0398, r26
     706:	b0 93 99 03 	sts	0x0399, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9c 83       	std	Y+4, r25	; 0x04
     710:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
     712:	1a 82       	std	Y+2, r1	; 0x02
     714:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     716:	89 80       	ldd	r8, Y+1	; 0x01
     718:	9a 80       	ldd	r9, Y+2	; 0x02
     71a:	ab 80       	ldd	r10, Y+3	; 0x03
     71c:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     71e:	94 01       	movw	r18, r8
     720:	a5 01       	movw	r20, r10
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	00 e1       	ldi	r16, 0x10	; 16
     72c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     730:	a1 2c       	mov	r10, r1
     732:	e0 e8       	ldi	r30, 0x80	; 128
     734:	be 2e       	mov	r11, r30
     736:	fc e8       	ldi	r31, 0x8C	; 140
     738:	cf 2e       	mov	r12, r31
     73a:	aa e7       	ldi	r26, 0x7A	; 122
     73c:	da 2e       	mov	r13, r26
     73e:	e1 2c       	mov	r14, r1
     740:	f1 2c       	mov	r15, r1
     742:	00 e0       	ldi	r16, 0x00	; 0
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivdi3>
     74a:	20 93 92 03 	sts	0x0392, r18
     74e:	30 93 93 03 	sts	0x0393, r19
     752:	40 93 94 03 	sts	0x0394, r20
     756:	50 93 95 03 	sts	0x0395, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9c 83       	std	Y+4, r25	; 0x04
     760:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     762:	89 80       	ldd	r8, Y+1	; 0x01
     764:	9a 80       	ldd	r9, Y+2	; 0x02
     766:	ab 80       	ldd	r10, Y+3	; 0x03
     768:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     76a:	94 01       	movw	r18, r8
     76c:	a5 01       	movw	r20, r10
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 e1       	ldi	r16, 0x10	; 16
     778:	0e 94 75 09 	call	0x12ea	; 0x12ea <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     77c:	a1 2c       	mov	r10, r1
     77e:	b0 e8       	ldi	r27, 0x80	; 128
     780:	bb 2e       	mov	r11, r27
     782:	0c e8       	ldi	r16, 0x8C	; 140
     784:	c0 2e       	mov	r12, r16
     786:	ea e7       	ldi	r30, 0x7A	; 122
     788:	de 2e       	mov	r13, r30
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivdi3>
     794:	39 01       	movw	r6, r18
     796:	4a 01       	movw	r8, r20
     798:	1b 01       	movw	r2, r22
     79a:	2c 01       	movw	r4, r24
     79c:	32 2f       	mov	r19, r18
     79e:	30 93 9a 03 	sts	0x039A, r19
     7a2:	70 92 9b 03 	sts	0x039B, r7
     7a6:	80 92 9c 03 	sts	0x039C, r8
     7aa:	90 92 9d 03 	sts	0x039D, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     7ae:	eb ed       	ldi	r30, 0xDB	; 219
     7b0:	f3 e0       	ldi	r31, 0x03	; 3
     7b2:	80 e7       	ldi	r24, 0x70	; 112
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	93 83       	std	Z+3, r25	; 0x03
     7b8:	82 83       	std	Z+2, r24	; 0x02
	*((unsigned short*)&(b)) = 0;
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     7be:	00 91 db 03 	lds	r16, 0x03DB
     7c2:	10 91 dc 03 	lds	r17, 0x03DC
     7c6:	20 91 dd 03 	lds	r18, 0x03DD
     7ca:	30 91 de 03 	lds	r19, 0x03DE
	temp *= rhs;
     7ce:	58 01       	movw	r10, r16
     7d0:	69 01       	movw	r12, r18
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	93 01       	movw	r18, r6
     7d8:	a4 01       	movw	r20, r8
     7da:	b1 01       	movw	r22, r2
     7dc:	c2 01       	movw	r24, r4
     7de:	0e 94 92 08 	call	0x1124	; 0x1124 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     7e2:	00 e1       	ldi	r16, 0x10	; 16
     7e4:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     7e8:	20 93 d0 03 	sts	0x03D0, r18
     7ec:	30 93 d1 03 	sts	0x03D1, r19
     7f0:	40 93 d2 03 	sts	0x03D2, r20
     7f4:	50 93 d3 03 	sts	0x03D3, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     7f8:	e2 ec       	ldi	r30, 0xC2	; 194
     7fa:	f3 e0       	ldi	r31, 0x03	; 3
     7fc:	a0 e7       	ldi	r26, 0x70	; 112
     7fe:	b3 e0       	ldi	r27, 0x03	; 3
     800:	b3 83       	std	Z+3, r27	; 0x03
     802:	a2 83       	std	Z+2, r26	; 0x02
	*((unsigned short*)&(b)) = 0;
     804:	11 82       	std	Z+1, r1	; 0x01
     806:	10 82       	st	Z, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     808:	00 91 c2 03 	lds	r16, 0x03C2
     80c:	10 91 c3 03 	lds	r17, 0x03C3
     810:	20 91 c4 03 	lds	r18, 0x03C4
     814:	30 91 c5 03 	lds	r19, 0x03C5
	temp *= rhs;
     818:	58 01       	movw	r10, r16
     81a:	69 01       	movw	r12, r18
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	93 01       	movw	r18, r6
     822:	a4 01       	movw	r20, r8
     824:	b1 01       	movw	r22, r2
     826:	c2 01       	movw	r24, r4
     828:	0e 94 92 08 	call	0x1124	; 0x1124 <__muldi3>
	
	return (unsigned long)(temp >> 16);
     82c:	00 e1       	ldi	r16, 0x10	; 16
     82e:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     832:	20 93 ba 03 	sts	0x03BA, r18
     836:	30 93 bb 03 	sts	0x03BB, r19
     83a:	40 93 bc 03 	sts	0x03BC, r20
     83e:	50 93 bd 03 	sts	0x03BD, r21
{
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
     842:	8f e0       	ldi	r24, 0x0F	; 15
     844:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1);
     848:	8a e8       	ldi	r24, 0x8A	; 138
     84a:	80 93 7a 00 	sts	0x007A, r24
	sei();
}

void uartInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     84e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     852:	8f e1       	ldi	r24, 0x1F	; 31
     854:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     858:	88 e9       	ldi	r24, 0x98	; 152
     85a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	80 93 c2 00 	sts	0x00C2, r24
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
     864:	e1 eb       	ldi	r30, 0xB1	; 177
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
	cbi (TCCR2B, CS21);
     86e:	80 81       	ld	r24, Z
     870:	8d 7f       	andi	r24, 0xFD	; 253
     872:	80 83       	st	Z, r24
	cbi (TCCR2B, CS22);
     874:	80 81       	ld	r24, Z
     876:	8b 7f       	andi	r24, 0xFB	; 251
     878:	80 83       	st	Z, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
     87a:	a0 eb       	ldi	r26, 0xB0	; 176
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	8c 91       	ld	r24, X
     880:	8f 7b       	andi	r24, 0xBF	; 191
     882:	8c 93       	st	X, r24
	sbi (TCCR2A, COM2A1);
     884:	8c 91       	ld	r24, X
     886:	80 68       	ori	r24, 0x80	; 128
     888:	8c 93       	st	X, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
     88a:	8c 91       	ld	r24, X
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	8c 93       	st	X, r24
	cbi (TCCR2A, WGM21);
     890:	8c 91       	ld	r24, X
     892:	8d 7f       	andi	r24, 0xFD	; 253
     894:	8c 93       	st	X, r24
	cbi (TCCR2B, WGM22);
     896:	80 81       	ld	r24, Z
     898:	87 7f       	andi	r24, 0xF7	; 247
     89a:	80 83       	st	Z, r24
	adcInit();
	uartInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
     89c:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
     89e:	e0 e7       	ldi	r30, 0x70	; 112
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 83       	st	Z, r24
	sei();
     8a8:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
     8aa:	80 91 c6 03 	lds	r24, 0x03C6
     8ae:	e0 91 ce 03 	lds	r30, 0x03CE
     8b2:	ff 27       	eor	r31, r31
     8b4:	e7 fd       	sbrc	r30, 7
     8b6:	f0 95       	com	r31
     8b8:	e8 0f       	add	r30, r24
     8ba:	f1 1d       	adc	r31, r1
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e6 5f       	subi	r30, 0xF6	; 246
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	c0 80       	ld	r12, Z
     8ca:	d1 80       	ldd	r13, Z+1	; 0x01
     8cc:	e2 80       	ldd	r14, Z+2	; 0x02
     8ce:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
     8d0:	80 91 b7 03 	lds	r24, 0x03B7
     8d4:	90 91 ae 03 	lds	r25, 0x03AE
     8d8:	e0 91 b8 03 	lds	r30, 0x03B8
     8dc:	ff 27       	eor	r31, r31
     8de:	e7 fd       	sbrc	r30, 7
     8e0:	f0 95       	com	r31
     8e2:	e9 0f       	add	r30, r25
     8e4:	f1 1d       	adc	r31, r1
     8e6:	bc e0       	ldi	r27, 0x0C	; 12
     8e8:	8b 02       	muls	r24, r27
     8ea:	e0 0d       	add	r30, r0
     8ec:	f1 1d       	adc	r31, r1
     8ee:	11 24       	eor	r1, r1
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	e6 5f       	subi	r30, 0xF6	; 246
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	40 80       	ld	r4, Z
     8fe:	51 80       	ldd	r5, Z+1	; 0x01
     900:	62 80       	ldd	r6, Z+2	; 0x02
     902:	73 80       	ldd	r7, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
     904:	60 91 cf 03 	lds	r22, 0x03CF
     908:	87 e2       	ldi	r24, 0x27	; 39
     90a:	68 02       	muls	r22, r24
     90c:	b0 01       	movw	r22, r0
     90e:	11 24       	eor	r1, r1
     910:	88 27       	eor	r24, r24
     912:	77 fd       	sbrc	r23, 7
     914:	80 95       	com	r24
     916:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     918:	a7 01       	movw	r20, r14
     91a:	96 01       	movw	r18, r12
     91c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     920:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     924:	2d 83       	std	Y+5, r18	; 0x05
     926:	3e 83       	std	Y+6, r19	; 0x06
     928:	4f 83       	std	Y+7, r20	; 0x07
     92a:	58 87       	std	Y+8, r21	; 0x08
     92c:	69 87       	std	Y+9, r22	; 0x09
     92e:	7a 87       	std	Y+10, r23	; 0x0a
     930:	8b 87       	std	Y+11, r24	; 0x0b
     932:	9c 87       	std	Y+12, r25	; 0x0c
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	af 81       	ldd	r26, Y+7	; 0x07
     93a:	b8 85       	ldd	r27, Y+8	; 0x08
     93c:	c8 0e       	add	r12, r24
     93e:	d9 1e       	adc	r13, r25
     940:	ea 1e       	adc	r14, r26
     942:	fb 1e       	adc	r15, r27
     944:	c0 92 db 03 	sts	0x03DB, r12
     948:	d0 92 dc 03 	sts	0x03DC, r13
     94c:	e0 92 dd 03 	sts	0x03DD, r14
     950:	f0 92 de 03 	sts	0x03DE, r15

	centsConst = 0x27*osc2CentsShift;
     954:	20 91 b9 03 	lds	r18, 0x03B9
     958:	97 e2       	ldi	r25, 0x27	; 39
     95a:	29 02       	muls	r18, r25
     95c:	90 01       	movw	r18, r0
     95e:	11 24       	eor	r1, r1
     960:	44 27       	eor	r20, r20
     962:	37 fd       	sbrc	r19, 7
     964:	40 95       	com	r20
     966:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     968:	c3 01       	movw	r24, r6
     96a:	b2 01       	movw	r22, r4
     96c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     970:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     974:	49 01       	movw	r8, r18
     976:	5a 01       	movw	r10, r20

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
     978:	84 0c       	add	r8, r4
     97a:	95 1c       	adc	r9, r5
     97c:	a6 1c       	adc	r10, r6
     97e:	b7 1c       	adc	r11, r7
     980:	80 92 c2 03 	sts	0x03C2, r8
     984:	90 92 c3 03 	sts	0x03C3, r9
     988:	a0 92 c4 03 	sts	0x03C4, r10
     98c:	b0 92 c5 03 	sts	0x03C5, r11

	cli();
     990:	f8 94       	cli
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
     992:	20 91 db 03 	lds	r18, 0x03DB
     996:	30 91 dc 03 	lds	r19, 0x03DC
     99a:	40 91 dd 03 	lds	r20, 0x03DD
     99e:	50 91 de 03 	lds	r21, 0x03DE
     9a2:	c0 90 9a 03 	lds	r12, 0x039A
     9a6:	d0 90 9b 03 	lds	r13, 0x039B
     9aa:	e0 90 9c 03 	lds	r14, 0x039C
     9ae:	f0 90 9d 03 	lds	r15, 0x039D
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     9ba:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     9be:	20 93 d0 03 	sts	0x03D0, r18
     9c2:	30 93 d1 03 	sts	0x03D1, r19
     9c6:	40 93 d2 03 	sts	0x03D2, r20
     9ca:	50 93 d3 03 	sts	0x03D3, r21
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
     9ce:	60 91 c2 03 	lds	r22, 0x03C2
     9d2:	70 91 c3 03 	lds	r23, 0x03C3
     9d6:	80 91 c4 03 	lds	r24, 0x03C4
     9da:	90 91 c5 03 	lds	r25, 0x03C5
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     9de:	a7 01       	movw	r20, r14
     9e0:	96 01       	movw	r18, r12
     9e2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     9e6:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     9ea:	20 93 ba 03 	sts	0x03BA, r18
     9ee:	30 93 bb 03 	sts	0x03BB, r19
     9f2:	40 93 bc 03 	sts	0x03BC, r20
     9f6:	50 93 bd 03 	sts	0x03BD, r21
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     9fa:	60 91 9f 03 	lds	r22, 0x039F
     9fe:	70 91 a0 03 	lds	r23, 0x03A0
     a02:	80 91 a1 03 	lds	r24, 0x03A1
     a06:	90 91 a2 03 	lds	r25, 0x03A2
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     a12:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     a16:	20 93 a9 03 	sts	0x03A9, r18
     a1a:	30 93 aa 03 	sts	0x03AA, r19
     a1e:	40 93 ab 03 	sts	0x03AB, r20
     a22:	50 93 ac 03 	sts	0x03AC, r21

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	sei();
     a26:	78 94       	sei
	
	sbi (TIMSK2,TOIE2);
	sei();

	noteUpdate();
}
     a28:	2c 96       	adiw	r28, 0x0c	; 12
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	3f 90       	pop	r3
     a56:	2f 90       	pop	r2
     a58:	08 95       	ret

00000a5a <main>:

void noteUpdate(void);

int main(void)
{
	setup();
     a5a:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z5setupv>
	
	while(1)
	{
		sbi(ADCSRA, ADSC);
     a5e:	80 91 7a 00 	lds	r24, 0x007A
     a62:	80 64       	ori	r24, 0x40	; 64
     a64:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a68:	8f e8       	ldi	r24, 0x8F	; 143
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <main+0x12>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <main+0x18>
     a72:	00 00       	nop
     a74:	f4 cf       	rjmp	.-24     	; 0xa5e <main+0x4>

00000a76 <__vector_18>:
		lfsrState ^= 0xB400;
	}
}

ISR(USART_RX_vect)
{
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg = UDR0;
     ac0:	80 91 c6 00 	lds	r24, 0x00C6
	
	if(msg & 0x80) //New command
     ac4:	87 fd       	sbrc	r24, 7
     ac6:	59 c0       	rjmp	.+178    	; 0xb7a <__vector_18+0x104>
		
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
     ac8:	90 91 df 03 	lds	r25, 0x03DF
     acc:	e9 2f       	mov	r30, r25
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	e0 52       	subi	r30, 0x20	; 32
     ad2:	fc 4f       	sbci	r31, 0xFC	; 252
     ad4:	80 83       	st	Z, r24
		commandCount++;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	89 0f       	add	r24, r25
     ada:	80 93 df 03 	sts	0x03DF, r24
		
		if(commandCount == 3)
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	31 f1       	breq	.+76     	; 0xb2e <__vector_18+0xb8>
				
				break;
			}
		}
	}
}
     ae2:	28 96       	adiw	r28, 0x08	; 8
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	6f 90       	pop	r6
     b20:	5f 90       	pop	r5
     b22:	4f 90       	pop	r4
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti
		commandBytes[commandCount] = msg;
		commandCount++;
		
		if(commandCount == 3)
		{
			commandCount = 1;
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 df 03 	sts	0x03DF, r25

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
     b34:	80 91 e0 03 	lds	r24, 0x03E0
     b38:	80 39       	cpi	r24, 0x90	; 144
     b3a:	31 f1       	breq	.+76     	; 0xb88 <__vector_18+0x112>
				commandBytes[0] = NOTE_OFF;

			switch(commandBytes[0])
     b3c:	80 38       	cpi	r24, 0x80	; 128
     b3e:	89 f6       	brne	.-94     	; 0xae2 <__vector_18+0x6c>
				
				noteUpdate();
				break;
				
				case NOTE_OFF:
				if(osc1Note == commandBytes[1] - MIDI_OFFSET)
     b40:	20 91 c6 03 	lds	r18, 0x03C6
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	80 91 e1 03 	lds	r24, 0x03E1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	45 97       	sbiw	r24, 0x15	; 21
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	39 f6       	brne	.-114    	; 0xae2 <__vector_18+0x6c>
				{
					if(keyArrayWrite == 0)
     b54:	e0 91 79 03 	lds	r30, 0x0379
     b58:	ee 23       	and	r30, r30
     b5a:	09 f4       	brne	.+2      	; 0xb5e <__vector_18+0xe8>
     b5c:	ef c0       	rjmp	.+478    	; 0xd3c <__vector_18+0x2c6>
					{
						notePlaying = false;
					}
					else
					{
						keyArrayWrite--;
     b5e:	e1 50       	subi	r30, 0x01	; 1
     b60:	e0 93 79 03 	sts	0x0379, r30
						osc2Note = osc1Note = keyArray[keyArrayWrite];
     b64:	ff 27       	eor	r31, r31
     b66:	e7 fd       	sbrc	r30, 7
     b68:	f0 95       	com	r31
     b6a:	e6 58       	subi	r30, 0x86	; 134
     b6c:	fc 4f       	sbci	r31, 0xFC	; 252
     b6e:	80 81       	ld	r24, Z
     b70:	80 93 c6 03 	sts	0x03C6, r24
     b74:	80 93 ae 03 	sts	0x03AE, r24
     b78:	b4 cf       	rjmp	.-152    	; 0xae2 <__vector_18+0x6c>
{
	unsigned char msg = UDR0;
	
	if(msg & 0x80) //New command
	{
		commandBytes[0] = msg & 0xF0;
     b7a:	80 7f       	andi	r24, 0xF0	; 240
     b7c:	80 93 e0 03 	sts	0x03E0, r24
		
		commandCount = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 df 03 	sts	0x03DF, r24
     b86:	ad cf       	rjmp	.-166    	; 0xae2 <__vector_18+0x6c>
		
		if(commandCount == 3)
		{
			commandCount = 1;

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
     b88:	80 91 e2 03 	lds	r24, 0x03E2
     b8c:	81 11       	cpse	r24, r1
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__vector_18+0x122>
				commandBytes[0] = NOTE_OFF;
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	80 93 e0 03 	sts	0x03E0, r24
     b96:	d4 cf       	rjmp	.-88     	; 0xb40 <__vector_18+0xca>

			switch(commandBytes[0])
			{
				case NOTE_ON:
				notePlaying = true;
     b98:	90 93 06 01 	sts	0x0106, r25
				
				osc2Note = osc1Note = commandBytes[1] - MIDI_OFFSET;
     b9c:	e0 91 e1 03 	lds	r30, 0x03E1
     ba0:	e5 51       	subi	r30, 0x15	; 21
     ba2:	e0 93 c6 03 	sts	0x03C6, r30
     ba6:	e0 93 ae 03 	sts	0x03AE, r30
				keyArray[keyArrayWrite] = osc2Note;
     baa:	80 91 79 03 	lds	r24, 0x0379
     bae:	a8 2f       	mov	r26, r24
     bb0:	bb 27       	eor	r27, r27
     bb2:	a7 fd       	sbrc	r26, 7
     bb4:	b0 95       	com	r27
     bb6:	a6 58       	subi	r26, 0x86	; 134
     bb8:	bc 4f       	sbci	r27, 0xFC	; 252
     bba:	ec 93       	st	X, r30
				keyArrayWrite++;
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	80 93 79 03 	sts	0x0379, r24
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 91 ce 03 	lds	r24, 0x03CE
     bc8:	df 01       	movw	r26, r30
     bca:	a8 0f       	add	r26, r24
     bcc:	b1 1d       	adc	r27, r1
     bce:	87 fd       	sbrc	r24, 7
     bd0:	ba 95       	dec	r27
     bd2:	aa 0f       	add	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	aa 0f       	add	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	a6 5f       	subi	r26, 0xF6	; 246
     bdc:	be 4f       	sbci	r27, 0xFE	; 254
     bde:	cd 90       	ld	r12, X+
     be0:	dd 90       	ld	r13, X+
     be2:	ed 90       	ld	r14, X+
     be4:	fc 90       	ld	r15, X
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
     be6:	80 91 b7 03 	lds	r24, 0x03B7
     bea:	90 91 b8 03 	lds	r25, 0x03B8
     bee:	e9 0f       	add	r30, r25
     bf0:	f1 1d       	adc	r31, r1
     bf2:	97 fd       	sbrc	r25, 7
     bf4:	fa 95       	dec	r31
     bf6:	9c e0       	ldi	r25, 0x0C	; 12
     bf8:	89 02       	muls	r24, r25
     bfa:	e0 0d       	add	r30, r0
     bfc:	f1 1d       	adc	r31, r1
     bfe:	11 24       	eor	r1, r1
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	e6 5f       	subi	r30, 0xF6	; 246
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	40 80       	ld	r4, Z
     c0e:	51 80       	ldd	r5, Z+1	; 0x01
     c10:	62 80       	ldd	r6, Z+2	; 0x02
     c12:	73 80       	ldd	r7, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
     c14:	20 91 cf 03 	lds	r18, 0x03CF
     c18:	a7 e2       	ldi	r26, 0x27	; 39
     c1a:	2a 02       	muls	r18, r26
     c1c:	90 01       	movw	r18, r0
     c1e:	11 24       	eor	r1, r1
     c20:	44 27       	eor	r20, r20
     c22:	37 fd       	sbrc	r19, 7
     c24:	40 95       	com	r20
     c26:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     c30:	00 e1       	ldi	r16, 0x10	; 16
     c32:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     c36:	29 83       	std	Y+1, r18	; 0x01
     c38:	3a 83       	std	Y+2, r19	; 0x02
     c3a:	4b 83       	std	Y+3, r20	; 0x03
     c3c:	5c 83       	std	Y+4, r21	; 0x04
     c3e:	6d 83       	std	Y+5, r22	; 0x05
     c40:	7e 83       	std	Y+6, r23	; 0x06
     c42:	8f 83       	std	Y+7, r24	; 0x07
     c44:	98 87       	std	Y+8, r25	; 0x08
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	ab 81       	ldd	r26, Y+3	; 0x03
     c4c:	bc 81       	ldd	r27, Y+4	; 0x04
     c4e:	c8 0e       	add	r12, r24
     c50:	d9 1e       	adc	r13, r25
     c52:	ea 1e       	adc	r14, r26
     c54:	fb 1e       	adc	r15, r27
     c56:	c0 92 db 03 	sts	0x03DB, r12
     c5a:	d0 92 dc 03 	sts	0x03DC, r13
     c5e:	e0 92 dd 03 	sts	0x03DD, r14
     c62:	f0 92 de 03 	sts	0x03DE, r15

	centsConst = 0x27*osc2CentsShift;
     c66:	20 91 b9 03 	lds	r18, 0x03B9
     c6a:	97 e2       	ldi	r25, 0x27	; 39
     c6c:	29 02       	muls	r18, r25
     c6e:	90 01       	movw	r18, r0
     c70:	11 24       	eor	r1, r1
     c72:	44 27       	eor	r20, r20
     c74:	37 fd       	sbrc	r19, 7
     c76:	40 95       	com	r20
     c78:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     c7a:	c3 01       	movw	r24, r6
     c7c:	b2 01       	movw	r22, r4
     c7e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     c82:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     c86:	49 01       	movw	r8, r18
     c88:	5a 01       	movw	r10, r20

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
     c8a:	84 0c       	add	r8, r4
     c8c:	95 1c       	adc	r9, r5
     c8e:	a6 1c       	adc	r10, r6
     c90:	b7 1c       	adc	r11, r7
     c92:	80 92 c2 03 	sts	0x03C2, r8
     c96:	90 92 c3 03 	sts	0x03C3, r9
     c9a:	a0 92 c4 03 	sts	0x03C4, r10
     c9e:	b0 92 c5 03 	sts	0x03C5, r11

	cli();
     ca2:	f8 94       	cli
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
     ca4:	20 91 db 03 	lds	r18, 0x03DB
     ca8:	30 91 dc 03 	lds	r19, 0x03DC
     cac:	40 91 dd 03 	lds	r20, 0x03DD
     cb0:	50 91 de 03 	lds	r21, 0x03DE
     cb4:	c0 90 9a 03 	lds	r12, 0x039A
     cb8:	d0 90 9b 03 	lds	r13, 0x039B
     cbc:	e0 90 9c 03 	lds	r14, 0x039C
     cc0:	f0 90 9d 03 	lds	r15, 0x039D
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     ccc:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     cd0:	20 93 d0 03 	sts	0x03D0, r18
     cd4:	30 93 d1 03 	sts	0x03D1, r19
     cd8:	40 93 d2 03 	sts	0x03D2, r20
     cdc:	50 93 d3 03 	sts	0x03D3, r21
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
     ce0:	60 91 c2 03 	lds	r22, 0x03C2
     ce4:	70 91 c3 03 	lds	r23, 0x03C3
     ce8:	80 91 c4 03 	lds	r24, 0x03C4
     cec:	90 91 c5 03 	lds	r25, 0x03C5
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     cf0:	a7 01       	movw	r20, r14
     cf2:	96 01       	movw	r18, r12
     cf4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     cf8:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     cfc:	20 93 ba 03 	sts	0x03BA, r18
     d00:	30 93 bb 03 	sts	0x03BB, r19
     d04:	40 93 bc 03 	sts	0x03BC, r20
     d08:	50 93 bd 03 	sts	0x03BD, r21
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     d0c:	60 91 9f 03 	lds	r22, 0x039F
     d10:	70 91 a0 03 	lds	r23, 0x03A0
     d14:	80 91 a1 03 	lds	r24, 0x03A1
     d18:	90 91 a2 03 	lds	r25, 0x03A2
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     d1c:	a7 01       	movw	r20, r14
     d1e:	96 01       	movw	r18, r12
     d20:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     d24:	0e 94 90 09 	call	0x1320	; 0x1320 <__lshrdi3>
     d28:	20 93 a9 03 	sts	0x03A9, r18
     d2c:	30 93 aa 03 	sts	0x03AA, r19
     d30:	40 93 ab 03 	sts	0x03AB, r20
     d34:	50 93 ac 03 	sts	0x03AC, r21

	cli();
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	sei();
     d38:	78 94       	sei
     d3a:	d3 ce       	rjmp	.-602    	; 0xae2 <__vector_18+0x6c>
				case NOTE_OFF:
				if(osc1Note == commandBytes[1] - MIDI_OFFSET)
				{
					if(keyArrayWrite == 0)
					{
						notePlaying = false;
     d3c:	10 92 06 01 	sts	0x0106, r1
     d40:	d0 ce       	rjmp	.-608    	; 0xae2 <__vector_18+0x6c>

00000d42 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
     d5a:	40 91 ef 03 	lds	r20, 0x03EF
     d5e:	84 2f       	mov	r24, r20
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	20 91 78 00 	lds	r18, 0x0078
     d66:	30 91 79 00 	lds	r19, 0x0079
     d6a:	fc 01       	movw	r30, r24
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	e9 51       	subi	r30, 0x19	; 25
     d72:	fc 4f       	sbci	r31, 0xFC	; 252
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
	updateADC[adcSelect] = true;
     d78:	fc 01       	movw	r30, r24
     d7a:	ed 51       	subi	r30, 0x1D	; 29
     d7c:	fc 4f       	sbci	r31, 0xFC	; 252
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	20 83       	st	Z, r18

	adcSelect++;
     d82:	4f 5f       	subi	r20, 0xFF	; 255
	
	if(adcSelect > 3)
     d84:	44 30       	cpi	r20, 0x04	; 4
     d86:	88 f0       	brcs	.+34     	; 0xdaa <__vector_21+0x68>
	adcSelect = 0;
     d88:	10 92 ef 03 	sts	0x03EF, r1
     d8c:	40 e0       	ldi	r20, 0x00	; 0
	
	ADMUX = adcSelect;
     d8e:	40 93 7c 00 	sts	0x007C, r20
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti
ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;
	updateADC[adcSelect] = true;

	adcSelect++;
     daa:	40 93 ef 03 	sts	0x03EF, r20
     dae:	ef cf       	rjmp	.-34     	; 0xd8e <__vector_21+0x4c>

00000db0 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	9f 92       	push	r9
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <__vector_9+0x3a>
     dea:	00 d0       	rcall	.+0      	; 0xdec <__vector_9+0x3c>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
     df0:	80 91 06 01 	lds	r24, 0x0106
     df4:	88 23       	and	r24, r24
     df6:	09 f4       	brne	.+2      	; 0xdfa <__vector_9+0x4a>
     df8:	2e c1       	rjmp	.+604    	; 0x1056 <__vector_9+0x2a6>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
     dfa:	80 91 00 01 	lds	r24, 0x0100
     dfe:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
     e02:	ac 01       	movw	r20, r24
     e04:	56 95       	lsr	r21
     e06:	47 95       	ror	r20
	
	if(lsb == 1)
     e08:	80 fd       	sbrc	r24, 0
     e0a:	64 c1       	rjmp	.+712    	; 0x10d4 <__vector_9+0x324>
	{
		lfsrState ^= 0xB400;
     e0c:	50 93 01 01 	sts	0x0101, r21
     e10:	40 93 00 01 	sts	0x0100, r20
{
	if(notePlaying)
	{
		lfsrUpdate();
		
		osc1Phaccu[0] = osc1Phaccu[1];
     e14:	90 90 d9 03 	lds	r9, 0x03D9
     e18:	90 92 d8 03 	sts	0x03D8, r9
		osc1Phaccu[1] = osc1Phaccu[2];
     e1c:	a0 90 da 03 	lds	r10, 0x03DA
     e20:	a0 92 d9 03 	sts	0x03D9, r10
		osc1Phaccu[2] = *((unsigned char*)(&osc1CurPhaccu)+2);
     e24:	b0 90 d6 03 	lds	r11, 0x03D6
     e28:	b0 92 da 03 	sts	0x03DA, r11
		
		osc1CurPhaccu += osc1TWord;
     e2c:	80 91 d0 03 	lds	r24, 0x03D0
     e30:	90 91 d1 03 	lds	r25, 0x03D1
     e34:	a0 91 d2 03 	lds	r26, 0x03D2
     e38:	b0 91 d3 03 	lds	r27, 0x03D3
     e3c:	00 91 d4 03 	lds	r16, 0x03D4
     e40:	10 91 d5 03 	lds	r17, 0x03D5
     e44:	20 91 d6 03 	lds	r18, 0x03D6
     e48:	30 91 d7 03 	lds	r19, 0x03D7
     e4c:	80 0f       	add	r24, r16
     e4e:	91 1f       	adc	r25, r17
     e50:	a2 1f       	adc	r26, r18
     e52:	b3 1f       	adc	r27, r19
     e54:	80 93 d4 03 	sts	0x03D4, r24
     e58:	90 93 d5 03 	sts	0x03D5, r25
     e5c:	a0 93 d6 03 	sts	0x03D6, r26
     e60:	b0 93 d7 03 	sts	0x03D7, r27

		osc1Out[0] = osc1Out[1];
     e64:	20 91 c9 03 	lds	r18, 0x03C9
     e68:	30 91 ca 03 	lds	r19, 0x03CA
     e6c:	30 93 c8 03 	sts	0x03C8, r19
     e70:	20 93 c7 03 	sts	0x03C7, r18
		osc1Out[1] = osc1Out[2];
     e74:	20 91 cb 03 	lds	r18, 0x03CB
     e78:	30 91 cc 03 	lds	r19, 0x03CC
     e7c:	30 93 ca 03 	sts	0x03CA, r19
     e80:	20 93 c9 03 	sts	0x03C9, r18
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + osc1Phaccu[2] + osc1PhaseShift);
     e84:	70 91 04 01 	lds	r23, 0x0104
     e88:	20 91 cd 03 	lds	r18, 0x03CD
     e8c:	0b 2d       	mov	r16, r11
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	02 0f       	add	r16, r18
     e92:	11 1d       	adc	r17, r1
     e94:	27 fd       	sbrc	r18, 7
     e96:	1a 95       	dec	r17
     e98:	27 2f       	mov	r18, r23
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	26 59       	subi	r18, 0x96	; 150
     ea2:	3d 4f       	sbci	r19, 0xFD	; 253
     ea4:	f9 01       	movw	r30, r18
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	02 0f       	add	r16, r18
     eac:	13 1f       	adc	r17, r19
     eae:	08 59       	subi	r16, 0x98	; 152
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	f8 01       	movw	r30, r16
     eb4:	04 91       	lpm	r16, Z
		
		if(osc1WaveForm == WAVE_NOISE)
     eb6:	75 30       	cpi	r23, 0x05	; 5
     eb8:	09 f4       	brne	.+2      	; 0xebc <__vector_9+0x10c>
     eba:	06 c1       	rjmp	.+524    	; 0x10c8 <__vector_9+0x318>
		
		osc1CurPhaccu += osc1TWord;

		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + osc1Phaccu[2] + osc1PhaseShift);
     ebc:	60 2f       	mov	r22, r16
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	70 93 cc 03 	sts	0x03CC, r23
     ec4:	60 93 cb 03 	sts	0x03CB, r22
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		osc2Phaccu += osc2TWord;
     ec8:	00 91 be 03 	lds	r16, 0x03BE
     ecc:	10 91 bf 03 	lds	r17, 0x03BF
     ed0:	20 91 c0 03 	lds	r18, 0x03C0
     ed4:	30 91 c1 03 	lds	r19, 0x03C1
     ed8:	c0 90 ba 03 	lds	r12, 0x03BA
     edc:	d0 90 bb 03 	lds	r13, 0x03BB
     ee0:	e0 90 bc 03 	lds	r14, 0x03BC
     ee4:	f0 90 bd 03 	lds	r15, 0x03BD
     ee8:	0c 0d       	add	r16, r12
     eea:	1d 1d       	adc	r17, r13
     eec:	2e 1d       	adc	r18, r14
     eee:	3f 1d       	adc	r19, r15
     ef0:	00 93 be 03 	sts	0x03BE, r16
     ef4:	10 93 bf 03 	sts	0x03BF, r17
     ef8:	20 93 c0 03 	sts	0x03C0, r18
     efc:	30 93 c1 03 	sts	0x03C1, r19

		if(osc2Sync && (osc1Phaccu[1] < osc1Phaccu[0] &&  osc1Phaccu[1] < osc1Phaccu[2]))
     f00:	20 91 af 03 	lds	r18, 0x03AF
     f04:	22 23       	and	r18, r18
     f06:	19 f0       	breq	.+6      	; 0xf0e <__vector_9+0x15e>
     f08:	a9 14       	cp	r10, r9
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__vector_9+0x15e>
     f0c:	e6 c0       	rjmp	.+460    	; 0x10da <__vector_9+0x32a>
		osc2Phaccu = osc1CurPhaccu;

		if(osc2WaveForm != WAVE_NOISE)
     f0e:	a0 91 03 01 	lds	r26, 0x0103
     f12:	a5 30       	cpi	r26, 0x05	; 5
     f14:	b1 f0       	breq	.+44     	; 0xf42 <__vector_9+0x192>
			osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
     f16:	80 91 b6 03 	lds	r24, 0x03B6
     f1a:	e0 91 c0 03 	lds	r30, 0x03C0
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	e8 0f       	add	r30, r24
     f22:	f1 1d       	adc	r31, r1
     f24:	87 fd       	sbrc	r24, 7
     f26:	fa 95       	dec	r31
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	aa 0f       	add	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	a6 59       	subi	r26, 0x96	; 150
     f30:	bd 4f       	sbci	r27, 0xFD	; 253
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	e8 0f       	add	r30, r24
     f38:	f9 1f       	adc	r31, r25
     f3a:	e8 59       	subi	r30, 0x98	; 152
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	44 91       	lpm	r20, Z
     f40:	50 e0       	ldi	r21, 0x00	; 0
		else
			osc2Out[2] = lfsrState;

		lfoPhaccu += lfoTWord;
     f42:	80 91 a5 03 	lds	r24, 0x03A5
     f46:	90 91 a6 03 	lds	r25, 0x03A6
     f4a:	a0 91 a7 03 	lds	r26, 0x03A7
     f4e:	b0 91 a8 03 	lds	r27, 0x03A8
     f52:	00 91 a9 03 	lds	r16, 0x03A9
     f56:	10 91 aa 03 	lds	r17, 0x03AA
     f5a:	20 91 ab 03 	lds	r18, 0x03AB
     f5e:	30 91 ac 03 	lds	r19, 0x03AC
     f62:	80 0f       	add	r24, r16
     f64:	91 1f       	adc	r25, r17
     f66:	a2 1f       	adc	r26, r18
     f68:	b3 1f       	adc	r27, r19
     f6a:	80 93 a5 03 	sts	0x03A5, r24
     f6e:	90 93 a6 03 	sts	0x03A6, r25
     f72:	a0 93 a7 03 	sts	0x03A7, r26
     f76:	b0 93 a8 03 	sts	0x03A8, r27
		lfoOut = pgm_read_byte(analogWaveTable + waveformOffset[lfoWaveForm] + (unsigned char)*((unsigned char*)(&lfoPhaccu)+2));
     f7a:	e0 91 07 01 	lds	r30, 0x0107
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	e6 59       	subi	r30, 0x96	; 150
     f86:	fd 4f       	sbci	r31, 0xFD	; 253
     f88:	80 91 a7 03 	lds	r24, 0x03A7
     f8c:	01 90       	ld	r0, Z+
     f8e:	f0 81       	ld	r31, Z
     f90:	e0 2d       	mov	r30, r0
     f92:	e8 0f       	add	r30, r24
     f94:	f1 1d       	adc	r31, r1
     f96:	e8 59       	subi	r30, 0x98	; 152
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	e4 91       	lpm	r30, Z
		lfoOut *= lfoDepth;
     f9c:	80 91 9e 03 	lds	r24, 0x039E
     fa0:	e8 9f       	mul	r30, r24
     fa2:	f0 01       	movw	r30, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	f0 93 a4 03 	sts	0x03A4, r31
     faa:	e0 93 a3 03 	sts	0x03A3, r30

		unsigned long temp = 0;

		osc1Out[2] *= osc1Weight;
     fae:	80 91 09 01 	lds	r24, 0x0109
     fb2:	86 9f       	mul	r24, r22
     fb4:	90 01       	movw	r18, r0
     fb6:	87 9f       	mul	r24, r23
     fb8:	30 0d       	add	r19, r0
     fba:	11 24       	eor	r1, r1
     fbc:	30 93 cc 03 	sts	0x03CC, r19
     fc0:	20 93 cb 03 	sts	0x03CB, r18
		osc2Out[2] *= osc2Weight;
     fc4:	60 91 08 01 	lds	r22, 0x0108
     fc8:	64 9f       	mul	r22, r20
     fca:	c0 01       	movw	r24, r0
     fcc:	65 9f       	mul	r22, r21
     fce:	90 0d       	add	r25, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	90 93 b5 03 	sts	0x03B5, r25
     fd6:	80 93 b4 03 	sts	0x03B4, r24

		if(ringMod)
     fda:	40 91 ad 03 	lds	r20, 0x03AD
     fde:	44 23       	and	r20, r20
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__vector_9+0x234>
     fe2:	59 c0       	rjmp	.+178    	; 0x1096 <__vector_9+0x2e6>
		temp = osc1Out[2] ^ osc2Out[2];
     fe4:	28 27       	eor	r18, r24
     fe6:	39 27       	eor	r19, r25
     fe8:	c9 01       	movw	r24, r18
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e0       	ldi	r27, 0x00	; 0
	}
}

inline void lowPassFilter(unsigned long *val)
{
	*val = (*val - prevOutput[0]);
     fee:	e0 91 8a 03 	lds	r30, 0x038A
     ff2:	f0 91 8b 03 	lds	r31, 0x038B
     ff6:	9c 01       	movw	r18, r24
     ff8:	ad 01       	movw	r20, r26
     ffa:	2e 1b       	sub	r18, r30
     ffc:	3f 0b       	sbc	r19, r31
     ffe:	41 09       	sbc	r20, r1
    1000:	51 09       	sbc	r21, r1
	*val = (*val*filterCutoff);
    1002:	a0 91 02 01 	lds	r26, 0x0102
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	0e 94 87 08 	call	0x110e	; 0x110e <__muluhisi3>
    100c:	69 83       	std	Y+1, r22	; 0x01
    100e:	7a 83       	std	Y+2, r23	; 0x02
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	9c 83       	std	Y+4, r25	; 0x04
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	8e 0f       	add	r24, r30
    101a:	9f 1f       	adc	r25, r31
	
	prevOutput[0] = *val;
    101c:	90 93 8b 03 	sts	0x038B, r25
    1020:	80 93 8a 03 	sts	0x038A, r24
inline void lowPassFilter(unsigned long *val)
{
	*val = (*val - prevOutput[0]);
	*val = (*val*filterCutoff);
	
	*val = *((unsigned short*)((unsigned char*)val + 1)) + prevOutput[0];
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	ab 83       	std	Y+3, r26	; 0x03
    102e:	bc 83       	std	Y+4, r27	; 0x04
		lowPassFilter(&temp);
		lowPassFilter(&temp);
		lowPassFilter(&temp);
		
		//out = delayLine[delayWriteIndex];
		delayLine[delayWriteIndex] = *((unsigned char*)(&temp) + 1);
    1030:	90 91 78 02 	lds	r25, 0x0278
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	e9 2f       	mov	r30, r25
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	e7 58       	subi	r30, 0x87	; 135
    103c:	fd 4f       	sbci	r31, 0xFD	; 253
    103e:	80 83       	st	Z, r24
		delayWriteIndex--;
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	90 93 78 02 	sts	0x0278, r25
		if(delayWriteIndex > delayLineTap)
    1046:	20 91 05 01 	lds	r18, 0x0105
    104a:	29 17       	cp	r18, r25
    104c:	10 f4       	brcc	.+4      	; 0x1052 <__vector_9+0x2a2>
			delayWriteIndex = delayLineTap;
    104e:	20 93 78 02 	sts	0x0278, r18
		
		OCR2A = *((unsigned char*)(&temp) + 1);
    1052:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

		if(ringMod)
		temp = osc1Out[2] ^ osc2Out[2];
		else
		{
			temp = osc1Out[2];
    1096:	89 01       	movw	r16, r18
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	09 83       	std	Y+1, r16	; 0x01
    109e:	1a 83       	std	Y+2, r17	; 0x02
    10a0:	2b 83       	std	Y+3, r18	; 0x03
    10a2:	3c 83       	std	Y+4, r19	; 0x04
			
			if(*((unsigned char*)(&osc1Out[2]) + 1)  < 128 != *((unsigned char*)(&osc2Out[2]) + 1)  < 128)
    10a4:	60 91 b5 03 	lds	r22, 0x03B5
    10a8:	70 91 cc 03 	lds	r23, 0x03CC
    10ac:	67 27       	eor	r22, r23
    10ae:	67 ff       	sbrs	r22, 7
    10b0:	20 c0       	rjmp	.+64     	; 0x10f2 <__vector_9+0x342>
			{
				__asm__("");
				temp -= (0x8000 - osc2Out[2]);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e8       	ldi	r23, 0x80	; 128
    10b6:	68 1b       	sub	r22, r24
    10b8:	79 0b       	sbc	r23, r25
    10ba:	d9 01       	movw	r26, r18
    10bc:	c8 01       	movw	r24, r16
    10be:	86 1b       	sub	r24, r22
    10c0:	97 0b       	sbc	r25, r23
    10c2:	a1 09       	sbc	r26, r1
    10c4:	b1 09       	sbc	r27, r1
				__asm__("");
    10c6:	93 cf       	rjmp	.-218    	; 0xfee <__vector_9+0x23e>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + osc1Phaccu[2] + osc1PhaseShift);
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;
    10c8:	50 93 cc 03 	sts	0x03CC, r21
    10cc:	40 93 cb 03 	sts	0x03CB, r20
    10d0:	ba 01       	movw	r22, r20
    10d2:	fa ce       	rjmp	.-524    	; 0xec8 <__vector_9+0x118>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    10d4:	64 eb       	ldi	r22, 0xB4	; 180
    10d6:	56 27       	eor	r21, r22
    10d8:	99 ce       	rjmp	.-718    	; 0xe0c <__vector_9+0x5c>
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		osc2Phaccu += osc2TWord;

		if(osc2Sync && (osc1Phaccu[1] < osc1Phaccu[0] &&  osc1Phaccu[1] < osc1Phaccu[2]))
    10da:	ab 14       	cp	r10, r11
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__vector_9+0x330>
    10de:	17 cf       	rjmp	.-466    	; 0xf0e <__vector_9+0x15e>
		osc2Phaccu = osc1CurPhaccu;
    10e0:	80 93 be 03 	sts	0x03BE, r24
    10e4:	90 93 bf 03 	sts	0x03BF, r25
    10e8:	a0 93 c0 03 	sts	0x03C0, r26
    10ec:	b0 93 c1 03 	sts	0x03C1, r27
    10f0:	0e cf       	rjmp	.-484    	; 0xf0e <__vector_9+0x15e>
				temp -= (0x8000 - osc2Out[2]);
				__asm__("");
			}
			else
			{
				temp += osc2Out[2];
    10f2:	b9 01       	movw	r22, r18
    10f4:	a8 01       	movw	r20, r16
    10f6:	48 0f       	add	r20, r24
    10f8:	59 1f       	adc	r21, r25
    10fa:	61 1d       	adc	r22, r1
    10fc:	71 1d       	adc	r23, r1
    10fe:	db 01       	movw	r26, r22
    1100:	ca 01       	movw	r24, r20
    1102:	75 cf       	rjmp	.-278    	; 0xfee <__vector_9+0x23e>

00001104 <_GLOBAL__sub_I_adcSelect>:
char keyArrayWrite = 0;
char keyArrayRead = 0;

unsigned char delayLine[256];
unsigned char delayLineTap = 10;
unsigned char delayWriteIndex = delayLineTap;
    1104:	80 91 05 01 	lds	r24, 0x0105
    1108:	80 93 78 02 	sts	0x0278, r24
    110c:	08 95       	ret

0000110e <__muluhisi3>:
    110e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    1112:	a5 9f       	mul	r26, r21
    1114:	90 0d       	add	r25, r0
    1116:	b4 9f       	mul	r27, r20
    1118:	90 0d       	add	r25, r0
    111a:	a4 9f       	mul	r26, r20
    111c:	80 0d       	add	r24, r0
    111e:	91 1d       	adc	r25, r1
    1120:	11 24       	eor	r1, r1
    1122:	08 95       	ret

00001124 <__muldi3>:
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	1f 93       	push	r17
    112a:	0f 93       	push	r16
    112c:	9a 9d       	mul	r25, r10
    112e:	f0 2d       	mov	r31, r0
    1130:	21 9f       	mul	r18, r17
    1132:	f0 0d       	add	r31, r0
    1134:	8b 9d       	mul	r24, r11
    1136:	f0 0d       	add	r31, r0
    1138:	8a 9d       	mul	r24, r10
    113a:	e0 2d       	mov	r30, r0
    113c:	f1 0d       	add	r31, r1
    113e:	03 9f       	mul	r16, r19
    1140:	f0 0d       	add	r31, r0
    1142:	02 9f       	mul	r16, r18
    1144:	e0 0d       	add	r30, r0
    1146:	f1 1d       	adc	r31, r1
    1148:	4e 9d       	mul	r20, r14
    114a:	e0 0d       	add	r30, r0
    114c:	f1 1d       	adc	r31, r1
    114e:	5e 9d       	mul	r21, r14
    1150:	f0 0d       	add	r31, r0
    1152:	4f 9d       	mul	r20, r15
    1154:	f0 0d       	add	r31, r0
    1156:	7f 93       	push	r23
    1158:	6f 93       	push	r22
    115a:	bf 92       	push	r11
    115c:	af 92       	push	r10
    115e:	5f 93       	push	r21
    1160:	4f 93       	push	r20
    1162:	d5 01       	movw	r26, r10
    1164:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    1168:	8b 01       	movw	r16, r22
    116a:	ac 01       	movw	r20, r24
    116c:	d7 01       	movw	r26, r14
    116e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    1172:	eb 01       	movw	r28, r22
    1174:	e8 0f       	add	r30, r24
    1176:	f9 1f       	adc	r31, r25
    1178:	d6 01       	movw	r26, r12
    117a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muldi3_6>
    117e:	2f 91       	pop	r18
    1180:	3f 91       	pop	r19
    1182:	d6 01       	movw	r26, r12
    1184:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    1188:	c6 0f       	add	r28, r22
    118a:	d7 1f       	adc	r29, r23
    118c:	e8 1f       	adc	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	af 91       	pop	r26
    1192:	bf 91       	pop	r27
    1194:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muldi3_6>
    1198:	2f 91       	pop	r18
    119a:	3f 91       	pop	r19
    119c:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    11a0:	c6 0f       	add	r28, r22
    11a2:	d7 1f       	adc	r29, r23
    11a4:	e8 1f       	adc	r30, r24
    11a6:	f9 1f       	adc	r31, r25
    11a8:	d6 01       	movw	r26, r12
    11aa:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    11ae:	e6 0f       	add	r30, r22
    11b0:	f7 1f       	adc	r31, r23
    11b2:	98 01       	movw	r18, r16
    11b4:	be 01       	movw	r22, r28
    11b6:	cf 01       	movw	r24, r30
    11b8:	11 24       	eor	r1, r1
    11ba:	0f 91       	pop	r16
    11bc:	1f 91       	pop	r17
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <__muldi3_6>:
    11c4:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    11c8:	46 0f       	add	r20, r22
    11ca:	57 1f       	adc	r21, r23
    11cc:	c8 1f       	adc	r28, r24
    11ce:	d9 1f       	adc	r29, r25
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <__muldi3_6+0x10>
    11d2:	31 96       	adiw	r30, 0x01	; 1
    11d4:	08 95       	ret

000011d6 <__umulsidi3>:
    11d6:	e8 94       	clt

000011d8 <__umulsidi3_helper>:
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	fc 01       	movw	r30, r24
    11de:	db 01       	movw	r26, r22
    11e0:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    11e4:	7f 93       	push	r23
    11e6:	6f 93       	push	r22
    11e8:	e9 01       	movw	r28, r18
    11ea:	9a 01       	movw	r18, r20
    11ec:	ac 01       	movw	r20, r24
    11ee:	bf 93       	push	r27
    11f0:	af 93       	push	r26
    11f2:	3f 93       	push	r19
    11f4:	2f 93       	push	r18
    11f6:	df 01       	movw	r26, r30
    11f8:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    11fc:	26 f4       	brtc	.+8      	; 0x1206 <__umulsidi3_helper+0x2e>
    11fe:	6c 1b       	sub	r22, r28
    1200:	7d 0b       	sbc	r23, r29
    1202:	82 0b       	sbc	r24, r18
    1204:	93 0b       	sbc	r25, r19
    1206:	9e 01       	movw	r18, r28
    1208:	eb 01       	movw	r28, r22
    120a:	fc 01       	movw	r30, r24
    120c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muldi3_6>
    1210:	af 91       	pop	r26
    1212:	bf 91       	pop	r27
    1214:	2f 91       	pop	r18
    1216:	3f 91       	pop	r19
    1218:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__muldi3_6>
    121c:	be 01       	movw	r22, r28
    121e:	cf 01       	movw	r24, r30
    1220:	f9 01       	movw	r30, r18
    1222:	2f 91       	pop	r18
    1224:	3f 91       	pop	r19
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <__umoddi3>:
    122c:	68 94       	set
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <__udivdi3_umoddi3>

00001230 <__udivdi3>:
    1230:	e8 94       	clt

00001232 <__udivdi3_umoddi3>:
    1232:	8f 92       	push	r8
    1234:	9f 92       	push	r9
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmod64>
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	08 95       	ret

00001248 <__udivmod64>:
    1248:	88 24       	eor	r8, r8
    124a:	99 24       	eor	r9, r9
    124c:	f4 01       	movw	r30, r8
    124e:	e4 01       	movw	r28, r8
    1250:	b0 e4       	ldi	r27, 0x40	; 64
    1252:	9f 93       	push	r25
    1254:	aa 27       	eor	r26, r26
    1256:	9a 15       	cp	r25, r10
    1258:	8b 04       	cpc	r8, r11
    125a:	9c 04       	cpc	r9, r12
    125c:	ed 05       	cpc	r30, r13
    125e:	fe 05       	cpc	r31, r14
    1260:	cf 05       	cpc	r28, r15
    1262:	d0 07       	cpc	r29, r16
    1264:	a1 07       	cpc	r26, r17
    1266:	98 f4       	brcc	.+38     	; 0x128e <__udivmod64+0x46>
    1268:	ad 2f       	mov	r26, r29
    126a:	dc 2f       	mov	r29, r28
    126c:	cf 2f       	mov	r28, r31
    126e:	fe 2f       	mov	r31, r30
    1270:	e9 2d       	mov	r30, r9
    1272:	98 2c       	mov	r9, r8
    1274:	89 2e       	mov	r8, r25
    1276:	98 2f       	mov	r25, r24
    1278:	87 2f       	mov	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	65 2f       	mov	r22, r21
    127e:	54 2f       	mov	r21, r20
    1280:	43 2f       	mov	r20, r19
    1282:	32 2f       	mov	r19, r18
    1284:	22 27       	eor	r18, r18
    1286:	b8 50       	subi	r27, 0x08	; 8
    1288:	31 f7       	brne	.-52     	; 0x1256 <__udivmod64+0xe>
    128a:	bf 91       	pop	r27
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <__udivmod64+0x94>
    128e:	1b 2e       	mov	r1, r27
    1290:	bf 91       	pop	r27
    1292:	bb 27       	eor	r27, r27
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	44 1f       	adc	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	66 1f       	adc	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	88 1c       	adc	r8, r8
    12a6:	99 1c       	adc	r9, r9
    12a8:	ee 1f       	adc	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	cc 1f       	adc	r28, r28
    12ae:	dd 1f       	adc	r29, r29
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	8a 14       	cp	r8, r10
    12b6:	9b 04       	cpc	r9, r11
    12b8:	ec 05       	cpc	r30, r12
    12ba:	fd 05       	cpc	r31, r13
    12bc:	ce 05       	cpc	r28, r14
    12be:	df 05       	cpc	r29, r15
    12c0:	a0 07       	cpc	r26, r16
    12c2:	b1 07       	cpc	r27, r17
    12c4:	48 f0       	brcs	.+18     	; 0x12d8 <__udivmod64+0x90>
    12c6:	8a 18       	sub	r8, r10
    12c8:	9b 08       	sbc	r9, r11
    12ca:	ec 09       	sbc	r30, r12
    12cc:	fd 09       	sbc	r31, r13
    12ce:	ce 09       	sbc	r28, r14
    12d0:	df 09       	sbc	r29, r15
    12d2:	a0 0b       	sbc	r26, r16
    12d4:	b1 0b       	sbc	r27, r17
    12d6:	21 60       	ori	r18, 0x01	; 1
    12d8:	1a 94       	dec	r1
    12da:	e1 f6       	brne	.-72     	; 0x1294 <__udivmod64+0x4c>
    12dc:	2e f4       	brtc	.+10     	; 0x12e8 <__udivmod64+0xa0>
    12de:	94 01       	movw	r18, r8
    12e0:	af 01       	movw	r20, r30
    12e2:	be 01       	movw	r22, r28
    12e4:	cd 01       	movw	r24, r26
    12e6:	00 0c       	add	r0, r0
    12e8:	08 95       	ret

000012ea <__ashldi3>:
    12ea:	0f 93       	push	r16
    12ec:	08 30       	cpi	r16, 0x08	; 8
    12ee:	90 f0       	brcs	.+36     	; 0x1314 <__ashldi3+0x2a>
    12f0:	98 2f       	mov	r25, r24
    12f2:	87 2f       	mov	r24, r23
    12f4:	76 2f       	mov	r23, r22
    12f6:	65 2f       	mov	r22, r21
    12f8:	54 2f       	mov	r21, r20
    12fa:	43 2f       	mov	r20, r19
    12fc:	32 2f       	mov	r19, r18
    12fe:	22 27       	eor	r18, r18
    1300:	08 50       	subi	r16, 0x08	; 8
    1302:	f4 cf       	rjmp	.-24     	; 0x12ec <__ashldi3+0x2>
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	44 1f       	adc	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	66 1f       	adc	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 95       	dec	r16
    1316:	b2 f7       	brpl	.-20     	; 0x1304 <__ashldi3+0x1a>
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <__ashrdi3>:
    131c:	97 fb       	bst	r25, 7
    131e:	10 f8       	bld	r1, 0

00001320 <__lshrdi3>:
    1320:	16 94       	lsr	r1
    1322:	00 08       	sbc	r0, r0
    1324:	0f 93       	push	r16
    1326:	08 30       	cpi	r16, 0x08	; 8
    1328:	98 f0       	brcs	.+38     	; 0x1350 <__lshrdi3+0x30>
    132a:	08 50       	subi	r16, 0x08	; 8
    132c:	23 2f       	mov	r18, r19
    132e:	34 2f       	mov	r19, r20
    1330:	45 2f       	mov	r20, r21
    1332:	56 2f       	mov	r21, r22
    1334:	67 2f       	mov	r22, r23
    1336:	78 2f       	mov	r23, r24
    1338:	89 2f       	mov	r24, r25
    133a:	90 2d       	mov	r25, r0
    133c:	f4 cf       	rjmp	.-24     	; 0x1326 <__lshrdi3+0x6>
    133e:	05 94       	asr	r0
    1340:	97 95       	ror	r25
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	57 95       	ror	r21
    134a:	47 95       	ror	r20
    134c:	37 95       	ror	r19
    134e:	27 95       	ror	r18
    1350:	0a 95       	dec	r16
    1352:	aa f7       	brpl	.-22     	; 0x133e <__lshrdi3+0x1e>
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <__tablejump2__>:
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31

0000135c <__tablejump__>:
    135c:	05 90       	lpm	r0, Z+
    135e:	f4 91       	lpm	r31, Z
    1360:	e0 2d       	mov	r30, r0
    1362:	09 94       	ijmp

00001364 <__umulhisi3>:
    1364:	a2 9f       	mul	r26, r18
    1366:	b0 01       	movw	r22, r0
    1368:	b3 9f       	mul	r27, r19
    136a:	c0 01       	movw	r24, r0
    136c:	a3 9f       	mul	r26, r19
    136e:	70 0d       	add	r23, r0
    1370:	81 1d       	adc	r24, r1
    1372:	11 24       	eor	r1, r1
    1374:	91 1d       	adc	r25, r1
    1376:	b2 9f       	mul	r27, r18
    1378:	70 0d       	add	r23, r0
    137a:	81 1d       	adc	r24, r1
    137c:	11 24       	eor	r1, r1
    137e:	91 1d       	adc	r25, r1
    1380:	08 95       	ret

00001382 <_exit>:
    1382:	f8 94       	cli

00001384 <__stop_program>:
    1384:	ff cf       	rjmp	.-2      	; 0x1384 <__stop_program>
