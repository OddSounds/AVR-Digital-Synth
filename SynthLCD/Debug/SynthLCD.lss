
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f2  00800100  00005104  00005198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005104  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  008004f2  008004f2  0000558a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000055e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000448f  00000000  00000000  0000566e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000332  00000000  00000000  00009afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000143f  00000000  00000000  00009e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000328  00000000  00000000  0000b270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6a  00000000  00000000  0000b598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005b8e  00000000  00000000  0000c102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a48  00000000  00000000  00011c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 03 	jmp	0x700	; 0x700 <__ctors_end>
       4:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       8:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      10:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      14:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      18:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      1c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      20:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      24:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__vector_9>
      28:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      2c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      30:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      34:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      38:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      3c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      40:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      48:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <__vector_18>
      4c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      50:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      54:	0c 94 da 22 	jmp	0x45b4	; 0x45b4 <__vector_21>
      58:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      5c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      60:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      64:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z9writeLinehPc+0x102>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <_Z14osc1MenuUpdatev+0x708>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <_Z14osc1MenuUpdatev+0x754>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <_ZL15phase1RouteName+0x4>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z9writeLinehPc+0x160>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <_Z14osc1MenuUpdatev+0x3a8>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <_Z14osc1MenuUpdatev+0x3ce>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <_Z14osc1MenuUpdatev+0x204>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <_Z14osc1MenuUpdatev+0x7f0>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <_Z14osc1MenuUpdatev+0x1ea>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z9writeLinehPc+0x118>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <_ZL15phase2RouteName+0x5>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <_ZL13waveNameTable+0xc>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__ctors_end>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <_Z14osc1MenuUpdatev+0x1ac>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <_Z14osc1MenuUpdatev+0x7b0>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <_Z14osc1MenuUpdatev+0x1d2>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <_Z14osc1MenuUpdatev+0x7dc>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <_Z14osc1MenuUpdatev+0x69e>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <_ZL19filterModeRouteName+0x6>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <_ZL14routeNameTable>:
     668:	d8 06 d3 06 cc 06 c5 06 be 06 b7 06 b0 06 a9 06     ................
     678:	a3 06 9d 06 96 06 8e 06                             ........

00000680 <_ZL13waveNameTable>:
     680:	fa 06 f6 06 f1 06 ec 06 e8 06 e2 06 dd 06           ..............

0000068e <_ZL19filterModeRouteName>:
     68e:	46 2e 20 4d 4f 44 45 00                             F. MODE.

00000696 <_ZL15cutoffRouteName>:
     696:	43 55 54 4f 46 46 00                                CUTOFF.

0000069d <_ZL17osc2WaveRouteName>:
     69d:	57 41 56 45 32 00                                   WAVE2.

000006a3 <_ZL17osc1WaveRouteName>:
     6a3:	57 41 56 45 31 00                                   WAVE1.

000006a9 <_ZL15phase2RouteName>:
     6a9:	50 48 41 53 45 32 00                                PHASE2.

000006b0 <_ZL15phase1RouteName>:
     6b0:	50 48 41 53 45 31 00                                PHASE1.

000006b7 <_ZL15semis2RouteName>:
     6b7:	53 45 4d 49 53 32 00                                SEMIS2.

000006be <_ZL15semis1RouteName>:
     6be:	53 45 4d 49 53 31 00                                SEMIS1.

000006c5 <_ZL15cents2RouteName>:
     6c5:	43 45 4e 54 53 32 00                                CENTS2.

000006cc <_ZL15cents1RouteName>:
     6cc:	43 45 4e 54 53 31 00                                CENTS1.

000006d3 <_ZL13osc2RouteName>:
     6d3:	4f 53 43 32 00                                      OSC2.

000006d8 <_ZL13osc1RouteName>:
     6d8:	4f 53 43 31 00                                      OSC1.

000006dd <_ZL12flatWaveName>:
     6dd:	46 4c 41 54 00                                      FLAT.

000006e2 <_ZL13noiseWaveName>:
     6e2:	4e 4f 49 53 45 00                                   NOISE.

000006e8 <_ZL10sqWaveName>:
     6e8:	53 51 55 00                                         SQU.

000006ec <_ZL12rsawWaveName>:
     6ec:	52 53 41 57 00                                      RSAW.

000006f1 <_ZL12lsawWaveName>:
     6f1:	4c 53 41 57 00                                      LSAW.

000006f6 <_ZL11triWaveName>:
     6f6:	54 52 49 00                                         TRI.

000006fa <_ZL12sineWaveName>:
     6fa:	53 49 4e 45 00 00                                   SINE..

00000700 <__ctors_end>:
     700:	11 24       	eor	r1, r1
     702:	1f be       	out	0x3f, r1	; 63
     704:	cf ef       	ldi	r28, 0xFF	; 255
     706:	d8 e0       	ldi	r29, 0x08	; 8
     708:	de bf       	out	0x3e, r29	; 62
     70a:	cd bf       	out	0x3d, r28	; 61

0000070c <__do_copy_data>:
     70c:	14 e0       	ldi	r17, 0x04	; 4
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b1 e0       	ldi	r27, 0x01	; 1
     712:	e4 e0       	ldi	r30, 0x04	; 4
     714:	f1 e5       	ldi	r31, 0x51	; 81
     716:	02 c0       	rjmp	.+4      	; 0x71c <__do_copy_data+0x10>
     718:	05 90       	lpm	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	a2 3f       	cpi	r26, 0xF2	; 242
     71e:	b1 07       	cpc	r27, r17
     720:	d9 f7       	brne	.-10     	; 0x718 <__do_copy_data+0xc>

00000722 <__do_clear_bss>:
     722:	26 e0       	ldi	r18, 0x06	; 6
     724:	a2 ef       	ldi	r26, 0xF2	; 242
     726:	b4 e0       	ldi	r27, 0x04	; 4
     728:	01 c0       	rjmp	.+2      	; 0x72c <.do_clear_bss_start>

0000072a <.do_clear_bss_loop>:
     72a:	1d 92       	st	X+, r1

0000072c <.do_clear_bss_start>:
     72c:	ac 30       	cpi	r26, 0x0C	; 12
     72e:	b2 07       	cpc	r27, r18
     730:	e1 f7       	brne	.-8      	; 0x72a <.do_clear_bss_loop>
     732:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <main>
     736:	0c 94 80 28 	jmp	0x5100	; 0x5100 <_exit>

0000073a <__bad_interrupt>:
     73a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073e <_Z9writeLinehPc>:
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
}

inline void writeLine(unsigned char line, char* str)
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2d 97       	sbiw	r28, 0x0d	; 13
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
	char buf[13];
	memcpy(buf, str, 12);
     752:	9c e0       	ldi	r25, 0x0C	; 12
     754:	fb 01       	movw	r30, r22
     756:	de 01       	movw	r26, r28
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	9a 95       	dec	r25
     760:	e1 f7       	brne	.-8      	; 0x75a <_Z9writeLinehPc+0x1c>
	buf[12] = '\0';
     762:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     764:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     766:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     768:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     76a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     76c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     76e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     770:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     772:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     774:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     776:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     778:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     77a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     77c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     77e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     780:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     782:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     784:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     786:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     788:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     78a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     78c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     78e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     790:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     792:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     794:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     796:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     798:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     79a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     79c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     79e:	44 98       	cbi	0x08, 4	; 8
}

inline void gotoXY(char x, char y)
{
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
     7a0:	80 64       	ori	r24, 0x40	; 64

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7a2:	5c 98       	cbi	0x0b, 4	; 11
     7a4:	28 2f       	mov	r18, r24
     7a6:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7a8:	a9 01       	movw	r20, r18
     7aa:	44 0f       	add	r20, r20
     7ac:	45 2f       	mov	r20, r21
     7ae:	44 1f       	adc	r20, r20
     7b0:	55 0b       	sbc	r21, r21
     7b2:	45 2b       	or	r20, r21
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <_Z9writeLinehPc+0x7a>
     7b6:	d6 c0       	rjmp	.+428    	; 0x964 <__stack+0x65>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7bc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7be:	26 fd       	sbrc	r18, 6
     7c0:	cf c0       	rjmp	.+414    	; 0x960 <__stack+0x61>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7c8:	25 fd       	sbrc	r18, 5
     7ca:	c8 c0       	rjmp	.+400    	; 0x95c <__stack+0x5d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7d2:	24 fd       	sbrc	r18, 4
     7d4:	c1 c0       	rjmp	.+386    	; 0x958 <__stack+0x59>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7da:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7dc:	23 fd       	sbrc	r18, 3
     7de:	ba c0       	rjmp	.+372    	; 0x954 <__stack+0x55>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7e6:	22 fd       	sbrc	r18, 2
     7e8:	b3 c0       	rjmp	.+358    	; 0x950 <__stack+0x51>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ee:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7f0:	21 fd       	sbrc	r18, 1
     7f2:	ac c0       	rjmp	.+344    	; 0x94c <__stack+0x4d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7f8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	a5 c0       	rjmp	.+330    	; 0x948 <__stack+0x49>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     7fe:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     800:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     802:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     804:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z9writeLinehPc+0xd0>
     80c:	81 c0       	rjmp	.+258    	; 0x910 <__stack+0x11>
     80e:	de 01       	movw	r26, r28
     810:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     812:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     814:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     816:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     818:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     81a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     81c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     81e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     820:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     822:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     824:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     826:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     828:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     82a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     82c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     82e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     830:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     832:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     834:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     836:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     838:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     83a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     83c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     83e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     840:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     842:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     844:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     846:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     848:	44 9a       	sbi	0x08, 4	; 8
     84a:	99 27       	eor	r25, r25
     84c:	87 fd       	sbrc	r24, 7
     84e:	90 95       	com	r25
     850:	80 97       	sbiw	r24, 0x20	; 32
     852:	fc 01       	movw	r30, r24
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	ef 5e       	subi	r30, 0xEF	; 239
     862:	fc 4f       	sbci	r31, 0xFC	; 252
     864:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     866:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     868:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     86a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     86c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     86e:	82 2f       	mov	r24, r18
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	88 0f       	add	r24, r24
     874:	89 2f       	mov	r24, r25
     876:	88 1f       	adc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	89 2b       	or	r24, r25
     87c:	09 f0       	breq	.+2      	; 0x880 <_Z9writeLinehPc+0x142>
     87e:	5d c0       	rjmp	.+186    	; 0x93a <__stack+0x3b>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     880:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     882:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     884:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     886:	26 fd       	sbrc	r18, 6
     888:	5d c0       	rjmp	.+186    	; 0x944 <__stack+0x45>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     88a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     88c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     88e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     890:	25 fd       	sbrc	r18, 5
     892:	51 c0       	rjmp	.+162    	; 0x936 <__stack+0x37>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     894:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     896:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     898:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     89a:	24 fd       	sbrc	r18, 4
     89c:	4a c0       	rjmp	.+148    	; 0x932 <__stack+0x33>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     89e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8a4:	23 fd       	sbrc	r18, 3
     8a6:	43 c0       	rjmp	.+134    	; 0x92e <__stack+0x2f>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8ae:	22 fd       	sbrc	r18, 2
     8b0:	3c c0       	rjmp	.+120    	; 0x92a <__stack+0x2b>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8b8:	21 fd       	sbrc	r18, 1
     8ba:	35 c0       	rjmp	.+106    	; 0x926 <__stack+0x27>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8c2:	20 fd       	sbrc	r18, 0
     8c4:	2e c0       	rjmp	.+92     	; 0x922 <__stack+0x23>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     8cc:	44 9a       	sbi	0x08, 4	; 8
     8ce:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     8d0:	51 f6       	brne	.-108    	; 0x866 <_Z9writeLinehPc+0x128>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     8d2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     8d4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     900:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     902:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     904:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     906:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     908:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     90a:	8d 91       	ld	r24, X+
     90c:	81 11       	cpse	r24, r1
     90e:	81 cf       	rjmp	.-254    	; 0x812 <_Z9writeLinehPc+0xd4>
	memcpy(buf, str, 12);
	buf[12] = '\0';
	
	gotoXY(0, line);
	lcdString(buf);
}
     910:	2d 96       	adiw	r28, 0x0d	; 13
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     922:	5d 9a       	sbi	0x0b, 5	; 11
     924:	d1 cf       	rjmp	.-94     	; 0x8c8 <_Z9writeLinehPc+0x18a>
     926:	5d 9a       	sbi	0x0b, 5	; 11
     928:	ca cf       	rjmp	.-108    	; 0x8be <_Z9writeLinehPc+0x180>
     92a:	5d 9a       	sbi	0x0b, 5	; 11
     92c:	c3 cf       	rjmp	.-122    	; 0x8b4 <_Z9writeLinehPc+0x176>
     92e:	5d 9a       	sbi	0x0b, 5	; 11
     930:	bc cf       	rjmp	.-136    	; 0x8aa <_Z9writeLinehPc+0x16c>
     932:	5d 9a       	sbi	0x0b, 5	; 11
     934:	b5 cf       	rjmp	.-150    	; 0x8a0 <_Z9writeLinehPc+0x162>
     936:	5d 9a       	sbi	0x0b, 5	; 11
     938:	ae cf       	rjmp	.-164    	; 0x896 <_Z9writeLinehPc+0x158>
     93a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     93c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     93e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     940:	26 ff       	sbrs	r18, 6
     942:	a3 cf       	rjmp	.-186    	; 0x88a <_Z9writeLinehPc+0x14c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     944:	5d 9a       	sbi	0x0b, 5	; 11
     946:	a2 cf       	rjmp	.-188    	; 0x88c <_Z9writeLinehPc+0x14e>
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     948:	5d 98       	cbi	0x0b, 5	; 11
     94a:	5a cf       	rjmp	.-332    	; 0x800 <_Z9writeLinehPc+0xc2>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     94c:	5d 9a       	sbi	0x0b, 5	; 11
     94e:	53 cf       	rjmp	.-346    	; 0x7f6 <_Z9writeLinehPc+0xb8>
     950:	5d 9a       	sbi	0x0b, 5	; 11
     952:	4c cf       	rjmp	.-360    	; 0x7ec <_Z9writeLinehPc+0xae>
     954:	5d 9a       	sbi	0x0b, 5	; 11
     956:	45 cf       	rjmp	.-374    	; 0x7e2 <_Z9writeLinehPc+0xa4>
     958:	5d 9a       	sbi	0x0b, 5	; 11
     95a:	3e cf       	rjmp	.-388    	; 0x7d8 <_Z9writeLinehPc+0x9a>
     95c:	5d 9a       	sbi	0x0b, 5	; 11
     95e:	37 cf       	rjmp	.-402    	; 0x7ce <_Z9writeLinehPc+0x90>
     960:	5d 9a       	sbi	0x0b, 5	; 11
     962:	30 cf       	rjmp	.-416    	; 0x7c4 <_Z9writeLinehPc+0x86>
     964:	5d 9a       	sbi	0x0b, 5	; 11
     966:	29 cf       	rjmp	.-430    	; 0x7ba <_Z9writeLinehPc+0x7c>

00000968 <_Z14osc1MenuUpdatev>:
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
}

inline void osc1MenuUpdate()
{
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	e5 97       	sbiw	r28, 0x35	; 53
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
     984:	8d e0       	ldi	r24, 0x0D	; 13
     986:	e9 e0       	ldi	r30, 0x09	; 9
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	de 01       	movw	r26, r28
     98c:	55 96       	adiw	r26, 0x15	; 21
     98e:	01 90       	ld	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	8a 95       	dec	r24
     994:	e1 f7       	brne	.-8      	; 0x98e <_Z14osc1MenuUpdatev+0x26>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     996:	8c e0       	ldi	r24, 0x0C	; 12
     998:	fe 01       	movw	r30, r28
     99a:	75 96       	adiw	r30, 0x15	; 21
     99c:	8e 01       	movw	r16, r28
     99e:	0f 5f       	subi	r16, 0xFF	; 255
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	d8 01       	movw	r26, r16
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_Z14osc1MenuUpdatev+0x3c>
	buf[12] = '\0';
     9ac:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     9ae:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9b0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9b4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     9e4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     9e6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9e8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a1c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <_Z14osc1MenuUpdatev+0xbe>
     a24:	82 c0       	rjmp	.+260    	; 0xb2a <_Z14osc1MenuUpdatev+0x1c2>
     a26:	de 01       	movw	r26, r28
     a28:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a2a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a2c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a2e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a30:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a32:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a34:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a36:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a38:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a3c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a40:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a42:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a44:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a46:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a48:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a4a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a4c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a4e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a50:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a52:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a58:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a5a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a5c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a5e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a60:	44 9a       	sbi	0x08, 4	; 8
     a62:	99 27       	eor	r25, r25
     a64:	87 fd       	sbrc	r24, 7
     a66:	90 95       	com	r25
     a68:	80 97       	sbiw	r24, 0x20	; 32
     a6a:	fc 01       	movw	r30, r24
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	ef 5e       	subi	r30, 0xEF	; 239
     a7a:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     a7c:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     a7e:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a80:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a82:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a84:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a86:	82 2f       	mov	r24, r18
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	88 0f       	add	r24, r24
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 1f       	adc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	89 2b       	or	r24, r25
     a94:	09 f0       	breq	.+2      	; 0xa98 <_Z14osc1MenuUpdatev+0x130>
     a96:	60 c4       	rjmp	.+2240   	; 0x1358 <_Z14osc1MenuUpdatev+0x9f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a98:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a9e:	26 fd       	sbrc	r18, 6
     aa0:	60 c4       	rjmp	.+2240   	; 0x1362 <_Z14osc1MenuUpdatev+0x9fa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aa2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     aa8:	25 fd       	sbrc	r18, 5
     aaa:	54 c4       	rjmp	.+2216   	; 0x1354 <_Z14osc1MenuUpdatev+0x9ec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ab2:	24 fd       	sbrc	r18, 4
     ab4:	4d c4       	rjmp	.+2202   	; 0x1350 <_Z14osc1MenuUpdatev+0x9e8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ab6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aba:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     abc:	23 fd       	sbrc	r18, 3
     abe:	46 c4       	rjmp	.+2188   	; 0x134c <_Z14osc1MenuUpdatev+0x9e4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ac0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ac6:	22 fd       	sbrc	r18, 2
     ac8:	3f c4       	rjmp	.+2174   	; 0x1348 <_Z14osc1MenuUpdatev+0x9e0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     acc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ace:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ad0:	21 fd       	sbrc	r18, 1
     ad2:	38 c4       	rjmp	.+2160   	; 0x1344 <_Z14osc1MenuUpdatev+0x9dc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ad4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ada:	20 fd       	sbrc	r18, 0
     adc:	2f c4       	rjmp	.+2142   	; 0x133c <_Z14osc1MenuUpdatev+0x9d4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ade:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ae4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ae6:	3f 5f       	subi	r19, 0xFF	; 255
     ae8:	35 30       	cpi	r19, 0x05	; 5
     aea:	49 f6       	brne	.-110    	; 0xa7e <_Z14osc1MenuUpdatev+0x116>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     aec:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     aee:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     af0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     af4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     af6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     afa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     afc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     afe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b20:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     b22:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     b24:	8d 91       	ld	r24, X+
     b26:	81 11       	cpse	r24, r1
     b28:	80 cf       	rjmp	.-256    	; 0xa2a <_Z14osc1MenuUpdatev+0xc2>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	e6 e1       	ldi	r30, 0x16	; 22
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	d8 01       	movw	r26, r16
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	8a 95       	dec	r24
     b38:	e1 f7       	brne	.-8      	; 0xb32 <_Z14osc1MenuUpdatev+0x1ca>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
     b3a:	e0 91 03 01 	lds	r30, 0x0103
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e0 58       	subi	r30, 0x80	; 128
     b46:	f9 4f       	sbci	r31, 0xF9	; 249
     b48:	65 91       	lpm	r22, Z+
     b4a:	74 91       	lpm	r23, Z
     b4c:	8e 01       	movw	r16, r28
     b4e:	0f 5f       	subi	r16, 0xFF	; 255
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "       ");
     b58:	d8 01       	movw	r26, r16
     b5a:	0d 90       	ld	r0, X+
     b5c:	00 20       	and	r0, r0
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <_Z14osc1MenuUpdatev+0x1f2>
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	ec e3       	ldi	r30, 0x3C	; 60
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	01 90       	ld	r0, Z+
     b6a:	0d 92       	st	X+, r0
     b6c:	8a 95       	dec	r24
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <_Z14osc1MenuUpdatev+0x200>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	f8 01       	movw	r30, r16
     b74:	de 01       	movw	r26, r28
     b76:	99 96       	adiw	r26, 0x29	; 41
     b78:	01 90       	ld	r0, Z+
     b7a:	0d 92       	st	X+, r0
     b7c:	8a 95       	dec	r24
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <_Z14osc1MenuUpdatev+0x210>
	buf[12] = '\0';
     b80:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     b82:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     b84:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b86:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b88:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b8e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b92:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b98:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     baa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bb8:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     bba:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     bbc:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bcc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bdc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bde:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     be2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     be4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     be8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bee:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bf0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     bf2:	89 a5       	ldd	r24, Y+41	; 0x29
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <_Z14osc1MenuUpdatev+0x292>
     bf8:	81 c0       	rjmp	.+258    	; 0xcfc <_Z14osc1MenuUpdatev+0x394>
     bfa:	de 01       	movw	r26, r28
     bfc:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     bfe:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c00:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c20:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c22:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c24:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c26:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c28:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c2e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c30:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c32:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     c34:	44 9a       	sbi	0x08, 4	; 8
     c36:	99 27       	eor	r25, r25
     c38:	87 fd       	sbrc	r24, 7
     c3a:	90 95       	com	r25
     c3c:	80 97       	sbiw	r24, 0x20	; 32
     c3e:	fc 01       	movw	r30, r24
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	e8 0f       	add	r30, r24
     c4a:	f9 1f       	adc	r31, r25
     c4c:	ef 5e       	subi	r30, 0xEF	; 239
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252
     c50:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     c52:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     c54:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c56:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c58:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c5a:	82 2f       	mov	r24, r18
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	88 0f       	add	r24, r24
     c60:	89 2f       	mov	r24, r25
     c62:	88 1f       	adc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	89 2b       	or	r24, r25
     c68:	09 f0       	breq	.+2      	; 0xc6c <_Z14osc1MenuUpdatev+0x304>
     c6a:	6a c3       	rjmp	.+1748   	; 0x1340 <_Z14osc1MenuUpdatev+0x9d8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c6c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c6e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c70:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c72:	26 fd       	sbrc	r18, 6
     c74:	61 c3       	rjmp	.+1730   	; 0x1338 <_Z14osc1MenuUpdatev+0x9d0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c7a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c7c:	25 fd       	sbrc	r18, 5
     c7e:	5a c3       	rjmp	.+1716   	; 0x1334 <_Z14osc1MenuUpdatev+0x9cc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c84:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c86:	24 fd       	sbrc	r18, 4
     c88:	53 c3       	rjmp	.+1702   	; 0x1330 <_Z14osc1MenuUpdatev+0x9c8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c90:	23 fd       	sbrc	r18, 3
     c92:	4c c3       	rjmp	.+1688   	; 0x132c <_Z14osc1MenuUpdatev+0x9c4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c98:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c9a:	22 fd       	sbrc	r18, 2
     c9c:	45 c3       	rjmp	.+1674   	; 0x1328 <_Z14osc1MenuUpdatev+0x9c0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ca4:	21 fd       	sbrc	r18, 1
     ca6:	3e c3       	rjmp	.+1660   	; 0x1324 <_Z14osc1MenuUpdatev+0x9bc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ca8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     caa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     cae:	20 fd       	sbrc	r18, 0
     cb0:	37 c3       	rjmp	.+1646   	; 0x1320 <_Z14osc1MenuUpdatev+0x9b8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cb8:	44 9a       	sbi	0x08, 4	; 8
     cba:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     cbc:	51 f6       	brne	.-108    	; 0xc52 <_Z14osc1MenuUpdatev+0x2ea>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     cbe:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     cc0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cc4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ccc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cda:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cdc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cde:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cf4:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     cf6:	8d 91       	ld	r24, X+
     cf8:	81 11       	cpse	r24, r1
     cfa:	81 cf       	rjmp	.-254    	; 0xbfe <_Z14osc1MenuUpdatev+0x296>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	ed e1       	ldi	r30, 0x1D	; 29
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	d8 01       	movw	r26, r16
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	8a 95       	dec	r24
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <_Z14osc1MenuUpdatev+0x39c>
	sprintf(buf + 7, "%d", osc1CentsShift);
     d0c:	20 91 e6 05 	lds	r18, 0x05E6
     d10:	82 2f       	mov	r24, r18
     d12:	99 27       	eor	r25, r25
     d14:	87 fd       	sbrc	r24, 7
     d16:	90 95       	com	r25
     d18:	9f 93       	push	r25
     d1a:	2f 93       	push	r18
     d1c:	86 e0       	ldi	r24, 0x06	; 6
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	7e 01       	movw	r14, r28
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	e8 0e       	add	r14, r24
     d2a:	f1 1c       	adc	r15, r1
     d2c:	ff 92       	push	r15
     d2e:	ef 92       	push	r14
     d30:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
     d34:	d8 01       	movw	r26, r16
     d36:	0d 90       	ld	r0, X+
     d38:	00 20       	and	r0, r0
     d3a:	e9 f7       	brne	.-6      	; 0xd36 <_Z14osc1MenuUpdatev+0x3ce>
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	ec e3       	ldi	r30, 0x3C	; 60
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <_Z14osc1MenuUpdatev+0x3dc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     d4c:	8c e0       	ldi	r24, 0x0C	; 12
     d4e:	f8 01       	movw	r30, r16
     d50:	de 01       	movw	r26, r28
     d52:	99 96       	adiw	r26, 0x29	; 41
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	8a 95       	dec	r24
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <_Z14osc1MenuUpdatev+0x3ec>
	buf[12] = '\0';
     d5c:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d5e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d60:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d62:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d64:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d70:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d74:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d80:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d82:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d84:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d86:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d8e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d92:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     d94:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d96:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d98:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     da2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     da4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     da8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     daa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     db4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     dba:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dc6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     dcc:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     dce:	89 a5       	ldd	r24, Y+41	; 0x29
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <_Z14osc1MenuUpdatev+0x47a>
     de0:	82 c0       	rjmp	.+260    	; 0xee6 <_Z14osc1MenuUpdatev+0x57e>
     de2:	de 01       	movw	r26, r28
     de4:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     de6:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     de8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     df4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dfe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e1a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e1c:	44 9a       	sbi	0x08, 4	; 8
     e1e:	99 27       	eor	r25, r25
     e20:	87 fd       	sbrc	r24, 7
     e22:	90 95       	com	r25
     e24:	80 97       	sbiw	r24, 0x20	; 32
     e26:	fc 01       	movw	r30, r24
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e8 0f       	add	r30, r24
     e32:	f9 1f       	adc	r31, r25
     e34:	ef 5e       	subi	r30, 0xEF	; 239
     e36:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     e38:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     e3a:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e3c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e3e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e40:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e42:	82 2f       	mov	r24, r18
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	89 2f       	mov	r24, r25
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	89 2b       	or	r24, r25
     e50:	09 f0       	breq	.+2      	; 0xe54 <_Z14osc1MenuUpdatev+0x4ec>
     e52:	5a c2       	rjmp	.+1204   	; 0x1308 <_Z14osc1MenuUpdatev+0x9a0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e58:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e5a:	26 fd       	sbrc	r18, 6
     e5c:	5a c2       	rjmp	.+1204   	; 0x1312 <_Z14osc1MenuUpdatev+0x9aa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e62:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e64:	25 fd       	sbrc	r18, 5
     e66:	5a c2       	rjmp	.+1204   	; 0x131c <_Z14osc1MenuUpdatev+0x9b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e6e:	24 fd       	sbrc	r18, 4
     e70:	49 c2       	rjmp	.+1170   	; 0x1304 <_Z14osc1MenuUpdatev+0x99c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e72:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e74:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e76:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e78:	23 fd       	sbrc	r18, 3
     e7a:	42 c2       	rjmp	.+1156   	; 0x1300 <_Z14osc1MenuUpdatev+0x998>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e80:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e82:	22 fd       	sbrc	r18, 2
     e84:	3b c2       	rjmp	.+1142   	; 0x12fc <_Z14osc1MenuUpdatev+0x994>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e8a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e8c:	21 fd       	sbrc	r18, 1
     e8e:	34 c2       	rjmp	.+1128   	; 0x12f8 <_Z14osc1MenuUpdatev+0x990>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e90:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e94:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e96:	20 fd       	sbrc	r18, 0
     e98:	29 c2       	rjmp	.+1106   	; 0x12ec <_Z14osc1MenuUpdatev+0x984>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ea0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ea2:	3f 5f       	subi	r19, 0xFF	; 255
     ea4:	35 30       	cpi	r19, 0x05	; 5
     ea6:	49 f6       	brne	.-110    	; 0xe3a <_Z14osc1MenuUpdatev+0x4d2>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     ea8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     eaa:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ecc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ece:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ed2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ed8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     edc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ede:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ee0:	8d 91       	ld	r24, X+
     ee2:	81 11       	cpse	r24, r1
     ee4:	80 cf       	rjmp	.-256    	; 0xde6 <_Z14osc1MenuUpdatev+0x47e>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	e5 e2       	ldi	r30, 0x25	; 37
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	d8 01       	movw	r26, r16
     eee:	01 90       	ld	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	8a 95       	dec	r24
     ef4:	e1 f7       	brne	.-8      	; 0xeee <_Z14osc1MenuUpdatev+0x586>
	sprintf(buf + 7, "%d", osc1SemisShift);
     ef6:	20 91 e5 05 	lds	r18, 0x05E5
     efa:	82 2f       	mov	r24, r18
     efc:	99 27       	eor	r25, r25
     efe:	87 fd       	sbrc	r24, 7
     f00:	90 95       	com	r25
     f02:	9f 93       	push	r25
     f04:	2f 93       	push	r18
     f06:	86 e0       	ldi	r24, 0x06	; 6
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	ff 92       	push	r15
     f10:	ef 92       	push	r14
     f12:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
     f16:	d8 01       	movw	r26, r16
     f18:	0d 90       	ld	r0, X+
     f1a:	00 20       	and	r0, r0
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <_Z14osc1MenuUpdatev+0x5b0>
     f1e:	11 97       	sbiw	r26, 0x01	; 1
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	ec e3       	ldi	r30, 0x3C	; 60
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <_Z14osc1MenuUpdatev+0x5be>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     f2e:	8c e0       	ldi	r24, 0x0C	; 12
     f30:	f8 01       	movw	r30, r16
     f32:	de 01       	movw	r26, r28
     f34:	99 96       	adiw	r26, 0x29	; 41
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <_Z14osc1MenuUpdatev+0x5ce>
	buf[12] = '\0';
     f3e:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f40:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f42:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f44:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f46:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f4c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f50:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f52:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f54:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f56:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f58:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f62:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f64:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f70:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f74:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     f76:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f78:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f7a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f7e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f80:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f82:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f84:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f86:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f88:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f90:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f94:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     fa2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     fa8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     faa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     fae:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     fb0:	89 a5       	ldd	r24, Y+41	; 0x29
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_Z14osc1MenuUpdatev+0x65c>
     fc2:	82 c0       	rjmp	.+260    	; 0x10c8 <_Z14osc1MenuUpdatev+0x760>
     fc4:	de 01       	movw	r26, r28
     fc6:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     fc8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     fca:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fcc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ff2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ff8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ffa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ffc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ffe:	44 9a       	sbi	0x08, 4	; 8
    1000:	99 27       	eor	r25, r25
    1002:	87 fd       	sbrc	r24, 7
    1004:	90 95       	com	r25
    1006:	80 97       	sbiw	r24, 0x20	; 32
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e8 0f       	add	r30, r24
    1014:	f9 1f       	adc	r31, r25
    1016:	ef 5e       	subi	r30, 0xEF	; 239
    1018:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    101a:	90 e0       	ldi	r25, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    101c:	81 91       	ld	r24, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    101e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1020:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1022:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	22 0f       	add	r18, r18
    102a:	23 2f       	mov	r18, r19
    102c:	22 1f       	adc	r18, r18
    102e:	33 0b       	sbc	r19, r19
    1030:	23 2b       	or	r18, r19
    1032:	09 f0       	breq	.+2      	; 0x1036 <_Z14osc1MenuUpdatev+0x6ce>
    1034:	5f c1       	rjmp	.+702    	; 0x12f4 <_Z14osc1MenuUpdatev+0x98c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1036:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1038:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    103a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    103c:	86 fd       	sbrc	r24, 6
    103e:	58 c1       	rjmp	.+688    	; 0x12f0 <_Z14osc1MenuUpdatev+0x988>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1040:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1042:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1044:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1046:	85 fd       	sbrc	r24, 5
    1048:	4f c1       	rjmp	.+670    	; 0x12e8 <_Z14osc1MenuUpdatev+0x980>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    104a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    104c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    104e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1050:	84 fd       	sbrc	r24, 4
    1052:	48 c1       	rjmp	.+656    	; 0x12e4 <_Z14osc1MenuUpdatev+0x97c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1054:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1056:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1058:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    105a:	83 fd       	sbrc	r24, 3
    105c:	41 c1       	rjmp	.+642    	; 0x12e0 <_Z14osc1MenuUpdatev+0x978>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    105e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1060:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1062:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1064:	82 fd       	sbrc	r24, 2
    1066:	3a c1       	rjmp	.+628    	; 0x12dc <_Z14osc1MenuUpdatev+0x974>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1068:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    106a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    106c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    106e:	81 fd       	sbrc	r24, 1
    1070:	33 c1       	rjmp	.+614    	; 0x12d8 <_Z14osc1MenuUpdatev+0x970>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1072:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1074:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1076:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1078:	80 fd       	sbrc	r24, 0
    107a:	2c c1       	rjmp	.+600    	; 0x12d4 <_Z14osc1MenuUpdatev+0x96c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    107c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    107e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1080:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1082:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	95 30       	cpi	r25, 0x05	; 5
    1088:	49 f6       	brne	.-110    	; 0x101c <_Z14osc1MenuUpdatev+0x6b4>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    108a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    108c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    108e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1090:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1092:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1094:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1096:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1098:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    109a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    109c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    109e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10be:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    10c0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    10c2:	8d 91       	ld	r24, X+
    10c4:	81 11       	cpse	r24, r1
    10c6:	80 cf       	rjmp	.-256    	; 0xfc8 <_Z14osc1MenuUpdatev+0x660>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    10c8:	87 e0       	ldi	r24, 0x07	; 7
    10ca:	ed e2       	ldi	r30, 0x2D	; 45
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	d8 01       	movw	r26, r16
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	8a 95       	dec	r24
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <_Z14osc1MenuUpdatev+0x768>
	if(osc1NoteSync != false)
    10d8:	80 91 dd 05 	lds	r24, 0x05DD
    10dc:	81 11       	cpse	r24, r1
    10de:	43 c1       	rjmp	.+646    	; 0x1366 <_Z14osc1MenuUpdatev+0x9fe>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    10e0:	4f e4       	ldi	r20, 0x4F	; 79
    10e2:	56 e4       	ldi	r21, 0x46	; 70
    10e4:	66 e4       	ldi	r22, 0x46	; 70
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	4f 83       	std	Y+7, r20	; 0x07
    10ea:	58 87       	std	Y+8, r21	; 0x08
    10ec:	69 87       	std	Y+9, r22	; 0x09
    10ee:	7a 87       	std	Y+10, r23	; 0x0a
	}
	strcat(buf, "       ");
    10f0:	d8 01       	movw	r26, r16
    10f2:	0d 90       	ld	r0, X+
    10f4:	00 20       	and	r0, r0
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_Z14osc1MenuUpdatev+0x78a>
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	ec e3       	ldi	r30, 0x3C	; 60
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <_Z14osc1MenuUpdatev+0x798>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1108:	8c e0       	ldi	r24, 0x0C	; 12
    110a:	f8 01       	movw	r30, r16
    110c:	de 01       	movw	r26, r28
    110e:	99 96       	adiw	r26, 0x29	; 41
    1110:	01 90       	ld	r0, Z+
    1112:	0d 92       	st	X+, r0
    1114:	8a 95       	dec	r24
    1116:	e1 f7       	brne	.-8      	; 0x1110 <_Z14osc1MenuUpdatev+0x7a8>
	buf[12] = '\0';
    1118:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    111a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    111c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    111e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1120:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1122:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1124:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1126:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1128:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    112a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    112c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    112e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1130:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1132:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1134:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1136:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1138:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    113a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    113c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    113e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1140:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1142:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1144:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1146:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1148:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    114a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    114c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    114e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1150:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1152:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1154:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1156:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1158:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    115a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    115c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    115e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1160:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1162:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1164:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1166:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1168:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    116a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    116c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    116e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1170:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1172:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1174:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1176:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1178:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    117a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    117c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    117e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1180:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1182:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1184:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1186:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1188:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    118a:	89 a5       	ldd	r24, Y+41	; 0x29
    118c:	88 23       	and	r24, r24
    118e:	09 f4       	brne	.+2      	; 0x1192 <_Z14osc1MenuUpdatev+0x82a>
    1190:	81 c0       	rjmp	.+258    	; 0x1294 <_Z14osc1MenuUpdatev+0x92c>
    1192:	de 01       	movw	r26, r28
    1194:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1196:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1198:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    119a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    119c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    119e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    11cc:	44 9a       	sbi	0x08, 4	; 8
    11ce:	99 27       	eor	r25, r25
    11d0:	87 fd       	sbrc	r24, 7
    11d2:	90 95       	com	r25
    11d4:	80 97       	sbiw	r24, 0x20	; 32
    11d6:	fc 01       	movw	r30, r24
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	e8 0f       	add	r30, r24
    11e2:	f9 1f       	adc	r31, r25
    11e4:	ef 5e       	subi	r30, 0xEF	; 239
    11e6:	fc 4f       	sbci	r31, 0xFC	; 252
    11e8:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    11ea:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    11ec:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    11ee:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11f0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    11f2:	82 2f       	mov	r24, r18
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	88 0f       	add	r24, r24
    11f8:	89 2f       	mov	r24, r25
    11fa:	88 1f       	adc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	89 2b       	or	r24, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <_Z14osc1MenuUpdatev+0x89c>
    1202:	61 c0       	rjmp	.+194    	; 0x12c6 <_Z14osc1MenuUpdatev+0x95e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1204:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1206:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1208:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    120a:	26 fd       	sbrc	r18, 6
    120c:	61 c0       	rjmp	.+194    	; 0x12d0 <_Z14osc1MenuUpdatev+0x968>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    120e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1210:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1212:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1214:	25 fd       	sbrc	r18, 5
    1216:	55 c0       	rjmp	.+170    	; 0x12c2 <_Z14osc1MenuUpdatev+0x95a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1218:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    121a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    121c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    121e:	24 fd       	sbrc	r18, 4
    1220:	4e c0       	rjmp	.+156    	; 0x12be <_Z14osc1MenuUpdatev+0x956>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1222:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1224:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1226:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1228:	23 fd       	sbrc	r18, 3
    122a:	47 c0       	rjmp	.+142    	; 0x12ba <_Z14osc1MenuUpdatev+0x952>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    122c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    122e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1230:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1232:	22 fd       	sbrc	r18, 2
    1234:	40 c0       	rjmp	.+128    	; 0x12b6 <_Z14osc1MenuUpdatev+0x94e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1236:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1238:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    123a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    123c:	21 fd       	sbrc	r18, 1
    123e:	39 c0       	rjmp	.+114    	; 0x12b2 <_Z14osc1MenuUpdatev+0x94a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1240:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1242:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1244:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1246:	20 fd       	sbrc	r18, 0
    1248:	32 c0       	rjmp	.+100    	; 0x12ae <_Z14osc1MenuUpdatev+0x946>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    124a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    124c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    124e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1250:	44 9a       	sbi	0x08, 4	; 8
    1252:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1254:	51 f6       	brne	.-108    	; 0x11ea <_Z14osc1MenuUpdatev+0x882>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1256:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1258:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    125a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    125c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    125e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1260:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1262:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1264:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1266:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1268:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    126a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    126c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    126e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1270:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1272:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1274:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1276:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1278:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    127a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    127c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    127e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1280:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1282:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1284:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1286:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1288:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    128a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    128c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    128e:	8d 91       	ld	r24, X+
    1290:	81 11       	cpse	r24, r1
    1292:	81 cf       	rjmp	.-254    	; 0x1196 <_Z14osc1MenuUpdatev+0x82e>
	
	osc1MenuWaveformUpdate();
	osc1MenuCentsUpdate();
	osc1MenuSemisUpdate();
	osc1MenuSyncUpdate();
}
    1294:	e5 96       	adiw	r28, 0x35	; 53
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12ae:	5d 9a       	sbi	0x0b, 5	; 11
    12b0:	cd cf       	rjmp	.-102    	; 0x124c <_Z14osc1MenuUpdatev+0x8e4>
    12b2:	5d 9a       	sbi	0x0b, 5	; 11
    12b4:	c6 cf       	rjmp	.-116    	; 0x1242 <_Z14osc1MenuUpdatev+0x8da>
    12b6:	5d 9a       	sbi	0x0b, 5	; 11
    12b8:	bf cf       	rjmp	.-130    	; 0x1238 <_Z14osc1MenuUpdatev+0x8d0>
    12ba:	5d 9a       	sbi	0x0b, 5	; 11
    12bc:	b8 cf       	rjmp	.-144    	; 0x122e <_Z14osc1MenuUpdatev+0x8c6>
    12be:	5d 9a       	sbi	0x0b, 5	; 11
    12c0:	b1 cf       	rjmp	.-158    	; 0x1224 <_Z14osc1MenuUpdatev+0x8bc>
    12c2:	5d 9a       	sbi	0x0b, 5	; 11
    12c4:	aa cf       	rjmp	.-172    	; 0x121a <_Z14osc1MenuUpdatev+0x8b2>
    12c6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12ca:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    12cc:	26 ff       	sbrs	r18, 6
    12ce:	9f cf       	rjmp	.-194    	; 0x120e <_Z14osc1MenuUpdatev+0x8a6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12d0:	5d 9a       	sbi	0x0b, 5	; 11
    12d2:	9e cf       	rjmp	.-196    	; 0x1210 <_Z14osc1MenuUpdatev+0x8a8>
    12d4:	5d 9a       	sbi	0x0b, 5	; 11
    12d6:	d3 ce       	rjmp	.-602    	; 0x107e <_Z14osc1MenuUpdatev+0x716>
    12d8:	5d 9a       	sbi	0x0b, 5	; 11
    12da:	cc ce       	rjmp	.-616    	; 0x1074 <_Z14osc1MenuUpdatev+0x70c>
    12dc:	5d 9a       	sbi	0x0b, 5	; 11
    12de:	c5 ce       	rjmp	.-630    	; 0x106a <_Z14osc1MenuUpdatev+0x702>
    12e0:	5d 9a       	sbi	0x0b, 5	; 11
    12e2:	be ce       	rjmp	.-644    	; 0x1060 <_Z14osc1MenuUpdatev+0x6f8>
    12e4:	5d 9a       	sbi	0x0b, 5	; 11
    12e6:	b7 ce       	rjmp	.-658    	; 0x1056 <_Z14osc1MenuUpdatev+0x6ee>
    12e8:	5d 9a       	sbi	0x0b, 5	; 11
    12ea:	b0 ce       	rjmp	.-672    	; 0x104c <_Z14osc1MenuUpdatev+0x6e4>
    12ec:	5d 9a       	sbi	0x0b, 5	; 11
    12ee:	d6 cd       	rjmp	.-1108   	; 0xe9c <_Z14osc1MenuUpdatev+0x534>
    12f0:	5d 9a       	sbi	0x0b, 5	; 11
    12f2:	a7 ce       	rjmp	.-690    	; 0x1042 <_Z14osc1MenuUpdatev+0x6da>
    12f4:	5d 9a       	sbi	0x0b, 5	; 11
    12f6:	a0 ce       	rjmp	.-704    	; 0x1038 <_Z14osc1MenuUpdatev+0x6d0>
    12f8:	5d 9a       	sbi	0x0b, 5	; 11
    12fa:	cb cd       	rjmp	.-1130   	; 0xe92 <_Z14osc1MenuUpdatev+0x52a>
    12fc:	5d 9a       	sbi	0x0b, 5	; 11
    12fe:	c4 cd       	rjmp	.-1144   	; 0xe88 <_Z14osc1MenuUpdatev+0x520>
    1300:	5d 9a       	sbi	0x0b, 5	; 11
    1302:	bd cd       	rjmp	.-1158   	; 0xe7e <_Z14osc1MenuUpdatev+0x516>
    1304:	5d 9a       	sbi	0x0b, 5	; 11
    1306:	b6 cd       	rjmp	.-1172   	; 0xe74 <_Z14osc1MenuUpdatev+0x50c>
    1308:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    130a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    130c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    130e:	26 ff       	sbrs	r18, 6
    1310:	a6 cd       	rjmp	.-1204   	; 0xe5e <_Z14osc1MenuUpdatev+0x4f6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1312:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1314:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1316:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1318:	25 ff       	sbrs	r18, 5
    131a:	a6 cd       	rjmp	.-1204   	; 0xe68 <_Z14osc1MenuUpdatev+0x500>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    131c:	5d 9a       	sbi	0x0b, 5	; 11
    131e:	a5 cd       	rjmp	.-1206   	; 0xe6a <_Z14osc1MenuUpdatev+0x502>
    1320:	5d 9a       	sbi	0x0b, 5	; 11
    1322:	c8 cc       	rjmp	.-1648   	; 0xcb4 <_Z14osc1MenuUpdatev+0x34c>
    1324:	5d 9a       	sbi	0x0b, 5	; 11
    1326:	c1 cc       	rjmp	.-1662   	; 0xcaa <_Z14osc1MenuUpdatev+0x342>
    1328:	5d 9a       	sbi	0x0b, 5	; 11
    132a:	ba cc       	rjmp	.-1676   	; 0xca0 <_Z14osc1MenuUpdatev+0x338>
    132c:	5d 9a       	sbi	0x0b, 5	; 11
    132e:	b3 cc       	rjmp	.-1690   	; 0xc96 <_Z14osc1MenuUpdatev+0x32e>
    1330:	5d 9a       	sbi	0x0b, 5	; 11
    1332:	ac cc       	rjmp	.-1704   	; 0xc8c <_Z14osc1MenuUpdatev+0x324>
    1334:	5d 9a       	sbi	0x0b, 5	; 11
    1336:	a5 cc       	rjmp	.-1718   	; 0xc82 <_Z14osc1MenuUpdatev+0x31a>
    1338:	5d 9a       	sbi	0x0b, 5	; 11
    133a:	9e cc       	rjmp	.-1732   	; 0xc78 <_Z14osc1MenuUpdatev+0x310>
    133c:	5d 9a       	sbi	0x0b, 5	; 11
    133e:	d0 cb       	rjmp	.-2144   	; 0xae0 <_Z14osc1MenuUpdatev+0x178>
    1340:	5d 9a       	sbi	0x0b, 5	; 11
    1342:	95 cc       	rjmp	.-1750   	; 0xc6e <_Z14osc1MenuUpdatev+0x306>
    1344:	5d 9a       	sbi	0x0b, 5	; 11
    1346:	c7 cb       	rjmp	.-2162   	; 0xad6 <_Z14osc1MenuUpdatev+0x16e>
    1348:	5d 9a       	sbi	0x0b, 5	; 11
    134a:	c0 cb       	rjmp	.-2176   	; 0xacc <_Z14osc1MenuUpdatev+0x164>
    134c:	5d 9a       	sbi	0x0b, 5	; 11
    134e:	b9 cb       	rjmp	.-2190   	; 0xac2 <_Z14osc1MenuUpdatev+0x15a>
    1350:	5d 9a       	sbi	0x0b, 5	; 11
    1352:	b2 cb       	rjmp	.-2204   	; 0xab8 <_Z14osc1MenuUpdatev+0x150>
    1354:	5d 9a       	sbi	0x0b, 5	; 11
    1356:	ab cb       	rjmp	.-2218   	; 0xaae <_Z14osc1MenuUpdatev+0x146>
    1358:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    135a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    135c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    135e:	26 ff       	sbrs	r18, 6
    1360:	a0 cb       	rjmp	.-2240   	; 0xaa2 <_Z14osc1MenuUpdatev+0x13a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1362:	5d 9a       	sbi	0x0b, 5	; 11
    1364:	9f cb       	rjmp	.-2242   	; 0xaa4 <_Z14osc1MenuUpdatev+0x13c>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    1366:	2f e4       	ldi	r18, 0x4F	; 79
    1368:	3e e4       	ldi	r19, 0x4E	; 78
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	2f 83       	std	Y+7, r18	; 0x07
    136e:	38 87       	std	Y+8, r19	; 0x08
    1370:	49 87       	std	Y+9, r20	; 0x09
    1372:	be ce       	rjmp	.-644    	; 0x10f0 <_Z14osc1MenuUpdatev+0x788>

00001374 <_Z18lfoMenuRouteUpdatev>:
	strcat(buf, "    ");
	writeLine(4, buf);
}

inline void lfoMenuRouteUpdate()
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	a1 97       	sbiw	r28, 0x21	; 33
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    138c:	87 e0       	ldi	r24, 0x07	; 7
    138e:	e4 e3       	ldi	r30, 0x34	; 52
    1390:	f1 e0       	ldi	r31, 0x01	; 1
    1392:	de 01       	movw	r26, r28
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	01 90       	ld	r0, Z+
    1398:	0d 92       	st	X+, r0
    139a:	8a 95       	dec	r24
    139c:	e1 f7       	brne	.-8      	; 0x1396 <_Z18lfoMenuRouteUpdatev+0x22>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    139e:	e0 91 b6 05 	lds	r30, 0x05B6
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e8 59       	subi	r30, 0x98	; 152
    13aa:	f9 4f       	sbci	r31, 0xF9	; 249
    13ac:	65 91       	lpm	r22, Z+
    13ae:	74 91       	lpm	r23, Z
    13b0:	8e 01       	movw	r16, r28
    13b2:	0f 5f       	subi	r16, 0xFF	; 255
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	c8 01       	movw	r24, r16
    13b8:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "    ");
    13bc:	d8 01       	movw	r26, r16
    13be:	0d 90       	ld	r0, X+
    13c0:	00 20       	and	r0, r0
    13c2:	e9 f7       	brne	.-6      	; 0x13be <_Z18lfoMenuRouteUpdatev+0x4a>
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	85 e0       	ldi	r24, 0x05	; 5
    13c8:	ef e3       	ldi	r30, 0x3F	; 63
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	01 90       	ld	r0, Z+
    13ce:	0d 92       	st	X+, r0
    13d0:	8a 95       	dec	r24
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <_Z18lfoMenuRouteUpdatev+0x58>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    13d4:	8c e0       	ldi	r24, 0x0C	; 12
    13d6:	f8 01       	movw	r30, r16
    13d8:	de 01       	movw	r26, r28
    13da:	55 96       	adiw	r26, 0x15	; 21
    13dc:	01 90       	ld	r0, Z+
    13de:	0d 92       	st	X+, r0
    13e0:	8a 95       	dec	r24
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <_Z18lfoMenuRouteUpdatev+0x68>
	buf[12] = '\0';
    13e4:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    13e6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    13e8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ea:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    13ec:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1400:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1402:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1404:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1406:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1408:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    140a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    140c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    140e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1410:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1412:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1414:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1416:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1418:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    141a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    141c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    141e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1420:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1422:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1424:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1426:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1428:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    142a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    142c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    142e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1430:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1432:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1434:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1436:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1438:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    143a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    143c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    143e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1440:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1442:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1444:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1446:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1448:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    144a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    144c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    144e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1450:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1452:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1454:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1456:	8d 89       	ldd	r24, Y+21	; 0x15
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <_Z18lfoMenuRouteUpdatev+0xea>
    145c:	81 c0       	rjmp	.+258    	; 0x1560 <_Z18lfoMenuRouteUpdatev+0x1ec>
    145e:	de 01       	movw	r26, r28
    1460:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1462:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1464:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1466:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1468:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    146a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    146c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    146e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1470:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1472:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1474:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1476:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1478:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    147a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    147c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    147e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1480:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1482:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1484:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1486:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1488:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    148a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    148c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    148e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1490:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1492:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1494:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1496:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1498:	44 9a       	sbi	0x08, 4	; 8
    149a:	99 27       	eor	r25, r25
    149c:	87 fd       	sbrc	r24, 7
    149e:	90 95       	com	r25
    14a0:	80 97       	sbiw	r24, 0x20	; 32
    14a2:	fc 01       	movw	r30, r24
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	ef 5e       	subi	r30, 0xEF	; 239
    14b2:	fc 4f       	sbci	r31, 0xFC	; 252
    14b4:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    14b6:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    14b8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    14ba:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14bc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14be:	82 2f       	mov	r24, r18
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 0f       	add	r24, r24
    14c4:	89 2f       	mov	r24, r25
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 0b       	sbc	r25, r25
    14ca:	89 2b       	or	r24, r25
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <_Z18lfoMenuRouteUpdatev+0x15c>
    14ce:	5f c0       	rjmp	.+190    	; 0x158e <_Z18lfoMenuRouteUpdatev+0x21a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14d6:	26 fd       	sbrc	r18, 6
    14d8:	5f c0       	rjmp	.+190    	; 0x1598 <_Z18lfoMenuRouteUpdatev+0x224>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14de:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14e0:	25 fd       	sbrc	r18, 5
    14e2:	53 c0       	rjmp	.+166    	; 0x158a <_Z18lfoMenuRouteUpdatev+0x216>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14ea:	24 fd       	sbrc	r18, 4
    14ec:	4c c0       	rjmp	.+152    	; 0x1586 <_Z18lfoMenuRouteUpdatev+0x212>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14f4:	23 fd       	sbrc	r18, 3
    14f6:	45 c0       	rjmp	.+138    	; 0x1582 <_Z18lfoMenuRouteUpdatev+0x20e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14fe:	22 fd       	sbrc	r18, 2
    1500:	3e c0       	rjmp	.+124    	; 0x157e <_Z18lfoMenuRouteUpdatev+0x20a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1502:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1504:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1506:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1508:	21 fd       	sbrc	r18, 1
    150a:	37 c0       	rjmp	.+110    	; 0x157a <_Z18lfoMenuRouteUpdatev+0x206>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    150c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    150e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1510:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1512:	20 fd       	sbrc	r18, 0
    1514:	30 c0       	rjmp	.+96     	; 0x1576 <_Z18lfoMenuRouteUpdatev+0x202>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1516:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1518:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    151a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    151c:	44 9a       	sbi	0x08, 4	; 8
    151e:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1520:	51 f6       	brne	.-108    	; 0x14b6 <_Z18lfoMenuRouteUpdatev+0x142>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1522:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1524:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1526:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1528:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    152a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    152c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    152e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1530:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1532:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1534:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1536:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1538:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    153a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    153c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    153e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1540:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1542:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1544:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1546:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1548:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    154a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    154c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    154e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1550:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1552:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1554:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1556:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1558:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    155a:	8d 91       	ld	r24, X+
    155c:	81 11       	cpse	r24, r1
    155e:	81 cf       	rjmp	.-254    	; 0x1462 <_Z18lfoMenuRouteUpdatev+0xee>
	
	sprintf(buf, "%s", routeLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
	strcat(buf, "    ");
	writeLine(5, buf);
}
    1560:	a1 96       	adiw	r28, 0x21	; 33
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1576:	5d 9a       	sbi	0x0b, 5	; 11
    1578:	cf cf       	rjmp	.-98     	; 0x1518 <_Z18lfoMenuRouteUpdatev+0x1a4>
    157a:	5d 9a       	sbi	0x0b, 5	; 11
    157c:	c8 cf       	rjmp	.-112    	; 0x150e <_Z18lfoMenuRouteUpdatev+0x19a>
    157e:	5d 9a       	sbi	0x0b, 5	; 11
    1580:	c1 cf       	rjmp	.-126    	; 0x1504 <_Z18lfoMenuRouteUpdatev+0x190>
    1582:	5d 9a       	sbi	0x0b, 5	; 11
    1584:	ba cf       	rjmp	.-140    	; 0x14fa <_Z18lfoMenuRouteUpdatev+0x186>
    1586:	5d 9a       	sbi	0x0b, 5	; 11
    1588:	b3 cf       	rjmp	.-154    	; 0x14f0 <_Z18lfoMenuRouteUpdatev+0x17c>
    158a:	5d 9a       	sbi	0x0b, 5	; 11
    158c:	ac cf       	rjmp	.-168    	; 0x14e6 <_Z18lfoMenuRouteUpdatev+0x172>
    158e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1590:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1592:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1594:	26 ff       	sbrs	r18, 6
    1596:	a1 cf       	rjmp	.-190    	; 0x14da <_Z18lfoMenuRouteUpdatev+0x166>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1598:	5d 9a       	sbi	0x0b, 5	; 11
    159a:	a0 cf       	rjmp	.-192    	; 0x14dc <_Z18lfoMenuRouteUpdatev+0x168>

0000159c <_Z7initLCDv>:
	writeLine(5, buf);
}

void initLCD()
{
	sbi(LCD_SCE_DIR, LCD_SCE_PIN);
    159c:	3c 9a       	sbi	0x07, 4	; 7
	sbi(LCD_RST_DIR, LCD_RST_PIN);
    159e:	3d 9a       	sbi	0x07, 5	; 7
	sbi(LCD_DC_DIR, LCD_DC_PIN);
    15a0:	25 9a       	sbi	0x04, 5	; 4
	sbi(LCD_DATA_DIR, LCD_DATA_PIN);
    15a2:	55 9a       	sbi	0x0a, 5	; 10
	sbi(LCD_CLK_DIR, LCD_CLK_PIN);
    15a4:	54 9a       	sbi	0x0a, 4	; 10
	
	cbi(LCD_RST_WR, LCD_RST_PIN);
    15a6:	45 98       	cbi	0x08, 5	; 8
	sbi(LCD_RST_WR, LCD_RST_PIN);
    15a8:	45 9a       	sbi	0x08, 5	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15aa:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15ac:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ba:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15da:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15de:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    15e0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15e2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15e4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15f4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15fa:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1600:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1602:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1604:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1606:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1608:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    160a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    160c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    160e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1610:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1612:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1614:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1616:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1618:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    161a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    161c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    161e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1620:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1622:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1624:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1626:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1628:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    162a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    162c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    162e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1630:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1632:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1634:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1636:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1638:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    163a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    163c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    163e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1640:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1642:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1644:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1646:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1648:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    164a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    164c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    164e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1650:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1652:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1654:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1656:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1658:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    165a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    165c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    165e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1660:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1662:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1664:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1666:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1668:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    166a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    166c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    166e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1670:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1672:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1674:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1676:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1678:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    167a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    167c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    167e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1680:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1682:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1684:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1686:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1688:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    168a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    168c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    168e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1690:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1692:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1694:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1696:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1698:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    169a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    169c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    169e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16be:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16c0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    16c2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    16c4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16de:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16e0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16e6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16f2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16f8:	44 9a       	sbi	0x08, 4	; 8
    16fa:	08 95       	ret

000016fc <_Z5setupv>:
		}
	}
}

void setup()
{
    16fc:	2f 92       	push	r2
    16fe:	3f 92       	push	r3
    1700:	4f 92       	push	r4
    1702:	5f 92       	push	r5
    1704:	6f 92       	push	r6
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2f 97       	sbiw	r28, 0x0f	; 15
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e8       	ldi	r25, 0x80	; 128
    1734:	ac e8       	ldi	r26, 0x8C	; 140
    1736:	ba e7       	ldi	r27, 0x7A	; 122
    1738:	80 93 63 05 	sts	0x0563, r24
    173c:	90 93 64 05 	sts	0x0564, r25
    1740:	a0 93 65 05 	sts	0x0565, r26
    1744:	b0 93 66 05 	sts	0x0566, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1754:	89 80       	ldd	r8, Y+1	; 0x01
    1756:	9a 80       	ldd	r9, Y+2	; 0x02
    1758:	ab 80       	ldd	r10, Y+3	; 0x03
    175a:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    175c:	94 01       	movw	r18, r8
    175e:	a5 01       	movw	r20, r10
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	00 e1       	ldi	r16, 0x10	; 16
    176a:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    176e:	a1 2c       	mov	r10, r1
    1770:	e0 e8       	ldi	r30, 0x80	; 128
    1772:	be 2e       	mov	r11, r30
    1774:	fc e8       	ldi	r31, 0x8C	; 140
    1776:	cf 2e       	mov	r12, r31
    1778:	aa e7       	ldi	r26, 0x7A	; 122
    177a:	da 2e       	mov	r13, r26
    177c:	e1 2c       	mov	r14, r1
    177e:	f1 2c       	mov	r15, r1
    1780:	00 e0       	ldi	r16, 0x00	; 0
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivdi3>
    1788:	20 93 5f 05 	sts	0x055F, r18
    178c:	30 93 60 05 	sts	0x0560, r19
    1790:	40 93 61 05 	sts	0x0561, r20
    1794:	50 93 62 05 	sts	0x0562, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    17a0:	89 80       	ldd	r8, Y+1	; 0x01
    17a2:	9a 80       	ldd	r9, Y+2	; 0x02
    17a4:	ab 80       	ldd	r10, Y+3	; 0x03
    17a6:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    17a8:	94 01       	movw	r18, r8
    17aa:	a5 01       	movw	r20, r10
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	00 e1       	ldi	r16, 0x10	; 16
    17b6:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    17ba:	a1 2c       	mov	r10, r1
    17bc:	b0 e8       	ldi	r27, 0x80	; 128
    17be:	bb 2e       	mov	r11, r27
    17c0:	0c e8       	ldi	r16, 0x8C	; 140
    17c2:	c0 2e       	mov	r12, r16
    17c4:	ea e7       	ldi	r30, 0x7A	; 122
    17c6:	de 2e       	mov	r13, r30
    17c8:	e1 2c       	mov	r14, r1
    17ca:	f1 2c       	mov	r15, r1
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivdi3>
    17d2:	39 01       	movw	r6, r18
    17d4:	4a 01       	movw	r8, r20
    17d6:	1b 01       	movw	r2, r22
    17d8:	2c 01       	movw	r4, r24
    17da:	32 2f       	mov	r19, r18
    17dc:	30 93 67 05 	sts	0x0567, r19
    17e0:	70 92 68 05 	sts	0x0568, r7
    17e4:	80 92 69 05 	sts	0x0569, r8
    17e8:	90 92 6a 05 	sts	0x056A, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    17ec:	88 eb       	ldi	r24, 0xB8	; 184
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	90 93 fa 05 	sts	0x05FA, r25
    17f4:	80 93 f9 05 	sts	0x05F9, r24
	*((unsigned short*)&(b)) = 0;
    17f8:	10 92 f8 05 	sts	0x05F8, r1
    17fc:	10 92 f7 05 	sts	0x05F7, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1800:	00 91 f7 05 	lds	r16, 0x05F7
    1804:	10 91 f8 05 	lds	r17, 0x05F8
    1808:	20 91 f9 05 	lds	r18, 0x05F9
    180c:	30 91 fa 05 	lds	r19, 0x05FA
	temp *= rhs;
    1810:	58 01       	movw	r10, r16
    1812:	69 01       	movw	r12, r18
    1814:	00 e0       	ldi	r16, 0x00	; 0
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	93 01       	movw	r18, r6
    181a:	a4 01       	movw	r20, r8
    181c:	b1 01       	movw	r22, r2
    181e:	c2 01       	movw	r24, r4
    1820:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muldi3>
	
	return (unsigned long)(temp >> 16);
    1824:	00 e1       	ldi	r16, 0x10	; 16
    1826:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    182a:	c9 01       	movw	r24, r18
    182c:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    182e:	80 93 e7 05 	sts	0x05E7, r24
    1832:	90 93 e8 05 	sts	0x05E8, r25
    1836:	a0 93 e9 05 	sts	0x05E9, r26
    183a:	b0 93 ea 05 	sts	0x05EA, r27
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e8       	ldi	r25, 0x80	; 128
    1842:	a8 eb       	ldi	r26, 0xB8	; 184
    1844:	b1 e0       	ldi	r27, 0x01	; 1
    1846:	80 93 d7 05 	sts	0x05D7, r24
    184a:	90 93 d8 05 	sts	0x05D8, r25
    184e:	a0 93 d9 05 	sts	0x05D9, r26
    1852:	b0 93 da 05 	sts	0x05DA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1856:	93 01       	movw	r18, r6
    1858:	a4 01       	movw	r20, r8
    185a:	b1 01       	movw	r22, r2
    185c:	c2 01       	movw	r24, r4
    185e:	03 e0       	ldi	r16, 0x03	; 3
    1860:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    1864:	53 01       	movw	r10, r6
    1866:	64 01       	movw	r12, r8
    1868:	71 01       	movw	r14, r2
    186a:	82 01       	movw	r16, r4
    186c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <__subdi3>
    1870:	07 e0       	ldi	r16, 0x07	; 7
    1872:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    1876:	04 2d       	mov	r16, r4
    1878:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <__subdi3>
    187c:	06 e0       	ldi	r16, 0x06	; 6
    187e:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    1882:	04 2d       	mov	r16, r4
    1884:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <__subdi3>
    1888:	59 01       	movw	r10, r18
    188a:	6a 01       	movw	r12, r20
    188c:	7b 01       	movw	r14, r22
    188e:	e8 2f       	mov	r30, r24
    1890:	19 2f       	mov	r17, r25
    1892:	03 e0       	ldi	r16, 0x03	; 3
    1894:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    1898:	0e 2f       	mov	r16, r30
    189a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <__subdi3>
    189e:	03 e0       	ldi	r16, 0x03	; 3
    18a0:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    18a4:	53 01       	movw	r10, r6
    18a6:	64 01       	movw	r12, r8
    18a8:	71 01       	movw	r14, r2
    18aa:	82 01       	movw	r16, r4
    18ac:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <__subdi3>
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	3d 87       	std	Y+13, r19	; 0x0d
    18b4:	4e 87       	std	Y+14, r20	; 0x0e
    18b6:	5f 87       	std	Y+15, r21	; 0x0f
    18b8:	b6 2f       	mov	r27, r22
    18ba:	a7 2f       	mov	r26, r23
    18bc:	f8 2f       	mov	r31, r24
    18be:	e9 2f       	mov	r30, r25
    18c0:	7a 2f       	mov	r23, r26
    18c2:	8f 2f       	mov	r24, r31
    18c4:	9e 2f       	mov	r25, r30
    18c6:	03 e0       	ldi	r16, 0x03	; 3
    18c8:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <__ashldi3>
    18cc:	59 01       	movw	r10, r18
    18ce:	6a 01       	movw	r12, r20
    18d0:	7b 01       	movw	r14, r22
    18d2:	8c 01       	movw	r16, r24
    18d4:	2d 81       	ldd	r18, Y+5	; 0x05
    18d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    18da:	5f 85       	ldd	r21, Y+15	; 0x0f
    18dc:	6b 2f       	mov	r22, r27
    18de:	7a 2f       	mov	r23, r26
    18e0:	8f 2f       	mov	r24, r31
    18e2:	9e 2f       	mov	r25, r30
    18e4:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__adddi3>
    18e8:	53 01       	movw	r10, r6
    18ea:	64 01       	movw	r12, r8
    18ec:	71 01       	movw	r14, r2
    18ee:	82 01       	movw	r16, r4
    18f0:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__adddi3>
	
	return (unsigned long)(temp >> 16);
    18f4:	00 e1       	ldi	r16, 0x10	; 16
    18f6:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    18fa:	c9 01       	movw	r24, r18
    18fc:	da 01       	movw	r26, r20

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);

	toFixed(440.5, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    18fe:	80 93 cf 05 	sts	0x05CF, r24
    1902:	90 93 d0 05 	sts	0x05D0, r25
    1906:	a0 93 d1 05 	sts	0x05D1, r26
    190a:	b0 93 d2 05 	sts	0x05D2, r27
	
	initLCD();
    190e:	0e 94 ce 0a 	call	0x159c	; 0x159c <_Z7initLCDv>
    1912:	88 ef       	ldi	r24, 0xF8	; 248
    1914:	91 e0       	ldi	r25, 0x01	; 1
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1916:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1918:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    191a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    191c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    191e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1920:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1922:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1924:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1926:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1928:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    192a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    192c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    192e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1930:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1932:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1934:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1936:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1938:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    193a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    193c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    193e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1940:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1942:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1944:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1946:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1948:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    194a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    194c:	44 9a       	sbi	0x08, 4	; 8
    194e:	01 97       	sbiw	r24, 0x01	; 1
		lcdCharacter(*str++);
}

inline void lcdClear()
{
	for(int index = 0; index < (LCD_X*LCD_Y)/8; index++)
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	09 f7       	brne	.-62     	; 0x1916 <_Z5setupv+0x21a>

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1954:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1956:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1958:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    195a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    195c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    195e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1960:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1962:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1964:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1966:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1968:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    196a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    196c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    196e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1970:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1972:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1974:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1976:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1978:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    197a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    197c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    197e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1980:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1982:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1984:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1986:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1988:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    198a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    198c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    198e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1990:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1992:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1994:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1996:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1998:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    199a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    199c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    199e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19c0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    19c2:	44 9a       	sbi	0x08, 4	; 8
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
    19c4:	8f e0       	ldi	r24, 0x0F	; 15
    19c6:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1);
    19ca:	8a e8       	ldi	r24, 0x8A	; 138
    19cc:	80 93 7a 00 	sts	0x007A, r24
	gotoXY(0,0);
}

void uartInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    19d0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    19d4:	8f e1       	ldi	r24, 0x1F	; 31
    19d6:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    19da:	88 e9       	ldi	r24, 0x98	; 152
    19dc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	80 93 c2 00 	sts	0x00C2, r24
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
    19e6:	80 91 b1 00 	lds	r24, 0x00B1
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
    19f0:	80 91 b1 00 	lds	r24, 0x00B1
    19f4:	8d 7f       	andi	r24, 0xFD	; 253
    19f6:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
    19fa:	80 91 b1 00 	lds	r24, 0x00B1
    19fe:	8b 7f       	andi	r24, 0xFB	; 251
    1a00:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
    1a04:	80 91 b0 00 	lds	r24, 0x00B0
    1a08:	8f 7b       	andi	r24, 0xBF	; 191
    1a0a:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
    1a0e:	80 91 b0 00 	lds	r24, 0x00B0
    1a12:	80 68       	ori	r24, 0x80	; 128
    1a14:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
    1a18:	80 91 b0 00 	lds	r24, 0x00B0
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
    1a22:	80 91 b0 00 	lds	r24, 0x00B0
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
    1a2c:	80 91 b1 00 	lds	r24, 0x00B1
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	80 93 b1 00 	sts	0x00B1, r24
	noteUpdate();
}

void btnInit()
{
	cbi(OSC1_BTN_DIR, OSC1_BTN_PIN);
    1a36:	56 98       	cbi	0x0a, 6	; 10
	sbi(OSC1_BTN_WR, OSC1_BTN_PIN);
    1a38:	5e 9a       	sbi	0x0b, 6	; 11
	
	cbi(OSC2_BTN_DIR, OSC2_BTN_PIN); //Set OSC2_BTN as an input
    1a3a:	57 98       	cbi	0x0a, 7	; 10
	sbi(OSC2_BTN_WR, OSC2_BTN_PIN); //Set the internal pull-up
    1a3c:	5f 9a       	sbi	0x0b, 7	; 11
	
	cbi(SAVE_BTN_DIR, SAVE_BTN_PIN); //Set SAVE_BTN as an input
    1a3e:	20 98       	cbi	0x04, 0	; 4
	sbi(SAVE_BTN_WR, SAVE_BTN_PIN);	//Set the internal pull-up
    1a40:	28 9a       	sbi	0x05, 0	; 5
	
	cbi(BANK_BTN_DIR, BANK_BTN_PIN);
    1a42:	24 98       	cbi	0x04, 4	; 4
	sbi(BANK_BTN_WR, BANK_BTN_PIN);
    1a44:	2c 9a       	sbi	0x05, 4	; 5
	
	cbi(LOCK_BTN_DIR, LOCK_BTN_PIN);
    1a46:	22 98       	cbi	0x04, 2	; 4
	sbi(LOCK_BTN_WR, LOCK_BTN_PIN);
    1a48:	2a 9a       	sbi	0x05, 2	; 5
	
	cbi(EXTRA_BTN_DIR, EXTRA_BTN_PIN);
    1a4a:	21 98       	cbi	0x04, 1	; 4
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
    1a4c:	29 9a       	sbi	0x05, 1	; 5
	adcInit();
	uartInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
    1a4e:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
    1a50:	80 91 70 00 	lds	r24, 0x0070
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	80 93 70 00 	sts	0x0070, r24
	sei();
    1a5a:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    1a5c:	80 91 db 05 	lds	r24, 0x05DB
    1a60:	e0 91 e5 05 	lds	r30, 0x05E5
    1a64:	ff 27       	eor	r31, r31
    1a66:	e7 fd       	sbrc	r30, 7
    1a68:	f0 95       	com	r31
    1a6a:	e8 0f       	add	r30, r24
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	ed 55       	subi	r30, 0x5D	; 93
    1a78:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7a:	c0 80       	ld	r12, Z
    1a7c:	d1 80       	ldd	r13, Z+1	; 0x01
    1a7e:	e2 80       	ldd	r14, Z+2	; 0x02
    1a80:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    1a82:	80 91 cc 05 	lds	r24, 0x05CC
    1a86:	90 91 c2 05 	lds	r25, 0x05C2
    1a8a:	e0 91 cd 05 	lds	r30, 0x05CD
    1a8e:	ff 27       	eor	r31, r31
    1a90:	e7 fd       	sbrc	r30, 7
    1a92:	f0 95       	com	r31
    1a94:	e9 0f       	add	r30, r25
    1a96:	f1 1d       	adc	r31, r1
    1a98:	9c e0       	ldi	r25, 0x0C	; 12
    1a9a:	89 02       	muls	r24, r25
    1a9c:	e0 0d       	add	r30, r0
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	11 24       	eor	r1, r1
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	ed 55       	subi	r30, 0x5D	; 93
    1aac:	fe 4f       	sbci	r31, 0xFE	; 254
    1aae:	80 80       	ld	r8, Z
    1ab0:	91 80       	ldd	r9, Z+1	; 0x01
    1ab2:	a2 80       	ldd	r10, Z+2	; 0x02
    1ab4:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    1ab6:	60 91 e6 05 	lds	r22, 0x05E6
    1aba:	a7 e2       	ldi	r26, 0x27	; 39
    1abc:	6a 02       	muls	r22, r26
    1abe:	b0 01       	movw	r22, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	88 27       	eor	r24, r24
    1ac4:	77 fd       	sbrc	r23, 7
    1ac6:	80 95       	com	r24
    1ac8:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1aca:	a7 01       	movw	r20, r14
    1acc:	96 01       	movw	r18, r12
    1ace:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1ad2:	00 e1       	ldi	r16, 0x10	; 16
    1ad4:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    1ad8:	2d 83       	std	Y+5, r18	; 0x05
    1ada:	3e 83       	std	Y+6, r19	; 0x06
    1adc:	4f 83       	std	Y+7, r20	; 0x07
    1ade:	58 87       	std	Y+8, r21	; 0x08
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	af 81       	ldd	r26, Y+7	; 0x07
    1ae6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae8:	c8 0e       	add	r12, r24
    1aea:	d9 1e       	adc	r13, r25
    1aec:	ea 1e       	adc	r14, r26
    1aee:	fb 1e       	adc	r15, r27
    1af0:	c0 92 f7 05 	sts	0x05F7, r12
    1af4:	d0 92 f8 05 	sts	0x05F8, r13
    1af8:	e0 92 f9 05 	sts	0x05F9, r14
    1afc:	f0 92 fa 05 	sts	0x05FA, r15

	centsConst = 0x27*osc2CentsShift;
    1b00:	20 91 ce 05 	lds	r18, 0x05CE
    1b04:	97 e2       	ldi	r25, 0x27	; 39
    1b06:	29 02       	muls	r18, r25
    1b08:	90 01       	movw	r18, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	44 27       	eor	r20, r20
    1b0e:	37 fd       	sbrc	r19, 7
    1b10:	40 95       	com	r20
    1b12:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b14:	c5 01       	movw	r24, r10
    1b16:	b4 01       	movw	r22, r8
    1b18:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b1c:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    1b20:	2d 83       	std	Y+5, r18	; 0x05
    1b22:	3e 83       	std	Y+6, r19	; 0x06
    1b24:	4f 83       	std	Y+7, r20	; 0x07
    1b26:	58 87       	std	Y+8, r21	; 0x08
    1b28:	69 87       	std	Y+9, r22	; 0x09
    1b2a:	7a 87       	std	Y+10, r23	; 0x0a
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	af 81       	ldd	r26, Y+7	; 0x07
    1b36:	b8 85       	ldd	r27, Y+8	; 0x08
    1b38:	88 0e       	add	r8, r24
    1b3a:	99 1e       	adc	r9, r25
    1b3c:	aa 1e       	adc	r10, r26
    1b3e:	bb 1e       	adc	r11, r27
    1b40:	80 92 d7 05 	sts	0x05D7, r8
    1b44:	90 92 d8 05 	sts	0x05D8, r9
    1b48:	a0 92 d9 05 	sts	0x05D9, r10
    1b4c:	b0 92 da 05 	sts	0x05DA, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b50:	40 90 67 05 	lds	r4, 0x0567
    1b54:	50 90 68 05 	lds	r5, 0x0568
    1b58:	60 90 69 05 	lds	r6, 0x0569
    1b5c:	70 90 6a 05 	lds	r7, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b60:	c7 01       	movw	r24, r14
    1b62:	b6 01       	movw	r22, r12
    1b64:	a3 01       	movw	r20, r6
    1b66:	92 01       	movw	r18, r4
    1b68:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b6c:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    1b70:	c9 01       	movw	r24, r18
    1b72:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b74:	80 93 e7 05 	sts	0x05E7, r24
    1b78:	90 93 e8 05 	sts	0x05E8, r25
    1b7c:	a0 93 e9 05 	sts	0x05E9, r26
    1b80:	b0 93 ea 05 	sts	0x05EA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b84:	c5 01       	movw	r24, r10
    1b86:	b4 01       	movw	r22, r8
    1b88:	a3 01       	movw	r20, r6
    1b8a:	92 01       	movw	r18, r4
    1b8c:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b90:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    1b94:	c9 01       	movw	r24, r18
    1b96:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    1b98:	80 93 cf 05 	sts	0x05CF, r24
    1b9c:	90 93 d0 05 	sts	0x05D0, r25
    1ba0:	a0 93 d1 05 	sts	0x05D1, r26
    1ba4:	b0 93 d2 05 	sts	0x05D2, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    1ba8:	60 91 b7 05 	lds	r22, 0x05B7
    1bac:	70 91 b8 05 	lds	r23, 0x05B8
    1bb0:	80 91 b9 05 	lds	r24, 0x05B9
    1bb4:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1bb8:	a3 01       	movw	r20, r6
    1bba:	92 01       	movw	r18, r4
    1bbc:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1bc0:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    1bc4:	c9 01       	movw	r24, r18
    1bc6:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    1bc8:	80 93 bb 05 	sts	0x05BB, r24
    1bcc:	90 93 bc 05 	sts	0x05BC, r25
    1bd0:	a0 93 bd 05 	sts	0x05BD, r26
    1bd4:	b0 93 be 05 	sts	0x05BE, r27
	
	sbi (TIMSK2,TOIE2);
	sei();

	noteUpdate();
}
    1bd8:	2f 96       	adiw	r28, 0x0f	; 15
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	7f 90       	pop	r7
    1bfe:	6f 90       	pop	r6
    1c00:	5f 90       	pop	r5
    1c02:	4f 90       	pop	r4
    1c04:	3f 90       	pop	r3
    1c06:	2f 90       	pop	r2
    1c08:	08 95       	ret

00001c0a <main>:
void setup(void);

void noteUpdate(void);

int main(void)
{
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	c1 55       	subi	r28, 0x51	; 81
    1c14:	d1 09       	sbc	r29, r1
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
	setup();
    1c20:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_Z5setupv>
	
	osc1MenuUpdate();
    1c24:	0e 94 b4 04 	call	0x968	; 0x968 <_Z14osc1MenuUpdatev>
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	90 93 84 05 	sts	0x0584, r25
    1c30:	80 93 83 05 	sts	0x0583, r24
		menuKnobPos[i][1] = 512;
    1c34:	90 93 86 05 	sts	0x0586, r25
    1c38:	80 93 85 05 	sts	0x0585, r24
		menuKnobPos[i][2] = 512;
    1c3c:	90 93 88 05 	sts	0x0588, r25
    1c40:	80 93 87 05 	sts	0x0587, r24
		menuKnobPos[i][3] = 512;
    1c44:	90 93 8a 05 	sts	0x058A, r25
    1c48:	80 93 89 05 	sts	0x0589, r24
		
		menuChange[i][0] = 0;
    1c4c:	10 92 6b 05 	sts	0x056B, r1
		menuChange[i][1] = 0;
    1c50:	10 92 6c 05 	sts	0x056C, r1
		menuChange[i][2] = 0;
    1c54:	10 92 6d 05 	sts	0x056D, r1
		menuChange[i][3] = 0;
    1c58:	10 92 6e 05 	sts	0x056E, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c5c:	90 93 8c 05 	sts	0x058C, r25
    1c60:	80 93 8b 05 	sts	0x058B, r24
		menuKnobPos[i][1] = 512;
    1c64:	90 93 8e 05 	sts	0x058E, r25
    1c68:	80 93 8d 05 	sts	0x058D, r24
		menuKnobPos[i][2] = 512;
    1c6c:	90 93 90 05 	sts	0x0590, r25
    1c70:	80 93 8f 05 	sts	0x058F, r24
		menuKnobPos[i][3] = 512;
    1c74:	90 93 92 05 	sts	0x0592, r25
    1c78:	80 93 91 05 	sts	0x0591, r24
		
		menuChange[i][0] = 0;
    1c7c:	10 92 6f 05 	sts	0x056F, r1
		menuChange[i][1] = 0;
    1c80:	10 92 70 05 	sts	0x0570, r1
		menuChange[i][2] = 0;
    1c84:	10 92 71 05 	sts	0x0571, r1
		menuChange[i][3] = 0;
    1c88:	10 92 72 05 	sts	0x0572, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c8c:	90 93 94 05 	sts	0x0594, r25
    1c90:	80 93 93 05 	sts	0x0593, r24
		menuKnobPos[i][1] = 512;
    1c94:	90 93 96 05 	sts	0x0596, r25
    1c98:	80 93 95 05 	sts	0x0595, r24
		menuKnobPos[i][2] = 512;
    1c9c:	90 93 98 05 	sts	0x0598, r25
    1ca0:	80 93 97 05 	sts	0x0597, r24
		menuKnobPos[i][3] = 512;
    1ca4:	90 93 9a 05 	sts	0x059A, r25
    1ca8:	80 93 99 05 	sts	0x0599, r24
		
		menuChange[i][0] = 0;
    1cac:	10 92 73 05 	sts	0x0573, r1
		menuChange[i][1] = 0;
    1cb0:	10 92 74 05 	sts	0x0574, r1
		menuChange[i][2] = 0;
    1cb4:	10 92 75 05 	sts	0x0575, r1
		menuChange[i][3] = 0;
    1cb8:	10 92 76 05 	sts	0x0576, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1cbc:	90 93 9c 05 	sts	0x059C, r25
    1cc0:	80 93 9b 05 	sts	0x059B, r24
		menuKnobPos[i][1] = 512;
    1cc4:	90 93 9e 05 	sts	0x059E, r25
    1cc8:	80 93 9d 05 	sts	0x059D, r24
		menuKnobPos[i][2] = 512;
    1ccc:	90 93 a0 05 	sts	0x05A0, r25
    1cd0:	80 93 9f 05 	sts	0x059F, r24
		menuKnobPos[i][3] = 512;
    1cd4:	90 93 a2 05 	sts	0x05A2, r25
    1cd8:	80 93 a1 05 	sts	0x05A1, r24
		
		menuChange[i][0] = 0;
    1cdc:	10 92 77 05 	sts	0x0577, r1
		menuChange[i][1] = 0;
    1ce0:	10 92 78 05 	sts	0x0578, r1
		menuChange[i][2] = 0;
    1ce4:	10 92 79 05 	sts	0x0579, r1
		menuChange[i][3] = 0;
    1ce8:	10 92 7a 05 	sts	0x057A, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1cec:	90 93 a4 05 	sts	0x05A4, r25
    1cf0:	80 93 a3 05 	sts	0x05A3, r24
		menuKnobPos[i][1] = 512;
    1cf4:	90 93 a6 05 	sts	0x05A6, r25
    1cf8:	80 93 a5 05 	sts	0x05A5, r24
		menuKnobPos[i][2] = 512;
    1cfc:	90 93 a8 05 	sts	0x05A8, r25
    1d00:	80 93 a7 05 	sts	0x05A7, r24
		menuKnobPos[i][3] = 512;
    1d04:	90 93 aa 05 	sts	0x05AA, r25
    1d08:	80 93 a9 05 	sts	0x05A9, r24
		
		menuChange[i][0] = 0;
    1d0c:	10 92 7b 05 	sts	0x057B, r1
		menuChange[i][1] = 0;
    1d10:	10 92 7c 05 	sts	0x057C, r1
		menuChange[i][2] = 0;
    1d14:	10 92 7d 05 	sts	0x057D, r1
		menuChange[i][3] = 0;
    1d18:	10 92 7e 05 	sts	0x057E, r1
    1d1c:	9e 01       	movw	r18, r28
    1d1e:	2b 5e       	subi	r18, 0xEB	; 235
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	3f af       	std	Y+63, r19	; 0x3f
    1d24:	2e af       	std	Y+62, r18	; 0x3e
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	5c 01       	movw	r10, r24
    1d2c:	de 01       	movw	r26, r28
    1d2e:	18 96       	adiw	r26, 0x08	; 8
    1d30:	bb af       	std	Y+59, r27	; 0x3b
    1d32:	aa af       	std	Y+58, r26	; 0x3a
    1d34:	2f 50       	subi	r18, 0x0F	; 15
    1d36:	31 09       	sbc	r19, r1
    1d38:	3f ab       	std	Y+55, r19	; 0x37
    1d3a:	2e ab       	std	Y+54, r18	; 0x36
    1d3c:	06 96       	adiw	r24, 0x06	; 6
    1d3e:	99 af       	std	Y+57, r25	; 0x39
    1d40:	88 af       	std	Y+56, r24	; 0x38
    1d42:	12 96       	adiw	r26, 0x02	; 2
    1d44:	bd af       	std	Y+61, r27	; 0x3d
    1d46:	ac af       	std	Y+60, r26	; 0x3c

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d48:	be ad       	ldd	r27, Y+62	; 0x3e
    1d4a:	61 96       	adiw	r28, 0x11	; 17
    1d4c:	bf af       	std	Y+63, r27	; 0x3f
    1d4e:	61 97       	sbiw	r28, 0x11	; 17
    1d50:	2f ad       	ldd	r18, Y+63	; 0x3f
    1d52:	62 96       	adiw	r28, 0x12	; 18
    1d54:	2f af       	std	Y+63, r18	; 0x3f
    1d56:	62 97       	sbiw	r28, 0x12	; 18
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1d58:	15 01       	movw	r2, r10
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
    1d5a:	88 24       	eor	r8, r8
    1d5c:	83 94       	inc	r8
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1d5e:	1a 2d       	mov	r17, r10
    1d60:	9b 2c       	mov	r9, r11

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d62:	0d e0       	ldi	r16, 0x0D	; 13
    1d64:	d0 2e       	mov	r13, r16

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1d66:	87 e0       	ldi	r24, 0x07	; 7
    1d68:	e8 2e       	mov	r14, r24
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
	strcat(buf, "       ");
    1d6a:	08 e0       	ldi	r16, 0x08	; 8

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    1d6c:	96 e0       	ldi	r25, 0x06	; 6
    1d6e:	f9 2e       	mov	r15, r25
	sprintf(buf + 5, "%d", osc2OctaveShift);
	strcat(buf, "        ");
    1d70:	29 e0       	ldi	r18, 0x09	; 9
    1d72:	c2 2e       	mov	r12, r18
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1d74:	3c e0       	ldi	r19, 0x0C	; 12
    1d76:	73 2e       	mov	r7, r19
		menuChange[i][3] = 0;
	}
	
	while(1)
	{
		adcUpdate++;
    1d78:	80 91 f2 04 	lds	r24, 0x04F2
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	80 93 f2 04 	sts	0x04F2, r24
		//Refresh analog conversion
		if(adcUpdate > 10)
    1d82:	8b 30       	cpi	r24, 0x0B	; 11
    1d84:	38 f0       	brcs	.+14     	; 0x1d94 <main+0x18a>
		{
			sbi(ADCSRA, ADSC);
    1d86:	80 91 7a 00 	lds	r24, 0x007A
    1d8a:	80 64       	ori	r24, 0x40	; 64
    1d8c:	80 93 7a 00 	sts	0x007A, r24
			adcUpdate = 0;
    1d90:	10 92 f2 04 	sts	0x04F2, r1
		}
		
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
    1d94:	99 b1       	in	r25, 0x09	; 9
    1d96:	89 2f       	mov	r24, r25
    1d98:	80 74       	andi	r24, 0x40	; 64
    1d9a:	96 fd       	sbrc	r25, 6
    1d9c:	b0 c5       	rjmp	.+2912   	; 0x28fe <main+0xcf4>
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
    1d9e:	90 91 ff 04 	lds	r25, 0x04FF
    1da2:	91 11       	cpse	r25, r1
    1da4:	bc c5       	rjmp	.+2936   	; 0x291e <main+0xd14>
    1da6:	90 91 f9 04 	lds	r25, 0x04F9
    1daa:	99 23       	and	r25, r25
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <main+0x1a6>
    1dae:	b7 c5       	rjmp	.+2926   	; 0x291e <main+0xd14>
    1db0:	90 91 b3 05 	lds	r25, 0x05B3
    1db4:	91 11       	cpse	r25, r1
    1db6:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <main+0x1fde>
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    1dba:	4f 99       	sbic	0x09, 7	; 9
    1dbc:	b4 c5       	rjmp	.+2920   	; 0x2926 <main+0xd1c>
		{
			if(!btnPressed[MENU_OSC2] && btnCanPress[MENU_OSC2] && menuSelect != MENU_OSC2)
    1dbe:	90 91 00 05 	lds	r25, 0x0500
    1dc2:	91 11       	cpse	r25, r1
    1dc4:	da c0       	rjmp	.+436    	; 0x1f7a <main+0x370>
    1dc6:	90 91 fa 04 	lds	r25, 0x04FA
    1dca:	99 23       	and	r25, r25
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <main+0x1c6>
    1dce:	d5 c0       	rjmp	.+426    	; 0x1f7a <main+0x370>
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <main+0x1cc>
    1dd4:	d2 c0       	rjmp	.+420    	; 0x1f7a <main+0x370>
			{
				btnLastPressed[MENU_OSC2] = 0;			
    1dd6:	10 92 f4 04 	sts	0x04F4, r1
				
				menuSelect = MENU_OSC2;				
    1dda:	80 92 b3 05 	sts	0x05B3, r8
				
				menuChange[menuSelect][0] = 0;
    1dde:	10 92 6f 05 	sts	0x056F, r1
				menuChange[menuSelect][1] = 0;
    1de2:	10 92 70 05 	sts	0x0570, r1
				menuChange[menuSelect][2] = 0;
    1de6:	10 92 71 05 	sts	0x0571, r1
				menuChange[menuSelect][3] = 0;	
    1dea:	10 92 72 05 	sts	0x0572, r1

inline void osc2MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2MenuTitle);
    1dee:	e4 e4       	ldi	r30, 0x44	; 68
    1df0:	f1 e0       	ldi	r31, 0x01	; 1
    1df2:	61 96       	adiw	r28, 0x11	; 17
    1df4:	af ad       	ldd	r26, Y+63	; 0x3f
    1df6:	61 97       	sbiw	r28, 0x11	; 17
    1df8:	62 96       	adiw	r28, 0x12	; 18
    1dfa:	bf ad       	ldd	r27, Y+63	; 0x3f
    1dfc:	62 97       	sbiw	r28, 0x12	; 18
    1dfe:	8d 2d       	mov	r24, r13
    1e00:	01 90       	ld	r0, Z+
    1e02:	0d 92       	st	X+, r0
    1e04:	8a 95       	dec	r24
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <main+0x1f6>
	writeLine(0, buf);
    1e08:	be 01       	movw	r22, r28
    1e0a:	6b 5e       	subi	r22, 0xEB	; 235
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1e14:	e6 e1       	ldi	r30, 0x16	; 22
    1e16:	f1 e0       	ldi	r31, 0x01	; 1
    1e18:	d5 01       	movw	r26, r10
    1e1a:	8e 2d       	mov	r24, r14
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	0d 92       	st	X+, r0
    1e20:	8a 95       	dec	r24
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <main+0x212>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    1e24:	e0 91 02 01 	lds	r30, 0x0102
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	e0 58       	subi	r30, 0x80	; 128
    1e30:	f9 4f       	sbci	r31, 0xF9	; 249
    1e32:	65 91       	lpm	r22, Z+
    1e34:	74 91       	lpm	r23, Z
    1e36:	a1 2e       	mov	r10, r17
    1e38:	b9 2c       	mov	r11, r9
    1e3a:	81 2f       	mov	r24, r17
    1e3c:	99 2d       	mov	r25, r9
    1e3e:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "       ");
    1e42:	d1 01       	movw	r26, r2
    1e44:	0d 90       	ld	r0, X+
    1e46:	00 20       	and	r0, r0
    1e48:	e9 f7       	brne	.-6      	; 0x1e44 <main+0x23a>
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	ec e3       	ldi	r30, 0x3C	; 60
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	80 2f       	mov	r24, r16
    1e52:	01 90       	ld	r0, Z+
    1e54:	0d 92       	st	X+, r0
    1e56:	8a 95       	dec	r24
    1e58:	e1 f7       	brne	.-8      	; 0x1e52 <main+0x248>
	writeLine(2, buf);	
    1e5a:	61 2f       	mov	r22, r17
    1e5c:	79 2d       	mov	r23, r9
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    1e64:	e5 e2       	ldi	r30, 0x25	; 37
    1e66:	f1 e0       	ldi	r31, 0x01	; 1
    1e68:	a1 2f       	mov	r26, r17
    1e6a:	b9 2d       	mov	r27, r9
    1e6c:	80 2f       	mov	r24, r16
    1e6e:	01 90       	ld	r0, Z+
    1e70:	0d 92       	st	X+, r0
    1e72:	8a 95       	dec	r24
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <main+0x264>
	sprintf(buf + 7, "%d", osc2SemisShift);
    1e76:	20 91 cd 05 	lds	r18, 0x05CD
    1e7a:	82 2f       	mov	r24, r18
    1e7c:	99 27       	eor	r25, r25
    1e7e:	87 fd       	sbrc	r24, 7
    1e80:	90 95       	com	r25
    1e82:	9f 93       	push	r25
    1e84:	2f 93       	push	r18
    1e86:	a6 e0       	ldi	r26, 0x06	; 6
    1e88:	b1 e0       	ldi	r27, 0x01	; 1
    1e8a:	bf 93       	push	r27
    1e8c:	af 93       	push	r26
    1e8e:	3b ad       	ldd	r19, Y+59	; 0x3b
    1e90:	3f 93       	push	r19
    1e92:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e94:	8f 93       	push	r24
    1e96:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    1e9a:	d1 01       	movw	r26, r2
    1e9c:	0d 90       	ld	r0, X+
    1e9e:	00 20       	and	r0, r0
    1ea0:	e9 f7       	brne	.-6      	; 0x1e9c <main+0x292>
    1ea2:	11 97       	sbiw	r26, 0x01	; 1
    1ea4:	ec e3       	ldi	r30, 0x3C	; 60
    1ea6:	f1 e0       	ldi	r31, 0x01	; 1
    1ea8:	80 2f       	mov	r24, r16
    1eaa:	01 90       	ld	r0, Z+
    1eac:	0d 92       	st	X+, r0
    1eae:	8a 95       	dec	r24
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <main+0x2a0>
	writeLine(3, buf);
    1eb2:	61 2f       	mov	r22, r17
    1eb4:	79 2d       	mov	r23, r9
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    1ebc:	ed e1       	ldi	r30, 0x1D	; 29
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	a1 2f       	mov	r26, r17
    1ec2:	b9 2d       	mov	r27, r9
    1ec4:	80 2f       	mov	r24, r16
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	0d 92       	st	X+, r0
    1eca:	8a 95       	dec	r24
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <main+0x2bc>
	sprintf(buf + 7, "%d", osc2CentsShift);
    1ece:	20 91 ce 05 	lds	r18, 0x05CE
    1ed2:	82 2f       	mov	r24, r18
    1ed4:	99 27       	eor	r25, r25
    1ed6:	87 fd       	sbrc	r24, 7
    1ed8:	90 95       	com	r25
    1eda:	9f 93       	push	r25
    1edc:	2f 93       	push	r18
    1ede:	a6 e0       	ldi	r26, 0x06	; 6
    1ee0:	b1 e0       	ldi	r27, 0x01	; 1
    1ee2:	bf 93       	push	r27
    1ee4:	af 93       	push	r26
    1ee6:	3b ad       	ldd	r19, Y+59	; 0x3b
    1ee8:	3f 93       	push	r19
    1eea:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eec:	8f 93       	push	r24
    1eee:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    1ef2:	d1 01       	movw	r26, r2
    1ef4:	0d 90       	ld	r0, X+
    1ef6:	00 20       	and	r0, r0
    1ef8:	e9 f7       	brne	.-6      	; 0x1ef4 <main+0x2ea>
    1efa:	11 97       	sbiw	r26, 0x01	; 1
    1efc:	ec e3       	ldi	r30, 0x3C	; 60
    1efe:	f1 e0       	ldi	r31, 0x01	; 1
    1f00:	80 2f       	mov	r24, r16
    1f02:	01 90       	ld	r0, Z+
    1f04:	0d 92       	st	X+, r0
    1f06:	8a 95       	dec	r24
    1f08:	e1 f7       	brne	.-8      	; 0x1f02 <main+0x2f8>
	writeLine(4, buf);
    1f0a:	61 2f       	mov	r22, r17
    1f0c:	79 2d       	mov	r23, r9
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    1f14:	e1 e5       	ldi	r30, 0x51	; 81
    1f16:	f1 e0       	ldi	r31, 0x01	; 1
    1f18:	a1 2f       	mov	r26, r17
    1f1a:	b9 2d       	mov	r27, r9
    1f1c:	8f 2d       	mov	r24, r15
    1f1e:	01 90       	ld	r0, Z+
    1f20:	0d 92       	st	X+, r0
    1f22:	8a 95       	dec	r24
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <main+0x314>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    1f26:	20 91 cc 05 	lds	r18, 0x05CC
    1f2a:	82 2f       	mov	r24, r18
    1f2c:	99 27       	eor	r25, r25
    1f2e:	87 fd       	sbrc	r24, 7
    1f30:	90 95       	com	r25
    1f32:	9f 93       	push	r25
    1f34:	2f 93       	push	r18
    1f36:	a6 e0       	ldi	r26, 0x06	; 6
    1f38:	b1 e0       	ldi	r27, 0x01	; 1
    1f3a:	bf 93       	push	r27
    1f3c:	af 93       	push	r26
    1f3e:	3f a9       	ldd	r19, Y+55	; 0x37
    1f40:	3f 93       	push	r19
    1f42:	8e a9       	ldd	r24, Y+54	; 0x36
    1f44:	8f 93       	push	r24
    1f46:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "        ");
    1f4a:	d1 01       	movw	r26, r2
    1f4c:	0d 90       	ld	r0, X+
    1f4e:	00 20       	and	r0, r0
    1f50:	e9 f7       	brne	.-6      	; 0x1f4c <main+0x342>
    1f52:	11 97       	sbiw	r26, 0x01	; 1
    1f54:	eb e3       	ldi	r30, 0x3B	; 59
    1f56:	f1 e0       	ldi	r31, 0x01	; 1
    1f58:	8c 2d       	mov	r24, r12
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	0d 92       	st	X+, r0
    1f5e:	8a 95       	dec	r24
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <main+0x350>
	writeLine(5, buf);
    1f62:	61 2f       	mov	r22, r17
    1f64:	79 2d       	mov	r23, r9
    1f66:	85 e0       	ldi	r24, 0x05	; 5
    1f68:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    1f6c:	80 91 b3 05 	lds	r24, 0x05B3
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC2] = true;
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    1f7a:	18 99       	sbic	0x03, 0	; 3
    1f7c:	e8 c4       	rjmp	.+2512   	; 0x294e <main+0xd44>
		{
			if(!btnPressed[MENU_LFO] && btnCanPress[MENU_LFO] && menuSelect != MENU_LFO)
    1f7e:	90 91 01 05 	lds	r25, 0x0501
    1f82:	91 11       	cpse	r25, r1
    1f84:	97 c1       	rjmp	.+814    	; 0x22b4 <main+0x6aa>
    1f86:	90 91 fb 04 	lds	r25, 0x04FB
    1f8a:	99 23       	and	r25, r25
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <main+0x386>
    1f8e:	92 c1       	rjmp	.+804    	; 0x22b4 <main+0x6aa>
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <main+0x38c>
    1f94:	8f c1       	rjmp	.+798    	; 0x22b4 <main+0x6aa>
			{
				btnLastPressed[MENU_LFO] = 0;
    1f96:	10 92 f5 04 	sts	0x04F5, r1
				
				menuSelect = MENU_LFO;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	80 93 b3 05 	sts	0x05B3, r24
				
				menuChange[menuSelect][0] = 0;
    1fa0:	10 92 73 05 	sts	0x0573, r1
				menuChange[menuSelect][1] = 0;
    1fa4:	10 92 74 05 	sts	0x0574, r1
				menuChange[menuSelect][2] = 0;
    1fa8:	10 92 75 05 	sts	0x0575, r1
				menuChange[menuSelect][3] = 0;
    1fac:	10 92 76 05 	sts	0x0576, r1

inline void lfoMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", lfoMenuTitle);
    1fb0:	e7 e5       	ldi	r30, 0x57	; 87
    1fb2:	f1 e0       	ldi	r31, 0x01	; 1
    1fb4:	61 96       	adiw	r28, 0x11	; 17
    1fb6:	af ad       	ldd	r26, Y+63	; 0x3f
    1fb8:	61 97       	sbiw	r28, 0x11	; 17
    1fba:	62 96       	adiw	r28, 0x12	; 18
    1fbc:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fbe:	62 97       	sbiw	r28, 0x12	; 18
    1fc0:	8d 2d       	mov	r24, r13
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	0d 92       	st	X+, r0
    1fc6:	8a 95       	dec	r24
    1fc8:	e1 f7       	brne	.-8      	; 0x1fc2 <main+0x3b8>
	writeLine(0, buf);
    1fca:	be 01       	movw	r22, r28
    1fcc:	6b 5e       	subi	r22, 0xEB	; 235
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1fd6:	e6 e1       	ldi	r30, 0x16	; 22
    1fd8:	f1 e0       	ldi	r31, 0x01	; 1
    1fda:	d5 01       	movw	r26, r10
    1fdc:	8e 2d       	mov	r24, r14
    1fde:	01 90       	ld	r0, Z+
    1fe0:	0d 92       	st	X+, r0
    1fe2:	8a 95       	dec	r24
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <main+0x3d4>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    1fe6:	e0 91 04 01 	lds	r30, 0x0104
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e0 58       	subi	r30, 0x80	; 128
    1ff2:	f9 4f       	sbci	r31, 0xF9	; 249
    1ff4:	65 91       	lpm	r22, Z+
    1ff6:	74 91       	lpm	r23, Z
    1ff8:	81 2f       	mov	r24, r17
    1ffa:	99 2d       	mov	r25, r9
    1ffc:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "    ");
    2000:	d1 01       	movw	r26, r2
    2002:	0d 90       	ld	r0, X+
    2004:	00 20       	and	r0, r0
    2006:	e9 f7       	brne	.-6      	; 0x2002 <main+0x3f8>
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	85 e0       	ldi	r24, 0x05	; 5
    200c:	ef e3       	ldi	r30, 0x3F	; 63
    200e:	f1 e0       	ldi	r31, 0x01	; 1
    2010:	01 90       	ld	r0, Z+
    2012:	0d 92       	st	X+, r0
    2014:	8a 95       	dec	r24
    2016:	e1 f7       	brne	.-8      	; 0x2010 <main+0x406>
	writeLine(2, buf);
    2018:	61 2f       	mov	r22, r17
    201a:	79 2d       	mov	r23, r9
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    2022:	e4 e6       	ldi	r30, 0x64	; 100
    2024:	f1 e0       	ldi	r31, 0x01	; 1
    2026:	a1 2f       	mov	r26, r17
    2028:	b9 2d       	mov	r27, r9
    202a:	8e 2d       	mov	r24, r14
    202c:	01 90       	ld	r0, Z+
    202e:	0d 92       	st	X+, r0
    2030:	8a 95       	dec	r24
    2032:	e1 f7       	brne	.-8      	; 0x202c <main+0x422>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    2034:	80 91 b5 05 	lds	r24, 0x05B5
    2038:	1f 92       	push	r1
    203a:	8f 93       	push	r24
    203c:	a6 e0       	ldi	r26, 0x06	; 6
    203e:	b1 e0       	ldi	r27, 0x01	; 1
    2040:	bf 93       	push	r27
    2042:	af 93       	push	r26
    2044:	39 ad       	ldd	r19, Y+57	; 0x39
    2046:	3f 93       	push	r19
    2048:	88 ad       	ldd	r24, Y+56	; 0x38
    204a:	8f 93       	push	r24
    204c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    2050:	d1 01       	movw	r26, r2
    2052:	0d 90       	ld	r0, X+
    2054:	00 20       	and	r0, r0
    2056:	e9 f7       	brne	.-6      	; 0x2052 <main+0x448>
    2058:	11 97       	sbiw	r26, 0x01	; 1
    205a:	85 e0       	ldi	r24, 0x05	; 5
    205c:	ef e3       	ldi	r30, 0x3F	; 63
    205e:	f1 e0       	ldi	r31, 0x01	; 1
    2060:	01 90       	ld	r0, Z+
    2062:	0d 92       	st	X+, r0
    2064:	8a 95       	dec	r24
    2066:	e1 f7       	brne	.-8      	; 0x2060 <main+0x456>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    2068:	e1 2f       	mov	r30, r17
    206a:	f9 2d       	mov	r31, r9
    206c:	de 01       	movw	r26, r28
    206e:	99 96       	adiw	r26, 0x29	; 41
    2070:	87 2d       	mov	r24, r7
    2072:	01 90       	ld	r0, Z+
    2074:	0d 92       	st	X+, r0
    2076:	8a 95       	dec	r24
    2078:	e1 f7       	brne	.-8      	; 0x2072 <main+0x468>
	buf[12] = '\0';
    207a:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    207c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    207e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2080:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2082:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2084:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2086:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2088:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    208a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    208c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    208e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2090:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2092:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2094:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2096:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2098:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    209a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    209c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    209e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20aa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20b0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    20b2:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    20b4:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    20b6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20be:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    20c0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20ca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    20d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20dc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    20de:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20e2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    20e4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    20e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    20e8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    20ea:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	88 23       	and	r24, r24
    20fc:	09 f4       	brne	.+2      	; 0x2100 <main+0x4f6>
    20fe:	81 c0       	rjmp	.+258    	; 0x2202 <main+0x5f8>
    2100:	de 01       	movw	r26, r28
    2102:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2104:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2106:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2108:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    210a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    210c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    210e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2110:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2112:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2114:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2116:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2118:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    211a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    211c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    211e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2120:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2122:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2124:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2126:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2128:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    212a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    212c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    212e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2130:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2132:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2134:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2136:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2138:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    213a:	44 9a       	sbi	0x08, 4	; 8
    213c:	99 27       	eor	r25, r25
    213e:	87 fd       	sbrc	r24, 7
    2140:	90 95       	com	r25
    2142:	80 97       	sbiw	r24, 0x20	; 32
    2144:	fc 01       	movw	r30, r24
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	e8 0f       	add	r30, r24
    2150:	f9 1f       	adc	r31, r25
    2152:	ef 5e       	subi	r30, 0xEF	; 239
    2154:	fc 4f       	sbci	r31, 0xFC	; 252
    2156:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    2158:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    215a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    215c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    215e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2160:	82 2f       	mov	r24, r18
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	88 0f       	add	r24, r24
    2166:	89 2f       	mov	r24, r25
    2168:	88 1f       	adc	r24, r24
    216a:	99 0b       	sbc	r25, r25
    216c:	89 2b       	or	r24, r25
    216e:	09 f0       	breq	.+2      	; 0x2172 <main+0x568>
    2170:	a1 c3       	rjmp	.+1858   	; 0x28b4 <main+0xcaa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2172:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2174:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2176:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2178:	26 fd       	sbrc	r18, 6
    217a:	a1 c3       	rjmp	.+1858   	; 0x28be <main+0xcb4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    217c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    217e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2180:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2182:	25 fd       	sbrc	r18, 5
    2184:	a1 c3       	rjmp	.+1858   	; 0x28c8 <main+0xcbe>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2186:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2188:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    218a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    218c:	24 fd       	sbrc	r18, 4
    218e:	a1 c3       	rjmp	.+1858   	; 0x28d2 <main+0xcc8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2190:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2192:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2194:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2196:	23 fd       	sbrc	r18, 3
    2198:	a1 c3       	rjmp	.+1858   	; 0x28dc <main+0xcd2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    219a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    219c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    219e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    21a0:	22 fd       	sbrc	r18, 2
    21a2:	a1 c3       	rjmp	.+1858   	; 0x28e6 <main+0xcdc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    21aa:	21 fd       	sbrc	r18, 1
    21ac:	a1 c3       	rjmp	.+1858   	; 0x28f0 <main+0xce6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    21b4:	20 fd       	sbrc	r18, 0
    21b6:	a1 c3       	rjmp	.+1858   	; 0x28fa <main+0xcf0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21bc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    21be:	44 9a       	sbi	0x08, 4	; 8
    21c0:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    21c2:	51 f6       	brne	.-108    	; 0x2158 <main+0x54e>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    21c4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    21c6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21da:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    21fa:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    21fc:	8d 91       	ld	r24, X+
    21fe:	81 11       	cpse	r24, r1
    2200:	81 cf       	rjmp	.-254    	; 0x2104 <main+0x4fa>

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    2202:	eb e6       	ldi	r30, 0x6B	; 107
    2204:	f1 e0       	ldi	r31, 0x01	; 1
    2206:	a1 2f       	mov	r26, r17
    2208:	b9 2d       	mov	r27, r9
    220a:	8e 2d       	mov	r24, r14
    220c:	01 90       	ld	r0, Z+
    220e:	0d 92       	st	X+, r0
    2210:	8a 95       	dec	r24
    2212:	e1 f7       	brne	.-8      	; 0x220c <main+0x602>
	sprintf(buf + 6, "%d", lfoDepth);
    2214:	80 91 b4 05 	lds	r24, 0x05B4
    2218:	1f 92       	push	r1
    221a:	8f 93       	push	r24
    221c:	a6 e0       	ldi	r26, 0x06	; 6
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	bf 93       	push	r27
    2222:	af 93       	push	r26
    2224:	39 ad       	ldd	r19, Y+57	; 0x39
    2226:	3f 93       	push	r19
    2228:	88 ad       	ldd	r24, Y+56	; 0x38
    222a:	8f 93       	push	r24
    222c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    2230:	d1 01       	movw	r26, r2
    2232:	0d 90       	ld	r0, X+
    2234:	00 20       	and	r0, r0
    2236:	e9 f7       	brne	.-6      	; 0x2232 <main+0x628>
    2238:	11 97       	sbiw	r26, 0x01	; 1
    223a:	85 e0       	ldi	r24, 0x05	; 5
    223c:	ef e3       	ldi	r30, 0x3F	; 63
    223e:	f1 e0       	ldi	r31, 0x01	; 1
    2240:	01 90       	ld	r0, Z+
    2242:	0d 92       	st	X+, r0
    2244:	8a 95       	dec	r24
    2246:	e1 f7       	brne	.-8      	; 0x2240 <main+0x636>
	writeLine(4, buf);
    2248:	61 2f       	mov	r22, r17
    224a:	79 2d       	mov	r23, r9
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    2252:	e4 e3       	ldi	r30, 0x34	; 52
    2254:	f1 e0       	ldi	r31, 0x01	; 1
    2256:	a1 2f       	mov	r26, r17
    2258:	b9 2d       	mov	r27, r9
    225a:	8e 2d       	mov	r24, r14
    225c:	01 90       	ld	r0, Z+
    225e:	0d 92       	st	X+, r0
    2260:	8a 95       	dec	r24
    2262:	e1 f7       	brne	.-8      	; 0x225c <main+0x652>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    2264:	e0 91 b6 05 	lds	r30, 0x05B6
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	e8 59       	subi	r30, 0x98	; 152
    2270:	f9 4f       	sbci	r31, 0xF9	; 249
    2272:	65 91       	lpm	r22, Z+
    2274:	74 91       	lpm	r23, Z
    2276:	a1 2e       	mov	r10, r17
    2278:	b9 2c       	mov	r11, r9
    227a:	81 2f       	mov	r24, r17
    227c:	99 2d       	mov	r25, r9
    227e:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "    ");
    2282:	d1 01       	movw	r26, r2
    2284:	0d 90       	ld	r0, X+
    2286:	00 20       	and	r0, r0
    2288:	e9 f7       	brne	.-6      	; 0x2284 <main+0x67a>
    228a:	11 97       	sbiw	r26, 0x01	; 1
    228c:	85 e0       	ldi	r24, 0x05	; 5
    228e:	ef e3       	ldi	r30, 0x3F	; 63
    2290:	f1 e0       	ldi	r31, 0x01	; 1
    2292:	01 90       	ld	r0, Z+
    2294:	0d 92       	st	X+, r0
    2296:	8a 95       	dec	r24
    2298:	e1 f7       	brne	.-8      	; 0x2292 <main+0x688>
	writeLine(5, buf);
    229a:	61 2f       	mov	r22, r17
    229c:	79 2d       	mov	r23, r9
    229e:	85 e0       	ldi	r24, 0x05	; 5
    22a0:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    22a4:	80 91 b3 05 	lds	r24, 0x05B3
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
			btnCanPress[MENU_LFO] = true;
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    22b4:	1c 99       	sbic	0x03, 4	; 3
    22b6:	5e c3       	rjmp	.+1724   	; 0x2974 <main+0xd6a>
		{
			if(!btnPressed[MENU_MIX] && btnCanPress[MENU_MIX] && menuSelect != MENU_MIX)
    22b8:	90 91 02 05 	lds	r25, 0x0502
    22bc:	91 11       	cpse	r25, r1
    22be:	87 c1       	rjmp	.+782    	; 0x25ce <main+0x9c4>
    22c0:	90 91 fc 04 	lds	r25, 0x04FC
    22c4:	99 23       	and	r25, r25
    22c6:	09 f4       	brne	.+2      	; 0x22ca <main+0x6c0>
    22c8:	82 c1       	rjmp	.+772    	; 0x25ce <main+0x9c4>
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <main+0x6c6>
    22ce:	8c c1       	rjmp	.+792    	; 0x25e8 <main+0x9de>
			{
				btnLastPressed[MENU_MIX] = 0;
    22d0:	10 92 f6 04 	sts	0x04F6, r1
				
				menuSelect = MENU_MIX;
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	80 93 b3 05 	sts	0x05B3, r24
				
				menuChange[menuSelect][0] = 0;
    22da:	10 92 77 05 	sts	0x0577, r1
				menuChange[menuSelect][1] = 0;
    22de:	10 92 78 05 	sts	0x0578, r1
				menuChange[menuSelect][2] = 0;
    22e2:	10 92 79 05 	sts	0x0579, r1
				menuChange[menuSelect][3] = 0;
    22e6:	10 92 7a 05 	sts	0x057A, r1

inline void mixerMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", mixingMenuTitle);
    22ea:	e2 e7       	ldi	r30, 0x72	; 114
    22ec:	f1 e0       	ldi	r31, 0x01	; 1
    22ee:	61 96       	adiw	r28, 0x11	; 17
    22f0:	af ad       	ldd	r26, Y+63	; 0x3f
    22f2:	61 97       	sbiw	r28, 0x11	; 17
    22f4:	62 96       	adiw	r28, 0x12	; 18
    22f6:	bf ad       	ldd	r27, Y+63	; 0x3f
    22f8:	62 97       	sbiw	r28, 0x12	; 18
    22fa:	8d 2d       	mov	r24, r13
    22fc:	01 90       	ld	r0, Z+
    22fe:	0d 92       	st	X+, r0
    2300:	8a 95       	dec	r24
    2302:	e1 f7       	brne	.-8      	; 0x22fc <main+0x6f2>
	writeLine(0, buf);
    2304:	be 01       	movw	r22, r28
    2306:	6b 5e       	subi	r22, 0xEB	; 235
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    2310:	8a e0       	ldi	r24, 0x0A	; 10
    2312:	ef e7       	ldi	r30, 0x7F	; 127
    2314:	f1 e0       	ldi	r31, 0x01	; 1
    2316:	d5 01       	movw	r26, r10
    2318:	01 90       	ld	r0, Z+
    231a:	0d 92       	st	X+, r0
    231c:	8a 95       	dec	r24
    231e:	e1 f7       	brne	.-8      	; 0x2318 <main+0x70e>
	sprintf(buf + 9, "%d", osc1Weight);
    2320:	80 91 05 01 	lds	r24, 0x0105
    2324:	1f 92       	push	r1
    2326:	8f 93       	push	r24
    2328:	a6 e0       	ldi	r26, 0x06	; 6
    232a:	b1 e0       	ldi	r27, 0x01	; 1
    232c:	bf 93       	push	r27
    232e:	af 93       	push	r26
    2330:	3d ad       	ldd	r19, Y+61	; 0x3d
    2332:	3f 93       	push	r19
    2334:	8c ad       	ldd	r24, Y+60	; 0x3c
    2336:	8f 93       	push	r24
    2338:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    233c:	d5 01       	movw	r26, r10
    233e:	0d 90       	ld	r0, X+
    2340:	00 20       	and	r0, r0
    2342:	e9 f7       	brne	.-6      	; 0x233e <main+0x734>
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	85 e0       	ldi	r24, 0x05	; 5
    2348:	ef e3       	ldi	r30, 0x3F	; 63
    234a:	f1 e0       	ldi	r31, 0x01	; 1
    234c:	01 90       	ld	r0, Z+
    234e:	0d 92       	st	X+, r0
    2350:	8a 95       	dec	r24
    2352:	e1 f7       	brne	.-8      	; 0x234c <main+0x742>
	writeLine(2, buf);
    2354:	b5 01       	movw	r22, r10
    2356:	82 e0       	ldi	r24, 0x02	; 2
    2358:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    235c:	8a e0       	ldi	r24, 0x0A	; 10
    235e:	e9 e8       	ldi	r30, 0x89	; 137
    2360:	f1 e0       	ldi	r31, 0x01	; 1
    2362:	d5 01       	movw	r26, r10
    2364:	01 90       	ld	r0, Z+
    2366:	0d 92       	st	X+, r0
    2368:	8a 95       	dec	r24
    236a:	e1 f7       	brne	.-8      	; 0x2364 <main+0x75a>
	sprintf(buf + 9, "%d", osc2Weight);
    236c:	80 91 ca 05 	lds	r24, 0x05CA
    2370:	1f 92       	push	r1
    2372:	8f 93       	push	r24
    2374:	a6 e0       	ldi	r26, 0x06	; 6
    2376:	b1 e0       	ldi	r27, 0x01	; 1
    2378:	bf 93       	push	r27
    237a:	af 93       	push	r26
    237c:	3d ad       	ldd	r19, Y+61	; 0x3d
    237e:	3f 93       	push	r19
    2380:	8c ad       	ldd	r24, Y+60	; 0x3c
    2382:	8f 93       	push	r24
    2384:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    2388:	d5 01       	movw	r26, r10
    238a:	0d 90       	ld	r0, X+
    238c:	00 20       	and	r0, r0
    238e:	e9 f7       	brne	.-6      	; 0x238a <main+0x780>
    2390:	11 97       	sbiw	r26, 0x01	; 1
    2392:	85 e0       	ldi	r24, 0x05	; 5
    2394:	ef e3       	ldi	r30, 0x3F	; 63
    2396:	f1 e0       	ldi	r31, 0x01	; 1
    2398:	01 90       	ld	r0, Z+
    239a:	0d 92       	st	X+, r0
    239c:	8a 95       	dec	r24
    239e:	e1 f7       	brne	.-8      	; 0x2398 <main+0x78e>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    23a0:	f5 01       	movw	r30, r10
    23a2:	de 01       	movw	r26, r28
    23a4:	99 96       	adiw	r26, 0x29	; 41
    23a6:	87 2d       	mov	r24, r7
    23a8:	01 90       	ld	r0, Z+
    23aa:	0d 92       	st	X+, r0
    23ac:	8a 95       	dec	r24
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <main+0x79e>
	buf[12] = '\0';
    23b0:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    23b2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    23b4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23b6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    23b8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23bc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23be:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23ce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23da:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23e6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    23e8:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    23ea:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    23ec:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23f4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    23f6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    23fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    23fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    23fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2400:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2402:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2404:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2406:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2408:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    240a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    240c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    240e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2410:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2412:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2414:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2416:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2418:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    241a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    241c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    241e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2420:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    2422:	89 a5       	ldd	r24, Y+41	; 0x29
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	88 23       	and	r24, r24
    2430:	09 f4       	brne	.+2      	; 0x2434 <main+0x82a>
    2432:	81 c0       	rjmp	.+258    	; 0x2536 <main+0x92c>
    2434:	de 01       	movw	r26, r28
    2436:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2438:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    243a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    243c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    243e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2440:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2442:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2444:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2446:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2448:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    244a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    244c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    244e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2450:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2452:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2454:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2456:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2458:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    245a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    245c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    245e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2460:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2462:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2464:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2466:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2468:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    246a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    246c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    246e:	44 9a       	sbi	0x08, 4	; 8
    2470:	99 27       	eor	r25, r25
    2472:	87 fd       	sbrc	r24, 7
    2474:	90 95       	com	r25
    2476:	80 97       	sbiw	r24, 0x20	; 32
    2478:	fc 01       	movw	r30, r24
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	e8 0f       	add	r30, r24
    2484:	f9 1f       	adc	r31, r25
    2486:	ef 5e       	subi	r30, 0xEF	; 239
    2488:	fc 4f       	sbci	r31, 0xFC	; 252
    248a:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    248c:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    248e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2490:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2492:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2494:	82 2f       	mov	r24, r18
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	88 0f       	add	r24, r24
    249a:	89 2f       	mov	r24, r25
    249c:	88 1f       	adc	r24, r24
    249e:	99 0b       	sbc	r25, r25
    24a0:	89 2b       	or	r24, r25
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <main+0x89c>
    24a4:	05 c2       	rjmp	.+1034   	; 0x28b0 <main+0xca6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24aa:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24ac:	26 fd       	sbrc	r18, 6
    24ae:	fe c1       	rjmp	.+1020   	; 0x28ac <main+0xca2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24b4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24b6:	25 fd       	sbrc	r18, 5
    24b8:	f7 c1       	rjmp	.+1006   	; 0x28a8 <main+0xc9e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24be:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24c0:	24 fd       	sbrc	r18, 4
    24c2:	f0 c1       	rjmp	.+992    	; 0x28a4 <main+0xc9a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24c8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24ca:	23 fd       	sbrc	r18, 3
    24cc:	e9 c1       	rjmp	.+978    	; 0x28a0 <main+0xc96>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24d2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24d4:	22 fd       	sbrc	r18, 2
    24d6:	e2 c1       	rjmp	.+964    	; 0x289c <main+0xc92>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24dc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24de:	21 fd       	sbrc	r18, 1
    24e0:	db c1       	rjmp	.+950    	; 0x2898 <main+0xc8e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24e6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    24e8:	20 fd       	sbrc	r18, 0
    24ea:	d4 c1       	rjmp	.+936    	; 0x2894 <main+0xc8a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    24ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24f0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    24f2:	44 9a       	sbi	0x08, 4	; 8
    24f4:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    24f6:	51 f6       	brne	.-108    	; 0x248c <main+0x882>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    24f8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    24fa:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    24fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    24fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2500:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2502:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2504:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2506:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2508:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    250a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    250c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    250e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2510:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2512:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2514:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2516:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2518:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    251a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    251c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    251e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2520:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2522:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2524:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2526:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2528:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    252a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    252c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    252e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    2530:	8d 91       	ld	r24, X+
    2532:	81 11       	cpse	r24, r1
    2534:	81 cf       	rjmp	.-254    	; 0x2438 <main+0x82e>

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    2536:	e3 e9       	ldi	r30, 0x93	; 147
    2538:	f1 e0       	ldi	r31, 0x01	; 1
    253a:	d5 01       	movw	r26, r10
    253c:	8c 2d       	mov	r24, r12
    253e:	01 90       	ld	r0, Z+
    2540:	0d 92       	st	X+, r0
    2542:	8a 95       	dec	r24
    2544:	e1 f7       	brne	.-8      	; 0x253e <main+0x934>
	if(osc2Sync != false)
    2546:	80 91 c3 05 	lds	r24, 0x05C3
    254a:	81 11       	cpse	r24, r1
    254c:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <main+0x22d2>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    2550:	8f e4       	ldi	r24, 0x4F	; 79
    2552:	96 e4       	ldi	r25, 0x46	; 70
    2554:	a6 e4       	ldi	r26, 0x46	; 70
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	89 87       	std	Y+9, r24	; 0x09
    255a:	9a 87       	std	Y+10, r25	; 0x0a
    255c:	ab 87       	std	Y+11, r26	; 0x0b
    255e:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    2560:	d5 01       	movw	r26, r10
    2562:	0d 90       	ld	r0, X+
    2564:	00 20       	and	r0, r0
    2566:	e9 f7       	brne	.-6      	; 0x2562 <main+0x958>
    2568:	11 97       	sbiw	r26, 0x01	; 1
    256a:	85 e0       	ldi	r24, 0x05	; 5
    256c:	ef e3       	ldi	r30, 0x3F	; 63
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	01 90       	ld	r0, Z+
    2572:	0d 92       	st	X+, r0
    2574:	8a 95       	dec	r24
    2576:	e1 f7       	brne	.-8      	; 0x2570 <main+0x966>
	writeLine(4, buf);
    2578:	b5 01       	movw	r22, r10
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    2580:	ec e9       	ldi	r30, 0x9C	; 156
    2582:	f1 e0       	ldi	r31, 0x01	; 1
    2584:	d5 01       	movw	r26, r10
    2586:	8e 2d       	mov	r24, r14
    2588:	01 90       	ld	r0, Z+
    258a:	0d 92       	st	X+, r0
    258c:	8a 95       	dec	r24
    258e:	e1 f7       	brne	.-8      	; 0x2588 <main+0x97e>
	if(ringMod != false)
    2590:	80 91 bf 05 	lds	r24, 0x05BF
    2594:	81 11       	cpse	r24, r1
    2596:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <main+0x2236>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    259a:	8f e4       	ldi	r24, 0x4F	; 79
    259c:	96 e4       	ldi	r25, 0x46	; 70
    259e:	a6 e4       	ldi	r26, 0x46	; 70
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	8f 83       	std	Y+7, r24	; 0x07
    25a4:	98 87       	std	Y+8, r25	; 0x08
    25a6:	a9 87       	std	Y+9, r26	; 0x09
    25a8:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "    ");
    25aa:	d5 01       	movw	r26, r10
    25ac:	0d 90       	ld	r0, X+
    25ae:	00 20       	and	r0, r0
    25b0:	e9 f7       	brne	.-6      	; 0x25ac <main+0x9a2>
    25b2:	11 97       	sbiw	r26, 0x01	; 1
    25b4:	85 e0       	ldi	r24, 0x05	; 5
    25b6:	ef e3       	ldi	r30, 0x3F	; 63
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	01 90       	ld	r0, Z+
    25bc:	0d 92       	st	X+, r0
    25be:	8a 95       	dec	r24
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <main+0x9b0>
	writeLine(5, buf);
    25c2:	b5 01       	movw	r22, r10
    25c4:	85 e0       	ldi	r24, 0x05	; 5
    25c6:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    25ca:	80 91 b3 05 	lds	r24, 0x05B3
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
			btnCanPress[MENU_MIX] = true;
		}

		//Menu Updates
		switch(menuSelect)
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <main+0x9ca>
    25d2:	e4 c1       	rjmp	.+968    	; 0x299c <main+0xd92>
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	08 f4       	brcc	.+2      	; 0x25da <main+0x9d0>
    25d8:	43 c4       	rjmp	.+2182   	; 0x2e60 <main+0x1256>
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	11 f4       	brne	.+4      	; 0x25e2 <main+0x9d8>
    25de:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <main+0x1aa4>
    25e2:	83 30       	cpi	r24, 0x03	; 3
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <main+0x9de>
    25e6:	c8 cb       	rjmp	.-2160   	; 0x1d78 <main+0x16e>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    25e8:	80 91 ff 05 	lds	r24, 0x05FF
    25ec:	88 23       	and	r24, r24
    25ee:	d9 f0       	breq	.+54     	; 0x2626 <main+0xa1c>
    25f0:	80 91 9b 05 	lds	r24, 0x059B
    25f4:	90 91 9c 05 	lds	r25, 0x059C
    25f8:	20 91 03 06 	lds	r18, 0x0603
    25fc:	30 91 04 06 	lds	r19, 0x0604
    2600:	ac 01       	movw	r20, r24
    2602:	47 5f       	subi	r20, 0xF7	; 247
    2604:	5f 4f       	sbci	r21, 0xFF	; 255
    2606:	42 17       	cp	r20, r18
    2608:	53 07       	cpc	r21, r19
    260a:	6c f0       	brlt	.+26     	; 0x2626 <main+0xa1c>
    260c:	8b 30       	cpi	r24, 0x0B	; 11
    260e:	91 05       	cpc	r25, r1
    2610:	14 f4       	brge	.+4      	; 0x2616 <main+0xa0c>
    2612:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <main+0x2264>
    2616:	0a 97       	sbiw	r24, 0x0a	; 10
    2618:	82 17       	cp	r24, r18
    261a:	93 07       	cpc	r25, r19
    261c:	24 f4       	brge	.+8      	; 0x2626 <main+0xa1c>
			{
				menuChange[MENU_MIX][0] = 1;
    261e:	80 92 77 05 	sts	0x0577, r8
				updateADC[0] = false;
    2622:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    2626:	80 91 00 06 	lds	r24, 0x0600
    262a:	88 23       	and	r24, r24
    262c:	d9 f0       	breq	.+54     	; 0x2664 <main+0xa5a>
    262e:	80 91 9d 05 	lds	r24, 0x059D
    2632:	90 91 9e 05 	lds	r25, 0x059E
    2636:	20 91 05 06 	lds	r18, 0x0605
    263a:	30 91 06 06 	lds	r19, 0x0606
    263e:	ac 01       	movw	r20, r24
    2640:	47 5f       	subi	r20, 0xF7	; 247
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	42 17       	cp	r20, r18
    2646:	53 07       	cpc	r21, r19
    2648:	6c f0       	brlt	.+26     	; 0x2664 <main+0xa5a>
    264a:	8b 30       	cpi	r24, 0x0B	; 11
    264c:	91 05       	cpc	r25, r1
    264e:	14 f4       	brge	.+4      	; 0x2654 <main+0xa4a>
    2650:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <main+0x2254>
    2654:	0a 97       	sbiw	r24, 0x0a	; 10
    2656:	82 17       	cp	r24, r18
    2658:	93 07       	cpc	r25, r19
    265a:	24 f4       	brge	.+8      	; 0x2664 <main+0xa5a>
			{
				menuChange[MENU_MIX][1] = 1;
    265c:	80 92 78 05 	sts	0x0578, r8
				updateADC[1] = false;
    2660:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    2664:	80 91 01 06 	lds	r24, 0x0601
    2668:	88 23       	and	r24, r24
    266a:	d9 f0       	breq	.+54     	; 0x26a2 <main+0xa98>
    266c:	80 91 9f 05 	lds	r24, 0x059F
    2670:	90 91 a0 05 	lds	r25, 0x05A0
    2674:	20 91 07 06 	lds	r18, 0x0607
    2678:	30 91 08 06 	lds	r19, 0x0608
    267c:	ac 01       	movw	r20, r24
    267e:	47 5f       	subi	r20, 0xF7	; 247
    2680:	5f 4f       	sbci	r21, 0xFF	; 255
    2682:	42 17       	cp	r20, r18
    2684:	53 07       	cpc	r21, r19
    2686:	6c f0       	brlt	.+26     	; 0x26a2 <main+0xa98>
    2688:	8b 30       	cpi	r24, 0x0B	; 11
    268a:	91 05       	cpc	r25, r1
    268c:	14 f4       	brge	.+4      	; 0x2692 <main+0xa88>
    268e:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <main+0x225c>
    2692:	0a 97       	sbiw	r24, 0x0a	; 10
    2694:	82 17       	cp	r24, r18
    2696:	93 07       	cpc	r25, r19
    2698:	24 f4       	brge	.+8      	; 0x26a2 <main+0xa98>
			{
				menuChange[MENU_MIX][2] = 1;
    269a:	80 92 79 05 	sts	0x0579, r8
				updateADC[2] = false;
    269e:	10 92 01 06 	sts	0x0601, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    26a2:	80 91 02 06 	lds	r24, 0x0602
    26a6:	88 23       	and	r24, r24
    26a8:	11 f4       	brne	.+4      	; 0x26ae <main+0xaa4>
    26aa:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <main+0x1ed8>
    26ae:	20 91 a1 05 	lds	r18, 0x05A1
    26b2:	30 91 a2 05 	lds	r19, 0x05A2
    26b6:	80 91 09 06 	lds	r24, 0x0609
    26ba:	90 91 0a 06 	lds	r25, 0x060A
    26be:	a9 01       	movw	r20, r18
    26c0:	47 5f       	subi	r20, 0xF7	; 247
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	48 17       	cp	r20, r24
    26c6:	59 07       	cpc	r21, r25
    26c8:	14 f4       	brge	.+4      	; 0x26ce <main+0xac4>
    26ca:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <main+0x1ed8>
    26ce:	2b 30       	cpi	r18, 0x0B	; 11
    26d0:	31 05       	cpc	r19, r1
    26d2:	14 f4       	brge	.+4      	; 0x26d8 <main+0xace>
    26d4:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <main+0x224c>
    26d8:	2a 50       	subi	r18, 0x0A	; 10
    26da:	31 09       	sbc	r19, r1
    26dc:	28 17       	cp	r18, r24
    26de:	39 07       	cpc	r19, r25
    26e0:	14 f0       	brlt	.+4      	; 0x26e6 <main+0xadc>
    26e2:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <main+0x1ed8>
			{
				menuChange[MENU_MIX][3] = 1;
    26e6:	80 92 7a 05 	sts	0x057A, r8
				updateADC[3] = false;
    26ea:	10 92 02 06 	sts	0x0602, r1
			}

			if(menuChange[MENU_MIX][3] != 0)
			{
				if((adcValue[3] >> 2) != osc1Weight)
    26ee:	9c 01       	movw	r18, r24
    26f0:	35 95       	asr	r19
    26f2:	27 95       	ror	r18
    26f4:	35 95       	asr	r19
    26f6:	27 95       	ror	r18
    26f8:	40 91 05 01 	lds	r20, 0x0105
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	24 17       	cp	r18, r20
    2700:	35 07       	cpc	r19, r21
    2702:	09 f4       	brne	.+2      	; 0x2706 <main+0xafc>
    2704:	5a c0       	rjmp	.+180    	; 0x27ba <main+0xbb0>
				{
					osc1Weight = adcValue[3] >> 2;
    2706:	20 93 05 01 	sts	0x0105, r18
					osc2Weight = ~osc1Weight;
    270a:	42 2f       	mov	r20, r18
    270c:	40 95       	com	r20
    270e:	40 93 ca 05 	sts	0x05CA, r20

					menuKnobPos[MENU_MIX][3] = adcValue[3];
    2712:	90 93 a2 05 	sts	0x05A2, r25
    2716:	80 93 a1 05 	sts	0x05A1, r24

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    271a:	8a e0       	ldi	r24, 0x0A	; 10
    271c:	ef e7       	ldi	r30, 0x7F	; 127
    271e:	f1 e0       	ldi	r31, 0x01	; 1
    2720:	d5 01       	movw	r26, r10
    2722:	01 90       	ld	r0, Z+
    2724:	0d 92       	st	X+, r0
    2726:	8a 95       	dec	r24
    2728:	e1 f7       	brne	.-8      	; 0x2722 <main+0xb18>
	sprintf(buf + 9, "%d", osc1Weight);
    272a:	33 27       	eor	r19, r19
    272c:	3f 93       	push	r19
    272e:	2f 93       	push	r18
    2730:	a6 e0       	ldi	r26, 0x06	; 6
    2732:	b1 e0       	ldi	r27, 0x01	; 1
    2734:	bf 93       	push	r27
    2736:	af 93       	push	r26
    2738:	3d ad       	ldd	r19, Y+61	; 0x3d
    273a:	3f 93       	push	r19
    273c:	8c ad       	ldd	r24, Y+60	; 0x3c
    273e:	8f 93       	push	r24
    2740:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    2744:	d5 01       	movw	r26, r10
    2746:	0d 90       	ld	r0, X+
    2748:	00 20       	and	r0, r0
    274a:	e9 f7       	brne	.-6      	; 0x2746 <main+0xb3c>
    274c:	11 97       	sbiw	r26, 0x01	; 1
    274e:	85 e0       	ldi	r24, 0x05	; 5
    2750:	ef e3       	ldi	r30, 0x3F	; 63
    2752:	f1 e0       	ldi	r31, 0x01	; 1
    2754:	01 90       	ld	r0, Z+
    2756:	0d 92       	st	X+, r0
    2758:	8a 95       	dec	r24
    275a:	e1 f7       	brne	.-8      	; 0x2754 <main+0xb4a>
	writeLine(2, buf);
    275c:	b5 01       	movw	r22, r10
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    2764:	8a e0       	ldi	r24, 0x0A	; 10
    2766:	e9 e8       	ldi	r30, 0x89	; 137
    2768:	f1 e0       	ldi	r31, 0x01	; 1
    276a:	d5 01       	movw	r26, r10
    276c:	01 90       	ld	r0, Z+
    276e:	0d 92       	st	X+, r0
    2770:	8a 95       	dec	r24
    2772:	e1 f7       	brne	.-8      	; 0x276c <main+0xb62>
	sprintf(buf + 9, "%d", osc2Weight);
    2774:	80 91 ca 05 	lds	r24, 0x05CA
    2778:	1f 92       	push	r1
    277a:	8f 93       	push	r24
    277c:	a6 e0       	ldi	r26, 0x06	; 6
    277e:	b1 e0       	ldi	r27, 0x01	; 1
    2780:	bf 93       	push	r27
    2782:	af 93       	push	r26
    2784:	3d ad       	ldd	r19, Y+61	; 0x3d
    2786:	3f 93       	push	r19
    2788:	8c ad       	ldd	r24, Y+60	; 0x3c
    278a:	8f 93       	push	r24
    278c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    2790:	d5 01       	movw	r26, r10
    2792:	0d 90       	ld	r0, X+
    2794:	00 20       	and	r0, r0
    2796:	e9 f7       	brne	.-6      	; 0x2792 <main+0xb88>
    2798:	11 97       	sbiw	r26, 0x01	; 1
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	ef e3       	ldi	r30, 0x3F	; 63
    279e:	f1 e0       	ldi	r31, 0x01	; 1
    27a0:	01 90       	ld	r0, Z+
    27a2:	0d 92       	st	X+, r0
    27a4:	8a 95       	dec	r24
    27a6:	e1 f7       	brne	.-8      	; 0x27a0 <main+0xb96>
	writeLine(3, buf);
    27a8:	b5 01       	movw	r22, r10
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
					mixerMenuOsc1WeightUpdate();
					mixerMenuOsc2WeightUpdate();
				}
			}

			if(menuChange[MENU_MIX][1] != 0)
    27ba:	80 91 78 05 	lds	r24, 0x0578
    27be:	88 23       	and	r24, r24
    27c0:	a9 f1       	breq	.+106    	; 0x282c <main+0xc22>
			{
				if(adcValue[1] > 512 && osc2Sync != true)
    27c2:	80 91 05 06 	lds	r24, 0x0605
    27c6:	90 91 06 06 	lds	r25, 0x0606
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	b2 e0       	ldi	r27, 0x02	; 2
    27ce:	9b 07       	cpc	r25, r27
    27d0:	14 f4       	brge	.+4      	; 0x27d6 <main+0xbcc>
    27d2:	0c 94 e5 1d 	jmp	0x3bca	; 0x3bca <main+0x1fc0>
    27d6:	80 91 c3 05 	lds	r24, 0x05C3
    27da:	81 11       	cpse	r24, r1
    27dc:	27 c0       	rjmp	.+78     	; 0x282c <main+0xc22>
				{
					osc2Sync = true;
    27de:	80 92 c3 05 	sts	0x05C3, r8

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    27e2:	89 e0       	ldi	r24, 0x09	; 9
    27e4:	e3 e9       	ldi	r30, 0x93	; 147
    27e6:	f1 e0       	ldi	r31, 0x01	; 1
    27e8:	d5 01       	movw	r26, r10
    27ea:	01 90       	ld	r0, Z+
    27ec:	0d 92       	st	X+, r0
    27ee:	8a 95       	dec	r24
    27f0:	e1 f7       	brne	.-8      	; 0x27ea <main+0xbe0>
	if(osc2Sync != false)
    27f2:	80 91 c3 05 	lds	r24, 0x05C3
    27f6:	81 11       	cpse	r24, r1
    27f8:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <main+0x22e2>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    27fc:	8f e4       	ldi	r24, 0x4F	; 79
    27fe:	96 e4       	ldi	r25, 0x46	; 70
    2800:	a6 e4       	ldi	r26, 0x46	; 70
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	89 87       	std	Y+9, r24	; 0x09
    2806:	9a 87       	std	Y+10, r25	; 0x0a
    2808:	ab 87       	std	Y+11, r26	; 0x0b
    280a:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    280c:	d5 01       	movw	r26, r10
    280e:	0d 90       	ld	r0, X+
    2810:	00 20       	and	r0, r0
    2812:	e9 f7       	brne	.-6      	; 0x280e <main+0xc04>
    2814:	11 97       	sbiw	r26, 0x01	; 1
    2816:	85 e0       	ldi	r24, 0x05	; 5
    2818:	ef e3       	ldi	r30, 0x3F	; 63
    281a:	f1 e0       	ldi	r31, 0x01	; 1
    281c:	01 90       	ld	r0, Z+
    281e:	0d 92       	st	X+, r0
    2820:	8a 95       	dec	r24
    2822:	e1 f7       	brne	.-8      	; 0x281c <main+0xc12>
	writeLine(4, buf);
    2824:	b5 01       	movw	r22, r10
    2826:	84 e0       	ldi	r24, 0x04	; 4
    2828:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
					osc2Sync = false;
					mixerMenuOsc2SyncUpdate();
				}
			}

			if(menuChange[MENU_MIX][0] != 0)
    282c:	80 91 77 05 	lds	r24, 0x0577
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <main+0xc2c>
    2834:	96 ca       	rjmp	.-2772   	; 0x1d62 <main+0x158>
			{
				if(adcValue[0] > 512 && ringMod != true)
    2836:	80 91 03 06 	lds	r24, 0x0603
    283a:	90 91 04 06 	lds	r25, 0x0604
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	a2 e0       	ldi	r26, 0x02	; 2
    2842:	9a 07       	cpc	r25, r26
    2844:	14 f4       	brge	.+4      	; 0x284a <main+0xc40>
    2846:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <main+0x1efe>
    284a:	80 91 bf 05 	lds	r24, 0x05BF
    284e:	81 11       	cpse	r24, r1
    2850:	88 ca       	rjmp	.-2800   	; 0x1d62 <main+0x158>
				{
					ringMod = true;
    2852:	80 92 bf 05 	sts	0x05BF, r8

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    2856:	87 e0       	ldi	r24, 0x07	; 7
    2858:	ec e9       	ldi	r30, 0x9C	; 156
    285a:	f1 e0       	ldi	r31, 0x01	; 1
    285c:	d5 01       	movw	r26, r10
    285e:	01 90       	ld	r0, Z+
    2860:	0d 92       	st	X+, r0
    2862:	8a 95       	dec	r24
    2864:	e1 f7       	brne	.-8      	; 0x285e <main+0xc54>
	if(ringMod != false)
	{
		sprintf(buf + 6, "%s", onString);
    2866:	8f e4       	ldi	r24, 0x4F	; 79
    2868:	9e e4       	ldi	r25, 0x4E	; 78
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	8f 83       	std	Y+7, r24	; 0x07
    286e:	98 87       	std	Y+8, r25	; 0x08
    2870:	a9 87       	std	Y+9, r26	; 0x09
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
	}
	strcat(buf, "    ");
    2872:	d5 01       	movw	r26, r10
    2874:	0d 90       	ld	r0, X+
    2876:	00 20       	and	r0, r0
    2878:	e9 f7       	brne	.-6      	; 0x2874 <main+0xc6a>
    287a:	11 97       	sbiw	r26, 0x01	; 1
    287c:	85 e0       	ldi	r24, 0x05	; 5
    287e:	ef e3       	ldi	r30, 0x3F	; 63
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	01 90       	ld	r0, Z+
    2884:	0d 92       	st	X+, r0
    2886:	8a 95       	dec	r24
    2888:	e1 f7       	brne	.-8      	; 0x2882 <main+0xc78>
	writeLine(5, buf);
    288a:	b5 01       	movw	r22, r10
    288c:	85 e0       	ldi	r24, 0x05	; 5
    288e:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2892:	67 ca       	rjmp	.-2866   	; 0x1d62 <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2894:	5d 9a       	sbi	0x0b, 5	; 11
    2896:	2b ce       	rjmp	.-938    	; 0x24ee <main+0x8e4>
    2898:	5d 9a       	sbi	0x0b, 5	; 11
    289a:	24 ce       	rjmp	.-952    	; 0x24e4 <main+0x8da>
    289c:	5d 9a       	sbi	0x0b, 5	; 11
    289e:	1d ce       	rjmp	.-966    	; 0x24da <main+0x8d0>
    28a0:	5d 9a       	sbi	0x0b, 5	; 11
    28a2:	16 ce       	rjmp	.-980    	; 0x24d0 <main+0x8c6>
    28a4:	5d 9a       	sbi	0x0b, 5	; 11
    28a6:	0f ce       	rjmp	.-994    	; 0x24c6 <main+0x8bc>
    28a8:	5d 9a       	sbi	0x0b, 5	; 11
    28aa:	08 ce       	rjmp	.-1008   	; 0x24bc <main+0x8b2>
    28ac:	5d 9a       	sbi	0x0b, 5	; 11
    28ae:	01 ce       	rjmp	.-1022   	; 0x24b2 <main+0x8a8>
    28b0:	5d 9a       	sbi	0x0b, 5	; 11
    28b2:	fa cd       	rjmp	.-1036   	; 0x24a8 <main+0x89e>
    28b4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28b8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28ba:	26 ff       	sbrs	r18, 6
    28bc:	5f cc       	rjmp	.-1858   	; 0x217c <main+0x572>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28be:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28c2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28c4:	25 ff       	sbrs	r18, 5
    28c6:	5f cc       	rjmp	.-1858   	; 0x2186 <main+0x57c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28c8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28cc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28ce:	24 ff       	sbrs	r18, 4
    28d0:	5f cc       	rjmp	.-1858   	; 0x2190 <main+0x586>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28d2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28d6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28d8:	23 ff       	sbrs	r18, 3
    28da:	5f cc       	rjmp	.-1858   	; 0x219a <main+0x590>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28dc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28e0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28e2:	22 ff       	sbrs	r18, 2
    28e4:	5f cc       	rjmp	.-1858   	; 0x21a4 <main+0x59a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28e6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28ea:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28ec:	21 ff       	sbrs	r18, 1
    28ee:	5f cc       	rjmp	.-1858   	; 0x21ae <main+0x5a4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28f0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28f4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28f6:	20 ff       	sbrs	r18, 0
    28f8:	5f cc       	rjmp	.-1858   	; 0x21b8 <main+0x5ae>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28fa:	5d 9a       	sbi	0x0b, 5	; 11
    28fc:	5e cc       	rjmp	.-1860   	; 0x21ba <main+0x5b0>
				osc1MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC1])
    28fe:	80 91 ff 04 	lds	r24, 0x04FF
    2902:	81 11       	cpse	r24, r1
			btnPressed[MENU_OSC1] = false;
    2904:	10 92 ff 04 	sts	0x04FF, r1
			
			if(!btnCanPress[MENU_OSC1])
    2908:	80 91 f9 04 	lds	r24, 0x04F9
    290c:	88 23       	and	r24, r24
    290e:	09 f4       	brne	.+2      	; 0x2912 <main+0xd08>
    2910:	9b c2       	rjmp	.+1334   	; 0x2e48 <main+0x123e>
    2912:	80 91 f3 04 	lds	r24, 0x04F3
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
    2916:	85 36       	cpi	r24, 0x65	; 101
    2918:	10 f0       	brcs	.+4      	; 0x291e <main+0xd14>
			btnCanPress[MENU_OSC1] = true;
    291a:	80 92 f9 04 	sts	0x04F9, r8
    291e:	80 91 b3 05 	lds	r24, 0x05B3
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    2922:	4f 9b       	sbis	0x09, 7	; 9
    2924:	4c ca       	rjmp	.-2920   	; 0x1dbe <main+0x1b4>
				osc2MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC2])
    2926:	90 91 00 05 	lds	r25, 0x0500
    292a:	91 11       	cpse	r25, r1
			btnPressed[MENU_OSC2] = false;
    292c:	10 92 00 05 	sts	0x0500, r1
					
			if(!btnCanPress[MENU_OSC2])
    2930:	90 91 fa 04 	lds	r25, 0x04FA
    2934:	99 23       	and	r25, r25
    2936:	11 f4       	brne	.+4      	; 0x293c <main+0xd32>
    2938:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <main+0x1ef0>
    293c:	90 91 f4 04 	lds	r25, 0x04F4
			btnLastPressed[MENU_OSC2]++;
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
    2940:	95 36       	cpi	r25, 0x65	; 101
    2942:	08 f4       	brcc	.+2      	; 0x2946 <main+0xd3c>
    2944:	1a cb       	rjmp	.-2508   	; 0x1f7a <main+0x370>
			btnCanPress[MENU_OSC2] = true;
    2946:	80 92 fa 04 	sts	0x04FA, r8
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    294a:	18 9b       	sbis	0x03, 0	; 3
    294c:	18 cb       	rjmp	.-2512   	; 0x1f7e <main+0x374>
				lfoMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_LFO])
    294e:	90 91 01 05 	lds	r25, 0x0501
    2952:	91 11       	cpse	r25, r1
			btnPressed[MENU_LFO] = false;
    2954:	10 92 01 05 	sts	0x0501, r1
			
			if(!btnCanPress[MENU_LFO])
    2958:	90 91 fb 04 	lds	r25, 0x04FB
    295c:	99 23       	and	r25, r25
    295e:	09 f4       	brne	.+2      	; 0x2962 <main+0xd58>
    2960:	6d c2       	rjmp	.+1242   	; 0x2e3c <main+0x1232>
    2962:	90 91 f5 04 	lds	r25, 0x04F5
			btnLastPressed[MENU_LFO]++;
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
    2966:	95 36       	cpi	r25, 0x65	; 101
    2968:	08 f4       	brcc	.+2      	; 0x296c <main+0xd62>
    296a:	a4 cc       	rjmp	.-1720   	; 0x22b4 <main+0x6aa>
			btnCanPress[MENU_LFO] = true;
    296c:	80 92 fb 04 	sts	0x04FB, r8
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    2970:	1c 9b       	sbis	0x03, 4	; 3
    2972:	a2 cc       	rjmp	.-1724   	; 0x22b8 <main+0x6ae>
				mixerMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_MIX])
    2974:	90 91 02 05 	lds	r25, 0x0502
    2978:	91 11       	cpse	r25, r1
			btnPressed[MENU_MIX] = false;
    297a:	10 92 02 05 	sts	0x0502, r1
			
			if(!btnCanPress[MENU_MIX])
    297e:	90 91 fc 04 	lds	r25, 0x04FC
    2982:	99 23       	and	r25, r25
    2984:	09 f4       	brne	.+2      	; 0x2988 <main+0xd7e>
    2986:	66 c2       	rjmp	.+1228   	; 0x2e54 <main+0x124a>
    2988:	90 91 f6 04 	lds	r25, 0x04F6
			btnLastPressed[MENU_MIX]++;
			
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
    298c:	95 36       	cpi	r25, 0x65	; 101
    298e:	08 f4       	brcc	.+2      	; 0x2992 <main+0xd88>
    2990:	1e ce       	rjmp	.-964    	; 0x25ce <main+0x9c4>
			btnCanPress[MENU_MIX] = true;
    2992:	80 92 fc 04 	sts	0x04FC, r8
		}

		//Menu Updates
		switch(menuSelect)
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	09 f0       	breq	.+2      	; 0x299c <main+0xd92>
    299a:	1c ce       	rjmp	.-968    	; 0x25d4 <main+0x9ca>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    299c:	80 91 ff 05 	lds	r24, 0x05FF
    29a0:	88 23       	and	r24, r24
    29a2:	d9 f0       	breq	.+54     	; 0x29da <main+0xdd0>
    29a4:	80 91 8b 05 	lds	r24, 0x058B
    29a8:	90 91 8c 05 	lds	r25, 0x058C
    29ac:	20 91 03 06 	lds	r18, 0x0603
    29b0:	30 91 04 06 	lds	r19, 0x0604
    29b4:	ac 01       	movw	r20, r24
    29b6:	47 5f       	subi	r20, 0xF7	; 247
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	42 17       	cp	r20, r18
    29bc:	53 07       	cpc	r21, r19
    29be:	6c f0       	brlt	.+26     	; 0x29da <main+0xdd0>
    29c0:	8b 30       	cpi	r24, 0x0B	; 11
    29c2:	91 05       	cpc	r25, r1
    29c4:	14 f4       	brge	.+4      	; 0x29ca <main+0xdc0>
    29c6:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <main+0x228c>
    29ca:	0a 97       	sbiw	r24, 0x0a	; 10
    29cc:	82 17       	cp	r24, r18
    29ce:	93 07       	cpc	r25, r19
    29d0:	24 f4       	brge	.+8      	; 0x29da <main+0xdd0>
			{
				menuChange[MENU_OSC2][0] = 1;
    29d2:	80 92 6f 05 	sts	0x056F, r8
				updateADC[0] = false;
    29d6:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC2][1] + 10 && adcValue[1] > menuKnobPos[MENU_OSC2][1] - 10)
    29da:	80 91 00 06 	lds	r24, 0x0600
    29de:	88 23       	and	r24, r24
    29e0:	b9 f0       	breq	.+46     	; 0x2a10 <main+0xe06>
    29e2:	20 91 8d 05 	lds	r18, 0x058D
    29e6:	30 91 8e 05 	lds	r19, 0x058E
    29ea:	80 91 05 06 	lds	r24, 0x0605
    29ee:	90 91 06 06 	lds	r25, 0x0606
    29f2:	a9 01       	movw	r20, r18
    29f4:	47 5f       	subi	r20, 0xF7	; 247
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	48 17       	cp	r20, r24
    29fa:	59 07       	cpc	r21, r25
    29fc:	4c f0       	brlt	.+18     	; 0x2a10 <main+0xe06>
    29fe:	29 50       	subi	r18, 0x09	; 9
    2a00:	31 09       	sbc	r19, r1
    2a02:	82 17       	cp	r24, r18
    2a04:	93 07       	cpc	r25, r19
    2a06:	24 f0       	brlt	.+8      	; 0x2a10 <main+0xe06>
			{
				menuChange[MENU_OSC2][1] = 1;
    2a08:	80 92 70 05 	sts	0x0570, r8
				updateADC[1] = false;
    2a0c:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC2][2] + 10 && adcValue[2] > menuKnobPos[MENU_OSC2][2] - 10)
    2a10:	80 91 01 06 	lds	r24, 0x0601
    2a14:	88 23       	and	r24, r24
    2a16:	b9 f0       	breq	.+46     	; 0x2a46 <main+0xe3c>
    2a18:	20 91 8f 05 	lds	r18, 0x058F
    2a1c:	30 91 90 05 	lds	r19, 0x0590
    2a20:	80 91 07 06 	lds	r24, 0x0607
    2a24:	90 91 08 06 	lds	r25, 0x0608
    2a28:	a9 01       	movw	r20, r18
    2a2a:	47 5f       	subi	r20, 0xF7	; 247
    2a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2e:	48 17       	cp	r20, r24
    2a30:	59 07       	cpc	r21, r25
    2a32:	4c f0       	brlt	.+18     	; 0x2a46 <main+0xe3c>
    2a34:	29 50       	subi	r18, 0x09	; 9
    2a36:	31 09       	sbc	r19, r1
    2a38:	82 17       	cp	r24, r18
    2a3a:	93 07       	cpc	r25, r19
    2a3c:	24 f0       	brlt	.+8      	; 0x2a46 <main+0xe3c>
			{
				menuChange[MENU_OSC2][2] = 1;
    2a3e:	80 92 71 05 	sts	0x0571, r8
				updateADC[2] = false;
    2a42:	10 92 01 06 	sts	0x0601, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC2][3] + 10 && adcValue[3] > menuKnobPos[MENU_OSC2][3] - 10)
    2a46:	80 91 02 06 	lds	r24, 0x0602
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <main+0xe46>
    2a4e:	b9 c7       	rjmp	.+3954   	; 0x39c2 <main+0x1db8>
    2a50:	20 91 91 05 	lds	r18, 0x0591
    2a54:	30 91 92 05 	lds	r19, 0x0592
    2a58:	80 91 09 06 	lds	r24, 0x0609
    2a5c:	90 91 0a 06 	lds	r25, 0x060A
    2a60:	a9 01       	movw	r20, r18
    2a62:	47 5f       	subi	r20, 0xF7	; 247
    2a64:	5f 4f       	sbci	r21, 0xFF	; 255
    2a66:	48 17       	cp	r20, r24
    2a68:	59 07       	cpc	r21, r25
    2a6a:	0c f4       	brge	.+2      	; 0x2a6e <main+0xe64>
    2a6c:	aa c7       	rjmp	.+3924   	; 0x39c2 <main+0x1db8>
    2a6e:	29 50       	subi	r18, 0x09	; 9
    2a70:	31 09       	sbc	r19, r1
    2a72:	82 17       	cp	r24, r18
    2a74:	93 07       	cpc	r25, r19
    2a76:	0c f4       	brge	.+2      	; 0x2a7a <main+0xe70>
    2a78:	a4 c7       	rjmp	.+3912   	; 0x39c2 <main+0x1db8>
			{
				menuChange[MENU_OSC2][3] = 1;
    2a7a:	80 92 72 05 	sts	0x0572, r8
				updateADC[3] = false;
    2a7e:	10 92 02 06 	sts	0x0602, r1
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
			{
				if(adcValue[3] < 146)
    2a82:	82 39       	cpi	r24, 0x92	; 146
    2a84:	91 05       	cpc	r25, r1
    2a86:	0c f0       	brlt	.+2      	; 0x2a8a <main+0xe80>
    2a88:	a9 c7       	rjmp	.+3922   	; 0x39dc <main+0x1dd2>
				{
					if(osc2WaveForm != WAVE_SINE)
    2a8a:	80 91 02 01 	lds	r24, 0x0102
    2a8e:	81 11       	cpse	r24, r1
    2a90:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <main+0x22fc>
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
						osc2MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC2][2] != 0)
    2a94:	80 91 71 05 	lds	r24, 0x0571
    2a98:	88 23       	and	r24, r24
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <main+0xe94>
    2a9c:	3e c1       	rjmp	.+636    	; 0x2d1a <main+0x1110>
			{
				if(osc2SemisShift != (adcValue[2] >> 4) - 32)
    2a9e:	80 91 07 06 	lds	r24, 0x0607
    2aa2:	90 91 08 06 	lds	r25, 0x0608
    2aa6:	9c 01       	movw	r18, r24
    2aa8:	35 95       	asr	r19
    2aaa:	27 95       	ror	r18
    2aac:	35 95       	asr	r19
    2aae:	27 95       	ror	r18
    2ab0:	35 95       	asr	r19
    2ab2:	27 95       	ror	r18
    2ab4:	35 95       	asr	r19
    2ab6:	27 95       	ror	r18
    2ab8:	60 91 cd 05 	lds	r22, 0x05CD
    2abc:	77 27       	eor	r23, r23
    2abe:	67 fd       	sbrc	r22, 7
    2ac0:	70 95       	com	r23
    2ac2:	a9 01       	movw	r20, r18
    2ac4:	40 52       	subi	r20, 0x20	; 32
    2ac6:	51 09       	sbc	r21, r1
    2ac8:	64 17       	cp	r22, r20
    2aca:	75 07       	cpc	r23, r21
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <main+0xec6>
    2ace:	25 c1       	rjmp	.+586    	; 0x2d1a <main+0x1110>
				{
					osc2SemisShift = (adcValue[2] >> 4) - 32;
    2ad0:	20 52       	subi	r18, 0x20	; 32
    2ad2:	20 93 cd 05 	sts	0x05CD, r18
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
    2ad6:	90 93 90 05 	sts	0x0590, r25
    2ada:	80 93 8f 05 	sts	0x058F, r24

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2ade:	88 e0       	ldi	r24, 0x08	; 8
    2ae0:	e5 e2       	ldi	r30, 0x25	; 37
    2ae2:	f1 e0       	ldi	r31, 0x01	; 1
    2ae4:	d5 01       	movw	r26, r10
    2ae6:	01 90       	ld	r0, Z+
    2ae8:	0d 92       	st	X+, r0
    2aea:	8a 95       	dec	r24
    2aec:	e1 f7       	brne	.-8      	; 0x2ae6 <main+0xedc>
	sprintf(buf + 7, "%d", osc2SemisShift);
    2aee:	82 2f       	mov	r24, r18
    2af0:	99 27       	eor	r25, r25
    2af2:	87 fd       	sbrc	r24, 7
    2af4:	90 95       	com	r25
    2af6:	9f 93       	push	r25
    2af8:	2f 93       	push	r18
    2afa:	a6 e0       	ldi	r26, 0x06	; 6
    2afc:	b1 e0       	ldi	r27, 0x01	; 1
    2afe:	bf 93       	push	r27
    2b00:	af 93       	push	r26
    2b02:	3b ad       	ldd	r19, Y+59	; 0x3b
    2b04:	3f 93       	push	r19
    2b06:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b08:	8f 93       	push	r24
    2b0a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    2b0e:	d5 01       	movw	r26, r10
    2b10:	0d 90       	ld	r0, X+
    2b12:	00 20       	and	r0, r0
    2b14:	e9 f7       	brne	.-6      	; 0x2b10 <main+0xf06>
    2b16:	11 97       	sbiw	r26, 0x01	; 1
    2b18:	88 e0       	ldi	r24, 0x08	; 8
    2b1a:	ec e3       	ldi	r30, 0x3C	; 60
    2b1c:	f1 e0       	ldi	r31, 0x01	; 1
    2b1e:	01 90       	ld	r0, Z+
    2b20:	0d 92       	st	X+, r0
    2b22:	8a 95       	dec	r24
    2b24:	e1 f7       	brne	.-8      	; 0x2b1e <main+0xf14>
	writeLine(3, buf);
    2b26:	b5 01       	movw	r22, r10
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    2b2e:	80 91 db 05 	lds	r24, 0x05DB
    2b32:	e0 91 e5 05 	lds	r30, 0x05E5
    2b36:	ff 27       	eor	r31, r31
    2b38:	e7 fd       	sbrc	r30, 7
    2b3a:	f0 95       	com	r31
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f1 1d       	adc	r31, r1
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	ed 55       	subi	r30, 0x5D	; 93
    2b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4c:	40 80       	ld	r4, Z
    2b4e:	51 80       	ldd	r5, Z+1	; 0x01
    2b50:	62 80       	ldd	r6, Z+2	; 0x02
    2b52:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    2b54:	80 91 cc 05 	lds	r24, 0x05CC
    2b58:	90 91 c2 05 	lds	r25, 0x05C2
    2b5c:	e0 91 cd 05 	lds	r30, 0x05CD
    2b60:	ff 27       	eor	r31, r31
    2b62:	e7 fd       	sbrc	r30, 7
    2b64:	f0 95       	com	r31
    2b66:	e9 0f       	add	r30, r25
    2b68:	f1 1d       	adc	r31, r1
    2b6a:	9c e0       	ldi	r25, 0x0C	; 12
    2b6c:	89 02       	muls	r24, r25
    2b6e:	e0 0d       	add	r30, r0
    2b70:	f1 1d       	adc	r31, r1
    2b72:	11 24       	eor	r1, r1
    2b74:	ee 0f       	add	r30, r30
    2b76:	ff 1f       	adc	r31, r31
    2b78:	ee 0f       	add	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	ed 55       	subi	r30, 0x5D	; 93
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	c0 80       	ld	r12, Z
    2b82:	d1 80       	ldd	r13, Z+1	; 0x01
    2b84:	e2 80       	ldd	r14, Z+2	; 0x02
    2b86:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    2b88:	60 91 e6 05 	lds	r22, 0x05E6
    2b8c:	a7 e2       	ldi	r26, 0x27	; 39
    2b8e:	6a 02       	muls	r22, r26
    2b90:	b0 01       	movw	r22, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	88 27       	eor	r24, r24
    2b96:	77 fd       	sbrc	r23, 7
    2b98:	80 95       	com	r24
    2b9a:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2b9c:	a3 01       	movw	r20, r6
    2b9e:	92 01       	movw	r18, r4
    2ba0:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2ba4:	00 e1       	ldi	r16, 0x10	; 16
    2ba6:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    2baa:	21 96       	adiw	r28, 0x01	; 1
    2bac:	2f af       	std	Y+63, r18	; 0x3f
    2bae:	21 97       	sbiw	r28, 0x01	; 1
    2bb0:	22 96       	adiw	r28, 0x02	; 2
    2bb2:	3f af       	std	Y+63, r19	; 0x3f
    2bb4:	22 97       	sbiw	r28, 0x02	; 2
    2bb6:	23 96       	adiw	r28, 0x03	; 3
    2bb8:	4f af       	std	Y+63, r20	; 0x3f
    2bba:	23 97       	sbiw	r28, 0x03	; 3
    2bbc:	24 96       	adiw	r28, 0x04	; 4
    2bbe:	5f af       	std	Y+63, r21	; 0x3f
    2bc0:	24 97       	sbiw	r28, 0x04	; 4
    2bc2:	25 96       	adiw	r28, 0x05	; 5
    2bc4:	6f af       	std	Y+63, r22	; 0x3f
    2bc6:	25 97       	sbiw	r28, 0x05	; 5
    2bc8:	26 96       	adiw	r28, 0x06	; 6
    2bca:	7f af       	std	Y+63, r23	; 0x3f
    2bcc:	26 97       	sbiw	r28, 0x06	; 6
    2bce:	27 96       	adiw	r28, 0x07	; 7
    2bd0:	8f af       	std	Y+63, r24	; 0x3f
    2bd2:	27 97       	sbiw	r28, 0x07	; 7
    2bd4:	28 96       	adiw	r28, 0x08	; 8
    2bd6:	9f af       	std	Y+63, r25	; 0x3f
    2bd8:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    2bda:	24 96       	adiw	r28, 0x04	; 4
    2bdc:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bde:	9d ad       	ldd	r25, Y+61	; 0x3d
    2be0:	ae ad       	ldd	r26, Y+62	; 0x3e
    2be2:	bf ad       	ldd	r27, Y+63	; 0x3f
    2be4:	24 97       	sbiw	r28, 0x04	; 4
    2be6:	84 0d       	add	r24, r4
    2be8:	95 1d       	adc	r25, r5
    2bea:	a6 1d       	adc	r26, r6
    2bec:	b7 1d       	adc	r27, r7
    2bee:	24 96       	adiw	r28, 0x04	; 4
    2bf0:	8c af       	std	Y+60, r24	; 0x3c
    2bf2:	9d af       	std	Y+61, r25	; 0x3d
    2bf4:	ae af       	std	Y+62, r26	; 0x3e
    2bf6:	bf af       	std	Y+63, r27	; 0x3f
    2bf8:	24 97       	sbiw	r28, 0x04	; 4
    2bfa:	80 93 f7 05 	sts	0x05F7, r24
    2bfe:	90 93 f8 05 	sts	0x05F8, r25
    2c02:	a0 93 f9 05 	sts	0x05F9, r26
    2c06:	b0 93 fa 05 	sts	0x05FA, r27

	centsConst = 0x27*osc2CentsShift;
    2c0a:	20 91 ce 05 	lds	r18, 0x05CE
    2c0e:	97 e2       	ldi	r25, 0x27	; 39
    2c10:	29 02       	muls	r18, r25
    2c12:	90 01       	movw	r18, r0
    2c14:	11 24       	eor	r1, r1
    2c16:	44 27       	eor	r20, r20
    2c18:	37 fd       	sbrc	r19, 7
    2c1a:	40 95       	com	r20
    2c1c:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2c1e:	c7 01       	movw	r24, r14
    2c20:	b6 01       	movw	r22, r12
    2c22:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2c26:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    2c2a:	29 96       	adiw	r28, 0x09	; 9
    2c2c:	2f af       	std	Y+63, r18	; 0x3f
    2c2e:	29 97       	sbiw	r28, 0x09	; 9
    2c30:	2a 96       	adiw	r28, 0x0a	; 10
    2c32:	3f af       	std	Y+63, r19	; 0x3f
    2c34:	2a 97       	sbiw	r28, 0x0a	; 10
    2c36:	2b 96       	adiw	r28, 0x0b	; 11
    2c38:	4f af       	std	Y+63, r20	; 0x3f
    2c3a:	2b 97       	sbiw	r28, 0x0b	; 11
    2c3c:	2c 96       	adiw	r28, 0x0c	; 12
    2c3e:	5f af       	std	Y+63, r21	; 0x3f
    2c40:	2c 97       	sbiw	r28, 0x0c	; 12
    2c42:	2d 96       	adiw	r28, 0x0d	; 13
    2c44:	6f af       	std	Y+63, r22	; 0x3f
    2c46:	2d 97       	sbiw	r28, 0x0d	; 13
    2c48:	2e 96       	adiw	r28, 0x0e	; 14
    2c4a:	7f af       	std	Y+63, r23	; 0x3f
    2c4c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c4e:	2f 96       	adiw	r28, 0x0f	; 15
    2c50:	8f af       	std	Y+63, r24	; 0x3f
    2c52:	2f 97       	sbiw	r28, 0x0f	; 15
    2c54:	60 96       	adiw	r28, 0x10	; 16
    2c56:	9f af       	std	Y+63, r25	; 0x3f
    2c58:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    2c5a:	2c 96       	adiw	r28, 0x0c	; 12
    2c5c:	4c ac       	ldd	r4, Y+60	; 0x3c
    2c5e:	5d ac       	ldd	r5, Y+61	; 0x3d
    2c60:	6e ac       	ldd	r6, Y+62	; 0x3e
    2c62:	7f ac       	ldd	r7, Y+63	; 0x3f
    2c64:	2c 97       	sbiw	r28, 0x0c	; 12
    2c66:	4c 0c       	add	r4, r12
    2c68:	5d 1c       	adc	r5, r13
    2c6a:	6e 1c       	adc	r6, r14
    2c6c:	7f 1c       	adc	r7, r15
    2c6e:	40 92 d7 05 	sts	0x05D7, r4
    2c72:	50 92 d8 05 	sts	0x05D8, r5
    2c76:	60 92 d9 05 	sts	0x05D9, r6
    2c7a:	70 92 da 05 	sts	0x05DA, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2c7e:	c0 90 67 05 	lds	r12, 0x0567
    2c82:	d0 90 68 05 	lds	r13, 0x0568
    2c86:	e0 90 69 05 	lds	r14, 0x0569
    2c8a:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2c8e:	24 96       	adiw	r28, 0x04	; 4
    2c90:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c92:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c94:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c96:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c98:	24 97       	sbiw	r28, 0x04	; 4
    2c9a:	a7 01       	movw	r20, r14
    2c9c:	96 01       	movw	r18, r12
    2c9e:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2ca2:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2caa:	80 93 e7 05 	sts	0x05E7, r24
    2cae:	90 93 e8 05 	sts	0x05E8, r25
    2cb2:	a0 93 e9 05 	sts	0x05E9, r26
    2cb6:	b0 93 ea 05 	sts	0x05EA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2cba:	c3 01       	movw	r24, r6
    2cbc:	b2 01       	movw	r22, r4
    2cbe:	a7 01       	movw	r20, r14
    2cc0:	96 01       	movw	r18, r12
    2cc2:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2cc6:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    2cca:	c9 01       	movw	r24, r18
    2ccc:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    2cce:	80 93 cf 05 	sts	0x05CF, r24
    2cd2:	90 93 d0 05 	sts	0x05D0, r25
    2cd6:	a0 93 d1 05 	sts	0x05D1, r26
    2cda:	b0 93 d2 05 	sts	0x05D2, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    2cde:	60 91 b7 05 	lds	r22, 0x05B7
    2ce2:	70 91 b8 05 	lds	r23, 0x05B8
    2ce6:	80 91 b9 05 	lds	r24, 0x05B9
    2cea:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2cee:	a7 01       	movw	r20, r14
    2cf0:	96 01       	movw	r18, r12
    2cf2:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2cf6:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    2cfe:	80 93 bb 05 	sts	0x05BB, r24
    2d02:	90 93 bc 05 	sts	0x05BC, r25
    2d06:	a0 93 bd 05 	sts	0x05BD, r26
    2d0a:	b0 93 be 05 	sts	0x05BE, r27
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
					osc2MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC2][1] != 0)
    2d1a:	80 91 70 05 	lds	r24, 0x0570
    2d1e:	88 23       	and	r24, r24
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <main+0x111a>
    2d22:	42 c0       	rjmp	.+132    	; 0x2da8 <main+0x119e>
			{
				if(osc2CentsShift != (adcValue[1] >> 2) - 128)
    2d24:	60 91 ce 05 	lds	r22, 0x05CE
    2d28:	86 2f       	mov	r24, r22
    2d2a:	99 27       	eor	r25, r25
    2d2c:	87 fd       	sbrc	r24, 7
    2d2e:	90 95       	com	r25
    2d30:	20 91 05 06 	lds	r18, 0x0605
    2d34:	30 91 06 06 	lds	r19, 0x0606
    2d38:	a9 01       	movw	r20, r18
    2d3a:	55 95       	asr	r21
    2d3c:	47 95       	ror	r20
    2d3e:	55 95       	asr	r21
    2d40:	47 95       	ror	r20
    2d42:	40 58       	subi	r20, 0x80	; 128
    2d44:	51 09       	sbc	r21, r1
    2d46:	84 17       	cp	r24, r20
    2d48:	95 07       	cpc	r25, r21
    2d4a:	71 f1       	breq	.+92     	; 0x2da8 <main+0x119e>
				{
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
    2d4c:	30 93 8e 05 	sts	0x058E, r19
    2d50:	20 93 8d 05 	sts	0x058D, r18

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2d54:	88 e0       	ldi	r24, 0x08	; 8
    2d56:	ed e1       	ldi	r30, 0x1D	; 29
    2d58:	f1 e0       	ldi	r31, 0x01	; 1
    2d5a:	d5 01       	movw	r26, r10
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	0d 92       	st	X+, r0
    2d60:	8a 95       	dec	r24
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <main+0x1152>
	sprintf(buf + 7, "%d", osc2CentsShift);
    2d64:	9f 93       	push	r25
    2d66:	6f 93       	push	r22
    2d68:	a6 e0       	ldi	r26, 0x06	; 6
    2d6a:	b1 e0       	ldi	r27, 0x01	; 1
    2d6c:	bf 93       	push	r27
    2d6e:	af 93       	push	r26
    2d70:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d72:	3f 93       	push	r19
    2d74:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d76:	8f 93       	push	r24
    2d78:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    2d7c:	d5 01       	movw	r26, r10
    2d7e:	0d 90       	ld	r0, X+
    2d80:	00 20       	and	r0, r0
    2d82:	e9 f7       	brne	.-6      	; 0x2d7e <main+0x1174>
    2d84:	11 97       	sbiw	r26, 0x01	; 1
    2d86:	88 e0       	ldi	r24, 0x08	; 8
    2d88:	ec e3       	ldi	r30, 0x3C	; 60
    2d8a:	f1 e0       	ldi	r31, 0x01	; 1
    2d8c:	01 90       	ld	r0, Z+
    2d8e:	0d 92       	st	X+, r0
    2d90:	8a 95       	dec	r24
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <main+0x1182>
	writeLine(4, buf);
    2d94:	b5 01       	movw	r22, r10
    2d96:	84 e0       	ldi	r24, 0x04	; 4
    2d98:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
					osc2MenuCentsUpdate();
				}
			}
			if(menuChange[MENU_OSC2][0] != 0)
    2da8:	80 91 6f 05 	lds	r24, 0x056F
    2dac:	88 23       	and	r24, r24
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <main+0x11aa>
    2db0:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
			{
				if(adcValue[0] < 205)
    2db4:	80 91 03 06 	lds	r24, 0x0603
    2db8:	90 91 04 06 	lds	r25, 0x0604
    2dbc:	8d 3c       	cpi	r24, 0xCD	; 205
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	0c f0       	brlt	.+2      	; 0x2dc4 <main+0x11ba>
    2dc2:	e5 c6       	rjmp	.+3530   	; 0x3b8e <main+0x1f84>
				{
					if(osc2OctaveShift != -2)
    2dc4:	80 91 cc 05 	lds	r24, 0x05CC
    2dc8:	8e 3f       	cpi	r24, 0xFE	; 254
    2dca:	11 f4       	brne	.+4      	; 0x2dd0 <main+0x11c6>
    2dcc:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc2OctaveShift = -2;
    2dd0:	2e ef       	ldi	r18, 0xFE	; 254
    2dd2:	20 93 cc 05 	sts	0x05CC, r18
						menuKnobPos[MENU_OSC2][0] = 102;
    2dd6:	86 e6       	ldi	r24, 0x66	; 102
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	90 93 8c 05 	sts	0x058C, r25
    2dde:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    2de2:	86 e0       	ldi	r24, 0x06	; 6
    2de4:	e1 e5       	ldi	r30, 0x51	; 81
    2de6:	f1 e0       	ldi	r31, 0x01	; 1
    2de8:	d5 01       	movw	r26, r10
    2dea:	01 90       	ld	r0, Z+
    2dec:	0d 92       	st	X+, r0
    2dee:	8a 95       	dec	r24
    2df0:	e1 f7       	brne	.-8      	; 0x2dea <main+0x11e0>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    2df2:	8f ef       	ldi	r24, 0xFF	; 255
    2df4:	8f 93       	push	r24
    2df6:	2f 93       	push	r18
    2df8:	a6 e0       	ldi	r26, 0x06	; 6
    2dfa:	b1 e0       	ldi	r27, 0x01	; 1
    2dfc:	bf 93       	push	r27
    2dfe:	af 93       	push	r26
    2e00:	3f a9       	ldd	r19, Y+55	; 0x37
    2e02:	3f 93       	push	r19
    2e04:	8e a9       	ldd	r24, Y+54	; 0x36
    2e06:	8f 93       	push	r24
    2e08:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "        ");
    2e0c:	d5 01       	movw	r26, r10
    2e0e:	0d 90       	ld	r0, X+
    2e10:	00 20       	and	r0, r0
    2e12:	e9 f7       	brne	.-6      	; 0x2e0e <main+0x1204>
    2e14:	11 97       	sbiw	r26, 0x01	; 1
    2e16:	89 e0       	ldi	r24, 0x09	; 9
    2e18:	eb e3       	ldi	r30, 0x3B	; 59
    2e1a:	f1 e0       	ldi	r31, 0x01	; 1
    2e1c:	01 90       	ld	r0, Z+
    2e1e:	0d 92       	st	X+, r0
    2e20:	8a 95       	dec	r24
    2e22:	e1 f7       	brne	.-8      	; 0x2e1c <main+0x1212>
	writeLine(5, buf);
    2e24:	b5 01       	movw	r22, r10
    2e26:	85 e0       	ldi	r24, 0x05	; 5
    2e28:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
		{
			if(btnPressed[MENU_LFO])
			btnPressed[MENU_LFO] = false;
			
			if(!btnCanPress[MENU_LFO])
			btnLastPressed[MENU_LFO]++;
    2e3c:	90 91 f5 04 	lds	r25, 0x04F5
    2e40:	9f 5f       	subi	r25, 0xFF	; 255
    2e42:	90 93 f5 04 	sts	0x04F5, r25
    2e46:	8f cd       	rjmp	.-1250   	; 0x2966 <main+0xd5c>
		{
			if(btnPressed[MENU_OSC1])
			btnPressed[MENU_OSC1] = false;
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
    2e48:	80 91 f3 04 	lds	r24, 0x04F3
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	80 93 f3 04 	sts	0x04F3, r24
    2e52:	61 cd       	rjmp	.-1342   	; 0x2916 <main+0xd0c>
		{
			if(btnPressed[MENU_MIX])
			btnPressed[MENU_MIX] = false;
			
			if(!btnCanPress[MENU_MIX])
			btnLastPressed[MENU_MIX]++;
    2e54:	90 91 f6 04 	lds	r25, 0x04F6
    2e58:	9f 5f       	subi	r25, 0xFF	; 255
    2e5a:	90 93 f6 04 	sts	0x04F6, r25
    2e5e:	96 cd       	rjmp	.-1236   	; 0x298c <main+0xd82>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    2e60:	80 91 ff 05 	lds	r24, 0x05FF
    2e64:	88 23       	and	r24, r24
    2e66:	d1 f0       	breq	.+52     	; 0x2e9c <main+0x1292>
    2e68:	80 91 83 05 	lds	r24, 0x0583
    2e6c:	90 91 84 05 	lds	r25, 0x0584
    2e70:	20 91 03 06 	lds	r18, 0x0603
    2e74:	30 91 04 06 	lds	r19, 0x0604
    2e78:	ac 01       	movw	r20, r24
    2e7a:	47 5f       	subi	r20, 0xF7	; 247
    2e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7e:	42 17       	cp	r20, r18
    2e80:	53 07       	cpc	r21, r19
    2e82:	64 f0       	brlt	.+24     	; 0x2e9c <main+0x1292>
    2e84:	8b 30       	cpi	r24, 0x0B	; 11
    2e86:	91 05       	cpc	r25, r1
    2e88:	0c f4       	brge	.+2      	; 0x2e8c <main+0x1282>
    2e8a:	c0 c7       	rjmp	.+3968   	; 0x3e0c <main+0x2202>
    2e8c:	0a 97       	sbiw	r24, 0x0a	; 10
    2e8e:	82 17       	cp	r24, r18
    2e90:	93 07       	cpc	r25, r19
    2e92:	24 f4       	brge	.+8      	; 0x2e9c <main+0x1292>
			{
				menuChange[MENU_OSC1][0] = 1;
    2e94:	80 92 6b 05 	sts	0x056B, r8
				updateADC[0] = false;
    2e98:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    2e9c:	80 91 00 06 	lds	r24, 0x0600
    2ea0:	88 23       	and	r24, r24
    2ea2:	d1 f0       	breq	.+52     	; 0x2ed8 <main+0x12ce>
    2ea4:	80 91 85 05 	lds	r24, 0x0585
    2ea8:	90 91 86 05 	lds	r25, 0x0586
    2eac:	20 91 05 06 	lds	r18, 0x0605
    2eb0:	30 91 06 06 	lds	r19, 0x0606
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	47 5f       	subi	r20, 0xF7	; 247
    2eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eba:	42 17       	cp	r20, r18
    2ebc:	53 07       	cpc	r21, r19
    2ebe:	64 f0       	brlt	.+24     	; 0x2ed8 <main+0x12ce>
    2ec0:	8b 30       	cpi	r24, 0x0B	; 11
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	0c f4       	brge	.+2      	; 0x2ec8 <main+0x12be>
    2ec6:	a5 c7       	rjmp	.+3914   	; 0x3e12 <main+0x2208>
    2ec8:	0a 97       	sbiw	r24, 0x0a	; 10
    2eca:	82 17       	cp	r24, r18
    2ecc:	93 07       	cpc	r25, r19
    2ece:	24 f4       	brge	.+8      	; 0x2ed8 <main+0x12ce>
			{
				menuChange[MENU_OSC1][1] = 1;
    2ed0:	80 92 6c 05 	sts	0x056C, r8
				updateADC[1] = false;
    2ed4:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    2ed8:	80 91 01 06 	lds	r24, 0x0601
    2edc:	88 23       	and	r24, r24
    2ede:	d1 f0       	breq	.+52     	; 0x2f14 <main+0x130a>
    2ee0:	80 91 87 05 	lds	r24, 0x0587
    2ee4:	90 91 88 05 	lds	r25, 0x0588
    2ee8:	20 91 07 06 	lds	r18, 0x0607
    2eec:	30 91 08 06 	lds	r19, 0x0608
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	47 5f       	subi	r20, 0xF7	; 247
    2ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef6:	42 17       	cp	r20, r18
    2ef8:	53 07       	cpc	r21, r19
    2efa:	64 f0       	brlt	.+24     	; 0x2f14 <main+0x130a>
    2efc:	8b 30       	cpi	r24, 0x0B	; 11
    2efe:	91 05       	cpc	r25, r1
    2f00:	0c f4       	brge	.+2      	; 0x2f04 <main+0x12fa>
    2f02:	a6 c7       	rjmp	.+3916   	; 0x3e50 <main+0x2246>
    2f04:	0a 97       	sbiw	r24, 0x0a	; 10
    2f06:	82 17       	cp	r24, r18
    2f08:	93 07       	cpc	r25, r19
    2f0a:	24 f4       	brge	.+8      	; 0x2f14 <main+0x130a>
			{
				menuChange[MENU_OSC1][2] = 1;
    2f0c:	80 92 6d 05 	sts	0x056D, r8
				updateADC[2] = false;
    2f10:	10 92 01 06 	sts	0x0601, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    2f14:	80 91 02 06 	lds	r24, 0x0602
    2f18:	88 23       	and	r24, r24
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <main+0x1314>
    2f1c:	9a c5       	rjmp	.+2868   	; 0x3a52 <main+0x1e48>
    2f1e:	20 91 89 05 	lds	r18, 0x0589
    2f22:	30 91 8a 05 	lds	r19, 0x058A
    2f26:	80 91 09 06 	lds	r24, 0x0609
    2f2a:	90 91 0a 06 	lds	r25, 0x060A
    2f2e:	a9 01       	movw	r20, r18
    2f30:	47 5f       	subi	r20, 0xF7	; 247
    2f32:	5f 4f       	sbci	r21, 0xFF	; 255
    2f34:	48 17       	cp	r20, r24
    2f36:	59 07       	cpc	r21, r25
    2f38:	0c f4       	brge	.+2      	; 0x2f3c <main+0x1332>
    2f3a:	8b c5       	rjmp	.+2838   	; 0x3a52 <main+0x1e48>
    2f3c:	2b 30       	cpi	r18, 0x0B	; 11
    2f3e:	31 05       	cpc	r19, r1
    2f40:	0c f4       	brge	.+2      	; 0x2f44 <main+0x133a>
    2f42:	6a c7       	rjmp	.+3796   	; 0x3e18 <main+0x220e>
    2f44:	2a 50       	subi	r18, 0x0A	; 10
    2f46:	31 09       	sbc	r19, r1
    2f48:	28 17       	cp	r18, r24
    2f4a:	39 07       	cpc	r19, r25
    2f4c:	0c f0       	brlt	.+2      	; 0x2f50 <main+0x1346>
    2f4e:	81 c5       	rjmp	.+2818   	; 0x3a52 <main+0x1e48>
			{
				menuChange[MENU_OSC1][3] = 1;
    2f50:	80 92 6e 05 	sts	0x056E, r8
				updateADC[3] = false;
    2f54:	10 92 02 06 	sts	0x0602, r1
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
			{
				if(adcValue[3] < 146)
    2f58:	82 39       	cpi	r24, 0x92	; 146
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	0c f0       	brlt	.+2      	; 0x2f60 <main+0x1356>
    2f5e:	86 c5       	rjmp	.+2828   	; 0x3a6c <main+0x1e62>
				{
					if(osc1WaveForm != WAVE_SINE)
    2f60:	80 91 03 01 	lds	r24, 0x0103
    2f64:	81 11       	cpse	r24, r1
    2f66:	ca c7       	rjmp	.+3988   	; 0x3efc <main+0x22f2>
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
						osc1MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC1][2] != 0)
    2f68:	80 91 6d 05 	lds	r24, 0x056D
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <main+0x1368>
    2f70:	3e c1       	rjmp	.+636    	; 0x31ee <main+0x15e4>
			{
				if(osc1SemisShift != (adcValue[2] >> 4) - 32)
    2f72:	80 91 07 06 	lds	r24, 0x0607
    2f76:	90 91 08 06 	lds	r25, 0x0608
    2f7a:	9c 01       	movw	r18, r24
    2f7c:	35 95       	asr	r19
    2f7e:	27 95       	ror	r18
    2f80:	35 95       	asr	r19
    2f82:	27 95       	ror	r18
    2f84:	35 95       	asr	r19
    2f86:	27 95       	ror	r18
    2f88:	35 95       	asr	r19
    2f8a:	27 95       	ror	r18
    2f8c:	60 91 e5 05 	lds	r22, 0x05E5
    2f90:	77 27       	eor	r23, r23
    2f92:	67 fd       	sbrc	r22, 7
    2f94:	70 95       	com	r23
    2f96:	a9 01       	movw	r20, r18
    2f98:	40 52       	subi	r20, 0x20	; 32
    2f9a:	51 09       	sbc	r21, r1
    2f9c:	64 17       	cp	r22, r20
    2f9e:	75 07       	cpc	r23, r21
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <main+0x139a>
    2fa2:	25 c1       	rjmp	.+586    	; 0x31ee <main+0x15e4>
				{
					osc1SemisShift = (adcValue[2] >> 4) - 32;
    2fa4:	20 52       	subi	r18, 0x20	; 32
    2fa6:	20 93 e5 05 	sts	0x05E5, r18
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
    2faa:	90 93 88 05 	sts	0x0588, r25
    2fae:	80 93 87 05 	sts	0x0587, r24

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2fb2:	88 e0       	ldi	r24, 0x08	; 8
    2fb4:	e5 e2       	ldi	r30, 0x25	; 37
    2fb6:	f1 e0       	ldi	r31, 0x01	; 1
    2fb8:	d5 01       	movw	r26, r10
    2fba:	01 90       	ld	r0, Z+
    2fbc:	0d 92       	st	X+, r0
    2fbe:	8a 95       	dec	r24
    2fc0:	e1 f7       	brne	.-8      	; 0x2fba <main+0x13b0>
	sprintf(buf + 7, "%d", osc1SemisShift);
    2fc2:	82 2f       	mov	r24, r18
    2fc4:	99 27       	eor	r25, r25
    2fc6:	87 fd       	sbrc	r24, 7
    2fc8:	90 95       	com	r25
    2fca:	9f 93       	push	r25
    2fcc:	2f 93       	push	r18
    2fce:	a6 e0       	ldi	r26, 0x06	; 6
    2fd0:	b1 e0       	ldi	r27, 0x01	; 1
    2fd2:	bf 93       	push	r27
    2fd4:	af 93       	push	r26
    2fd6:	3b ad       	ldd	r19, Y+59	; 0x3b
    2fd8:	3f 93       	push	r19
    2fda:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fdc:	8f 93       	push	r24
    2fde:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    2fe2:	d5 01       	movw	r26, r10
    2fe4:	0d 90       	ld	r0, X+
    2fe6:	00 20       	and	r0, r0
    2fe8:	e9 f7       	brne	.-6      	; 0x2fe4 <main+0x13da>
    2fea:	11 97       	sbiw	r26, 0x01	; 1
    2fec:	88 e0       	ldi	r24, 0x08	; 8
    2fee:	ec e3       	ldi	r30, 0x3C	; 60
    2ff0:	f1 e0       	ldi	r31, 0x01	; 1
    2ff2:	01 90       	ld	r0, Z+
    2ff4:	0d 92       	st	X+, r0
    2ff6:	8a 95       	dec	r24
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <main+0x13e8>
	writeLine(3, buf);
    2ffa:	b5 01       	movw	r22, r10
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    3002:	80 91 db 05 	lds	r24, 0x05DB
    3006:	e0 91 e5 05 	lds	r30, 0x05E5
    300a:	ff 27       	eor	r31, r31
    300c:	e7 fd       	sbrc	r30, 7
    300e:	f0 95       	com	r31
    3010:	e8 0f       	add	r30, r24
    3012:	f1 1d       	adc	r31, r1
    3014:	ee 0f       	add	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	ed 55       	subi	r30, 0x5D	; 93
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	40 80       	ld	r4, Z
    3022:	51 80       	ldd	r5, Z+1	; 0x01
    3024:	62 80       	ldd	r6, Z+2	; 0x02
    3026:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    3028:	80 91 cc 05 	lds	r24, 0x05CC
    302c:	90 91 c2 05 	lds	r25, 0x05C2
    3030:	e0 91 cd 05 	lds	r30, 0x05CD
    3034:	ff 27       	eor	r31, r31
    3036:	e7 fd       	sbrc	r30, 7
    3038:	f0 95       	com	r31
    303a:	e9 0f       	add	r30, r25
    303c:	f1 1d       	adc	r31, r1
    303e:	9c e0       	ldi	r25, 0x0C	; 12
    3040:	89 02       	muls	r24, r25
    3042:	e0 0d       	add	r30, r0
    3044:	f1 1d       	adc	r31, r1
    3046:	11 24       	eor	r1, r1
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	ee 0f       	add	r30, r30
    304e:	ff 1f       	adc	r31, r31
    3050:	ed 55       	subi	r30, 0x5D	; 93
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	c0 80       	ld	r12, Z
    3056:	d1 80       	ldd	r13, Z+1	; 0x01
    3058:	e2 80       	ldd	r14, Z+2	; 0x02
    305a:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    305c:	60 91 e6 05 	lds	r22, 0x05E6
    3060:	a7 e2       	ldi	r26, 0x27	; 39
    3062:	6a 02       	muls	r22, r26
    3064:	b0 01       	movw	r22, r0
    3066:	11 24       	eor	r1, r1
    3068:	88 27       	eor	r24, r24
    306a:	77 fd       	sbrc	r23, 7
    306c:	80 95       	com	r24
    306e:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3070:	a3 01       	movw	r20, r6
    3072:	92 01       	movw	r18, r4
    3074:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3078:	00 e1       	ldi	r16, 0x10	; 16
    307a:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    307e:	21 96       	adiw	r28, 0x01	; 1
    3080:	2f af       	std	Y+63, r18	; 0x3f
    3082:	21 97       	sbiw	r28, 0x01	; 1
    3084:	22 96       	adiw	r28, 0x02	; 2
    3086:	3f af       	std	Y+63, r19	; 0x3f
    3088:	22 97       	sbiw	r28, 0x02	; 2
    308a:	23 96       	adiw	r28, 0x03	; 3
    308c:	4f af       	std	Y+63, r20	; 0x3f
    308e:	23 97       	sbiw	r28, 0x03	; 3
    3090:	24 96       	adiw	r28, 0x04	; 4
    3092:	5f af       	std	Y+63, r21	; 0x3f
    3094:	24 97       	sbiw	r28, 0x04	; 4
    3096:	25 96       	adiw	r28, 0x05	; 5
    3098:	6f af       	std	Y+63, r22	; 0x3f
    309a:	25 97       	sbiw	r28, 0x05	; 5
    309c:	26 96       	adiw	r28, 0x06	; 6
    309e:	7f af       	std	Y+63, r23	; 0x3f
    30a0:	26 97       	sbiw	r28, 0x06	; 6
    30a2:	27 96       	adiw	r28, 0x07	; 7
    30a4:	8f af       	std	Y+63, r24	; 0x3f
    30a6:	27 97       	sbiw	r28, 0x07	; 7
    30a8:	28 96       	adiw	r28, 0x08	; 8
    30aa:	9f af       	std	Y+63, r25	; 0x3f
    30ac:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    30ae:	24 96       	adiw	r28, 0x04	; 4
    30b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    30b2:	9d ad       	ldd	r25, Y+61	; 0x3d
    30b4:	ae ad       	ldd	r26, Y+62	; 0x3e
    30b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    30b8:	24 97       	sbiw	r28, 0x04	; 4
    30ba:	84 0d       	add	r24, r4
    30bc:	95 1d       	adc	r25, r5
    30be:	a6 1d       	adc	r26, r6
    30c0:	b7 1d       	adc	r27, r7
    30c2:	24 96       	adiw	r28, 0x04	; 4
    30c4:	8c af       	std	Y+60, r24	; 0x3c
    30c6:	9d af       	std	Y+61, r25	; 0x3d
    30c8:	ae af       	std	Y+62, r26	; 0x3e
    30ca:	bf af       	std	Y+63, r27	; 0x3f
    30cc:	24 97       	sbiw	r28, 0x04	; 4
    30ce:	80 93 f7 05 	sts	0x05F7, r24
    30d2:	90 93 f8 05 	sts	0x05F8, r25
    30d6:	a0 93 f9 05 	sts	0x05F9, r26
    30da:	b0 93 fa 05 	sts	0x05FA, r27

	centsConst = 0x27*osc2CentsShift;
    30de:	20 91 ce 05 	lds	r18, 0x05CE
    30e2:	97 e2       	ldi	r25, 0x27	; 39
    30e4:	29 02       	muls	r18, r25
    30e6:	90 01       	movw	r18, r0
    30e8:	11 24       	eor	r1, r1
    30ea:	44 27       	eor	r20, r20
    30ec:	37 fd       	sbrc	r19, 7
    30ee:	40 95       	com	r20
    30f0:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    30f2:	c7 01       	movw	r24, r14
    30f4:	b6 01       	movw	r22, r12
    30f6:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    30fa:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    30fe:	29 96       	adiw	r28, 0x09	; 9
    3100:	2f af       	std	Y+63, r18	; 0x3f
    3102:	29 97       	sbiw	r28, 0x09	; 9
    3104:	2a 96       	adiw	r28, 0x0a	; 10
    3106:	3f af       	std	Y+63, r19	; 0x3f
    3108:	2a 97       	sbiw	r28, 0x0a	; 10
    310a:	2b 96       	adiw	r28, 0x0b	; 11
    310c:	4f af       	std	Y+63, r20	; 0x3f
    310e:	2b 97       	sbiw	r28, 0x0b	; 11
    3110:	2c 96       	adiw	r28, 0x0c	; 12
    3112:	5f af       	std	Y+63, r21	; 0x3f
    3114:	2c 97       	sbiw	r28, 0x0c	; 12
    3116:	2d 96       	adiw	r28, 0x0d	; 13
    3118:	6f af       	std	Y+63, r22	; 0x3f
    311a:	2d 97       	sbiw	r28, 0x0d	; 13
    311c:	2e 96       	adiw	r28, 0x0e	; 14
    311e:	7f af       	std	Y+63, r23	; 0x3f
    3120:	2e 97       	sbiw	r28, 0x0e	; 14
    3122:	2f 96       	adiw	r28, 0x0f	; 15
    3124:	8f af       	std	Y+63, r24	; 0x3f
    3126:	2f 97       	sbiw	r28, 0x0f	; 15
    3128:	60 96       	adiw	r28, 0x10	; 16
    312a:	9f af       	std	Y+63, r25	; 0x3f
    312c:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    312e:	2c 96       	adiw	r28, 0x0c	; 12
    3130:	4c ac       	ldd	r4, Y+60	; 0x3c
    3132:	5d ac       	ldd	r5, Y+61	; 0x3d
    3134:	6e ac       	ldd	r6, Y+62	; 0x3e
    3136:	7f ac       	ldd	r7, Y+63	; 0x3f
    3138:	2c 97       	sbiw	r28, 0x0c	; 12
    313a:	4c 0c       	add	r4, r12
    313c:	5d 1c       	adc	r5, r13
    313e:	6e 1c       	adc	r6, r14
    3140:	7f 1c       	adc	r7, r15
    3142:	40 92 d7 05 	sts	0x05D7, r4
    3146:	50 92 d8 05 	sts	0x05D8, r5
    314a:	60 92 d9 05 	sts	0x05D9, r6
    314e:	70 92 da 05 	sts	0x05DA, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3152:	c0 90 67 05 	lds	r12, 0x0567
    3156:	d0 90 68 05 	lds	r13, 0x0568
    315a:	e0 90 69 05 	lds	r14, 0x0569
    315e:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3162:	24 96       	adiw	r28, 0x04	; 4
    3164:	6c ad       	ldd	r22, Y+60	; 0x3c
    3166:	7d ad       	ldd	r23, Y+61	; 0x3d
    3168:	8e ad       	ldd	r24, Y+62	; 0x3e
    316a:	9f ad       	ldd	r25, Y+63	; 0x3f
    316c:	24 97       	sbiw	r28, 0x04	; 4
    316e:	a7 01       	movw	r20, r14
    3170:	96 01       	movw	r18, r12
    3172:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3176:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    317a:	c9 01       	movw	r24, r18
    317c:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    317e:	80 93 e7 05 	sts	0x05E7, r24
    3182:	90 93 e8 05 	sts	0x05E8, r25
    3186:	a0 93 e9 05 	sts	0x05E9, r26
    318a:	b0 93 ea 05 	sts	0x05EA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    318e:	c3 01       	movw	r24, r6
    3190:	b2 01       	movw	r22, r4
    3192:	a7 01       	movw	r20, r14
    3194:	96 01       	movw	r18, r12
    3196:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    319a:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    319e:	c9 01       	movw	r24, r18
    31a0:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    31a2:	80 93 cf 05 	sts	0x05CF, r24
    31a6:	90 93 d0 05 	sts	0x05D0, r25
    31aa:	a0 93 d1 05 	sts	0x05D1, r26
    31ae:	b0 93 d2 05 	sts	0x05D2, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    31b2:	60 91 b7 05 	lds	r22, 0x05B7
    31b6:	70 91 b8 05 	lds	r23, 0x05B8
    31ba:	80 91 b9 05 	lds	r24, 0x05B9
    31be:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    31c2:	a7 01       	movw	r20, r14
    31c4:	96 01       	movw	r18, r12
    31c6:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    31ca:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    31ce:	c9 01       	movw	r24, r18
    31d0:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    31d2:	80 93 bb 05 	sts	0x05BB, r24
    31d6:	90 93 bc 05 	sts	0x05BC, r25
    31da:	a0 93 bd 05 	sts	0x05BD, r26
    31de:	b0 93 be 05 	sts	0x05BE, r27
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
					osc1MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][1] != 0)
    31ee:	80 91 6c 05 	lds	r24, 0x056C
    31f2:	88 23       	and	r24, r24
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <main+0x15ee>
    31f6:	f9 c1       	rjmp	.+1010   	; 0x35ea <main+0x19e0>
			{
				if(osc1CentsShift != (adcValue[1] >> 4) - 32)
    31f8:	60 91 e6 05 	lds	r22, 0x05E6
    31fc:	26 2f       	mov	r18, r22
    31fe:	33 27       	eor	r19, r19
    3200:	27 fd       	sbrc	r18, 7
    3202:	30 95       	com	r19
    3204:	40 91 05 06 	lds	r20, 0x0605
    3208:	50 91 06 06 	lds	r21, 0x0606
    320c:	ca 01       	movw	r24, r20
    320e:	95 95       	asr	r25
    3210:	87 95       	ror	r24
    3212:	95 95       	asr	r25
    3214:	87 95       	ror	r24
    3216:	95 95       	asr	r25
    3218:	87 95       	ror	r24
    321a:	95 95       	asr	r25
    321c:	87 95       	ror	r24
    321e:	80 97       	sbiw	r24, 0x20	; 32
    3220:	28 17       	cp	r18, r24
    3222:	39 07       	cpc	r19, r25
    3224:	09 f4       	brne	.+2      	; 0x3228 <main+0x161e>
    3226:	e1 c1       	rjmp	.+962    	; 0x35ea <main+0x19e0>
				{
					//osc1CentsShift = (adcValue[1] >> 4) - 32;
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
    3228:	50 93 86 05 	sts	0x0586, r21
    322c:	40 93 85 05 	sts	0x0585, r20

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    3230:	88 e0       	ldi	r24, 0x08	; 8
    3232:	ed e1       	ldi	r30, 0x1D	; 29
    3234:	f1 e0       	ldi	r31, 0x01	; 1
    3236:	d5 01       	movw	r26, r10
    3238:	01 90       	ld	r0, Z+
    323a:	0d 92       	st	X+, r0
    323c:	8a 95       	dec	r24
    323e:	e1 f7       	brne	.-8      	; 0x3238 <main+0x162e>
	sprintf(buf + 7, "%d", osc1CentsShift);
    3240:	3f 93       	push	r19
    3242:	6f 93       	push	r22
    3244:	a6 e0       	ldi	r26, 0x06	; 6
    3246:	b1 e0       	ldi	r27, 0x01	; 1
    3248:	bf 93       	push	r27
    324a:	af 93       	push	r26
    324c:	3b ad       	ldd	r19, Y+59	; 0x3b
    324e:	3f 93       	push	r19
    3250:	8a ad       	ldd	r24, Y+58	; 0x3a
    3252:	8f 93       	push	r24
    3254:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    3258:	d5 01       	movw	r26, r10
    325a:	0d 90       	ld	r0, X+
    325c:	00 20       	and	r0, r0
    325e:	e9 f7       	brne	.-6      	; 0x325a <main+0x1650>
    3260:	11 97       	sbiw	r26, 0x01	; 1
    3262:	88 e0       	ldi	r24, 0x08	; 8
    3264:	ec e3       	ldi	r30, 0x3C	; 60
    3266:	f1 e0       	ldi	r31, 0x01	; 1
    3268:	01 90       	ld	r0, Z+
    326a:	0d 92       	st	X+, r0
    326c:	8a 95       	dec	r24
    326e:	e1 f7       	brne	.-8      	; 0x3268 <main+0x165e>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    3270:	8c e0       	ldi	r24, 0x0C	; 12
    3272:	f5 01       	movw	r30, r10
    3274:	de 01       	movw	r26, r28
    3276:	55 96       	adiw	r26, 0x15	; 21
    3278:	01 90       	ld	r0, Z+
    327a:	0d 92       	st	X+, r0
    327c:	8a 95       	dec	r24
    327e:	e1 f7       	brne	.-8      	; 0x3278 <main+0x166e>
	buf[12] = '\0';
    3280:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    3282:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3284:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3286:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3288:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    328a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    328c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    328e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3290:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3292:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3294:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3296:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3298:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    329a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    329c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    329e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32aa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32b0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32b6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    32b8:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    32ba:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    32bc:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32c4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    32c6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32ca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32dc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    32de:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    32ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    32ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    32ee:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    32f0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    32f2:	8d 89       	ldd	r24, Y+21	; 0x15
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	88 23       	and	r24, r24
    3302:	09 f4       	brne	.+2      	; 0x3306 <main+0x16fc>
    3304:	82 c0       	rjmp	.+260    	; 0x340a <main+0x1800>
    3306:	de 01       	movw	r26, r28
    3308:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    330a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    330c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    330e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3310:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3312:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3314:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3316:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3318:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    331a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    331c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    331e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3320:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3322:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3324:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3326:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3328:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    332a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    332c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    332e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3330:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3332:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3334:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3336:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3338:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    333a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    333c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    333e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3340:	44 9a       	sbi	0x08, 4	; 8
    3342:	99 27       	eor	r25, r25
    3344:	87 fd       	sbrc	r24, 7
    3346:	90 95       	com	r25
    3348:	80 97       	sbiw	r24, 0x20	; 32
    334a:	fc 01       	movw	r30, r24
    334c:	ee 0f       	add	r30, r30
    334e:	ff 1f       	adc	r31, r31
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e8 0f       	add	r30, r24
    3356:	f9 1f       	adc	r31, r25
    3358:	ef 5e       	subi	r30, 0xEF	; 239
    335a:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    335c:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    335e:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3360:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3362:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3364:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3366:	82 2f       	mov	r24, r18
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	88 0f       	add	r24, r24
    336c:	89 2f       	mov	r24, r25
    336e:	88 1f       	adc	r24, r24
    3370:	99 0b       	sbc	r25, r25
    3372:	89 2b       	or	r24, r25
    3374:	09 f0       	breq	.+2      	; 0x3378 <main+0x176e>
    3376:	76 c1       	rjmp	.+748    	; 0x3664 <main+0x1a5a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3378:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    337a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    337c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    337e:	26 fd       	sbrc	r18, 6
    3380:	76 c1       	rjmp	.+748    	; 0x366e <main+0x1a64>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3382:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3384:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3386:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3388:	25 fd       	sbrc	r18, 5
    338a:	76 c1       	rjmp	.+748    	; 0x3678 <main+0x1a6e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    338c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    338e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3390:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3392:	24 fd       	sbrc	r18, 4
    3394:	76 c1       	rjmp	.+748    	; 0x3682 <main+0x1a78>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3396:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3398:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    339a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    339c:	23 fd       	sbrc	r18, 3
    339e:	76 c1       	rjmp	.+748    	; 0x368c <main+0x1a82>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33a4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    33a6:	22 fd       	sbrc	r18, 2
    33a8:	76 c1       	rjmp	.+748    	; 0x3696 <main+0x1a8c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33ae:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    33b0:	21 fd       	sbrc	r18, 1
    33b2:	76 c1       	rjmp	.+748    	; 0x36a0 <main+0x1a96>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33b8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    33ba:	20 fd       	sbrc	r18, 0
    33bc:	76 c1       	rjmp	.+748    	; 0x36aa <main+0x1aa0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33be:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33c2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    33c4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    33c6:	3f 5f       	subi	r19, 0xFF	; 255
    33c8:	35 30       	cpi	r19, 0x05	; 5
    33ca:	49 f6       	brne	.-110    	; 0x335e <main+0x1754>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    33cc:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    33ce:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    33fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    33fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    33fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3400:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3402:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3404:	8d 91       	ld	r24, X+
    3406:	81 11       	cpse	r24, r1
    3408:	80 cf       	rjmp	.-256    	; 0x330a <main+0x1700>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    340a:	80 91 db 05 	lds	r24, 0x05DB
    340e:	e0 91 e5 05 	lds	r30, 0x05E5
    3412:	ff 27       	eor	r31, r31
    3414:	e7 fd       	sbrc	r30, 7
    3416:	f0 95       	com	r31
    3418:	e8 0f       	add	r30, r24
    341a:	f1 1d       	adc	r31, r1
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	ee 0f       	add	r30, r30
    3422:	ff 1f       	adc	r31, r31
    3424:	ed 55       	subi	r30, 0x5D	; 93
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	40 80       	ld	r4, Z
    342a:	51 80       	ldd	r5, Z+1	; 0x01
    342c:	62 80       	ldd	r6, Z+2	; 0x02
    342e:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    3430:	80 91 cc 05 	lds	r24, 0x05CC
    3434:	90 91 c2 05 	lds	r25, 0x05C2
    3438:	e0 91 cd 05 	lds	r30, 0x05CD
    343c:	ff 27       	eor	r31, r31
    343e:	e7 fd       	sbrc	r30, 7
    3440:	f0 95       	com	r31
    3442:	e9 0f       	add	r30, r25
    3444:	f1 1d       	adc	r31, r1
    3446:	9c e0       	ldi	r25, 0x0C	; 12
    3448:	89 02       	muls	r24, r25
    344a:	e0 0d       	add	r30, r0
    344c:	f1 1d       	adc	r31, r1
    344e:	11 24       	eor	r1, r1
    3450:	ee 0f       	add	r30, r30
    3452:	ff 1f       	adc	r31, r31
    3454:	ee 0f       	add	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	ed 55       	subi	r30, 0x5D	; 93
    345a:	fe 4f       	sbci	r31, 0xFE	; 254
    345c:	c0 80       	ld	r12, Z
    345e:	d1 80       	ldd	r13, Z+1	; 0x01
    3460:	e2 80       	ldd	r14, Z+2	; 0x02
    3462:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    3464:	60 91 e6 05 	lds	r22, 0x05E6
    3468:	a7 e2       	ldi	r26, 0x27	; 39
    346a:	6a 02       	muls	r22, r26
    346c:	b0 01       	movw	r22, r0
    346e:	11 24       	eor	r1, r1
    3470:	88 27       	eor	r24, r24
    3472:	77 fd       	sbrc	r23, 7
    3474:	80 95       	com	r24
    3476:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3478:	a3 01       	movw	r20, r6
    347a:	92 01       	movw	r18, r4
    347c:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3480:	00 e1       	ldi	r16, 0x10	; 16
    3482:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    3486:	21 96       	adiw	r28, 0x01	; 1
    3488:	2f af       	std	Y+63, r18	; 0x3f
    348a:	21 97       	sbiw	r28, 0x01	; 1
    348c:	22 96       	adiw	r28, 0x02	; 2
    348e:	3f af       	std	Y+63, r19	; 0x3f
    3490:	22 97       	sbiw	r28, 0x02	; 2
    3492:	23 96       	adiw	r28, 0x03	; 3
    3494:	4f af       	std	Y+63, r20	; 0x3f
    3496:	23 97       	sbiw	r28, 0x03	; 3
    3498:	24 96       	adiw	r28, 0x04	; 4
    349a:	5f af       	std	Y+63, r21	; 0x3f
    349c:	24 97       	sbiw	r28, 0x04	; 4
    349e:	25 96       	adiw	r28, 0x05	; 5
    34a0:	6f af       	std	Y+63, r22	; 0x3f
    34a2:	25 97       	sbiw	r28, 0x05	; 5
    34a4:	26 96       	adiw	r28, 0x06	; 6
    34a6:	7f af       	std	Y+63, r23	; 0x3f
    34a8:	26 97       	sbiw	r28, 0x06	; 6
    34aa:	27 96       	adiw	r28, 0x07	; 7
    34ac:	8f af       	std	Y+63, r24	; 0x3f
    34ae:	27 97       	sbiw	r28, 0x07	; 7
    34b0:	28 96       	adiw	r28, 0x08	; 8
    34b2:	9f af       	std	Y+63, r25	; 0x3f
    34b4:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    34b6:	24 96       	adiw	r28, 0x04	; 4
    34b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    34ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    34bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    34be:	bf ad       	ldd	r27, Y+63	; 0x3f
    34c0:	24 97       	sbiw	r28, 0x04	; 4
    34c2:	84 0d       	add	r24, r4
    34c4:	95 1d       	adc	r25, r5
    34c6:	a6 1d       	adc	r26, r6
    34c8:	b7 1d       	adc	r27, r7
    34ca:	24 96       	adiw	r28, 0x04	; 4
    34cc:	8c af       	std	Y+60, r24	; 0x3c
    34ce:	9d af       	std	Y+61, r25	; 0x3d
    34d0:	ae af       	std	Y+62, r26	; 0x3e
    34d2:	bf af       	std	Y+63, r27	; 0x3f
    34d4:	24 97       	sbiw	r28, 0x04	; 4
    34d6:	80 93 f7 05 	sts	0x05F7, r24
    34da:	90 93 f8 05 	sts	0x05F8, r25
    34de:	a0 93 f9 05 	sts	0x05F9, r26
    34e2:	b0 93 fa 05 	sts	0x05FA, r27

	centsConst = 0x27*osc2CentsShift;
    34e6:	20 91 ce 05 	lds	r18, 0x05CE
    34ea:	97 e2       	ldi	r25, 0x27	; 39
    34ec:	29 02       	muls	r18, r25
    34ee:	90 01       	movw	r18, r0
    34f0:	11 24       	eor	r1, r1
    34f2:	44 27       	eor	r20, r20
    34f4:	37 fd       	sbrc	r19, 7
    34f6:	40 95       	com	r20
    34f8:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    34fa:	c7 01       	movw	r24, r14
    34fc:	b6 01       	movw	r22, r12
    34fe:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3502:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    3506:	29 96       	adiw	r28, 0x09	; 9
    3508:	2f af       	std	Y+63, r18	; 0x3f
    350a:	29 97       	sbiw	r28, 0x09	; 9
    350c:	2a 96       	adiw	r28, 0x0a	; 10
    350e:	3f af       	std	Y+63, r19	; 0x3f
    3510:	2a 97       	sbiw	r28, 0x0a	; 10
    3512:	2b 96       	adiw	r28, 0x0b	; 11
    3514:	4f af       	std	Y+63, r20	; 0x3f
    3516:	2b 97       	sbiw	r28, 0x0b	; 11
    3518:	2c 96       	adiw	r28, 0x0c	; 12
    351a:	5f af       	std	Y+63, r21	; 0x3f
    351c:	2c 97       	sbiw	r28, 0x0c	; 12
    351e:	2d 96       	adiw	r28, 0x0d	; 13
    3520:	6f af       	std	Y+63, r22	; 0x3f
    3522:	2d 97       	sbiw	r28, 0x0d	; 13
    3524:	2e 96       	adiw	r28, 0x0e	; 14
    3526:	7f af       	std	Y+63, r23	; 0x3f
    3528:	2e 97       	sbiw	r28, 0x0e	; 14
    352a:	2f 96       	adiw	r28, 0x0f	; 15
    352c:	8f af       	std	Y+63, r24	; 0x3f
    352e:	2f 97       	sbiw	r28, 0x0f	; 15
    3530:	60 96       	adiw	r28, 0x10	; 16
    3532:	9f af       	std	Y+63, r25	; 0x3f
    3534:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    3536:	2c 96       	adiw	r28, 0x0c	; 12
    3538:	4c ac       	ldd	r4, Y+60	; 0x3c
    353a:	5d ac       	ldd	r5, Y+61	; 0x3d
    353c:	6e ac       	ldd	r6, Y+62	; 0x3e
    353e:	7f ac       	ldd	r7, Y+63	; 0x3f
    3540:	2c 97       	sbiw	r28, 0x0c	; 12
    3542:	4c 0c       	add	r4, r12
    3544:	5d 1c       	adc	r5, r13
    3546:	6e 1c       	adc	r6, r14
    3548:	7f 1c       	adc	r7, r15
    354a:	40 92 d7 05 	sts	0x05D7, r4
    354e:	50 92 d8 05 	sts	0x05D8, r5
    3552:	60 92 d9 05 	sts	0x05D9, r6
    3556:	70 92 da 05 	sts	0x05DA, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    355a:	c0 90 67 05 	lds	r12, 0x0567
    355e:	d0 90 68 05 	lds	r13, 0x0568
    3562:	e0 90 69 05 	lds	r14, 0x0569
    3566:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    356a:	24 96       	adiw	r28, 0x04	; 4
    356c:	6c ad       	ldd	r22, Y+60	; 0x3c
    356e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3570:	8e ad       	ldd	r24, Y+62	; 0x3e
    3572:	9f ad       	ldd	r25, Y+63	; 0x3f
    3574:	24 97       	sbiw	r28, 0x04	; 4
    3576:	a7 01       	movw	r20, r14
    3578:	96 01       	movw	r18, r12
    357a:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    357e:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    3582:	c9 01       	movw	r24, r18
    3584:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3586:	80 93 e7 05 	sts	0x05E7, r24
    358a:	90 93 e8 05 	sts	0x05E8, r25
    358e:	a0 93 e9 05 	sts	0x05E9, r26
    3592:	b0 93 ea 05 	sts	0x05EA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3596:	c3 01       	movw	r24, r6
    3598:	b2 01       	movw	r22, r4
    359a:	a7 01       	movw	r20, r14
    359c:	96 01       	movw	r18, r12
    359e:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    35a2:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    35a6:	c9 01       	movw	r24, r18
    35a8:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    35aa:	80 93 cf 05 	sts	0x05CF, r24
    35ae:	90 93 d0 05 	sts	0x05D0, r25
    35b2:	a0 93 d1 05 	sts	0x05D1, r26
    35b6:	b0 93 d2 05 	sts	0x05D2, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    35ba:	60 91 b7 05 	lds	r22, 0x05B7
    35be:	70 91 b8 05 	lds	r23, 0x05B8
    35c2:	80 91 b9 05 	lds	r24, 0x05B9
    35c6:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    35ca:	a7 01       	movw	r20, r14
    35cc:	96 01       	movw	r18, r12
    35ce:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    35d2:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    35d6:	c9 01       	movw	r24, r18
    35d8:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    35da:	80 93 bb 05 	sts	0x05BB, r24
    35de:	90 93 bc 05 	sts	0x05BC, r25
    35e2:	a0 93 bd 05 	sts	0x05BD, r26
    35e6:	b0 93 be 05 	sts	0x05BE, r27
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
					osc1MenuCentsUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][0] != 0)
    35ea:	80 91 6b 05 	lds	r24, 0x056B
    35ee:	88 23       	and	r24, r24
    35f0:	11 f4       	brne	.+4      	; 0x35f6 <main+0x19ec>
    35f2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
			{
				if(adcValue[0] < 512)
    35f6:	80 91 03 06 	lds	r24, 0x0603
    35fa:	90 91 04 06 	lds	r25, 0x0604
    35fe:	81 15       	cp	r24, r1
    3600:	a2 e0       	ldi	r26, 0x02	; 2
    3602:	9a 07       	cpc	r25, r26
    3604:	0c f0       	brlt	.+2      	; 0x3608 <main+0x19fe>
    3606:	9f c2       	rjmp	.+1342   	; 0x3b46 <main+0x1f3c>
				{
					if(osc1NoteSync != false)
    3608:	80 91 dd 05 	lds	r24, 0x05DD
    360c:	88 23       	and	r24, r24
    360e:	11 f4       	brne	.+4      	; 0x3614 <main+0x1a0a>
    3610:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc1NoteSync = false;
    3614:	10 92 dd 05 	sts	0x05DD, r1

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3618:	87 e0       	ldi	r24, 0x07	; 7
    361a:	ed e2       	ldi	r30, 0x2D	; 45
    361c:	f1 e0       	ldi	r31, 0x01	; 1
    361e:	d5 01       	movw	r26, r10
    3620:	01 90       	ld	r0, Z+
    3622:	0d 92       	st	X+, r0
    3624:	8a 95       	dec	r24
    3626:	e1 f7       	brne	.-8      	; 0x3620 <main+0x1a16>
	if(osc1NoteSync != false)
    3628:	80 91 dd 05 	lds	r24, 0x05DD
    362c:	81 11       	cpse	r24, r1
    362e:	02 c5       	rjmp	.+2564   	; 0x4034 <main+0x242a>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3630:	8f e4       	ldi	r24, 0x4F	; 79
    3632:	96 e4       	ldi	r25, 0x46	; 70
    3634:	a6 e4       	ldi	r26, 0x46	; 70
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	8f 83       	std	Y+7, r24	; 0x07
    363a:	98 87       	std	Y+8, r25	; 0x08
    363c:	a9 87       	std	Y+9, r26	; 0x09
    363e:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    3640:	d5 01       	movw	r26, r10
    3642:	0d 90       	ld	r0, X+
    3644:	00 20       	and	r0, r0
    3646:	e9 f7       	brne	.-6      	; 0x3642 <main+0x1a38>
    3648:	11 97       	sbiw	r26, 0x01	; 1
    364a:	88 e0       	ldi	r24, 0x08	; 8
    364c:	ec e3       	ldi	r30, 0x3C	; 60
    364e:	f1 e0       	ldi	r31, 0x01	; 1
    3650:	01 90       	ld	r0, Z+
    3652:	0d 92       	st	X+, r0
    3654:	8a 95       	dec	r24
    3656:	e1 f7       	brne	.-8      	; 0x3650 <main+0x1a46>
	writeLine(5, buf);
    3658:	b5 01       	movw	r22, r10
    365a:	85 e0       	ldi	r24, 0x05	; 5
    365c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3660:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3664:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3666:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3668:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    366a:	26 ff       	sbrs	r18, 6
    366c:	8a ce       	rjmp	.-748    	; 0x3382 <main+0x1778>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    366e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3670:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3672:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3674:	25 ff       	sbrs	r18, 5
    3676:	8a ce       	rjmp	.-748    	; 0x338c <main+0x1782>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3678:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    367a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    367c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    367e:	24 ff       	sbrs	r18, 4
    3680:	8a ce       	rjmp	.-748    	; 0x3396 <main+0x178c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3682:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3684:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3686:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3688:	23 ff       	sbrs	r18, 3
    368a:	8a ce       	rjmp	.-748    	; 0x33a0 <main+0x1796>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    368c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    368e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3690:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3692:	22 ff       	sbrs	r18, 2
    3694:	8a ce       	rjmp	.-748    	; 0x33aa <main+0x17a0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3696:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3698:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    369a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    369c:	21 ff       	sbrs	r18, 1
    369e:	8a ce       	rjmp	.-748    	; 0x33b4 <main+0x17aa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    36a0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    36a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    36a4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    36a6:	20 ff       	sbrs	r18, 0
    36a8:	8a ce       	rjmp	.-748    	; 0x33be <main+0x17b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    36aa:	5d 9a       	sbi	0x0b, 5	; 11
    36ac:	89 ce       	rjmp	.-750    	; 0x33c0 <main+0x17b6>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    36ae:	80 91 ff 05 	lds	r24, 0x05FF
    36b2:	88 23       	and	r24, r24
    36b4:	d1 f0       	breq	.+52     	; 0x36ea <main+0x1ae0>
    36b6:	80 91 93 05 	lds	r24, 0x0593
    36ba:	90 91 94 05 	lds	r25, 0x0594
    36be:	20 91 03 06 	lds	r18, 0x0603
    36c2:	30 91 04 06 	lds	r19, 0x0604
    36c6:	ac 01       	movw	r20, r24
    36c8:	47 5f       	subi	r20, 0xF7	; 247
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	42 17       	cp	r20, r18
    36ce:	53 07       	cpc	r21, r19
    36d0:	64 f0       	brlt	.+24     	; 0x36ea <main+0x1ae0>
    36d2:	8b 30       	cpi	r24, 0x0B	; 11
    36d4:	91 05       	cpc	r25, r1
    36d6:	0c f4       	brge	.+2      	; 0x36da <main+0x1ad0>
    36d8:	59 c3       	rjmp	.+1714   	; 0x3d8c <main+0x2182>
    36da:	0a 97       	sbiw	r24, 0x0a	; 10
    36dc:	82 17       	cp	r24, r18
    36de:	93 07       	cpc	r25, r19
    36e0:	24 f4       	brge	.+8      	; 0x36ea <main+0x1ae0>
			{
				menuChange[MENU_LFO][0] = 1;
    36e2:	80 92 73 05 	sts	0x0573, r8
				updateADC[0] = false;
    36e6:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    36ea:	80 91 00 06 	lds	r24, 0x0600
    36ee:	88 23       	and	r24, r24
    36f0:	d1 f0       	breq	.+52     	; 0x3726 <main+0x1b1c>
    36f2:	80 91 95 05 	lds	r24, 0x0595
    36f6:	90 91 96 05 	lds	r25, 0x0596
    36fa:	20 91 05 06 	lds	r18, 0x0605
    36fe:	30 91 06 06 	lds	r19, 0x0606
    3702:	ac 01       	movw	r20, r24
    3704:	47 5f       	subi	r20, 0xF7	; 247
    3706:	5f 4f       	sbci	r21, 0xFF	; 255
    3708:	42 17       	cp	r20, r18
    370a:	53 07       	cpc	r21, r19
    370c:	64 f0       	brlt	.+24     	; 0x3726 <main+0x1b1c>
    370e:	8b 30       	cpi	r24, 0x0B	; 11
    3710:	91 05       	cpc	r25, r1
    3712:	0c f4       	brge	.+2      	; 0x3716 <main+0x1b0c>
    3714:	3e c3       	rjmp	.+1660   	; 0x3d92 <main+0x2188>
    3716:	0a 97       	sbiw	r24, 0x0a	; 10
    3718:	82 17       	cp	r24, r18
    371a:	93 07       	cpc	r25, r19
    371c:	24 f4       	brge	.+8      	; 0x3726 <main+0x1b1c>
			{
				menuChange[MENU_LFO][1] = 1;
    371e:	80 92 74 05 	sts	0x0574, r8
				updateADC[1] = false;
    3722:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    3726:	80 91 01 06 	lds	r24, 0x0601
    372a:	88 23       	and	r24, r24
    372c:	d1 f0       	breq	.+52     	; 0x3762 <main+0x1b58>
    372e:	80 91 97 05 	lds	r24, 0x0597
    3732:	90 91 98 05 	lds	r25, 0x0598
    3736:	20 91 07 06 	lds	r18, 0x0607
    373a:	30 91 08 06 	lds	r19, 0x0608
    373e:	ac 01       	movw	r20, r24
    3740:	47 5f       	subi	r20, 0xF7	; 247
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	42 17       	cp	r20, r18
    3746:	53 07       	cpc	r21, r19
    3748:	64 f0       	brlt	.+24     	; 0x3762 <main+0x1b58>
    374a:	8b 30       	cpi	r24, 0x0B	; 11
    374c:	91 05       	cpc	r25, r1
    374e:	0c f4       	brge	.+2      	; 0x3752 <main+0x1b48>
    3750:	5a c3       	rjmp	.+1716   	; 0x3e06 <main+0x21fc>
    3752:	0a 97       	sbiw	r24, 0x0a	; 10
    3754:	82 17       	cp	r24, r18
    3756:	93 07       	cpc	r25, r19
    3758:	24 f4       	brge	.+8      	; 0x3762 <main+0x1b58>
			{
				menuChange[MENU_LFO][2] = 1;
    375a:	80 92 75 05 	sts	0x0575, r8
				updateADC[2] = false;
    375e:	10 92 01 06 	sts	0x0601, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    3762:	80 91 02 06 	lds	r24, 0x0602
    3766:	88 23       	and	r24, r24
    3768:	09 f4       	brne	.+2      	; 0x376c <main+0x1b62>
    376a:	e9 c0       	rjmp	.+466    	; 0x393e <main+0x1d34>
    376c:	20 91 99 05 	lds	r18, 0x0599
    3770:	30 91 9a 05 	lds	r19, 0x059A
    3774:	80 91 09 06 	lds	r24, 0x0609
    3778:	90 91 0a 06 	lds	r25, 0x060A
    377c:	a9 01       	movw	r20, r18
    377e:	47 5f       	subi	r20, 0xF7	; 247
    3780:	5f 4f       	sbci	r21, 0xFF	; 255
    3782:	48 17       	cp	r20, r24
    3784:	59 07       	cpc	r21, r25
    3786:	0c f4       	brge	.+2      	; 0x378a <main+0x1b80>
    3788:	da c0       	rjmp	.+436    	; 0x393e <main+0x1d34>
    378a:	2b 30       	cpi	r18, 0x0B	; 11
    378c:	31 05       	cpc	r19, r1
    378e:	0c f4       	brge	.+2      	; 0x3792 <main+0x1b88>
    3790:	fa c2       	rjmp	.+1524   	; 0x3d86 <main+0x217c>
    3792:	2a 50       	subi	r18, 0x0A	; 10
    3794:	31 09       	sbc	r19, r1
    3796:	28 17       	cp	r18, r24
    3798:	39 07       	cpc	r19, r25
    379a:	0c f0       	brlt	.+2      	; 0x379e <main+0x1b94>
    379c:	d0 c0       	rjmp	.+416    	; 0x393e <main+0x1d34>
			{
				menuChange[MENU_LFO][3] = 1;
    379e:	80 92 76 05 	sts	0x0576, r8
				updateADC[3] = false;
    37a2:	10 92 02 06 	sts	0x0602, r1
			}
						
			if(menuChange[MENU_LFO][3] != 0)
			{
				if(adcValue[3] < 171)
    37a6:	8b 3a       	cpi	r24, 0xAB	; 171
    37a8:	91 05       	cpc	r25, r1
    37aa:	0c f0       	brlt	.+2      	; 0x37ae <main+0x1ba4>
    37ac:	d5 c0       	rjmp	.+426    	; 0x3958 <main+0x1d4e>
				{
					if(lfoWaveForm != WAVE_SINE)
    37ae:	80 91 04 01 	lds	r24, 0x0104
    37b2:	81 11       	cpse	r24, r1
    37b4:	ad c3       	rjmp	.+1882   	; 0x3f10 <main+0x2306>
						menuKnobPos[MENU_LFO][3] = 852 + 85;
						lfoMenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_LFO][2] != 0)
    37b6:	80 91 75 05 	lds	r24, 0x0575
    37ba:	88 23       	and	r24, r24
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <main+0x1bb6>
    37be:	40 c0       	rjmp	.+128    	; 0x3840 <main+0x1c36>
			{
				if((adcValue[2] >> 2) != lfoPrintFreq)
    37c0:	20 91 07 06 	lds	r18, 0x0607
    37c4:	30 91 08 06 	lds	r19, 0x0608
    37c8:	c9 01       	movw	r24, r18
    37ca:	95 95       	asr	r25
    37cc:	87 95       	ror	r24
    37ce:	95 95       	asr	r25
    37d0:	87 95       	ror	r24
    37d2:	40 91 b5 05 	lds	r20, 0x05B5
    37d6:	50 e0       	ldi	r21, 0x00	; 0
    37d8:	84 17       	cp	r24, r20
    37da:	95 07       	cpc	r25, r21
    37dc:	89 f1       	breq	.+98     	; 0x3840 <main+0x1c36>
				{
					lfoPrintFreq = adcValue[2] >> 2;
    37de:	80 93 b5 05 	sts	0x05B5, r24
					menuKnobPos[MENU_LFO][2] = adcValue[2];
    37e2:	30 93 98 05 	sts	0x0598, r19
    37e6:	20 93 97 05 	sts	0x0597, r18

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    37ea:	27 e0       	ldi	r18, 0x07	; 7
    37ec:	e4 e6       	ldi	r30, 0x64	; 100
    37ee:	f1 e0       	ldi	r31, 0x01	; 1
    37f0:	d5 01       	movw	r26, r10
    37f2:	01 90       	ld	r0, Z+
    37f4:	0d 92       	st	X+, r0
    37f6:	2a 95       	dec	r18
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <main+0x1be8>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    37fa:	99 27       	eor	r25, r25
    37fc:	9f 93       	push	r25
    37fe:	8f 93       	push	r24
    3800:	a6 e0       	ldi	r26, 0x06	; 6
    3802:	b1 e0       	ldi	r27, 0x01	; 1
    3804:	bf 93       	push	r27
    3806:	af 93       	push	r26
    3808:	39 ad       	ldd	r19, Y+57	; 0x39
    380a:	3f 93       	push	r19
    380c:	88 ad       	ldd	r24, Y+56	; 0x38
    380e:	8f 93       	push	r24
    3810:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    3814:	d5 01       	movw	r26, r10
    3816:	0d 90       	ld	r0, X+
    3818:	00 20       	and	r0, r0
    381a:	e9 f7       	brne	.-6      	; 0x3816 <main+0x1c0c>
    381c:	11 97       	sbiw	r26, 0x01	; 1
    381e:	85 e0       	ldi	r24, 0x05	; 5
    3820:	ef e3       	ldi	r30, 0x3F	; 63
    3822:	f1 e0       	ldi	r31, 0x01	; 1
    3824:	01 90       	ld	r0, Z+
    3826:	0d 92       	st	X+, r0
    3828:	8a 95       	dec	r24
    382a:	e1 f7       	brne	.-8      	; 0x3824 <main+0x1c1a>
	writeLine(3, buf);
    382c:	b5 01       	movw	r22, r10
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
					lfoPrintFreq = adcValue[2] >> 2;
					menuKnobPos[MENU_LFO][2] = adcValue[2];
					lfoMenuFrequencyUpdate();
				}
			}
			if(menuChange[MENU_LFO][1] != 0)
    3840:	80 91 74 05 	lds	r24, 0x0574
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <main+0x1c40>
    3848:	40 c0       	rjmp	.+128    	; 0x38ca <main+0x1cc0>
			{
				if((adcValue[1] >> 2) != lfoDepth)
    384a:	20 91 05 06 	lds	r18, 0x0605
    384e:	30 91 06 06 	lds	r19, 0x0606
    3852:	c9 01       	movw	r24, r18
    3854:	95 95       	asr	r25
    3856:	87 95       	ror	r24
    3858:	95 95       	asr	r25
    385a:	87 95       	ror	r24
    385c:	40 91 b4 05 	lds	r20, 0x05B4
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	84 17       	cp	r24, r20
    3864:	95 07       	cpc	r25, r21
    3866:	89 f1       	breq	.+98     	; 0x38ca <main+0x1cc0>
				{
					lfoDepth = adcValue[1] >> 2;
    3868:	80 93 b4 05 	sts	0x05B4, r24
					menuKnobPos[MENU_LFO][1] = adcValue[1];
    386c:	30 93 96 05 	sts	0x0596, r19
    3870:	20 93 95 05 	sts	0x0595, r18

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    3874:	27 e0       	ldi	r18, 0x07	; 7
    3876:	eb e6       	ldi	r30, 0x6B	; 107
    3878:	f1 e0       	ldi	r31, 0x01	; 1
    387a:	d5 01       	movw	r26, r10
    387c:	01 90       	ld	r0, Z+
    387e:	0d 92       	st	X+, r0
    3880:	2a 95       	dec	r18
    3882:	e1 f7       	brne	.-8      	; 0x387c <main+0x1c72>
	sprintf(buf + 6, "%d", lfoDepth);
    3884:	99 27       	eor	r25, r25
    3886:	9f 93       	push	r25
    3888:	8f 93       	push	r24
    388a:	a6 e0       	ldi	r26, 0x06	; 6
    388c:	b1 e0       	ldi	r27, 0x01	; 1
    388e:	bf 93       	push	r27
    3890:	af 93       	push	r26
    3892:	39 ad       	ldd	r19, Y+57	; 0x39
    3894:	3f 93       	push	r19
    3896:	88 ad       	ldd	r24, Y+56	; 0x38
    3898:	8f 93       	push	r24
    389a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "    ");
    389e:	d5 01       	movw	r26, r10
    38a0:	0d 90       	ld	r0, X+
    38a2:	00 20       	and	r0, r0
    38a4:	e9 f7       	brne	.-6      	; 0x38a0 <main+0x1c96>
    38a6:	11 97       	sbiw	r26, 0x01	; 1
    38a8:	85 e0       	ldi	r24, 0x05	; 5
    38aa:	ef e3       	ldi	r30, 0x3F	; 63
    38ac:	f1 e0       	ldi	r31, 0x01	; 1
    38ae:	01 90       	ld	r0, Z+
    38b0:	0d 92       	st	X+, r0
    38b2:	8a 95       	dec	r24
    38b4:	e1 f7       	brne	.-8      	; 0x38ae <main+0x1ca4>
	writeLine(4, buf);
    38b6:	b5 01       	movw	r22, r10
    38b8:	84 e0       	ldi	r24, 0x04	; 4
    38ba:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
					lfoDepth = adcValue[1] >> 2;
					menuKnobPos[MENU_LFO][1] = adcValue[1];
					lfoMenuDepthUpdate();
				}
			}
			if(menuChange[MENU_LFO][0] != 0)
    38ca:	80 91 73 05 	lds	r24, 0x0573
    38ce:	88 23       	and	r24, r24
    38d0:	11 f4       	brne	.+4      	; 0x38d6 <main+0x1ccc>
    38d2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
			{
				if(adcValue[0] < 93)
    38d6:	80 91 03 06 	lds	r24, 0x0603
    38da:	90 91 04 06 	lds	r25, 0x0604
    38de:	8d 35       	cpi	r24, 0x5D	; 93
    38e0:	91 05       	cpc	r25, r1
    38e2:	0c f0       	brlt	.+2      	; 0x38e6 <main+0x1cdc>
    38e4:	3d c1       	rjmp	.+634    	; 0x3b60 <main+0x1f56>
				{
					if(lfoRoute != ROUTE_OSC1)
    38e6:	80 91 b6 05 	lds	r24, 0x05B6
    38ea:	88 23       	and	r24, r24
    38ec:	11 f4       	brne	.+4      	; 0x38f2 <main+0x1ce8>
    38ee:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_OSC1;
    38f2:	10 92 b6 05 	sts	0x05B6, r1

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    38f6:	87 e0       	ldi	r24, 0x07	; 7
    38f8:	e4 e3       	ldi	r30, 0x34	; 52
    38fa:	f1 e0       	ldi	r31, 0x01	; 1
    38fc:	d5 01       	movw	r26, r10
    38fe:	01 90       	ld	r0, Z+
    3900:	0d 92       	st	X+, r0
    3902:	8a 95       	dec	r24
    3904:	e1 f7       	brne	.-8      	; 0x38fe <main+0x1cf4>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3906:	e8 e6       	ldi	r30, 0x68	; 104
    3908:	f6 e0       	ldi	r31, 0x06	; 6
    390a:	65 91       	lpm	r22, Z+
    390c:	74 91       	lpm	r23, Z
    390e:	51 01       	movw	r10, r2
    3910:	81 2f       	mov	r24, r17
    3912:	99 2d       	mov	r25, r9
    3914:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "    ");
    3918:	d1 01       	movw	r26, r2
    391a:	0d 90       	ld	r0, X+
    391c:	00 20       	and	r0, r0
    391e:	e9 f7       	brne	.-6      	; 0x391a <main+0x1d10>
    3920:	11 97       	sbiw	r26, 0x01	; 1
    3922:	85 e0       	ldi	r24, 0x05	; 5
    3924:	ef e3       	ldi	r30, 0x3F	; 63
    3926:	f1 e0       	ldi	r31, 0x01	; 1
    3928:	01 90       	ld	r0, Z+
    392a:	0d 92       	st	X+, r0
    392c:	8a 95       	dec	r24
    392e:	e1 f7       	brne	.-8      	; 0x3928 <main+0x1d1e>
	writeLine(5, buf);
    3930:	61 2f       	mov	r22, r17
    3932:	79 2d       	mov	r23, r9
    3934:	85 e0       	ldi	r24, 0x05	; 5
    3936:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    393a:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
			{
				menuChange[MENU_LFO][3] = 1;
				updateADC[3] = false;
			}
						
			if(menuChange[MENU_LFO][3] != 0)
    393e:	80 91 76 05 	lds	r24, 0x0576
    3942:	88 23       	and	r24, r24
    3944:	09 f4       	brne	.+2      	; 0x3948 <main+0x1d3e>
    3946:	37 cf       	rjmp	.-402    	; 0x37b6 <main+0x1bac>
    3948:	80 91 09 06 	lds	r24, 0x0609
    394c:	90 91 0a 06 	lds	r25, 0x060A
			{
				if(adcValue[3] < 171)
    3950:	8b 3a       	cpi	r24, 0xAB	; 171
    3952:	91 05       	cpc	r25, r1
    3954:	0c f4       	brge	.+2      	; 0x3958 <main+0x1d4e>
    3956:	2b cf       	rjmp	.-426    	; 0x37ae <main+0x1ba4>
						lfoWaveForm = WAVE_SINE;
						menuKnobPos[MENU_LFO][3] = 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 341)
    3958:	85 35       	cpi	r24, 0x55	; 85
    395a:	a1 e0       	ldi	r26, 0x01	; 1
    395c:	9a 07       	cpc	r25, r26
    395e:	0c f0       	brlt	.+2      	; 0x3962 <main+0x1d58>
    3960:	1b c2       	rjmp	.+1078   	; 0x3d98 <main+0x218e>
				{
					if(lfoWaveForm != WAVE_TRI)
    3962:	80 91 04 01 	lds	r24, 0x0104
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	09 f4       	brne	.+2      	; 0x396c <main+0x1d62>
    396a:	25 cf       	rjmp	.-438    	; 0x37b6 <main+0x1bac>
					{
						lfoWaveForm = WAVE_TRI;
    396c:	80 92 04 01 	sts	0x0104, r8
						menuKnobPos[MENU_LFO][3] = 171 + 85;
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	91 e0       	ldi	r25, 0x01	; 1
    3974:	90 93 9a 05 	sts	0x059A, r25
    3978:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    397c:	87 e0       	ldi	r24, 0x07	; 7
    397e:	e6 e1       	ldi	r30, 0x16	; 22
    3980:	f1 e0       	ldi	r31, 0x01	; 1
    3982:	d5 01       	movw	r26, r10
    3984:	01 90       	ld	r0, Z+
    3986:	0d 92       	st	X+, r0
    3988:	8a 95       	dec	r24
    398a:	e1 f7       	brne	.-8      	; 0x3984 <main+0x1d7a>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    398c:	e2 e8       	ldi	r30, 0x82	; 130
    398e:	f6 e0       	ldi	r31, 0x06	; 6
    3990:	65 91       	lpm	r22, Z+
    3992:	74 91       	lpm	r23, Z
    3994:	51 01       	movw	r10, r2
    3996:	81 2f       	mov	r24, r17
    3998:	99 2d       	mov	r25, r9
    399a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "    ");
    399e:	d1 01       	movw	r26, r2
    39a0:	0d 90       	ld	r0, X+
    39a2:	00 20       	and	r0, r0
    39a4:	e9 f7       	brne	.-6      	; 0x39a0 <main+0x1d96>
    39a6:	11 97       	sbiw	r26, 0x01	; 1
    39a8:	85 e0       	ldi	r24, 0x05	; 5
    39aa:	ef e3       	ldi	r30, 0x3F	; 63
    39ac:	f1 e0       	ldi	r31, 0x01	; 1
    39ae:	01 90       	ld	r0, Z+
    39b0:	0d 92       	st	X+, r0
    39b2:	8a 95       	dec	r24
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <main+0x1da4>
	writeLine(2, buf);
    39b6:	61 2f       	mov	r22, r17
    39b8:	79 2d       	mov	r23, r9
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    39c0:	fa ce       	rjmp	.-524    	; 0x37b6 <main+0x1bac>
			{
				menuChange[MENU_OSC2][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
    39c2:	80 91 72 05 	lds	r24, 0x0572
    39c6:	88 23       	and	r24, r24
    39c8:	09 f4       	brne	.+2      	; 0x39cc <main+0x1dc2>
    39ca:	64 c8       	rjmp	.-3896   	; 0x2a94 <main+0xe8a>
    39cc:	80 91 09 06 	lds	r24, 0x0609
    39d0:	90 91 0a 06 	lds	r25, 0x060A
			{
				if(adcValue[3] < 146)
    39d4:	82 39       	cpi	r24, 0x92	; 146
    39d6:	91 05       	cpc	r25, r1
    39d8:	0c f4       	brge	.+2      	; 0x39dc <main+0x1dd2>
    39da:	57 c8       	rjmp	.-3922   	; 0x2a8a <main+0xe80>
						osc2WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC2][3] = 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    39dc:	84 32       	cpi	r24, 0x24	; 36
    39de:	a1 e0       	ldi	r26, 0x01	; 1
    39e0:	9a 07       	cpc	r25, r26
    39e2:	0c f0       	brlt	.+2      	; 0x39e6 <main+0x1ddc>
    39e4:	1c c2       	rjmp	.+1080   	; 0x3e1e <main+0x2214>
				{
					if(osc2WaveForm != WAVE_TRI)
    39e6:	80 91 02 01 	lds	r24, 0x0102
    39ea:	81 30       	cpi	r24, 0x01	; 1
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <main+0x1de6>
    39ee:	52 c8       	rjmp	.-3932   	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_TRI;
    39f0:	80 92 02 01 	sts	0x0102, r8
						menuKnobPos[MENU_OSC2][3] = 219;
    39f4:	8b ed       	ldi	r24, 0xDB	; 219
    39f6:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc2WaveForm != WAVE_FLAT)
					{
						osc2WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    39f8:	90 93 92 05 	sts	0x0592, r25
    39fc:	80 93 91 05 	sts	0x0591, r24

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3a00:	87 e0       	ldi	r24, 0x07	; 7
    3a02:	e6 e1       	ldi	r30, 0x16	; 22
    3a04:	f1 e0       	ldi	r31, 0x01	; 1
    3a06:	d5 01       	movw	r26, r10
    3a08:	01 90       	ld	r0, Z+
    3a0a:	0d 92       	st	X+, r0
    3a0c:	8a 95       	dec	r24
    3a0e:	e1 f7       	brne	.-8      	; 0x3a08 <main+0x1dfe>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    3a10:	80 91 02 01 	lds	r24, 0x0102
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	80 58       	subi	r24, 0x80	; 128
    3a1c:	99 4f       	sbci	r25, 0xF9	; 249
    3a1e:	fc 01       	movw	r30, r24
    3a20:	65 91       	lpm	r22, Z+
    3a22:	74 91       	lpm	r23, Z
    3a24:	51 01       	movw	r10, r2
    3a26:	81 2f       	mov	r24, r17
    3a28:	99 2d       	mov	r25, r9
    3a2a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "       ");
    3a2e:	d1 01       	movw	r26, r2
    3a30:	0d 90       	ld	r0, X+
    3a32:	00 20       	and	r0, r0
    3a34:	e9 f7       	brne	.-6      	; 0x3a30 <main+0x1e26>
    3a36:	11 97       	sbiw	r26, 0x01	; 1
    3a38:	88 e0       	ldi	r24, 0x08	; 8
    3a3a:	ec e3       	ldi	r30, 0x3C	; 60
    3a3c:	f1 e0       	ldi	r31, 0x01	; 1
    3a3e:	01 90       	ld	r0, Z+
    3a40:	0d 92       	st	X+, r0
    3a42:	8a 95       	dec	r24
    3a44:	e1 f7       	brne	.-8      	; 0x3a3e <main+0x1e34>
	writeLine(2, buf);	
    3a46:	61 2f       	mov	r22, r17
    3a48:	79 2d       	mov	r23, r9
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3a50:	21 c8       	rjmp	.-4030   	; 0x2a94 <main+0xe8a>
			{
				menuChange[MENU_OSC1][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
    3a52:	80 91 6e 05 	lds	r24, 0x056E
    3a56:	88 23       	and	r24, r24
    3a58:	09 f4       	brne	.+2      	; 0x3a5c <main+0x1e52>
    3a5a:	86 ca       	rjmp	.-2804   	; 0x2f68 <main+0x135e>
    3a5c:	80 91 09 06 	lds	r24, 0x0609
    3a60:	90 91 0a 06 	lds	r25, 0x060A
			{
				if(adcValue[3] < 146)
    3a64:	82 39       	cpi	r24, 0x92	; 146
    3a66:	91 05       	cpc	r25, r1
    3a68:	0c f4       	brge	.+2      	; 0x3a6c <main+0x1e62>
    3a6a:	7a ca       	rjmp	.-2828   	; 0x2f60 <main+0x1356>
						osc1WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC1][3] = 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    3a6c:	84 32       	cpi	r24, 0x24	; 36
    3a6e:	a1 e0       	ldi	r26, 0x01	; 1
    3a70:	9a 07       	cpc	r25, r26
    3a72:	0c f0       	brlt	.+2      	; 0x3a76 <main+0x1e6c>
    3a74:	00 c2       	rjmp	.+1024   	; 0x3e76 <main+0x226c>
				{
					if(osc1WaveForm != WAVE_TRI)
    3a76:	80 91 03 01 	lds	r24, 0x0103
    3a7a:	81 30       	cpi	r24, 0x01	; 1
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <main+0x1e76>
    3a7e:	74 ca       	rjmp	.-2840   	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_TRI;
    3a80:	80 92 03 01 	sts	0x0103, r8
						menuKnobPos[MENU_OSC1][3] = 219;
    3a84:	8b ed       	ldi	r24, 0xDB	; 219
    3a86:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc1WaveForm != WAVE_FLAT)
					{
						osc1WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    3a88:	90 93 8a 05 	sts	0x058A, r25
    3a8c:	80 93 89 05 	sts	0x0589, r24

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3a90:	87 e0       	ldi	r24, 0x07	; 7
    3a92:	e6 e1       	ldi	r30, 0x16	; 22
    3a94:	f1 e0       	ldi	r31, 0x01	; 1
    3a96:	d5 01       	movw	r26, r10
    3a98:	01 90       	ld	r0, Z+
    3a9a:	0d 92       	st	X+, r0
    3a9c:	8a 95       	dec	r24
    3a9e:	e1 f7       	brne	.-8      	; 0x3a98 <main+0x1e8e>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3aa0:	80 91 03 01 	lds	r24, 0x0103
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	80 58       	subi	r24, 0x80	; 128
    3aac:	99 4f       	sbci	r25, 0xF9	; 249
    3aae:	fc 01       	movw	r30, r24
    3ab0:	65 91       	lpm	r22, Z+
    3ab2:	74 91       	lpm	r23, Z
    3ab4:	51 01       	movw	r10, r2
    3ab6:	81 2f       	mov	r24, r17
    3ab8:	99 2d       	mov	r25, r9
    3aba:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "       ");
    3abe:	d1 01       	movw	r26, r2
    3ac0:	0d 90       	ld	r0, X+
    3ac2:	00 20       	and	r0, r0
    3ac4:	e9 f7       	brne	.-6      	; 0x3ac0 <main+0x1eb6>
    3ac6:	11 97       	sbiw	r26, 0x01	; 1
    3ac8:	88 e0       	ldi	r24, 0x08	; 8
    3aca:	ec e3       	ldi	r30, 0x3C	; 60
    3acc:	f1 e0       	ldi	r31, 0x01	; 1
    3ace:	01 90       	ld	r0, Z+
    3ad0:	0d 92       	st	X+, r0
    3ad2:	8a 95       	dec	r24
    3ad4:	e1 f7       	brne	.-8      	; 0x3ace <main+0x1ec4>
	writeLine(2, buf);	
    3ad6:	61 2f       	mov	r22, r17
    3ad8:	79 2d       	mov	r23, r9
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3ae0:	43 ca       	rjmp	.-2938   	; 0x2f68 <main+0x135e>
			{
				menuChange[MENU_MIX][3] = 1;
				updateADC[3] = false;
			}

			if(menuChange[MENU_MIX][3] != 0)
    3ae2:	80 91 7a 05 	lds	r24, 0x057A
    3ae6:	88 23       	and	r24, r24
    3ae8:	11 f4       	brne	.+4      	; 0x3aee <main+0x1ee4>
    3aea:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <main+0xbb0>
    3aee:	80 91 09 06 	lds	r24, 0x0609
    3af2:	90 91 0a 06 	lds	r25, 0x060A
    3af6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <main+0xae4>
		{
			if(btnPressed[MENU_OSC2])
			btnPressed[MENU_OSC2] = false;
					
			if(!btnCanPress[MENU_OSC2])
			btnLastPressed[MENU_OSC2]++;
    3afa:	90 91 f4 04 	lds	r25, 0x04F4
    3afe:	9f 5f       	subi	r25, 0xFF	; 255
    3b00:	90 93 f4 04 	sts	0x04F4, r25
    3b04:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <main+0xd36>
				if(adcValue[0] > 512 && ringMod != true)
				{
					ringMod = true;
					mixerMenuRingModUpdate();
				}
				else if(adcValue[0] < 512 && ringMod != false)
    3b08:	81 15       	cp	r24, r1
    3b0a:	92 40       	sbci	r25, 0x02	; 2
    3b0c:	11 f4       	brne	.+4      	; 0x3b12 <main+0x1f08>
    3b0e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
    3b12:	80 91 bf 05 	lds	r24, 0x05BF
    3b16:	88 23       	and	r24, r24
    3b18:	11 f4       	brne	.+4      	; 0x3b1e <main+0x1f14>
    3b1a:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
				{
					ringMod = false;
    3b1e:	10 92 bf 05 	sts	0x05BF, r1

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    3b22:	87 e0       	ldi	r24, 0x07	; 7
    3b24:	ec e9       	ldi	r30, 0x9C	; 156
    3b26:	f1 e0       	ldi	r31, 0x01	; 1
    3b28:	d5 01       	movw	r26, r10
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	0d 92       	st	X+, r0
    3b2e:	8a 95       	dec	r24
    3b30:	e1 f7       	brne	.-8      	; 0x3b2a <main+0x1f20>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3b32:	8f e4       	ldi	r24, 0x4F	; 79
    3b34:	96 e4       	ldi	r25, 0x46	; 70
    3b36:	a6 e4       	ldi	r26, 0x46	; 70
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	8f 83       	std	Y+7, r24	; 0x07
    3b3c:	98 87       	std	Y+8, r25	; 0x08
    3b3e:	a9 87       	std	Y+9, r26	; 0x09
    3b40:	ba 87       	std	Y+10, r27	; 0x0a
    3b42:	0c 94 39 14 	jmp	0x2872	; 0x2872 <main+0xc68>
					{
						osc1NoteSync = false;
						osc1MenuSyncUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    3b46:	8f 3f       	cpi	r24, 0xFF	; 255
    3b48:	93 40       	sbci	r25, 0x03	; 3
    3b4a:	14 f0       	brlt	.+4      	; 0x3b50 <main+0x1f46>
    3b4c:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
				{
					if(osc1NoteSync != true)
    3b50:	80 91 dd 05 	lds	r24, 0x05DD
    3b54:	81 11       	cpse	r24, r1
    3b56:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc1NoteSync = true;
    3b5a:	80 92 dd 05 	sts	0x05DD, r8
    3b5e:	5c cd       	rjmp	.-1352   	; 0x3618 <main+0x1a0e>
					{
						lfoRoute = ROUTE_OSC1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 186)
    3b60:	8a 3b       	cpi	r24, 0xBA	; 186
    3b62:	91 05       	cpc	r25, r1
    3b64:	0c f0       	brlt	.+2      	; 0x3b68 <main+0x1f5e>
    3b66:	36 c1       	rjmp	.+620    	; 0x3dd4 <main+0x21ca>
				{
					if(lfoRoute != ROUTE_OSC2)
    3b68:	80 91 b6 05 	lds	r24, 0x05B6
    3b6c:	81 30       	cpi	r24, 0x01	; 1
    3b6e:	11 f4       	brne	.+4      	; 0x3b74 <main+0x1f6a>
    3b70:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_OSC2;
    3b74:	80 92 b6 05 	sts	0x05B6, r8

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3b78:	87 e0       	ldi	r24, 0x07	; 7
    3b7a:	e4 e3       	ldi	r30, 0x34	; 52
    3b7c:	f1 e0       	ldi	r31, 0x01	; 1
    3b7e:	d5 01       	movw	r26, r10
    3b80:	01 90       	ld	r0, Z+
    3b82:	0d 92       	st	X+, r0
    3b84:	8a 95       	dec	r24
    3b86:	e1 f7       	brne	.-8      	; 0x3b80 <main+0x1f76>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3b88:	ea e6       	ldi	r30, 0x6A	; 106
    3b8a:	f6 e0       	ldi	r31, 0x06	; 6
    3b8c:	be ce       	rjmp	.-644    	; 0x390a <main+0x1d00>
						osc2OctaveShift = -2;
						menuKnobPos[MENU_OSC2][0] = 102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 410)
    3b8e:	8a 39       	cpi	r24, 0x9A	; 154
    3b90:	a1 e0       	ldi	r26, 0x01	; 1
    3b92:	9a 07       	cpc	r25, r26
    3b94:	0c f0       	brlt	.+2      	; 0x3b98 <main+0x1f8e>
    3b96:	83 c1       	rjmp	.+774    	; 0x3e9e <main+0x2294>
				{
					if(osc2OctaveShift != -1)
    3b98:	80 91 cc 05 	lds	r24, 0x05CC
    3b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9e:	11 f4       	brne	.+4      	; 0x3ba4 <main+0x1f9a>
    3ba0:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc2OctaveShift = -1;
    3ba4:	2f ef       	ldi	r18, 0xFF	; 255
    3ba6:	20 93 cc 05 	sts	0x05CC, r18
						menuKnobPos[MENU_OSC2][0] = 205+102;
    3baa:	83 e3       	ldi	r24, 0x33	; 51
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	90 93 8c 05 	sts	0x058C, r25
    3bb2:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3bb6:	86 e0       	ldi	r24, 0x06	; 6
    3bb8:	e1 e5       	ldi	r30, 0x51	; 81
    3bba:	f1 e0       	ldi	r31, 0x01	; 1
    3bbc:	d5 01       	movw	r26, r10
    3bbe:	01 90       	ld	r0, Z+
    3bc0:	0d 92       	st	X+, r0
    3bc2:	8a 95       	dec	r24
    3bc4:	e1 f7       	brne	.-8      	; 0x3bbe <main+0x1fb4>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3bc6:	2f 93       	push	r18
    3bc8:	16 c9       	rjmp	.-3540   	; 0x2df6 <main+0x11ec>
				if(adcValue[1] > 512 && osc2Sync != true)
				{
					osc2Sync = true;
					mixerMenuOsc2SyncUpdate();
				}
				else if(adcValue[1] < 512 && osc2Sync != false)
    3bca:	81 15       	cp	r24, r1
    3bcc:	92 40       	sbci	r25, 0x02	; 2
    3bce:	14 f0       	brlt	.+4      	; 0x3bd4 <main+0x1fca>
    3bd0:	0c 94 16 14 	jmp	0x282c	; 0x282c <main+0xc22>
    3bd4:	80 91 c3 05 	lds	r24, 0x05C3
    3bd8:	88 23       	and	r24, r24
    3bda:	11 f4       	brne	.+4      	; 0x3be0 <main+0x1fd6>
    3bdc:	0c 94 16 14 	jmp	0x282c	; 0x282c <main+0xc22>
				{
					osc2Sync = false;
    3be0:	10 92 c3 05 	sts	0x05C3, r1
    3be4:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <main+0xbd8>
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
			{		
				btnLastPressed[MENU_OSC1] = 0;
    3be8:	10 92 f3 04 	sts	0x04F3, r1
				
				menuSelect = MENU_OSC1;
    3bec:	10 92 b3 05 	sts	0x05B3, r1

				menuChange[menuSelect][0] = 0;
    3bf0:	10 92 6b 05 	sts	0x056B, r1
				menuChange[menuSelect][1] = 0;
    3bf4:	10 92 6c 05 	sts	0x056C, r1
				menuChange[menuSelect][2] = 0;
    3bf8:	10 92 6d 05 	sts	0x056D, r1
				menuChange[menuSelect][3] = 0;
    3bfc:	10 92 6e 05 	sts	0x056E, r1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    3c00:	e9 e0       	ldi	r30, 0x09	; 9
    3c02:	f1 e0       	ldi	r31, 0x01	; 1
    3c04:	61 96       	adiw	r28, 0x11	; 17
    3c06:	af ad       	ldd	r26, Y+63	; 0x3f
    3c08:	61 97       	sbiw	r28, 0x11	; 17
    3c0a:	62 96       	adiw	r28, 0x12	; 18
    3c0c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3c0e:	62 97       	sbiw	r28, 0x12	; 18
    3c10:	8d 2d       	mov	r24, r13
    3c12:	01 90       	ld	r0, Z+
    3c14:	0d 92       	st	X+, r0
    3c16:	8a 95       	dec	r24
    3c18:	e1 f7       	brne	.-8      	; 0x3c12 <main+0x2008>
	writeLine(0, buf);
    3c1a:	be 01       	movw	r22, r28
    3c1c:	6b 5e       	subi	r22, 0xEB	; 235
    3c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3c26:	e6 e1       	ldi	r30, 0x16	; 22
    3c28:	f1 e0       	ldi	r31, 0x01	; 1
    3c2a:	d5 01       	movw	r26, r10
    3c2c:	8e 2d       	mov	r24, r14
    3c2e:	01 90       	ld	r0, Z+
    3c30:	0d 92       	st	X+, r0
    3c32:	8a 95       	dec	r24
    3c34:	e1 f7       	brne	.-8      	; 0x3c2e <main+0x2024>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3c36:	80 91 03 01 	lds	r24, 0x0103
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	80 58       	subi	r24, 0x80	; 128
    3c42:	99 4f       	sbci	r25, 0xF9	; 249
    3c44:	fc 01       	movw	r30, r24
    3c46:	65 91       	lpm	r22, Z+
    3c48:	74 91       	lpm	r23, Z
    3c4a:	a1 2e       	mov	r10, r17
    3c4c:	b9 2c       	mov	r11, r9
    3c4e:	81 2f       	mov	r24, r17
    3c50:	99 2d       	mov	r25, r9
    3c52:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <strcat_P>
	strcat(buf, "       ");
    3c56:	d1 01       	movw	r26, r2
    3c58:	0d 90       	ld	r0, X+
    3c5a:	00 20       	and	r0, r0
    3c5c:	e9 f7       	brne	.-6      	; 0x3c58 <main+0x204e>
    3c5e:	11 97       	sbiw	r26, 0x01	; 1
    3c60:	ec e3       	ldi	r30, 0x3C	; 60
    3c62:	f1 e0       	ldi	r31, 0x01	; 1
    3c64:	80 2f       	mov	r24, r16
    3c66:	01 90       	ld	r0, Z+
    3c68:	0d 92       	st	X+, r0
    3c6a:	8a 95       	dec	r24
    3c6c:	e1 f7       	brne	.-8      	; 0x3c66 <main+0x205c>
	writeLine(2, buf);	
    3c6e:	61 2f       	mov	r22, r17
    3c70:	79 2d       	mov	r23, r9
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    3c78:	ed e1       	ldi	r30, 0x1D	; 29
    3c7a:	f1 e0       	ldi	r31, 0x01	; 1
    3c7c:	a1 2f       	mov	r26, r17
    3c7e:	b9 2d       	mov	r27, r9
    3c80:	80 2f       	mov	r24, r16
    3c82:	01 90       	ld	r0, Z+
    3c84:	0d 92       	st	X+, r0
    3c86:	8a 95       	dec	r24
    3c88:	e1 f7       	brne	.-8      	; 0x3c82 <main+0x2078>
	sprintf(buf + 7, "%d", osc1CentsShift);
    3c8a:	20 91 e6 05 	lds	r18, 0x05E6
    3c8e:	82 2f       	mov	r24, r18
    3c90:	99 27       	eor	r25, r25
    3c92:	87 fd       	sbrc	r24, 7
    3c94:	90 95       	com	r25
    3c96:	9f 93       	push	r25
    3c98:	2f 93       	push	r18
    3c9a:	a6 e0       	ldi	r26, 0x06	; 6
    3c9c:	b1 e0       	ldi	r27, 0x01	; 1
    3c9e:	bf 93       	push	r27
    3ca0:	af 93       	push	r26
    3ca2:	3b ad       	ldd	r19, Y+59	; 0x3b
    3ca4:	3f 93       	push	r19
    3ca6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ca8:	8f 93       	push	r24
    3caa:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    3cae:	d1 01       	movw	r26, r2
    3cb0:	0d 90       	ld	r0, X+
    3cb2:	00 20       	and	r0, r0
    3cb4:	e9 f7       	brne	.-6      	; 0x3cb0 <main+0x20a6>
    3cb6:	11 97       	sbiw	r26, 0x01	; 1
    3cb8:	ec e3       	ldi	r30, 0x3C	; 60
    3cba:	f1 e0       	ldi	r31, 0x01	; 1
    3cbc:	80 2f       	mov	r24, r16
    3cbe:	01 90       	ld	r0, Z+
    3cc0:	0d 92       	st	X+, r0
    3cc2:	8a 95       	dec	r24
    3cc4:	e1 f7       	brne	.-8      	; 0x3cbe <main+0x20b4>
	writeLine(4, buf);
    3cc6:	61 2f       	mov	r22, r17
    3cc8:	79 2d       	mov	r23, r9
    3cca:	84 e0       	ldi	r24, 0x04	; 4
    3ccc:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    3cd0:	e5 e2       	ldi	r30, 0x25	; 37
    3cd2:	f1 e0       	ldi	r31, 0x01	; 1
    3cd4:	a1 2f       	mov	r26, r17
    3cd6:	b9 2d       	mov	r27, r9
    3cd8:	80 2f       	mov	r24, r16
    3cda:	01 90       	ld	r0, Z+
    3cdc:	0d 92       	st	X+, r0
    3cde:	8a 95       	dec	r24
    3ce0:	e1 f7       	brne	.-8      	; 0x3cda <main+0x20d0>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3ce2:	20 91 e5 05 	lds	r18, 0x05E5
    3ce6:	82 2f       	mov	r24, r18
    3ce8:	99 27       	eor	r25, r25
    3cea:	87 fd       	sbrc	r24, 7
    3cec:	90 95       	com	r25
    3cee:	9f 93       	push	r25
    3cf0:	2f 93       	push	r18
    3cf2:	a6 e0       	ldi	r26, 0x06	; 6
    3cf4:	b1 e0       	ldi	r27, 0x01	; 1
    3cf6:	bf 93       	push	r27
    3cf8:	af 93       	push	r26
    3cfa:	3b ad       	ldd	r19, Y+59	; 0x3b
    3cfc:	3f 93       	push	r19
    3cfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d00:	8f 93       	push	r24
    3d02:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <sprintf>
	strcat(buf, "       ");
    3d06:	d1 01       	movw	r26, r2
    3d08:	0d 90       	ld	r0, X+
    3d0a:	00 20       	and	r0, r0
    3d0c:	e9 f7       	brne	.-6      	; 0x3d08 <main+0x20fe>
    3d0e:	11 97       	sbiw	r26, 0x01	; 1
    3d10:	ec e3       	ldi	r30, 0x3C	; 60
    3d12:	f1 e0       	ldi	r31, 0x01	; 1
    3d14:	80 2f       	mov	r24, r16
    3d16:	01 90       	ld	r0, Z+
    3d18:	0d 92       	st	X+, r0
    3d1a:	8a 95       	dec	r24
    3d1c:	e1 f7       	brne	.-8      	; 0x3d16 <main+0x210c>
	writeLine(3, buf);
    3d1e:	61 2f       	mov	r22, r17
    3d20:	79 2d       	mov	r23, r9
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3d28:	ed e2       	ldi	r30, 0x2D	; 45
    3d2a:	f1 e0       	ldi	r31, 0x01	; 1
    3d2c:	a1 2f       	mov	r26, r17
    3d2e:	b9 2d       	mov	r27, r9
    3d30:	8e 2d       	mov	r24, r14
    3d32:	01 90       	ld	r0, Z+
    3d34:	0d 92       	st	X+, r0
    3d36:	8a 95       	dec	r24
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <main+0x2128>
	if(osc1NoteSync != false)
    3d3a:	80 91 dd 05 	lds	r24, 0x05DD
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	81 11       	cpse	r24, r1
    3d4a:	f5 c0       	rjmp	.+490    	; 0x3f36 <main+0x232c>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3d4c:	8f e4       	ldi	r24, 0x4F	; 79
    3d4e:	96 e4       	ldi	r25, 0x46	; 70
    3d50:	a6 e4       	ldi	r26, 0x46	; 70
    3d52:	b0 e0       	ldi	r27, 0x00	; 0
    3d54:	8f 83       	std	Y+7, r24	; 0x07
    3d56:	98 87       	std	Y+8, r25	; 0x08
    3d58:	a9 87       	std	Y+9, r26	; 0x09
    3d5a:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    3d5c:	d1 01       	movw	r26, r2
    3d5e:	0d 90       	ld	r0, X+
    3d60:	00 20       	and	r0, r0
    3d62:	e9 f7       	brne	.-6      	; 0x3d5e <main+0x2154>
    3d64:	11 97       	sbiw	r26, 0x01	; 1
    3d66:	ec e3       	ldi	r30, 0x3C	; 60
    3d68:	f1 e0       	ldi	r31, 0x01	; 1
    3d6a:	80 2f       	mov	r24, r16
    3d6c:	01 90       	ld	r0, Z+
    3d6e:	0d 92       	st	X+, r0
    3d70:	8a 95       	dec	r24
    3d72:	e1 f7       	brne	.-8      	; 0x3d6c <main+0x2162>
	writeLine(5, buf);
    3d74:	61 2f       	mov	r22, r17
    3d76:	79 2d       	mov	r23, r9
    3d78:	85 e0       	ldi	r24, 0x05	; 5
    3d7a:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3d7e:	80 91 b3 05 	lds	r24, 0x05B3
    3d82:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <main+0x1b0>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
			{
				menuChange[MENU_LFO][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	05 cd       	rjmp	.-1526   	; 0x3796 <main+0x1b8c>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	a5 cc       	rjmp	.-1718   	; 0x36dc <main+0x1ad2>
			{
				menuChange[MENU_LFO][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	c0 cc       	rjmp	.-1664   	; 0x3718 <main+0x1b0e>
						lfoWaveForm = WAVE_TRI;
						menuKnobPos[MENU_LFO][3] = 171 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 511)
    3d98:	8f 3f       	cpi	r24, 0xFF	; 255
    3d9a:	b1 e0       	ldi	r27, 0x01	; 1
    3d9c:	9b 07       	cpc	r25, r27
    3d9e:	0c f0       	brlt	.+2      	; 0x3da2 <main+0x2198>
    3da0:	d1 c0       	rjmp	.+418    	; 0x3f44 <main+0x233a>
				{
					if(lfoWaveForm != WAVE_LSAW)
    3da2:	80 91 04 01 	lds	r24, 0x0104
    3da6:	82 30       	cpi	r24, 0x02	; 2
    3da8:	09 f4       	brne	.+2      	; 0x3dac <main+0x21a2>
    3daa:	05 cd       	rjmp	.-1526   	; 0x37b6 <main+0x1bac>
					{
						lfoWaveForm = WAVE_LSAW;
    3dac:	82 e0       	ldi	r24, 0x02	; 2
    3dae:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 341 + 85;
    3db2:	8a ea       	ldi	r24, 0xAA	; 170
    3db4:	91 e0       	ldi	r25, 0x01	; 1
    3db6:	90 93 9a 05 	sts	0x059A, r25
    3dba:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3dbe:	87 e0       	ldi	r24, 0x07	; 7
    3dc0:	e6 e1       	ldi	r30, 0x16	; 22
    3dc2:	f1 e0       	ldi	r31, 0x01	; 1
    3dc4:	d5 01       	movw	r26, r10
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	0d 92       	st	X+, r0
    3dca:	8a 95       	dec	r24
    3dcc:	e1 f7       	brne	.-8      	; 0x3dc6 <main+0x21bc>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3dce:	e4 e8       	ldi	r30, 0x84	; 132
    3dd0:	f6 e0       	ldi	r31, 0x06	; 6
    3dd2:	de cd       	rjmp	.-1092   	; 0x3990 <main+0x1d86>
					{
						lfoRoute = ROUTE_OSC2;
						lfoMenuRouteUpdate();
					}					
				}
				else if(adcValue[0] < 279)
    3dd4:	87 31       	cpi	r24, 0x17	; 23
    3dd6:	a1 e0       	ldi	r26, 0x01	; 1
    3dd8:	9a 07       	cpc	r25, r26
    3dda:	0c f0       	brlt	.+2      	; 0x3dde <main+0x21d4>
    3ddc:	e2 c0       	rjmp	.+452    	; 0x3fa2 <main+0x2398>
				{
					if(lfoRoute != ROUTE_CENTS1)
    3dde:	80 91 b6 05 	lds	r24, 0x05B6
    3de2:	82 30       	cpi	r24, 0x02	; 2
    3de4:	11 f4       	brne	.+4      	; 0x3dea <main+0x21e0>
    3de6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS1;
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3df0:	87 e0       	ldi	r24, 0x07	; 7
    3df2:	e4 e3       	ldi	r30, 0x34	; 52
    3df4:	f1 e0       	ldi	r31, 0x01	; 1
    3df6:	d5 01       	movw	r26, r10
    3df8:	01 90       	ld	r0, Z+
    3dfa:	0d 92       	st	X+, r0
    3dfc:	8a 95       	dec	r24
    3dfe:	e1 f7       	brne	.-8      	; 0x3df8 <main+0x21ee>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3e00:	ec e6       	ldi	r30, 0x6C	; 108
    3e02:	f6 e0       	ldi	r31, 0x06	; 6
    3e04:	82 cd       	rjmp	.-1276   	; 0x390a <main+0x1d00>
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
			{
				menuChange[MENU_LFO][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a4 cc       	rjmp	.-1720   	; 0x3754 <main+0x1b4a>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	3e c8       	rjmp	.-3972   	; 0x2e8e <main+0x1284>
			{
				menuChange[MENU_OSC1][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	59 c8       	rjmp	.-3918   	; 0x2eca <main+0x12c0>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
			{
				menuChange[MENU_OSC1][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	95 c8       	rjmp	.-3798   	; 0x2f48 <main+0x133e>
						osc2WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC2][3] = 219;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3e1e:	86 3b       	cpi	r24, 0xB6	; 182
    3e20:	b1 e0       	ldi	r27, 0x01	; 1
    3e22:	9b 07       	cpc	r25, r27
    3e24:	0c f0       	brlt	.+2      	; 0x3e28 <main+0x221e>
    3e26:	ac c0       	rjmp	.+344    	; 0x3f80 <main+0x2376>
				{
					if(osc2WaveForm != WAVE_LSAW)
    3e28:	80 91 02 01 	lds	r24, 0x0102
    3e2c:	82 30       	cpi	r24, 0x02	; 2
    3e2e:	11 f4       	brne	.+4      	; 0x3e34 <main+0x222a>
    3e30:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_LSAW;
    3e34:	82 e0       	ldi	r24, 0x02	; 2
    3e36:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 365;
    3e3a:	8d e6       	ldi	r24, 0x6D	; 109
    3e3c:	91 e0       	ldi	r25, 0x01	; 1
    3e3e:	dc cd       	rjmp	.-1096   	; 0x39f8 <main+0x1dee>
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
	if(ringMod != false)
	{
		sprintf(buf + 6, "%s", onString);
    3e40:	8f e4       	ldi	r24, 0x4F	; 79
    3e42:	9e e4       	ldi	r25, 0x4E	; 78
    3e44:	a0 e0       	ldi	r26, 0x00	; 0
    3e46:	8f 83       	std	Y+7, r24	; 0x07
    3e48:	98 87       	std	Y+8, r25	; 0x08
    3e4a:	a9 87       	std	Y+9, r26	; 0x09
    3e4c:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <main+0x9a0>
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
			{
				menuChange[MENU_OSC1][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	58 c8       	rjmp	.-3920   	; 0x2f06 <main+0x12fc>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
			{
				menuChange[MENU_MIX][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <main+0xad2>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
			{
				menuChange[MENU_MIX][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <main+0xa4c>
			{
				menuChange[MENU_MIX][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <main+0xa8a>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <main+0xa0e>
						osc1WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC1][3] = 219;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3e76:	86 3b       	cpi	r24, 0xB6	; 182
    3e78:	b1 e0       	ldi	r27, 0x01	; 1
    3e7a:	9b 07       	cpc	r25, r27
    3e7c:	0c f0       	brlt	.+2      	; 0x3e80 <main+0x2276>
    3e7e:	ca c0       	rjmp	.+404    	; 0x4014 <main+0x240a>
				{
					if(osc1WaveForm != WAVE_LSAW)
    3e80:	80 91 03 01 	lds	r24, 0x0103
    3e84:	82 30       	cpi	r24, 0x02	; 2
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <main+0x2280>
    3e88:	6f c8       	rjmp	.-3874   	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_LSAW;
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 365;
    3e90:	8d e6       	ldi	r24, 0x6D	; 109
    3e92:	91 e0       	ldi	r25, 0x01	; 1
    3e94:	f9 cd       	rjmp	.-1038   	; 0x3a88 <main+0x1e7e>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <main+0xdc2>
						osc2OctaveShift = -1;
						menuKnobPos[MENU_OSC2][0] = 205+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 615)
    3e9e:	87 36       	cpi	r24, 0x67	; 103
    3ea0:	a2 e0       	ldi	r26, 0x02	; 2
    3ea2:	9a 07       	cpc	r25, r26
    3ea4:	0c f0       	brlt	.+2      	; 0x3ea8 <main+0x229e>
    3ea6:	96 c0       	rjmp	.+300    	; 0x3fd4 <main+0x23ca>
				{
					if(osc2OctaveShift != 0)
    3ea8:	80 91 cc 05 	lds	r24, 0x05CC
    3eac:	88 23       	and	r24, r24
    3eae:	11 f4       	brne	.+4      	; 0x3eb4 <main+0x22aa>
    3eb0:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc2OctaveShift = 0;
    3eb4:	10 92 cc 05 	sts	0x05CC, r1
						menuKnobPos[MENU_OSC2][0] = 410+102;
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	92 e0       	ldi	r25, 0x02	; 2
    3ebc:	90 93 8c 05 	sts	0x058C, r25
    3ec0:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3ec4:	86 e0       	ldi	r24, 0x06	; 6
    3ec6:	e1 e5       	ldi	r30, 0x51	; 81
    3ec8:	f1 e0       	ldi	r31, 0x01	; 1
    3eca:	d5 01       	movw	r26, r10
    3ecc:	01 90       	ld	r0, Z+
    3ece:	0d 92       	st	X+, r0
    3ed0:	8a 95       	dec	r24
    3ed2:	e1 f7       	brne	.-8      	; 0x3ecc <main+0x22c2>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3ed4:	1f 92       	push	r1
    3ed6:	1f 92       	push	r1
    3ed8:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <main+0x11ee>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    3edc:	8f e4       	ldi	r24, 0x4F	; 79
    3ede:	9e e4       	ldi	r25, 0x4E	; 78
    3ee0:	a0 e0       	ldi	r26, 0x00	; 0
    3ee2:	89 87       	std	Y+9, r24	; 0x09
    3ee4:	9a 87       	std	Y+10, r25	; 0x0a
    3ee6:	ab 87       	std	Y+11, r26	; 0x0b
    3ee8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <main+0x956>
    3eec:	8f e4       	ldi	r24, 0x4F	; 79
    3eee:	9e e4       	ldi	r25, 0x4E	; 78
    3ef0:	a0 e0       	ldi	r26, 0x00	; 0
    3ef2:	89 87       	std	Y+9, r24	; 0x09
    3ef4:	9a 87       	std	Y+10, r25	; 0x0a
    3ef6:	ab 87       	std	Y+11, r26	; 0x0b
    3ef8:	0c 94 06 14 	jmp	0x280c	; 0x280c <main+0xc02>
			{
				if(adcValue[3] < 146)
				{
					if(osc1WaveForm != WAVE_SINE)
					{
						osc1WaveForm = WAVE_SINE;
    3efc:	10 92 03 01 	sts	0x0103, r1
						menuKnobPos[MENU_OSC1][3] = 73;
    3f00:	89 e4       	ldi	r24, 0x49	; 73
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	c1 cd       	rjmp	.-1150   	; 0x3a88 <main+0x1e7e>
			{
				if(adcValue[3] < 146)
				{
					if(osc2WaveForm != WAVE_SINE)
					{
						osc2WaveForm = WAVE_SINE;
    3f06:	10 92 02 01 	sts	0x0102, r1
						menuKnobPos[MENU_OSC2][3] = 73;
    3f0a:	89 e4       	ldi	r24, 0x49	; 73
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	74 cd       	rjmp	.-1304   	; 0x39f8 <main+0x1dee>
			{
				if(adcValue[3] < 171)
				{
					if(lfoWaveForm != WAVE_SINE)
					{
						lfoWaveForm = WAVE_SINE;
    3f10:	10 92 04 01 	sts	0x0104, r1
						menuKnobPos[MENU_LFO][3] = 85;
    3f14:	85 e5       	ldi	r24, 0x55	; 85
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	90 93 9a 05 	sts	0x059A, r25
    3f1c:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3f20:	87 e0       	ldi	r24, 0x07	; 7
    3f22:	e6 e1       	ldi	r30, 0x16	; 22
    3f24:	f1 e0       	ldi	r31, 0x01	; 1
    3f26:	d5 01       	movw	r26, r10
    3f28:	01 90       	ld	r0, Z+
    3f2a:	0d 92       	st	X+, r0
    3f2c:	8a 95       	dec	r24
    3f2e:	e1 f7       	brne	.-8      	; 0x3f28 <main+0x231e>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3f30:	e0 e8       	ldi	r30, 0x80	; 128
    3f32:	f6 e0       	ldi	r31, 0x06	; 6
    3f34:	2d cd       	rjmp	.-1446   	; 0x3990 <main+0x1d86>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    3f36:	8f e4       	ldi	r24, 0x4F	; 79
    3f38:	9e e4       	ldi	r25, 0x4E	; 78
    3f3a:	a0 e0       	ldi	r26, 0x00	; 0
    3f3c:	8f 83       	std	Y+7, r24	; 0x07
    3f3e:	98 87       	std	Y+8, r25	; 0x08
    3f40:	a9 87       	std	Y+9, r26	; 0x09
    3f42:	0c cf       	rjmp	.-488    	; 0x3d5c <main+0x2152>
						lfoWaveForm = WAVE_LSAW;
						menuKnobPos[MENU_LFO][3] = 341 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 682)
    3f44:	8a 3a       	cpi	r24, 0xAA	; 170
    3f46:	22 e0       	ldi	r18, 0x02	; 2
    3f48:	92 07       	cpc	r25, r18
    3f4a:	0c f0       	brlt	.+2      	; 0x3f4e <main+0x2344>
    3f4c:	8b c0       	rjmp	.+278    	; 0x4064 <main+0x245a>
				{
					if(lfoWaveForm != WAVE_RSAW)
    3f4e:	80 91 04 01 	lds	r24, 0x0104
    3f52:	83 30       	cpi	r24, 0x03	; 3
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <main+0x234e>
    3f56:	2f cc       	rjmp	.-1954   	; 0x37b6 <main+0x1bac>
					{
						lfoWaveForm = WAVE_RSAW;
    3f58:	83 e0       	ldi	r24, 0x03	; 3
    3f5a:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 511 + 85;
    3f5e:	84 e5       	ldi	r24, 0x54	; 84
    3f60:	92 e0       	ldi	r25, 0x02	; 2
    3f62:	90 93 9a 05 	sts	0x059A, r25
    3f66:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3f6a:	87 e0       	ldi	r24, 0x07	; 7
    3f6c:	e6 e1       	ldi	r30, 0x16	; 22
    3f6e:	f1 e0       	ldi	r31, 0x01	; 1
    3f70:	d5 01       	movw	r26, r10
    3f72:	01 90       	ld	r0, Z+
    3f74:	0d 92       	st	X+, r0
    3f76:	8a 95       	dec	r24
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <main+0x2368>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3f7a:	e6 e8       	ldi	r30, 0x86	; 134
    3f7c:	f6 e0       	ldi	r31, 0x06	; 6
    3f7e:	08 cd       	rjmp	.-1520   	; 0x3990 <main+0x1d86>
						osc2WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC2][3] = 365;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    3f80:	88 34       	cpi	r24, 0x48	; 72
    3f82:	22 e0       	ldi	r18, 0x02	; 2
    3f84:	92 07       	cpc	r25, r18
    3f86:	0c f0       	brlt	.+2      	; 0x3f8a <main+0x2380>
    3f88:	8b c0       	rjmp	.+278    	; 0x40a0 <main+0x2496>
				{
					if(osc2WaveForm != WAVE_RSAW)
    3f8a:	80 91 02 01 	lds	r24, 0x0102
    3f8e:	83 30       	cpi	r24, 0x03	; 3
    3f90:	11 f4       	brne	.+4      	; 0x3f96 <main+0x238c>
    3f92:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_RSAW;
    3f96:	83 e0       	ldi	r24, 0x03	; 3
    3f98:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 511;
    3f9c:	8f ef       	ldi	r24, 0xFF	; 255
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	2b cd       	rjmp	.-1450   	; 0x39f8 <main+0x1dee>
					{
						lfoRoute = ROUTE_CENTS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 372)
    3fa2:	84 37       	cpi	r24, 0x74	; 116
    3fa4:	b1 e0       	ldi	r27, 0x01	; 1
    3fa6:	9b 07       	cpc	r25, r27
    3fa8:	0c f0       	brlt	.+2      	; 0x3fac <main+0x23a2>
    3faa:	8b c0       	rjmp	.+278    	; 0x40c2 <main+0x24b8>
				{
					if(lfoRoute != ROUTE_CENTS2)
    3fac:	80 91 b6 05 	lds	r24, 0x05B6
    3fb0:	83 30       	cpi	r24, 0x03	; 3
    3fb2:	11 f4       	brne	.+4      	; 0x3fb8 <main+0x23ae>
    3fb4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS2;
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3fbe:	87 e0       	ldi	r24, 0x07	; 7
    3fc0:	e4 e3       	ldi	r30, 0x34	; 52
    3fc2:	f1 e0       	ldi	r31, 0x01	; 1
    3fc4:	d5 01       	movw	r26, r10
    3fc6:	01 90       	ld	r0, Z+
    3fc8:	0d 92       	st	X+, r0
    3fca:	8a 95       	dec	r24
    3fcc:	e1 f7       	brne	.-8      	; 0x3fc6 <main+0x23bc>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3fce:	ee e6       	ldi	r30, 0x6E	; 110
    3fd0:	f6 e0       	ldi	r31, 0x06	; 6
    3fd2:	9b cc       	rjmp	.-1738   	; 0x390a <main+0x1d00>
						osc2OctaveShift = 0;
						menuKnobPos[MENU_OSC2][0] = 410+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 820)
    3fd4:	84 33       	cpi	r24, 0x34	; 52
    3fd6:	a3 e0       	ldi	r26, 0x03	; 3
    3fd8:	9a 07       	cpc	r25, r26
    3fda:	0c f0       	brlt	.+2      	; 0x3fde <main+0x23d4>
    3fdc:	8b c0       	rjmp	.+278    	; 0x40f4 <main+0x24ea>
				{
					if(osc2OctaveShift != 1)
    3fde:	80 91 cc 05 	lds	r24, 0x05CC
    3fe2:	81 30       	cpi	r24, 0x01	; 1
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <main+0x23e0>
    3fe6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc2OctaveShift = 1;
    3fea:	80 92 cc 05 	sts	0x05CC, r8
						menuKnobPos[MENU_OSC2][0] = 615+102;
    3fee:	8d ec       	ldi	r24, 0xCD	; 205
    3ff0:	92 e0       	ldi	r25, 0x02	; 2
    3ff2:	90 93 8c 05 	sts	0x058C, r25
    3ff6:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3ffa:	86 e0       	ldi	r24, 0x06	; 6
    3ffc:	e1 e5       	ldi	r30, 0x51	; 81
    3ffe:	f1 e0       	ldi	r31, 0x01	; 1
    4000:	d5 01       	movw	r26, r10
    4002:	01 90       	ld	r0, Z+
    4004:	0d 92       	st	X+, r0
    4006:	8a 95       	dec	r24
    4008:	e1 f7       	brne	.-8      	; 0x4002 <main+0x23f8>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    400a:	1f 92       	push	r1
    400c:	b1 e0       	ldi	r27, 0x01	; 1
    400e:	bf 93       	push	r27
    4010:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <main+0x11ee>
						osc1WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC1][3] = 365;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    4014:	88 34       	cpi	r24, 0x48	; 72
    4016:	22 e0       	ldi	r18, 0x02	; 2
    4018:	92 07       	cpc	r25, r18
    401a:	9c f4       	brge	.+38     	; 0x4042 <main+0x2438>
				{
					if(osc1WaveForm != WAVE_RSAW)
    401c:	80 91 03 01 	lds	r24, 0x0103
    4020:	83 30       	cpi	r24, 0x03	; 3
    4022:	11 f4       	brne	.+4      	; 0x4028 <main+0x241e>
    4024:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_RSAW;
    4028:	83 e0       	ldi	r24, 0x03	; 3
    402a:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 511;
    402e:	8f ef       	ldi	r24, 0xFF	; 255
    4030:	91 e0       	ldi	r25, 0x01	; 1
    4032:	2a cd       	rjmp	.-1452   	; 0x3a88 <main+0x1e7e>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    4034:	8f e4       	ldi	r24, 0x4F	; 79
    4036:	9e e4       	ldi	r25, 0x4E	; 78
    4038:	a0 e0       	ldi	r26, 0x00	; 0
    403a:	8f 83       	std	Y+7, r24	; 0x07
    403c:	98 87       	std	Y+8, r25	; 0x08
    403e:	a9 87       	std	Y+9, r26	; 0x09
    4040:	ff ca       	rjmp	.-2562   	; 0x3640 <main+0x1a36>
						osc1WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC1][3] = 511;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    4042:	8a 3d       	cpi	r24, 0xDA	; 218
    4044:	32 e0       	ldi	r19, 0x02	; 2
    4046:	93 07       	cpc	r25, r19
    4048:	0c f0       	brlt	.+2      	; 0x404c <main+0x2442>
    404a:	73 c0       	rjmp	.+230    	; 0x4132 <main+0x2528>
				{
					if(osc1WaveForm != WAVE_SQU)
    404c:	80 91 03 01 	lds	r24, 0x0103
    4050:	84 30       	cpi	r24, 0x04	; 4
    4052:	11 f4       	brne	.+4      	; 0x4058 <main+0x244e>
    4054:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_SQU;
    4058:	84 e0       	ldi	r24, 0x04	; 4
    405a:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
    405e:	81 e9       	ldi	r24, 0x91	; 145
    4060:	92 e0       	ldi	r25, 0x02	; 2
    4062:	12 cd       	rjmp	.-1500   	; 0x3a88 <main+0x1e7e>
						lfoWaveForm = WAVE_RSAW;
						menuKnobPos[MENU_LFO][3] = 511 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 852)
    4064:	84 35       	cpi	r24, 0x54	; 84
    4066:	33 e0       	ldi	r19, 0x03	; 3
    4068:	93 07       	cpc	r25, r19
    406a:	0c f0       	brlt	.+2      	; 0x406e <main+0x2464>
    406c:	a4 c0       	rjmp	.+328    	; 0x41b6 <main+0x25ac>
				{
					if(lfoWaveForm != WAVE_SQU)
    406e:	80 91 04 01 	lds	r24, 0x0104
    4072:	84 30       	cpi	r24, 0x04	; 4
    4074:	09 f4       	brne	.+2      	; 0x4078 <main+0x246e>
    4076:	9f cb       	rjmp	.-2242   	; 0x37b6 <main+0x1bac>
					{
						lfoWaveForm = WAVE_SQU;
    4078:	84 e0       	ldi	r24, 0x04	; 4
    407a:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 682 + 85;
    407e:	8f ef       	ldi	r24, 0xFF	; 255
    4080:	92 e0       	ldi	r25, 0x02	; 2
    4082:	90 93 9a 05 	sts	0x059A, r25
    4086:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    408a:	87 e0       	ldi	r24, 0x07	; 7
    408c:	e6 e1       	ldi	r30, 0x16	; 22
    408e:	f1 e0       	ldi	r31, 0x01	; 1
    4090:	d5 01       	movw	r26, r10
    4092:	01 90       	ld	r0, Z+
    4094:	0d 92       	st	X+, r0
    4096:	8a 95       	dec	r24
    4098:	e1 f7       	brne	.-8      	; 0x4092 <main+0x2488>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    409a:	e8 e8       	ldi	r30, 0x88	; 136
    409c:	f6 e0       	ldi	r31, 0x06	; 6
    409e:	78 cc       	rjmp	.-1808   	; 0x3990 <main+0x1d86>
						osc2WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC2][3] = 511;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    40a0:	8a 3d       	cpi	r24, 0xDA	; 218
    40a2:	32 e0       	ldi	r19, 0x02	; 2
    40a4:	93 07       	cpc	r25, r19
    40a6:	0c f0       	brlt	.+2      	; 0x40aa <main+0x24a0>
    40a8:	54 c0       	rjmp	.+168    	; 0x4152 <main+0x2548>
				{
					if(osc2WaveForm != WAVE_SQU)
    40aa:	80 91 02 01 	lds	r24, 0x0102
    40ae:	84 30       	cpi	r24, 0x04	; 4
    40b0:	11 f4       	brne	.+4      	; 0x40b6 <main+0x24ac>
    40b2:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_SQU;
    40b6:	84 e0       	ldi	r24, 0x04	; 4
    40b8:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
    40bc:	81 e9       	ldi	r24, 0x91	; 145
    40be:	92 e0       	ldi	r25, 0x02	; 2
    40c0:	9b cc       	rjmp	.-1738   	; 0x39f8 <main+0x1dee>
					{
						lfoRoute = ROUTE_CENTS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 465)
    40c2:	81 3d       	cpi	r24, 0xD1	; 209
    40c4:	21 e0       	ldi	r18, 0x01	; 1
    40c6:	92 07       	cpc	r25, r18
    40c8:	0c f0       	brlt	.+2      	; 0x40cc <main+0x24c2>
    40ca:	92 c0       	rjmp	.+292    	; 0x41f0 <main+0x25e6>
				{
					if(lfoRoute != ROUTE_SEMIS1)
    40cc:	80 91 b6 05 	lds	r24, 0x05B6
    40d0:	84 30       	cpi	r24, 0x04	; 4
    40d2:	11 f4       	brne	.+4      	; 0x40d8 <main+0x24ce>
    40d4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS1;
    40d8:	84 e0       	ldi	r24, 0x04	; 4
    40da:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    40de:	87 e0       	ldi	r24, 0x07	; 7
    40e0:	e4 e3       	ldi	r30, 0x34	; 52
    40e2:	f1 e0       	ldi	r31, 0x01	; 1
    40e4:	d5 01       	movw	r26, r10
    40e6:	01 90       	ld	r0, Z+
    40e8:	0d 92       	st	X+, r0
    40ea:	8a 95       	dec	r24
    40ec:	e1 f7       	brne	.-8      	; 0x40e6 <main+0x24dc>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    40ee:	e0 e7       	ldi	r30, 0x70	; 112
    40f0:	f6 e0       	ldi	r31, 0x06	; 6
    40f2:	0b cc       	rjmp	.-2026   	; 0x390a <main+0x1d00>
						osc2OctaveShift = 1;
						menuKnobPos[MENU_OSC2][0] = 615+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    40f4:	8f 3f       	cpi	r24, 0xFF	; 255
    40f6:	93 40       	sbci	r25, 0x03	; 3
    40f8:	14 f0       	brlt	.+4      	; 0x40fe <main+0x24f4>
    40fa:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
				{
					if(osc2OctaveShift != 2)
    40fe:	80 91 cc 05 	lds	r24, 0x05CC
    4102:	82 30       	cpi	r24, 0x02	; 2
    4104:	11 f4       	brne	.+4      	; 0x410a <main+0x2500>
    4106:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						osc2OctaveShift = 2;
    410a:	22 e0       	ldi	r18, 0x02	; 2
    410c:	20 93 cc 05 	sts	0x05CC, r18
						menuKnobPos[MENU_OSC2][0] = 820+102;
    4110:	8a e9       	ldi	r24, 0x9A	; 154
    4112:	93 e0       	ldi	r25, 0x03	; 3
    4114:	90 93 8c 05 	sts	0x058C, r25
    4118:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    411c:	86 e0       	ldi	r24, 0x06	; 6
    411e:	e1 e5       	ldi	r30, 0x51	; 81
    4120:	f1 e0       	ldi	r31, 0x01	; 1
    4122:	d5 01       	movw	r26, r10
    4124:	01 90       	ld	r0, Z+
    4126:	0d 92       	st	X+, r0
    4128:	8a 95       	dec	r24
    412a:	e1 f7       	brne	.-8      	; 0x4124 <main+0x251a>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    412c:	1f 92       	push	r1
    412e:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <main+0x11ec>
						osc1WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    4132:	8c 36       	cpi	r24, 0x6C	; 108
    4134:	a3 e0       	ldi	r26, 0x03	; 3
    4136:	9a 07       	cpc	r25, r26
    4138:	e4 f4       	brge	.+56     	; 0x4172 <main+0x2568>
				{
					if(osc1WaveForm != WAVE_NOISE)
    413a:	80 91 03 01 	lds	r24, 0x0103
    413e:	85 30       	cpi	r24, 0x05	; 5
    4140:	11 f4       	brne	.+4      	; 0x4146 <main+0x253c>
    4142:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_NOISE;
    4146:	85 e0       	ldi	r24, 0x05	; 5
    4148:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
    414c:	83 e2       	ldi	r24, 0x23	; 35
    414e:	93 e0       	ldi	r25, 0x03	; 3
    4150:	9b cc       	rjmp	.-1738   	; 0x3a88 <main+0x1e7e>
						osc2WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    4152:	8c 36       	cpi	r24, 0x6C	; 108
    4154:	a3 e0       	ldi	r26, 0x03	; 3
    4156:	9a 07       	cpc	r25, r26
    4158:	ec f4       	brge	.+58     	; 0x4194 <main+0x258a>
				{
					if(osc2WaveForm != WAVE_NOISE)
    415a:	80 91 02 01 	lds	r24, 0x0102
    415e:	85 30       	cpi	r24, 0x05	; 5
    4160:	11 f4       	brne	.+4      	; 0x4166 <main+0x255c>
    4162:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_NOISE;
    4166:	85 e0       	ldi	r24, 0x05	; 5
    4168:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
    416c:	83 e2       	ldi	r24, 0x23	; 35
    416e:	93 e0       	ldi	r25, 0x03	; 3
    4170:	43 cc       	rjmp	.-1914   	; 0x39f8 <main+0x1dee>
						osc1WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    4172:	8f 3f       	cpi	r24, 0xFF	; 255
    4174:	93 40       	sbci	r25, 0x03	; 3
    4176:	14 f0       	brlt	.+4      	; 0x417c <main+0x2572>
    4178:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <main+0x135e>
				{
					if(osc1WaveForm != WAVE_FLAT)
    417c:	80 91 03 01 	lds	r24, 0x0103
    4180:	86 30       	cpi	r24, 0x06	; 6
    4182:	11 f4       	brne	.+4      	; 0x4188 <main+0x257e>
    4184:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <main+0x135e>
					{
						osc1WaveForm = WAVE_FLAT;
    4188:	86 e0       	ldi	r24, 0x06	; 6
    418a:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    418e:	85 eb       	ldi	r24, 0xB5	; 181
    4190:	93 e0       	ldi	r25, 0x03	; 3
    4192:	7a cc       	rjmp	.-1804   	; 0x3a88 <main+0x1e7e>
						osc2WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    4194:	8f 3f       	cpi	r24, 0xFF	; 255
    4196:	93 40       	sbci	r25, 0x03	; 3
    4198:	14 f0       	brlt	.+4      	; 0x419e <main+0x2594>
    419a:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
				{
					if(osc2WaveForm != WAVE_FLAT)
    419e:	80 91 02 01 	lds	r24, 0x0102
    41a2:	86 30       	cpi	r24, 0x06	; 6
    41a4:	11 f4       	brne	.+4      	; 0x41aa <main+0x25a0>
    41a6:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <main+0xe8a>
					{
						osc2WaveForm = WAVE_FLAT;
    41aa:	86 e0       	ldi	r24, 0x06	; 6
    41ac:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    41b0:	85 eb       	ldi	r24, 0xB5	; 181
    41b2:	93 e0       	ldi	r25, 0x03	; 3
    41b4:	21 cc       	rjmp	.-1982   	; 0x39f8 <main+0x1dee>
						lfoWaveForm = WAVE_SQU;
						menuKnobPos[MENU_LFO][3] = 682 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    41b6:	8f 3f       	cpi	r24, 0xFF	; 255
    41b8:	93 40       	sbci	r25, 0x03	; 3
    41ba:	0c f0       	brlt	.+2      	; 0x41be <main+0x25b4>
    41bc:	fc ca       	rjmp	.-2568   	; 0x37b6 <main+0x1bac>
				{
					if(lfoWaveForm != WAVE_FLAT)
    41be:	80 91 04 01 	lds	r24, 0x0104
    41c2:	86 30       	cpi	r24, 0x06	; 6
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <main+0x25be>
    41c6:	f7 ca       	rjmp	.-2578   	; 0x37b6 <main+0x1bac>
					{
						lfoWaveForm = WAVE_FLAT;
    41c8:	86 e0       	ldi	r24, 0x06	; 6
    41ca:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 852 + 85;
    41ce:	89 ea       	ldi	r24, 0xA9	; 169
    41d0:	93 e0       	ldi	r25, 0x03	; 3
    41d2:	90 93 9a 05 	sts	0x059A, r25
    41d6:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    41da:	87 e0       	ldi	r24, 0x07	; 7
    41dc:	e6 e1       	ldi	r30, 0x16	; 22
    41de:	f1 e0       	ldi	r31, 0x01	; 1
    41e0:	d5 01       	movw	r26, r10
    41e2:	01 90       	ld	r0, Z+
    41e4:	0d 92       	st	X+, r0
    41e6:	8a 95       	dec	r24
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <main+0x25d8>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    41ea:	ec e8       	ldi	r30, 0x8C	; 140
    41ec:	f6 e0       	ldi	r31, 0x06	; 6
    41ee:	d0 cb       	rjmp	.-2144   	; 0x3990 <main+0x1d86>
					{
						lfoRoute = ROUTE_SEMIS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 558)
    41f0:	8e 32       	cpi	r24, 0x2E	; 46
    41f2:	32 e0       	ldi	r19, 0x02	; 2
    41f4:	93 07       	cpc	r25, r19
    41f6:	a4 f4       	brge	.+40     	; 0x4220 <main+0x2616>
				{
					if(lfoRoute != ROUTE_SEMIS2)
    41f8:	80 91 b6 05 	lds	r24, 0x05B6
    41fc:	85 30       	cpi	r24, 0x05	; 5
    41fe:	11 f4       	brne	.+4      	; 0x4204 <main+0x25fa>
    4200:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS2;
    4204:	85 e0       	ldi	r24, 0x05	; 5
    4206:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    420a:	87 e0       	ldi	r24, 0x07	; 7
    420c:	e4 e3       	ldi	r30, 0x34	; 52
    420e:	f1 e0       	ldi	r31, 0x01	; 1
    4210:	d5 01       	movw	r26, r10
    4212:	01 90       	ld	r0, Z+
    4214:	0d 92       	st	X+, r0
    4216:	8a 95       	dec	r24
    4218:	e1 f7       	brne	.-8      	; 0x4212 <main+0x2608>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    421a:	e2 e7       	ldi	r30, 0x72	; 114
    421c:	f6 e0       	ldi	r31, 0x06	; 6
    421e:	75 cb       	rjmp	.-2326   	; 0x390a <main+0x1d00>
					{
						lfoRoute = ROUTE_SEMIS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 651)
    4220:	8b 38       	cpi	r24, 0x8B	; 139
    4222:	a2 e0       	ldi	r26, 0x02	; 2
    4224:	9a 07       	cpc	r25, r26
    4226:	6c f4       	brge	.+26     	; 0x4242 <main+0x2638>
				{
					if(lfoRoute != ROUTE_PHASE1)
    4228:	80 91 b6 05 	lds	r24, 0x05B6
    422c:	86 30       	cpi	r24, 0x06	; 6
    422e:	11 f4       	brne	.+4      	; 0x4234 <main+0x262a>
    4230:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE1;
    4234:	86 e0       	ldi	r24, 0x06	; 6
    4236:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    423a:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    423e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					}
				}
				else if(adcValue[0] < 744)
    4242:	88 3e       	cpi	r24, 0xE8	; 232
    4244:	b2 e0       	ldi	r27, 0x02	; 2
    4246:	9b 07       	cpc	r25, r27
    4248:	6c f4       	brge	.+26     	; 0x4264 <main+0x265a>
				{
					if(lfoRoute != ROUTE_PHASE2)
    424a:	80 91 b6 05 	lds	r24, 0x05B6
    424e:	87 30       	cpi	r24, 0x07	; 7
    4250:	11 f4       	brne	.+4      	; 0x4256 <main+0x264c>
    4252:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE2;
    4256:	87 e0       	ldi	r24, 0x07	; 7
    4258:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    425c:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    4260:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					}
				}
				else if(adcValue[0] < 837)
    4264:	85 34       	cpi	r24, 0x45	; 69
    4266:	23 e0       	ldi	r18, 0x03	; 3
    4268:	92 07       	cpc	r25, r18
    426a:	6c f4       	brge	.+26     	; 0x4286 <main+0x267c>
				{
					if(lfoRoute != ROUTE_WAVE1)
    426c:	80 91 b6 05 	lds	r24, 0x05B6
    4270:	88 30       	cpi	r24, 0x08	; 8
    4272:	11 f4       	brne	.+4      	; 0x4278 <main+0x266e>
    4274:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE1;
    4278:	88 e0       	ldi	r24, 0x08	; 8
    427a:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    427e:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    4282:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					}
				}
				else if(adcValue[0] < 930)
    4286:	82 3a       	cpi	r24, 0xA2	; 162
    4288:	33 e0       	ldi	r19, 0x03	; 3
    428a:	93 07       	cpc	r25, r19
    428c:	6c f4       	brge	.+26     	; 0x42a8 <main+0x269e>
				{
					if(lfoRoute != ROUTE_WAVE2)
    428e:	80 91 b6 05 	lds	r24, 0x05B6
    4292:	89 30       	cpi	r24, 0x09	; 9
    4294:	11 f4       	brne	.+4      	; 0x429a <main+0x2690>
    4296:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE2;
    429a:	89 e0       	ldi	r24, 0x09	; 9
    429c:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    42a0:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    42a4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					}
				}
				else if(adcValue[0] < 1023)
    42a8:	8f 3f       	cpi	r24, 0xFF	; 255
    42aa:	93 40       	sbci	r25, 0x03	; 3
    42ac:	14 f0       	brlt	.+4      	; 0x42b2 <main+0x26a8>
    42ae:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
				{
					if(lfoRoute != ROUTE_CUTOFF)
    42b2:	80 91 b6 05 	lds	r24, 0x05B6
    42b6:	8a 30       	cpi	r24, 0x0A	; 10
    42b8:	11 f4       	brne	.+4      	; 0x42be <main+0x26b4>
    42ba:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>
					{
						lfoRoute = ROUTE_CUTOFF;
    42be:	8a e0       	ldi	r24, 0x0A	; 10
    42c0:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    42c4:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    42c8:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <main+0x158>

000042cc <__vector_18>:
		lfsrState ^= 0xB400;
	}
}

ISR(USART_RX_vect)
{
    42cc:	1f 92       	push	r1
    42ce:	0f 92       	push	r0
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	0f 92       	push	r0
    42d4:	11 24       	eor	r1, r1
    42d6:	4f 92       	push	r4
    42d8:	5f 92       	push	r5
    42da:	6f 92       	push	r6
    42dc:	7f 92       	push	r7
    42de:	8f 92       	push	r8
    42e0:	9f 92       	push	r9
    42e2:	af 92       	push	r10
    42e4:	bf 92       	push	r11
    42e6:	cf 92       	push	r12
    42e8:	df 92       	push	r13
    42ea:	ef 92       	push	r14
    42ec:	ff 92       	push	r15
    42ee:	0f 93       	push	r16
    42f0:	2f 93       	push	r18
    42f2:	3f 93       	push	r19
    42f4:	4f 93       	push	r20
    42f6:	5f 93       	push	r21
    42f8:	6f 93       	push	r22
    42fa:	7f 93       	push	r23
    42fc:	8f 93       	push	r24
    42fe:	9f 93       	push	r25
    4300:	af 93       	push	r26
    4302:	bf 93       	push	r27
    4304:	ef 93       	push	r30
    4306:	ff 93       	push	r31
    4308:	cf 93       	push	r28
    430a:	df 93       	push	r29
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	28 97       	sbiw	r28, 0x08	; 8
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg = UDR0;
    4316:	80 91 c6 00 	lds	r24, 0x00C6
	
	if(msg & 0x80) //New command
    431a:	87 fd       	sbrc	r24, 7
    431c:	56 c0       	rjmp	.+172    	; 0x43ca <__vector_18+0xfe>
		
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
    431e:	90 91 fb 05 	lds	r25, 0x05FB
    4322:	e9 2f       	mov	r30, r25
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	e4 50       	subi	r30, 0x04	; 4
    4328:	fa 4f       	sbci	r31, 0xFA	; 250
    432a:	80 83       	st	Z, r24
		commandCount++;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	89 0f       	add	r24, r25
    4330:	80 93 fb 05 	sts	0x05FB, r24
		
		if(commandCount == 3)
    4334:	83 30       	cpi	r24, 0x03	; 3
    4336:	31 f1       	breq	.+76     	; 0x4384 <__vector_18+0xb8>
				}
				break;
			}
		}
	}
}
    4338:	28 96       	adiw	r28, 0x08	; 8
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	f8 94       	cli
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	cd bf       	out	0x3d, r28	; 61
    4344:	df 91       	pop	r29
    4346:	cf 91       	pop	r28
    4348:	ff 91       	pop	r31
    434a:	ef 91       	pop	r30
    434c:	bf 91       	pop	r27
    434e:	af 91       	pop	r26
    4350:	9f 91       	pop	r25
    4352:	8f 91       	pop	r24
    4354:	7f 91       	pop	r23
    4356:	6f 91       	pop	r22
    4358:	5f 91       	pop	r21
    435a:	4f 91       	pop	r20
    435c:	3f 91       	pop	r19
    435e:	2f 91       	pop	r18
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	df 90       	pop	r13
    4368:	cf 90       	pop	r12
    436a:	bf 90       	pop	r11
    436c:	af 90       	pop	r10
    436e:	9f 90       	pop	r9
    4370:	8f 90       	pop	r8
    4372:	7f 90       	pop	r7
    4374:	6f 90       	pop	r6
    4376:	5f 90       	pop	r5
    4378:	4f 90       	pop	r4
    437a:	0f 90       	pop	r0
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	0f 90       	pop	r0
    4380:	1f 90       	pop	r1
    4382:	18 95       	reti
		commandBytes[commandCount] = msg;
		commandCount++;
		
		if(commandCount == 3)
		{
			commandCount = 1;
    4384:	21 e0       	ldi	r18, 0x01	; 1
    4386:	20 93 fb 05 	sts	0x05FB, r18
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    438a:	80 91 fc 05 	lds	r24, 0x05FC
    438e:	80 39       	cpi	r24, 0x90	; 144
    4390:	19 f1       	breq	.+70     	; 0x43d8 <__vector_18+0x10c>
				commandBytes[0] = NOTE_OFF;

			switch(commandBytes[0])
    4392:	80 38       	cpi	r24, 0x80	; 128
    4394:	89 f6       	brne	.-94     	; 0x4338 <__vector_18+0x6c>
				noteUpdate();
				break;
				
				case NOTE_OFF:
				//writeLine(1, "NOTE OFF   ");
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 0;
    4396:	80 91 fd 05 	lds	r24, 0x05FD
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	45 97       	sbiw	r24, 0x15	; 21
    439e:	fc 01       	movw	r30, r24
    43a0:	ea 5f       	subi	r30, 0xFA	; 250
    43a2:	fa 4f       	sbci	r31, 0xFA	; 250
    43a4:	10 82       	st	Z, r1
				if(duoMode)
    43a6:	20 91 c0 05 	lds	r18, 0x05C0
    43aa:	21 11       	cpse	r18, r1
    43ac:	c5 cf       	rjmp	.-118    	; 0x4338 <__vector_18+0x6c>
				{

				}
				else
				{
					if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    43ae:	20 91 db 05 	lds	r18, 0x05DB
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	82 17       	cp	r24, r18
    43b6:	93 07       	cpc	r25, r19
    43b8:	09 f0       	breq	.+2      	; 0x43bc <__vector_18+0xf0>
    43ba:	be cf       	rjmp	.-132    	; 0x4338 <__vector_18+0x6c>
					{
						notePlaying = false;
    43bc:	10 92 5e 05 	sts	0x055E, r1
						osc1Busy = (osc2Busy = false);
    43c0:	10 92 c1 05 	sts	0x05C1, r1
    43c4:	10 92 dc 05 	sts	0x05DC, r1
    43c8:	b7 cf       	rjmp	.-146    	; 0x4338 <__vector_18+0x6c>
{
	unsigned char msg = UDR0;
	
	if(msg & 0x80) //New command
	{
		commandBytes[0] = msg & 0xF0;
    43ca:	80 7f       	andi	r24, 0xF0	; 240
    43cc:	80 93 fc 05 	sts	0x05FC, r24
		
		commandCount = 1;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	80 93 fb 05 	sts	0x05FB, r24
    43d6:	b0 cf       	rjmp	.-160    	; 0x4338 <__vector_18+0x6c>
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    43d8:	80 91 fe 05 	lds	r24, 0x05FE
    43dc:	88 23       	and	r24, r24
    43de:	09 f4       	brne	.+2      	; 0x43e2 <__vector_18+0x116>
    43e0:	e0 c0       	rjmp	.+448    	; 0x45a2 <__vector_18+0x2d6>

			switch(commandBytes[0])
			{
				case NOTE_ON:
				//writeLine(1, "NOTE ON   ");
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 1;
    43e2:	40 91 fd 05 	lds	r20, 0x05FD
    43e6:	84 2f       	mov	r24, r20
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	45 97       	sbiw	r24, 0x15	; 21
    43ec:	fc 01       	movw	r30, r24
    43ee:	ea 5f       	subi	r30, 0xFA	; 250
    43f0:	fa 4f       	sbci	r31, 0xFA	; 250
    43f2:	20 83       	st	Z, r18
				if(commandBytes[1] - MIDI_OFFSET > highNote)
    43f4:	20 91 05 05 	lds	r18, 0x0505
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	28 17       	cp	r18, r24
    43fc:	39 07       	cpc	r19, r25
    43fe:	24 f4       	brge	.+8      	; 0x4408 <__vector_18+0x13c>
				{
					highNote = commandBytes[1] - MIDI_OFFSET;
    4400:	8b ee       	ldi	r24, 0xEB	; 235
    4402:	84 0f       	add	r24, r20
    4404:	80 93 05 05 	sts	0x0505, r24
				}

				if(duoMode)
    4408:	80 91 c0 05 	lds	r24, 0x05C0
    440c:	81 11       	cpse	r24, r1
    440e:	cd c0       	rjmp	.+410    	; 0x45aa <__vector_18+0x2de>
				{
				}
				else
				{
					osc1Note = commandBytes[1] - MIDI_OFFSET;
    4410:	45 51       	subi	r20, 0x15	; 21
    4412:	40 93 db 05 	sts	0x05DB, r20
					osc2Note = osc1Note;
    4416:	40 93 c2 05 	sts	0x05C2, r20

					osc1Busy = (osc2Busy = true);
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	80 93 c1 05 	sts	0x05C1, r24
    4420:	80 93 dc 05 	sts	0x05DC, r24
    4424:	94 2f       	mov	r25, r20
				}
				notePlaying = true;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	80 93 5e 05 	sts	0x055E, r24
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    442c:	e0 91 e5 05 	lds	r30, 0x05E5
    4430:	ff 27       	eor	r31, r31
    4432:	e7 fd       	sbrc	r30, 7
    4434:	f0 95       	com	r31
    4436:	e9 0f       	add	r30, r25
    4438:	f1 1d       	adc	r31, r1
    443a:	ee 0f       	add	r30, r30
    443c:	ff 1f       	adc	r31, r31
    443e:	ee 0f       	add	r30, r30
    4440:	ff 1f       	adc	r31, r31
    4442:	ed 55       	subi	r30, 0x5D	; 93
    4444:	fe 4f       	sbci	r31, 0xFE	; 254
    4446:	c0 80       	ld	r12, Z
    4448:	d1 80       	ldd	r13, Z+1	; 0x01
    444a:	e2 80       	ldd	r14, Z+2	; 0x02
    444c:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    444e:	80 91 cc 05 	lds	r24, 0x05CC
    4452:	e0 91 cd 05 	lds	r30, 0x05CD
    4456:	ff 27       	eor	r31, r31
    4458:	e7 fd       	sbrc	r30, 7
    445a:	f0 95       	com	r31
    445c:	e4 0f       	add	r30, r20
    445e:	f1 1d       	adc	r31, r1
    4460:	9c e0       	ldi	r25, 0x0C	; 12
    4462:	89 02       	muls	r24, r25
    4464:	e0 0d       	add	r30, r0
    4466:	f1 1d       	adc	r31, r1
    4468:	11 24       	eor	r1, r1
    446a:	ee 0f       	add	r30, r30
    446c:	ff 1f       	adc	r31, r31
    446e:	ee 0f       	add	r30, r30
    4470:	ff 1f       	adc	r31, r31
    4472:	ed 55       	subi	r30, 0x5D	; 93
    4474:	fe 4f       	sbci	r31, 0xFE	; 254
    4476:	80 80       	ld	r8, Z
    4478:	91 80       	ldd	r9, Z+1	; 0x01
    447a:	a2 80       	ldd	r10, Z+2	; 0x02
    447c:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    447e:	20 91 e6 05 	lds	r18, 0x05E6
    4482:	a7 e2       	ldi	r26, 0x27	; 39
    4484:	2a 02       	muls	r18, r26
    4486:	90 01       	movw	r18, r0
    4488:	11 24       	eor	r1, r1
    448a:	44 27       	eor	r20, r20
    448c:	37 fd       	sbrc	r19, 7
    448e:	40 95       	com	r20
    4490:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4492:	c7 01       	movw	r24, r14
    4494:	b6 01       	movw	r22, r12
    4496:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    449a:	00 e1       	ldi	r16, 0x10	; 16
    449c:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    44a0:	29 83       	std	Y+1, r18	; 0x01
    44a2:	3a 83       	std	Y+2, r19	; 0x02
    44a4:	4b 83       	std	Y+3, r20	; 0x03
    44a6:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	9a 81       	ldd	r25, Y+2	; 0x02
    44ac:	ab 81       	ldd	r26, Y+3	; 0x03
    44ae:	bc 81       	ldd	r27, Y+4	; 0x04
    44b0:	c8 0e       	add	r12, r24
    44b2:	d9 1e       	adc	r13, r25
    44b4:	ea 1e       	adc	r14, r26
    44b6:	fb 1e       	adc	r15, r27
    44b8:	c0 92 f7 05 	sts	0x05F7, r12
    44bc:	d0 92 f8 05 	sts	0x05F8, r13
    44c0:	e0 92 f9 05 	sts	0x05F9, r14
    44c4:	f0 92 fa 05 	sts	0x05FA, r15

	centsConst = 0x27*osc2CentsShift;
    44c8:	20 91 ce 05 	lds	r18, 0x05CE
    44cc:	97 e2       	ldi	r25, 0x27	; 39
    44ce:	29 02       	muls	r18, r25
    44d0:	90 01       	movw	r18, r0
    44d2:	11 24       	eor	r1, r1
    44d4:	44 27       	eor	r20, r20
    44d6:	37 fd       	sbrc	r19, 7
    44d8:	40 95       	com	r20
    44da:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    44dc:	c5 01       	movw	r24, r10
    44de:	b4 01       	movw	r22, r8
    44e0:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    44e4:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    44e8:	29 83       	std	Y+1, r18	; 0x01
    44ea:	3a 83       	std	Y+2, r19	; 0x02
    44ec:	4b 83       	std	Y+3, r20	; 0x03
    44ee:	5c 83       	std	Y+4, r21	; 0x04
    44f0:	6d 83       	std	Y+5, r22	; 0x05
    44f2:	7e 83       	std	Y+6, r23	; 0x06
    44f4:	8f 83       	std	Y+7, r24	; 0x07
    44f6:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	9a 81       	ldd	r25, Y+2	; 0x02
    44fc:	ab 81       	ldd	r26, Y+3	; 0x03
    44fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4500:	88 0e       	add	r8, r24
    4502:	99 1e       	adc	r9, r25
    4504:	aa 1e       	adc	r10, r26
    4506:	bb 1e       	adc	r11, r27
    4508:	80 92 d7 05 	sts	0x05D7, r8
    450c:	90 92 d8 05 	sts	0x05D8, r9
    4510:	a0 92 d9 05 	sts	0x05D9, r10
    4514:	b0 92 da 05 	sts	0x05DA, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    4518:	40 90 67 05 	lds	r4, 0x0567
    451c:	50 90 68 05 	lds	r5, 0x0568
    4520:	60 90 69 05 	lds	r6, 0x0569
    4524:	70 90 6a 05 	lds	r7, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4528:	c7 01       	movw	r24, r14
    452a:	b6 01       	movw	r22, r12
    452c:	a3 01       	movw	r20, r6
    452e:	92 01       	movw	r18, r4
    4530:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4534:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    4538:	c9 01       	movw	r24, r18
    453a:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    453c:	80 93 e7 05 	sts	0x05E7, r24
    4540:	90 93 e8 05 	sts	0x05E8, r25
    4544:	a0 93 e9 05 	sts	0x05E9, r26
    4548:	b0 93 ea 05 	sts	0x05EA, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    454c:	c5 01       	movw	r24, r10
    454e:	b4 01       	movw	r22, r8
    4550:	a3 01       	movw	r20, r6
    4552:	92 01       	movw	r18, r4
    4554:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4558:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    455c:	c9 01       	movw	r24, r18
    455e:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    4560:	80 93 cf 05 	sts	0x05CF, r24
    4564:	90 93 d0 05 	sts	0x05D0, r25
    4568:	a0 93 d1 05 	sts	0x05D1, r26
    456c:	b0 93 d2 05 	sts	0x05D2, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4570:	60 91 b7 05 	lds	r22, 0x05B7
    4574:	70 91 b8 05 	lds	r23, 0x05B8
    4578:	80 91 b9 05 	lds	r24, 0x05B9
    457c:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4580:	a3 01       	movw	r20, r6
    4582:	92 01       	movw	r18, r4
    4584:	0e 94 c2 24 	call	0x4984	; 0x4984 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4588:	0e 94 67 25 	call	0x4ace	; 0x4ace <__lshrdi3>
    458c:	c9 01       	movw	r24, r18
    458e:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4590:	80 93 bb 05 	sts	0x05BB, r24
    4594:	90 93 bc 05 	sts	0x05BC, r25
    4598:	a0 93 bd 05 	sts	0x05BD, r26
    459c:	b0 93 be 05 	sts	0x05BE, r27
    45a0:	cb ce       	rjmp	.-618    	; 0x4338 <__vector_18+0x6c>

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
				commandBytes[0] = NOTE_OFF;
    45a2:	80 e8       	ldi	r24, 0x80	; 128
    45a4:	80 93 fc 05 	sts	0x05FC, r24
    45a8:	f6 ce       	rjmp	.-532    	; 0x4396 <__vector_18+0xca>
    45aa:	90 91 db 05 	lds	r25, 0x05DB
    45ae:	40 91 c2 05 	lds	r20, 0x05C2
    45b2:	39 cf       	rjmp	.-398    	; 0x4426 <__vector_18+0x15a>

000045b4 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
    45b4:	1f 92       	push	r1
    45b6:	0f 92       	push	r0
    45b8:	0f b6       	in	r0, 0x3f	; 63
    45ba:	0f 92       	push	r0
    45bc:	11 24       	eor	r1, r1
    45be:	2f 93       	push	r18
    45c0:	3f 93       	push	r19
    45c2:	4f 93       	push	r20
    45c4:	8f 93       	push	r24
    45c6:	9f 93       	push	r25
    45c8:	ef 93       	push	r30
    45ca:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
    45cc:	40 91 0b 06 	lds	r20, 0x060B
    45d0:	84 2f       	mov	r24, r20
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	20 91 78 00 	lds	r18, 0x0078
    45d8:	30 91 79 00 	lds	r19, 0x0079
    45dc:	fc 01       	movw	r30, r24
    45de:	ee 0f       	add	r30, r30
    45e0:	ff 1f       	adc	r31, r31
    45e2:	ed 5f       	subi	r30, 0xFD	; 253
    45e4:	f9 4f       	sbci	r31, 0xF9	; 249
    45e6:	31 83       	std	Z+1, r19	; 0x01
    45e8:	20 83       	st	Z, r18
	updateADC[adcSelect] = true;
    45ea:	fc 01       	movw	r30, r24
    45ec:	e1 50       	subi	r30, 0x01	; 1
    45ee:	fa 4f       	sbci	r31, 0xFA	; 250
    45f0:	21 e0       	ldi	r18, 0x01	; 1
    45f2:	20 83       	st	Z, r18

	adcSelect++;
    45f4:	4f 5f       	subi	r20, 0xFF	; 255
	
	if(adcSelect > 3)
    45f6:	44 30       	cpi	r20, 0x04	; 4
    45f8:	88 f0       	brcs	.+34     	; 0x461c <__vector_21+0x68>
	adcSelect = 0;
    45fa:	10 92 0b 06 	sts	0x060B, r1
    45fe:	40 e0       	ldi	r20, 0x00	; 0
	
	ADMUX = adcSelect;
    4600:	40 93 7c 00 	sts	0x007C, r20
}
    4604:	ff 91       	pop	r31
    4606:	ef 91       	pop	r30
    4608:	9f 91       	pop	r25
    460a:	8f 91       	pop	r24
    460c:	4f 91       	pop	r20
    460e:	3f 91       	pop	r19
    4610:	2f 91       	pop	r18
    4612:	0f 90       	pop	r0
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	0f 90       	pop	r0
    4618:	1f 90       	pop	r1
    461a:	18 95       	reti
ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;
	updateADC[adcSelect] = true;

	adcSelect++;
    461c:	40 93 0b 06 	sts	0x060B, r20
    4620:	ef cf       	rjmp	.-34     	; 0x4600 <__vector_21+0x4c>

00004622 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	11 24       	eor	r1, r1
    462c:	2f 93       	push	r18
    462e:	3f 93       	push	r19
    4630:	4f 93       	push	r20
    4632:	5f 93       	push	r21
    4634:	6f 93       	push	r22
    4636:	7f 93       	push	r23
    4638:	8f 93       	push	r24
    463a:	9f 93       	push	r25
    463c:	af 93       	push	r26
    463e:	bf 93       	push	r27
    4640:	ef 93       	push	r30
    4642:	ff 93       	push	r31
    4644:	cf 93       	push	r28
    4646:	df 93       	push	r29
    4648:	00 d0       	rcall	.+0      	; 0x464a <__vector_9+0x28>
    464a:	00 d0       	rcall	.+0      	; 0x464c <__vector_9+0x2a>
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
    4650:	80 91 5e 05 	lds	r24, 0x055E
    4654:	88 23       	and	r24, r24
    4656:	09 f4       	brne	.+2      	; 0x465a <__vector_9+0x38>
    4658:	06 c1       	rjmp	.+524    	; 0x4866 <__vector_9+0x244>
	{
		osc1Phaccu[0] = osc1Phaccu[1];
    465a:	80 91 ef 05 	lds	r24, 0x05EF
    465e:	90 91 f0 05 	lds	r25, 0x05F0
    4662:	a0 91 f1 05 	lds	r26, 0x05F1
    4666:	b0 91 f2 05 	lds	r27, 0x05F2
    466a:	80 93 eb 05 	sts	0x05EB, r24
    466e:	90 93 ec 05 	sts	0x05EC, r25
    4672:	a0 93 ed 05 	sts	0x05ED, r26
    4676:	b0 93 ee 05 	sts	0x05EE, r27
		osc1Phaccu[1] = osc1Phaccu[2];
    467a:	80 91 f3 05 	lds	r24, 0x05F3
    467e:	90 91 f4 05 	lds	r25, 0x05F4
    4682:	a0 91 f5 05 	lds	r26, 0x05F5
    4686:	b0 91 f6 05 	lds	r27, 0x05F6
    468a:	80 93 ef 05 	sts	0x05EF, r24
    468e:	90 93 f0 05 	sts	0x05F0, r25
    4692:	a0 93 f1 05 	sts	0x05F1, r26
    4696:	b0 93 f2 05 	sts	0x05F2, r27
		osc1Phaccu[2] += osc1TWord;
    469a:	40 91 e7 05 	lds	r20, 0x05E7
    469e:	50 91 e8 05 	lds	r21, 0x05E8
    46a2:	60 91 e9 05 	lds	r22, 0x05E9
    46a6:	70 91 ea 05 	lds	r23, 0x05EA
    46aa:	80 91 f3 05 	lds	r24, 0x05F3
    46ae:	90 91 f4 05 	lds	r25, 0x05F4
    46b2:	a0 91 f5 05 	lds	r26, 0x05F5
    46b6:	b0 91 f6 05 	lds	r27, 0x05F6
    46ba:	84 0f       	add	r24, r20
    46bc:	95 1f       	adc	r25, r21
    46be:	a6 1f       	adc	r26, r22
    46c0:	b7 1f       	adc	r27, r23
    46c2:	80 93 f3 05 	sts	0x05F3, r24
    46c6:	90 93 f4 05 	sts	0x05F4, r25
    46ca:	a0 93 f5 05 	sts	0x05F5, r26
    46ce:	b0 93 f6 05 	sts	0x05F6, r27

		osc2Phaccu += osc2TWord;
    46d2:	40 91 cf 05 	lds	r20, 0x05CF
    46d6:	50 91 d0 05 	lds	r21, 0x05D0
    46da:	60 91 d1 05 	lds	r22, 0x05D1
    46de:	70 91 d2 05 	lds	r23, 0x05D2
    46e2:	80 91 d3 05 	lds	r24, 0x05D3
    46e6:	90 91 d4 05 	lds	r25, 0x05D4
    46ea:	a0 91 d5 05 	lds	r26, 0x05D5
    46ee:	b0 91 d6 05 	lds	r27, 0x05D6
    46f2:	84 0f       	add	r24, r20
    46f4:	95 1f       	adc	r25, r21
    46f6:	a6 1f       	adc	r26, r22
    46f8:	b7 1f       	adc	r27, r23
    46fa:	80 93 d3 05 	sts	0x05D3, r24
    46fe:	90 93 d4 05 	sts	0x05D4, r25
    4702:	a0 93 d5 05 	sts	0x05D5, r26
    4706:	b0 93 d6 05 	sts	0x05D6, r27
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
    470a:	80 91 00 01 	lds	r24, 0x0100
    470e:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
    4712:	9c 01       	movw	r18, r24
    4714:	36 95       	lsr	r19
    4716:	27 95       	ror	r18
	
	if(lsb == 1)
    4718:	80 fd       	sbrc	r24, 0
    471a:	ce c0       	rjmp	.+412    	; 0x48b8 <__vector_9+0x296>
	{
		lfsrState ^= 0xB400;
    471c:	30 93 01 01 	sts	0x0101, r19
    4720:	20 93 00 01 	sts	0x0100, r18
		lfsrUpdate();

		unsigned short fraction = 0;
		unsigned short whole = 0;

		osc1Out[0] = osc1Out[1];
    4724:	80 91 e0 05 	lds	r24, 0x05E0
    4728:	90 91 e1 05 	lds	r25, 0x05E1
    472c:	90 93 df 05 	sts	0x05DF, r25
    4730:	80 93 de 05 	sts	0x05DE, r24
		osc1Out[1] = osc1Out[2];
    4734:	80 91 e2 05 	lds	r24, 0x05E2
    4738:	90 91 e3 05 	lds	r25, 0x05E3
    473c:	90 93 e1 05 	sts	0x05E1, r25
    4740:	80 93 e0 05 	sts	0x05E0, r24
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
    4744:	e0 91 03 01 	lds	r30, 0x0103
    4748:	90 91 f5 05 	lds	r25, 0x05F5
    474c:	80 91 e4 05 	lds	r24, 0x05E4
    4750:	89 0f       	add	r24, r25
    4752:	f0 e0       	ldi	r31, 0x00	; 0
    4754:	ee 0f       	add	r30, r30
    4756:	ff 1f       	adc	r31, r31
    4758:	ed 5f       	subi	r30, 0xFD	; 253
    475a:	fc 4f       	sbci	r31, 0xFC	; 252
    475c:	01 90       	ld	r0, Z+
    475e:	f0 81       	ld	r31, Z
    4760:	e0 2d       	mov	r30, r0
    4762:	e8 0f       	add	r30, r24
    4764:	f1 1d       	adc	r31, r1
    4766:	e8 59       	subi	r30, 0x98	; 152
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	e4 91       	lpm	r30, Z
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	f0 93 e3 05 	sts	0x05E3, r31
    4772:	e0 93 e2 05 	sts	0x05E2, r30
		
		if(osc1WaveForm == WAVE_NOISE)
    4776:	80 91 03 01 	lds	r24, 0x0103
    477a:	85 30       	cpi	r24, 0x05	; 5
    477c:	09 f4       	brne	.+2      	; 0x4780 <__vector_9+0x15e>
    477e:	9f c0       	rjmp	.+318    	; 0x48be <__vector_9+0x29c>
			osc1Out[2] = lfsrState;

		if(osc2Sync && (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    4780:	80 91 c3 05 	lds	r24, 0x05C3
    4784:	88 23       	and	r24, r24
    4786:	c1 f0       	breq	.+48     	; 0x47b8 <__vector_9+0x196>
    4788:	80 91 f1 05 	lds	r24, 0x05F1
    478c:	40 91 ed 05 	lds	r20, 0x05ED
    4790:	84 17       	cp	r24, r20
    4792:	90 f4       	brcc	.+36     	; 0x47b8 <__vector_9+0x196>
    4794:	89 17       	cp	r24, r25
    4796:	80 f4       	brcc	.+32     	; 0x47b8 <__vector_9+0x196>
		{
			osc2Phaccu = osc1Phaccu[2];
    4798:	80 91 f3 05 	lds	r24, 0x05F3
    479c:	90 91 f4 05 	lds	r25, 0x05F4
    47a0:	a0 91 f5 05 	lds	r26, 0x05F5
    47a4:	b0 91 f6 05 	lds	r27, 0x05F6
    47a8:	80 93 d3 05 	sts	0x05D3, r24
    47ac:	90 93 d4 05 	sts	0x05D4, r25
    47b0:	a0 93 d5 05 	sts	0x05D5, r26
    47b4:	b0 93 d6 05 	sts	0x05D6, r27
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
    47b8:	e0 91 02 01 	lds	r30, 0x0102
    47bc:	80 91 cb 05 	lds	r24, 0x05CB
    47c0:	90 91 d5 05 	lds	r25, 0x05D5
    47c4:	89 0f       	add	r24, r25
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	ee 0f       	add	r30, r30
    47ca:	ff 1f       	adc	r31, r31
    47cc:	ed 5f       	subi	r30, 0xFD	; 253
    47ce:	fc 4f       	sbci	r31, 0xFC	; 252
    47d0:	01 90       	ld	r0, Z+
    47d2:	f0 81       	ld	r31, Z
    47d4:	e0 2d       	mov	r30, r0
    47d6:	e8 0f       	add	r30, r24
    47d8:	f1 1d       	adc	r31, r1
    47da:	e8 59       	subi	r30, 0x98	; 152
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	e4 91       	lpm	r30, Z
    47e0:	f0 e0       	ldi	r31, 0x00	; 0
    47e2:	f0 93 c9 05 	sts	0x05C9, r31
    47e6:	e0 93 c8 05 	sts	0x05C8, r30
		
		if(osc2WaveForm == WAVE_NOISE)
    47ea:	80 91 02 01 	lds	r24, 0x0102
    47ee:	85 30       	cpi	r24, 0x05	; 5
    47f0:	09 f4       	brne	.+2      	; 0x47f4 <__vector_9+0x1d2>
    47f2:	5d c0       	rjmp	.+186    	; 0x48ae <__vector_9+0x28c>
			osc2Out[2] = lfsrState;

		unsigned long temp = 0;
    47f4:	19 82       	std	Y+1, r1	; 0x01
    47f6:	1a 82       	std	Y+2, r1	; 0x02
    47f8:	1b 82       	std	Y+3, r1	; 0x03
    47fa:	1c 82       	std	Y+4, r1	; 0x04

		osc1Out[2] *= osc1Weight;
    47fc:	20 91 e2 05 	lds	r18, 0x05E2
    4800:	30 91 e3 05 	lds	r19, 0x05E3
    4804:	40 91 05 01 	lds	r20, 0x0105
    4808:	42 9f       	mul	r20, r18
    480a:	c0 01       	movw	r24, r0
    480c:	43 9f       	mul	r20, r19
    480e:	90 0d       	add	r25, r0
    4810:	11 24       	eor	r1, r1
    4812:	90 93 e3 05 	sts	0x05E3, r25
    4816:	80 93 e2 05 	sts	0x05E2, r24
		osc2Out[2] *= osc2Weight;
    481a:	20 91 c8 05 	lds	r18, 0x05C8
    481e:	30 91 c9 05 	lds	r19, 0x05C9
    4822:	40 91 ca 05 	lds	r20, 0x05CA
    4826:	42 9f       	mul	r20, r18
    4828:	c0 01       	movw	r24, r0
    482a:	43 9f       	mul	r20, r19
    482c:	90 0d       	add	r25, r0
    482e:	11 24       	eor	r1, r1
    4830:	90 93 c9 05 	sts	0x05C9, r25
    4834:	80 93 c8 05 	sts	0x05C8, r24

		if(ringMod)
    4838:	80 91 bf 05 	lds	r24, 0x05BF
			temp = osc1Out[2] ^ osc2Out[2];
    483c:	20 91 e2 05 	lds	r18, 0x05E2
    4840:	30 91 e3 05 	lds	r19, 0x05E3
		unsigned long temp = 0;

		osc1Out[2] *= osc1Weight;
		osc2Out[2] *= osc2Weight;

		if(ringMod)
    4844:	81 11       	cpse	r24, r1
    4846:	26 c0       	rjmp	.+76     	; 0x4894 <__vector_9+0x272>
			temp = osc1Out[2] ^ osc2Out[2];
		else
			temp = osc1Out[2] + osc2Out[2];
    4848:	80 91 c8 05 	lds	r24, 0x05C8
    484c:	90 91 c9 05 	lds	r25, 0x05C9
    4850:	82 0f       	add	r24, r18
    4852:	93 1f       	adc	r25, r19
    4854:	a0 e0       	ldi	r26, 0x00	; 0
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	89 83       	std	Y+1, r24	; 0x01
    485a:	9a 83       	std	Y+2, r25	; 0x02
    485c:	ab 83       	std	Y+3, r26	; 0x03
    485e:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    4866:	0f 90       	pop	r0
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	df 91       	pop	r29
    4870:	cf 91       	pop	r28
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	bf 91       	pop	r27
    4878:	af 91       	pop	r26
    487a:	9f 91       	pop	r25
    487c:	8f 91       	pop	r24
    487e:	7f 91       	pop	r23
    4880:	6f 91       	pop	r22
    4882:	5f 91       	pop	r21
    4884:	4f 91       	pop	r20
    4886:	3f 91       	pop	r19
    4888:	2f 91       	pop	r18
    488a:	0f 90       	pop	r0
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	0f 90       	pop	r0
    4890:	1f 90       	pop	r1
    4892:	18 95       	reti

		osc1Out[2] *= osc1Weight;
		osc2Out[2] *= osc2Weight;

		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
    4894:	80 91 c8 05 	lds	r24, 0x05C8
    4898:	90 91 c9 05 	lds	r25, 0x05C9
    489c:	82 27       	eor	r24, r18
    489e:	93 27       	eor	r25, r19
    48a0:	a0 e0       	ldi	r26, 0x00	; 0
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	89 83       	std	Y+1, r24	; 0x01
    48a6:	9a 83       	std	Y+2, r25	; 0x02
    48a8:	ab 83       	std	Y+3, r26	; 0x03
    48aa:	bc 83       	std	Y+4, r27	; 0x04
    48ac:	d9 cf       	rjmp	.-78     	; 0x4860 <__vector_9+0x23e>
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
		
		if(osc2WaveForm == WAVE_NOISE)
			osc2Out[2] = lfsrState;
    48ae:	30 93 c9 05 	sts	0x05C9, r19
    48b2:	20 93 c8 05 	sts	0x05C8, r18
    48b6:	9e cf       	rjmp	.-196    	; 0x47f4 <__vector_9+0x1d2>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    48b8:	84 eb       	ldi	r24, 0xB4	; 180
    48ba:	38 27       	eor	r19, r24
    48bc:	2f cf       	rjmp	.-418    	; 0x471c <__vector_9+0xfa>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    48be:	30 93 e3 05 	sts	0x05E3, r19
    48c2:	20 93 e2 05 	sts	0x05E2, r18

		if(osc2Sync && (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    48c6:	80 91 c3 05 	lds	r24, 0x05C3
    48ca:	88 23       	and	r24, r24
    48cc:	09 f4       	brne	.+2      	; 0x48d0 <__vector_9+0x2ae>
    48ce:	74 cf       	rjmp	.-280    	; 0x47b8 <__vector_9+0x196>
    48d0:	5b cf       	rjmp	.-330    	; 0x4788 <__vector_9+0x166>

000048d2 <__muldi3>:
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	1f 93       	push	r17
    48d8:	0f 93       	push	r16
    48da:	9a 9d       	mul	r25, r10
    48dc:	f0 2d       	mov	r31, r0
    48de:	21 9f       	mul	r18, r17
    48e0:	f0 0d       	add	r31, r0
    48e2:	8b 9d       	mul	r24, r11
    48e4:	f0 0d       	add	r31, r0
    48e6:	8a 9d       	mul	r24, r10
    48e8:	e0 2d       	mov	r30, r0
    48ea:	f1 0d       	add	r31, r1
    48ec:	03 9f       	mul	r16, r19
    48ee:	f0 0d       	add	r31, r0
    48f0:	02 9f       	mul	r16, r18
    48f2:	e0 0d       	add	r30, r0
    48f4:	f1 1d       	adc	r31, r1
    48f6:	4e 9d       	mul	r20, r14
    48f8:	e0 0d       	add	r30, r0
    48fa:	f1 1d       	adc	r31, r1
    48fc:	5e 9d       	mul	r21, r14
    48fe:	f0 0d       	add	r31, r0
    4900:	4f 9d       	mul	r20, r15
    4902:	f0 0d       	add	r31, r0
    4904:	7f 93       	push	r23
    4906:	6f 93       	push	r22
    4908:	bf 92       	push	r11
    490a:	af 92       	push	r10
    490c:	5f 93       	push	r21
    490e:	4f 93       	push	r20
    4910:	d5 01       	movw	r26, r10
    4912:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    4916:	8b 01       	movw	r16, r22
    4918:	ac 01       	movw	r20, r24
    491a:	d7 01       	movw	r26, r14
    491c:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    4920:	eb 01       	movw	r28, r22
    4922:	e8 0f       	add	r30, r24
    4924:	f9 1f       	adc	r31, r25
    4926:	d6 01       	movw	r26, r12
    4928:	0e 94 b9 24 	call	0x4972	; 0x4972 <__muldi3_6>
    492c:	2f 91       	pop	r18
    492e:	3f 91       	pop	r19
    4930:	d6 01       	movw	r26, r12
    4932:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    4936:	c6 0f       	add	r28, r22
    4938:	d7 1f       	adc	r29, r23
    493a:	e8 1f       	adc	r30, r24
    493c:	f9 1f       	adc	r31, r25
    493e:	af 91       	pop	r26
    4940:	bf 91       	pop	r27
    4942:	0e 94 b9 24 	call	0x4972	; 0x4972 <__muldi3_6>
    4946:	2f 91       	pop	r18
    4948:	3f 91       	pop	r19
    494a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    494e:	c6 0f       	add	r28, r22
    4950:	d7 1f       	adc	r29, r23
    4952:	e8 1f       	adc	r30, r24
    4954:	f9 1f       	adc	r31, r25
    4956:	d6 01       	movw	r26, r12
    4958:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    495c:	e6 0f       	add	r30, r22
    495e:	f7 1f       	adc	r31, r23
    4960:	98 01       	movw	r18, r16
    4962:	be 01       	movw	r22, r28
    4964:	cf 01       	movw	r24, r30
    4966:	11 24       	eor	r1, r1
    4968:	0f 91       	pop	r16
    496a:	1f 91       	pop	r17
    496c:	cf 91       	pop	r28
    496e:	df 91       	pop	r29
    4970:	08 95       	ret

00004972 <__muldi3_6>:
    4972:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    4976:	46 0f       	add	r20, r22
    4978:	57 1f       	adc	r21, r23
    497a:	c8 1f       	adc	r28, r24
    497c:	d9 1f       	adc	r29, r25
    497e:	08 f4       	brcc	.+2      	; 0x4982 <__muldi3_6+0x10>
    4980:	31 96       	adiw	r30, 0x01	; 1
    4982:	08 95       	ret

00004984 <__umulsidi3>:
    4984:	e8 94       	clt

00004986 <__umulsidi3_helper>:
    4986:	df 93       	push	r29
    4988:	cf 93       	push	r28
    498a:	fc 01       	movw	r30, r24
    498c:	db 01       	movw	r26, r22
    498e:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    4992:	7f 93       	push	r23
    4994:	6f 93       	push	r22
    4996:	e9 01       	movw	r28, r18
    4998:	9a 01       	movw	r18, r20
    499a:	ac 01       	movw	r20, r24
    499c:	bf 93       	push	r27
    499e:	af 93       	push	r26
    49a0:	3f 93       	push	r19
    49a2:	2f 93       	push	r18
    49a4:	df 01       	movw	r26, r30
    49a6:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <__umulhisi3>
    49aa:	26 f4       	brtc	.+8      	; 0x49b4 <__umulsidi3_helper+0x2e>
    49ac:	6c 1b       	sub	r22, r28
    49ae:	7d 0b       	sbc	r23, r29
    49b0:	82 0b       	sbc	r24, r18
    49b2:	93 0b       	sbc	r25, r19
    49b4:	9e 01       	movw	r18, r28
    49b6:	eb 01       	movw	r28, r22
    49b8:	fc 01       	movw	r30, r24
    49ba:	0e 94 b9 24 	call	0x4972	; 0x4972 <__muldi3_6>
    49be:	af 91       	pop	r26
    49c0:	bf 91       	pop	r27
    49c2:	2f 91       	pop	r18
    49c4:	3f 91       	pop	r19
    49c6:	0e 94 b9 24 	call	0x4972	; 0x4972 <__muldi3_6>
    49ca:	be 01       	movw	r22, r28
    49cc:	cf 01       	movw	r24, r30
    49ce:	f9 01       	movw	r30, r18
    49d0:	2f 91       	pop	r18
    49d2:	3f 91       	pop	r19
    49d4:	cf 91       	pop	r28
    49d6:	df 91       	pop	r29
    49d8:	08 95       	ret

000049da <__umoddi3>:
    49da:	68 94       	set
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <__udivdi3_umoddi3>

000049de <__udivdi3>:
    49de:	e8 94       	clt

000049e0 <__udivdi3_umoddi3>:
    49e0:	8f 92       	push	r8
    49e2:	9f 92       	push	r9
    49e4:	cf 93       	push	r28
    49e6:	df 93       	push	r29
    49e8:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__udivmod64>
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	9f 90       	pop	r9
    49f2:	8f 90       	pop	r8
    49f4:	08 95       	ret

000049f6 <__udivmod64>:
    49f6:	88 24       	eor	r8, r8
    49f8:	99 24       	eor	r9, r9
    49fa:	f4 01       	movw	r30, r8
    49fc:	e4 01       	movw	r28, r8
    49fe:	b0 e4       	ldi	r27, 0x40	; 64
    4a00:	9f 93       	push	r25
    4a02:	aa 27       	eor	r26, r26
    4a04:	9a 15       	cp	r25, r10
    4a06:	8b 04       	cpc	r8, r11
    4a08:	9c 04       	cpc	r9, r12
    4a0a:	ed 05       	cpc	r30, r13
    4a0c:	fe 05       	cpc	r31, r14
    4a0e:	cf 05       	cpc	r28, r15
    4a10:	d0 07       	cpc	r29, r16
    4a12:	a1 07       	cpc	r26, r17
    4a14:	98 f4       	brcc	.+38     	; 0x4a3c <__udivmod64+0x46>
    4a16:	ad 2f       	mov	r26, r29
    4a18:	dc 2f       	mov	r29, r28
    4a1a:	cf 2f       	mov	r28, r31
    4a1c:	fe 2f       	mov	r31, r30
    4a1e:	e9 2d       	mov	r30, r9
    4a20:	98 2c       	mov	r9, r8
    4a22:	89 2e       	mov	r8, r25
    4a24:	98 2f       	mov	r25, r24
    4a26:	87 2f       	mov	r24, r23
    4a28:	76 2f       	mov	r23, r22
    4a2a:	65 2f       	mov	r22, r21
    4a2c:	54 2f       	mov	r21, r20
    4a2e:	43 2f       	mov	r20, r19
    4a30:	32 2f       	mov	r19, r18
    4a32:	22 27       	eor	r18, r18
    4a34:	b8 50       	subi	r27, 0x08	; 8
    4a36:	31 f7       	brne	.-52     	; 0x4a04 <__udivmod64+0xe>
    4a38:	bf 91       	pop	r27
    4a3a:	27 c0       	rjmp	.+78     	; 0x4a8a <__udivmod64+0x94>
    4a3c:	1b 2e       	mov	r1, r27
    4a3e:	bf 91       	pop	r27
    4a40:	bb 27       	eor	r27, r27
    4a42:	22 0f       	add	r18, r18
    4a44:	33 1f       	adc	r19, r19
    4a46:	44 1f       	adc	r20, r20
    4a48:	55 1f       	adc	r21, r21
    4a4a:	66 1f       	adc	r22, r22
    4a4c:	77 1f       	adc	r23, r23
    4a4e:	88 1f       	adc	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	88 1c       	adc	r8, r8
    4a54:	99 1c       	adc	r9, r9
    4a56:	ee 1f       	adc	r30, r30
    4a58:	ff 1f       	adc	r31, r31
    4a5a:	cc 1f       	adc	r28, r28
    4a5c:	dd 1f       	adc	r29, r29
    4a5e:	aa 1f       	adc	r26, r26
    4a60:	bb 1f       	adc	r27, r27
    4a62:	8a 14       	cp	r8, r10
    4a64:	9b 04       	cpc	r9, r11
    4a66:	ec 05       	cpc	r30, r12
    4a68:	fd 05       	cpc	r31, r13
    4a6a:	ce 05       	cpc	r28, r14
    4a6c:	df 05       	cpc	r29, r15
    4a6e:	a0 07       	cpc	r26, r16
    4a70:	b1 07       	cpc	r27, r17
    4a72:	48 f0       	brcs	.+18     	; 0x4a86 <__udivmod64+0x90>
    4a74:	8a 18       	sub	r8, r10
    4a76:	9b 08       	sbc	r9, r11
    4a78:	ec 09       	sbc	r30, r12
    4a7a:	fd 09       	sbc	r31, r13
    4a7c:	ce 09       	sbc	r28, r14
    4a7e:	df 09       	sbc	r29, r15
    4a80:	a0 0b       	sbc	r26, r16
    4a82:	b1 0b       	sbc	r27, r17
    4a84:	21 60       	ori	r18, 0x01	; 1
    4a86:	1a 94       	dec	r1
    4a88:	e1 f6       	brne	.-72     	; 0x4a42 <__udivmod64+0x4c>
    4a8a:	2e f4       	brtc	.+10     	; 0x4a96 <__udivmod64+0xa0>
    4a8c:	94 01       	movw	r18, r8
    4a8e:	af 01       	movw	r20, r30
    4a90:	be 01       	movw	r22, r28
    4a92:	cd 01       	movw	r24, r26
    4a94:	00 0c       	add	r0, r0
    4a96:	08 95       	ret

00004a98 <__ashldi3>:
    4a98:	0f 93       	push	r16
    4a9a:	08 30       	cpi	r16, 0x08	; 8
    4a9c:	90 f0       	brcs	.+36     	; 0x4ac2 <__ashldi3+0x2a>
    4a9e:	98 2f       	mov	r25, r24
    4aa0:	87 2f       	mov	r24, r23
    4aa2:	76 2f       	mov	r23, r22
    4aa4:	65 2f       	mov	r22, r21
    4aa6:	54 2f       	mov	r21, r20
    4aa8:	43 2f       	mov	r20, r19
    4aaa:	32 2f       	mov	r19, r18
    4aac:	22 27       	eor	r18, r18
    4aae:	08 50       	subi	r16, 0x08	; 8
    4ab0:	f4 cf       	rjmp	.-24     	; 0x4a9a <__ashldi3+0x2>
    4ab2:	22 0f       	add	r18, r18
    4ab4:	33 1f       	adc	r19, r19
    4ab6:	44 1f       	adc	r20, r20
    4ab8:	55 1f       	adc	r21, r21
    4aba:	66 1f       	adc	r22, r22
    4abc:	77 1f       	adc	r23, r23
    4abe:	88 1f       	adc	r24, r24
    4ac0:	99 1f       	adc	r25, r25
    4ac2:	0a 95       	dec	r16
    4ac4:	b2 f7       	brpl	.-20     	; 0x4ab2 <__ashldi3+0x1a>
    4ac6:	0f 91       	pop	r16
    4ac8:	08 95       	ret

00004aca <__ashrdi3>:
    4aca:	97 fb       	bst	r25, 7
    4acc:	10 f8       	bld	r1, 0

00004ace <__lshrdi3>:
    4ace:	16 94       	lsr	r1
    4ad0:	00 08       	sbc	r0, r0
    4ad2:	0f 93       	push	r16
    4ad4:	08 30       	cpi	r16, 0x08	; 8
    4ad6:	98 f0       	brcs	.+38     	; 0x4afe <__lshrdi3+0x30>
    4ad8:	08 50       	subi	r16, 0x08	; 8
    4ada:	23 2f       	mov	r18, r19
    4adc:	34 2f       	mov	r19, r20
    4ade:	45 2f       	mov	r20, r21
    4ae0:	56 2f       	mov	r21, r22
    4ae2:	67 2f       	mov	r22, r23
    4ae4:	78 2f       	mov	r23, r24
    4ae6:	89 2f       	mov	r24, r25
    4ae8:	90 2d       	mov	r25, r0
    4aea:	f4 cf       	rjmp	.-24     	; 0x4ad4 <__lshrdi3+0x6>
    4aec:	05 94       	asr	r0
    4aee:	97 95       	ror	r25
    4af0:	87 95       	ror	r24
    4af2:	77 95       	ror	r23
    4af4:	67 95       	ror	r22
    4af6:	57 95       	ror	r21
    4af8:	47 95       	ror	r20
    4afa:	37 95       	ror	r19
    4afc:	27 95       	ror	r18
    4afe:	0a 95       	dec	r16
    4b00:	aa f7       	brpl	.-22     	; 0x4aec <__lshrdi3+0x1e>
    4b02:	0f 91       	pop	r16
    4b04:	08 95       	ret

00004b06 <__adddi3>:
    4b06:	2a 0d       	add	r18, r10
    4b08:	3b 1d       	adc	r19, r11
    4b0a:	4c 1d       	adc	r20, r12
    4b0c:	5d 1d       	adc	r21, r13
    4b0e:	6e 1d       	adc	r22, r14
    4b10:	7f 1d       	adc	r23, r15
    4b12:	80 1f       	adc	r24, r16
    4b14:	91 1f       	adc	r25, r17
    4b16:	08 95       	ret

00004b18 <__subdi3>:
    4b18:	2a 19       	sub	r18, r10
    4b1a:	3b 09       	sbc	r19, r11
    4b1c:	4c 09       	sbc	r20, r12
    4b1e:	5d 09       	sbc	r21, r13
    4b20:	6e 09       	sbc	r22, r14
    4b22:	7f 09       	sbc	r23, r15
    4b24:	80 0b       	sbc	r24, r16
    4b26:	91 0b       	sbc	r25, r17
    4b28:	08 95       	ret

00004b2a <__umulhisi3>:
    4b2a:	a2 9f       	mul	r26, r18
    4b2c:	b0 01       	movw	r22, r0
    4b2e:	b3 9f       	mul	r27, r19
    4b30:	c0 01       	movw	r24, r0
    4b32:	a3 9f       	mul	r26, r19
    4b34:	70 0d       	add	r23, r0
    4b36:	81 1d       	adc	r24, r1
    4b38:	11 24       	eor	r1, r1
    4b3a:	91 1d       	adc	r25, r1
    4b3c:	b2 9f       	mul	r27, r18
    4b3e:	70 0d       	add	r23, r0
    4b40:	81 1d       	adc	r24, r1
    4b42:	11 24       	eor	r1, r1
    4b44:	91 1d       	adc	r25, r1
    4b46:	08 95       	ret

00004b48 <strcat_P>:
    4b48:	fb 01       	movw	r30, r22
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	0d 90       	ld	r0, X+
    4b4e:	00 20       	and	r0, r0
    4b50:	e9 f7       	brne	.-6      	; 0x4b4c <strcat_P+0x4>
    4b52:	11 97       	sbiw	r26, 0x01	; 1
    4b54:	05 90       	lpm	r0, Z+
    4b56:	0d 92       	st	X+, r0
    4b58:	00 20       	and	r0, r0
    4b5a:	e1 f7       	brne	.-8      	; 0x4b54 <strcat_P+0xc>
    4b5c:	08 95       	ret

00004b5e <sprintf>:
    4b5e:	ae e0       	ldi	r26, 0x0E	; 14
    4b60:	b0 e0       	ldi	r27, 0x00	; 0
    4b62:	e5 eb       	ldi	r30, 0xB5	; 181
    4b64:	f5 e2       	ldi	r31, 0x25	; 37
    4b66:	0c 94 57 28 	jmp	0x50ae	; 0x50ae <__prologue_saves__+0x1c>
    4b6a:	0d 89       	ldd	r16, Y+21	; 0x15
    4b6c:	1e 89       	ldd	r17, Y+22	; 0x16
    4b6e:	86 e0       	ldi	r24, 0x06	; 6
    4b70:	8c 83       	std	Y+4, r24	; 0x04
    4b72:	1a 83       	std	Y+2, r17	; 0x02
    4b74:	09 83       	std	Y+1, r16	; 0x01
    4b76:	8f ef       	ldi	r24, 0xFF	; 255
    4b78:	9f e7       	ldi	r25, 0x7F	; 127
    4b7a:	9e 83       	std	Y+6, r25	; 0x06
    4b7c:	8d 83       	std	Y+5, r24	; 0x05
    4b7e:	ae 01       	movw	r20, r28
    4b80:	47 5e       	subi	r20, 0xE7	; 231
    4b82:	5f 4f       	sbci	r21, 0xFF	; 255
    4b84:	6f 89       	ldd	r22, Y+23	; 0x17
    4b86:	78 8d       	ldd	r23, Y+24	; 0x18
    4b88:	ce 01       	movw	r24, r28
    4b8a:	01 96       	adiw	r24, 0x01	; 1
    4b8c:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <vfprintf>
    4b90:	ef 81       	ldd	r30, Y+7	; 0x07
    4b92:	f8 85       	ldd	r31, Y+8	; 0x08
    4b94:	e0 0f       	add	r30, r16
    4b96:	f1 1f       	adc	r31, r17
    4b98:	10 82       	st	Z, r1
    4b9a:	2e 96       	adiw	r28, 0x0e	; 14
    4b9c:	e4 e0       	ldi	r30, 0x04	; 4
    4b9e:	0c 94 73 28 	jmp	0x50e6	; 0x50e6 <__epilogue_restores__+0x1c>

00004ba2 <vfprintf>:
    4ba2:	ac e0       	ldi	r26, 0x0C	; 12
    4ba4:	b0 e0       	ldi	r27, 0x00	; 0
    4ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    4ba8:	f5 e2       	ldi	r31, 0x25	; 37
    4baa:	0c 94 49 28 	jmp	0x5092	; 0x5092 <__prologue_saves__>
    4bae:	7c 01       	movw	r14, r24
    4bb0:	6b 01       	movw	r12, r22
    4bb2:	8a 01       	movw	r16, r20
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	17 82       	std	Z+7, r1	; 0x07
    4bb8:	16 82       	std	Z+6, r1	; 0x06
    4bba:	83 81       	ldd	r24, Z+3	; 0x03
    4bbc:	81 ff       	sbrs	r24, 1
    4bbe:	bd c1       	rjmp	.+890    	; 0x4f3a <vfprintf+0x398>
    4bc0:	ce 01       	movw	r24, r28
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	4c 01       	movw	r8, r24
    4bc6:	f7 01       	movw	r30, r14
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	f6 01       	movw	r30, r12
    4bcc:	93 fd       	sbrc	r25, 3
    4bce:	85 91       	lpm	r24, Z+
    4bd0:	93 ff       	sbrs	r25, 3
    4bd2:	81 91       	ld	r24, Z+
    4bd4:	6f 01       	movw	r12, r30
    4bd6:	88 23       	and	r24, r24
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <vfprintf+0x3a>
    4bda:	ab c1       	rjmp	.+854    	; 0x4f32 <vfprintf+0x390>
    4bdc:	85 32       	cpi	r24, 0x25	; 37
    4bde:	39 f4       	brne	.+14     	; 0x4bee <vfprintf+0x4c>
    4be0:	93 fd       	sbrc	r25, 3
    4be2:	85 91       	lpm	r24, Z+
    4be4:	93 ff       	sbrs	r25, 3
    4be6:	81 91       	ld	r24, Z+
    4be8:	6f 01       	movw	r12, r30
    4bea:	85 32       	cpi	r24, 0x25	; 37
    4bec:	29 f4       	brne	.+10     	; 0x4bf8 <vfprintf+0x56>
    4bee:	b7 01       	movw	r22, r14
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4bf6:	e7 cf       	rjmp	.-50     	; 0x4bc6 <vfprintf+0x24>
    4bf8:	51 2c       	mov	r5, r1
    4bfa:	31 2c       	mov	r3, r1
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	20 32       	cpi	r18, 0x20	; 32
    4c00:	a0 f4       	brcc	.+40     	; 0x4c2a <vfprintf+0x88>
    4c02:	8b 32       	cpi	r24, 0x2B	; 43
    4c04:	69 f0       	breq	.+26     	; 0x4c20 <vfprintf+0x7e>
    4c06:	30 f4       	brcc	.+12     	; 0x4c14 <vfprintf+0x72>
    4c08:	80 32       	cpi	r24, 0x20	; 32
    4c0a:	59 f0       	breq	.+22     	; 0x4c22 <vfprintf+0x80>
    4c0c:	83 32       	cpi	r24, 0x23	; 35
    4c0e:	69 f4       	brne	.+26     	; 0x4c2a <vfprintf+0x88>
    4c10:	20 61       	ori	r18, 0x10	; 16
    4c12:	2c c0       	rjmp	.+88     	; 0x4c6c <vfprintf+0xca>
    4c14:	8d 32       	cpi	r24, 0x2D	; 45
    4c16:	39 f0       	breq	.+14     	; 0x4c26 <vfprintf+0x84>
    4c18:	80 33       	cpi	r24, 0x30	; 48
    4c1a:	39 f4       	brne	.+14     	; 0x4c2a <vfprintf+0x88>
    4c1c:	21 60       	ori	r18, 0x01	; 1
    4c1e:	26 c0       	rjmp	.+76     	; 0x4c6c <vfprintf+0xca>
    4c20:	22 60       	ori	r18, 0x02	; 2
    4c22:	24 60       	ori	r18, 0x04	; 4
    4c24:	23 c0       	rjmp	.+70     	; 0x4c6c <vfprintf+0xca>
    4c26:	28 60       	ori	r18, 0x08	; 8
    4c28:	21 c0       	rjmp	.+66     	; 0x4c6c <vfprintf+0xca>
    4c2a:	27 fd       	sbrc	r18, 7
    4c2c:	27 c0       	rjmp	.+78     	; 0x4c7c <vfprintf+0xda>
    4c2e:	30 ed       	ldi	r19, 0xD0	; 208
    4c30:	38 0f       	add	r19, r24
    4c32:	3a 30       	cpi	r19, 0x0A	; 10
    4c34:	78 f4       	brcc	.+30     	; 0x4c54 <vfprintf+0xb2>
    4c36:	26 ff       	sbrs	r18, 6
    4c38:	06 c0       	rjmp	.+12     	; 0x4c46 <vfprintf+0xa4>
    4c3a:	fa e0       	ldi	r31, 0x0A	; 10
    4c3c:	5f 9e       	mul	r5, r31
    4c3e:	30 0d       	add	r19, r0
    4c40:	11 24       	eor	r1, r1
    4c42:	53 2e       	mov	r5, r19
    4c44:	13 c0       	rjmp	.+38     	; 0x4c6c <vfprintf+0xca>
    4c46:	8a e0       	ldi	r24, 0x0A	; 10
    4c48:	38 9e       	mul	r3, r24
    4c4a:	30 0d       	add	r19, r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	33 2e       	mov	r3, r19
    4c50:	20 62       	ori	r18, 0x20	; 32
    4c52:	0c c0       	rjmp	.+24     	; 0x4c6c <vfprintf+0xca>
    4c54:	8e 32       	cpi	r24, 0x2E	; 46
    4c56:	21 f4       	brne	.+8      	; 0x4c60 <vfprintf+0xbe>
    4c58:	26 fd       	sbrc	r18, 6
    4c5a:	6b c1       	rjmp	.+726    	; 0x4f32 <vfprintf+0x390>
    4c5c:	20 64       	ori	r18, 0x40	; 64
    4c5e:	06 c0       	rjmp	.+12     	; 0x4c6c <vfprintf+0xca>
    4c60:	8c 36       	cpi	r24, 0x6C	; 108
    4c62:	11 f4       	brne	.+4      	; 0x4c68 <vfprintf+0xc6>
    4c64:	20 68       	ori	r18, 0x80	; 128
    4c66:	02 c0       	rjmp	.+4      	; 0x4c6c <vfprintf+0xca>
    4c68:	88 36       	cpi	r24, 0x68	; 104
    4c6a:	41 f4       	brne	.+16     	; 0x4c7c <vfprintf+0xda>
    4c6c:	f6 01       	movw	r30, r12
    4c6e:	93 fd       	sbrc	r25, 3
    4c70:	85 91       	lpm	r24, Z+
    4c72:	93 ff       	sbrs	r25, 3
    4c74:	81 91       	ld	r24, Z+
    4c76:	6f 01       	movw	r12, r30
    4c78:	81 11       	cpse	r24, r1
    4c7a:	c1 cf       	rjmp	.-126    	; 0x4bfe <vfprintf+0x5c>
    4c7c:	98 2f       	mov	r25, r24
    4c7e:	9f 7d       	andi	r25, 0xDF	; 223
    4c80:	95 54       	subi	r25, 0x45	; 69
    4c82:	93 30       	cpi	r25, 0x03	; 3
    4c84:	28 f4       	brcc	.+10     	; 0x4c90 <vfprintf+0xee>
    4c86:	0c 5f       	subi	r16, 0xFC	; 252
    4c88:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8a:	ff e3       	ldi	r31, 0x3F	; 63
    4c8c:	f9 83       	std	Y+1, r31	; 0x01
    4c8e:	0d c0       	rjmp	.+26     	; 0x4caa <vfprintf+0x108>
    4c90:	83 36       	cpi	r24, 0x63	; 99
    4c92:	31 f0       	breq	.+12     	; 0x4ca0 <vfprintf+0xfe>
    4c94:	83 37       	cpi	r24, 0x73	; 115
    4c96:	71 f0       	breq	.+28     	; 0x4cb4 <vfprintf+0x112>
    4c98:	83 35       	cpi	r24, 0x53	; 83
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <vfprintf+0xfc>
    4c9c:	5b c0       	rjmp	.+182    	; 0x4d54 <vfprintf+0x1b2>
    4c9e:	22 c0       	rjmp	.+68     	; 0x4ce4 <vfprintf+0x142>
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	80 81       	ld	r24, Z
    4ca4:	89 83       	std	Y+1, r24	; 0x01
    4ca6:	0e 5f       	subi	r16, 0xFE	; 254
    4ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    4caa:	44 24       	eor	r4, r4
    4cac:	43 94       	inc	r4
    4cae:	51 2c       	mov	r5, r1
    4cb0:	54 01       	movw	r10, r8
    4cb2:	15 c0       	rjmp	.+42     	; 0x4cde <vfprintf+0x13c>
    4cb4:	38 01       	movw	r6, r16
    4cb6:	f2 e0       	ldi	r31, 0x02	; 2
    4cb8:	6f 0e       	add	r6, r31
    4cba:	71 1c       	adc	r7, r1
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	a0 80       	ld	r10, Z
    4cc0:	b1 80       	ldd	r11, Z+1	; 0x01
    4cc2:	26 ff       	sbrs	r18, 6
    4cc4:	03 c0       	rjmp	.+6      	; 0x4ccc <vfprintf+0x12a>
    4cc6:	65 2d       	mov	r22, r5
    4cc8:	70 e0       	ldi	r23, 0x00	; 0
    4cca:	02 c0       	rjmp	.+4      	; 0x4cd0 <vfprintf+0x12e>
    4ccc:	6f ef       	ldi	r22, 0xFF	; 255
    4cce:	7f ef       	ldi	r23, 0xFF	; 255
    4cd0:	c5 01       	movw	r24, r10
    4cd2:	2c 87       	std	Y+12, r18	; 0x0c
    4cd4:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <strnlen>
    4cd8:	2c 01       	movw	r4, r24
    4cda:	83 01       	movw	r16, r6
    4cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    4cde:	2f 77       	andi	r18, 0x7F	; 127
    4ce0:	22 2e       	mov	r2, r18
    4ce2:	17 c0       	rjmp	.+46     	; 0x4d12 <vfprintf+0x170>
    4ce4:	38 01       	movw	r6, r16
    4ce6:	f2 e0       	ldi	r31, 0x02	; 2
    4ce8:	6f 0e       	add	r6, r31
    4cea:	71 1c       	adc	r7, r1
    4cec:	f8 01       	movw	r30, r16
    4cee:	a0 80       	ld	r10, Z
    4cf0:	b1 80       	ldd	r11, Z+1	; 0x01
    4cf2:	26 ff       	sbrs	r18, 6
    4cf4:	03 c0       	rjmp	.+6      	; 0x4cfc <vfprintf+0x15a>
    4cf6:	65 2d       	mov	r22, r5
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	02 c0       	rjmp	.+4      	; 0x4d00 <vfprintf+0x15e>
    4cfc:	6f ef       	ldi	r22, 0xFF	; 255
    4cfe:	7f ef       	ldi	r23, 0xFF	; 255
    4d00:	c5 01       	movw	r24, r10
    4d02:	2c 87       	std	Y+12, r18	; 0x0c
    4d04:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <strnlen_P>
    4d08:	2c 01       	movw	r4, r24
    4d0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d0c:	20 68       	ori	r18, 0x80	; 128
    4d0e:	22 2e       	mov	r2, r18
    4d10:	83 01       	movw	r16, r6
    4d12:	23 fc       	sbrc	r2, 3
    4d14:	1b c0       	rjmp	.+54     	; 0x4d4c <vfprintf+0x1aa>
    4d16:	83 2d       	mov	r24, r3
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	48 16       	cp	r4, r24
    4d1c:	59 06       	cpc	r5, r25
    4d1e:	b0 f4       	brcc	.+44     	; 0x4d4c <vfprintf+0x1aa>
    4d20:	b7 01       	movw	r22, r14
    4d22:	80 e2       	ldi	r24, 0x20	; 32
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4d2a:	3a 94       	dec	r3
    4d2c:	f4 cf       	rjmp	.-24     	; 0x4d16 <vfprintf+0x174>
    4d2e:	f5 01       	movw	r30, r10
    4d30:	27 fc       	sbrc	r2, 7
    4d32:	85 91       	lpm	r24, Z+
    4d34:	27 fe       	sbrs	r2, 7
    4d36:	81 91       	ld	r24, Z+
    4d38:	5f 01       	movw	r10, r30
    4d3a:	b7 01       	movw	r22, r14
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4d42:	31 10       	cpse	r3, r1
    4d44:	3a 94       	dec	r3
    4d46:	f1 e0       	ldi	r31, 0x01	; 1
    4d48:	4f 1a       	sub	r4, r31
    4d4a:	51 08       	sbc	r5, r1
    4d4c:	41 14       	cp	r4, r1
    4d4e:	51 04       	cpc	r5, r1
    4d50:	71 f7       	brne	.-36     	; 0x4d2e <vfprintf+0x18c>
    4d52:	e5 c0       	rjmp	.+458    	; 0x4f1e <vfprintf+0x37c>
    4d54:	84 36       	cpi	r24, 0x64	; 100
    4d56:	11 f0       	breq	.+4      	; 0x4d5c <vfprintf+0x1ba>
    4d58:	89 36       	cpi	r24, 0x69	; 105
    4d5a:	39 f5       	brne	.+78     	; 0x4daa <vfprintf+0x208>
    4d5c:	f8 01       	movw	r30, r16
    4d5e:	27 ff       	sbrs	r18, 7
    4d60:	07 c0       	rjmp	.+14     	; 0x4d70 <vfprintf+0x1ce>
    4d62:	60 81       	ld	r22, Z
    4d64:	71 81       	ldd	r23, Z+1	; 0x01
    4d66:	82 81       	ldd	r24, Z+2	; 0x02
    4d68:	93 81       	ldd	r25, Z+3	; 0x03
    4d6a:	0c 5f       	subi	r16, 0xFC	; 252
    4d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d6e:	08 c0       	rjmp	.+16     	; 0x4d80 <vfprintf+0x1de>
    4d70:	60 81       	ld	r22, Z
    4d72:	71 81       	ldd	r23, Z+1	; 0x01
    4d74:	88 27       	eor	r24, r24
    4d76:	77 fd       	sbrc	r23, 7
    4d78:	80 95       	com	r24
    4d7a:	98 2f       	mov	r25, r24
    4d7c:	0e 5f       	subi	r16, 0xFE	; 254
    4d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d80:	2f 76       	andi	r18, 0x6F	; 111
    4d82:	b2 2e       	mov	r11, r18
    4d84:	97 ff       	sbrs	r25, 7
    4d86:	09 c0       	rjmp	.+18     	; 0x4d9a <vfprintf+0x1f8>
    4d88:	90 95       	com	r25
    4d8a:	80 95       	com	r24
    4d8c:	70 95       	com	r23
    4d8e:	61 95       	neg	r22
    4d90:	7f 4f       	sbci	r23, 0xFF	; 255
    4d92:	8f 4f       	sbci	r24, 0xFF	; 255
    4d94:	9f 4f       	sbci	r25, 0xFF	; 255
    4d96:	20 68       	ori	r18, 0x80	; 128
    4d98:	b2 2e       	mov	r11, r18
    4d9a:	2a e0       	ldi	r18, 0x0A	; 10
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	a4 01       	movw	r20, r8
    4da0:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <__ultoa_invert>
    4da4:	a8 2e       	mov	r10, r24
    4da6:	a8 18       	sub	r10, r8
    4da8:	44 c0       	rjmp	.+136    	; 0x4e32 <vfprintf+0x290>
    4daa:	85 37       	cpi	r24, 0x75	; 117
    4dac:	29 f4       	brne	.+10     	; 0x4db8 <vfprintf+0x216>
    4dae:	2f 7e       	andi	r18, 0xEF	; 239
    4db0:	b2 2e       	mov	r11, r18
    4db2:	2a e0       	ldi	r18, 0x0A	; 10
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	25 c0       	rjmp	.+74     	; 0x4e02 <vfprintf+0x260>
    4db8:	f2 2f       	mov	r31, r18
    4dba:	f9 7f       	andi	r31, 0xF9	; 249
    4dbc:	bf 2e       	mov	r11, r31
    4dbe:	8f 36       	cpi	r24, 0x6F	; 111
    4dc0:	c1 f0       	breq	.+48     	; 0x4df2 <vfprintf+0x250>
    4dc2:	18 f4       	brcc	.+6      	; 0x4dca <vfprintf+0x228>
    4dc4:	88 35       	cpi	r24, 0x58	; 88
    4dc6:	79 f0       	breq	.+30     	; 0x4de6 <vfprintf+0x244>
    4dc8:	b4 c0       	rjmp	.+360    	; 0x4f32 <vfprintf+0x390>
    4dca:	80 37       	cpi	r24, 0x70	; 112
    4dcc:	19 f0       	breq	.+6      	; 0x4dd4 <vfprintf+0x232>
    4dce:	88 37       	cpi	r24, 0x78	; 120
    4dd0:	21 f0       	breq	.+8      	; 0x4dda <vfprintf+0x238>
    4dd2:	af c0       	rjmp	.+350    	; 0x4f32 <vfprintf+0x390>
    4dd4:	2f 2f       	mov	r18, r31
    4dd6:	20 61       	ori	r18, 0x10	; 16
    4dd8:	b2 2e       	mov	r11, r18
    4dda:	b4 fe       	sbrs	r11, 4
    4ddc:	0d c0       	rjmp	.+26     	; 0x4df8 <vfprintf+0x256>
    4dde:	8b 2d       	mov	r24, r11
    4de0:	84 60       	ori	r24, 0x04	; 4
    4de2:	b8 2e       	mov	r11, r24
    4de4:	09 c0       	rjmp	.+18     	; 0x4df8 <vfprintf+0x256>
    4de6:	24 ff       	sbrs	r18, 4
    4de8:	0a c0       	rjmp	.+20     	; 0x4dfe <vfprintf+0x25c>
    4dea:	9f 2f       	mov	r25, r31
    4dec:	96 60       	ori	r25, 0x06	; 6
    4dee:	b9 2e       	mov	r11, r25
    4df0:	06 c0       	rjmp	.+12     	; 0x4dfe <vfprintf+0x25c>
    4df2:	28 e0       	ldi	r18, 0x08	; 8
    4df4:	30 e0       	ldi	r19, 0x00	; 0
    4df6:	05 c0       	rjmp	.+10     	; 0x4e02 <vfprintf+0x260>
    4df8:	20 e1       	ldi	r18, 0x10	; 16
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	02 c0       	rjmp	.+4      	; 0x4e02 <vfprintf+0x260>
    4dfe:	20 e1       	ldi	r18, 0x10	; 16
    4e00:	32 e0       	ldi	r19, 0x02	; 2
    4e02:	f8 01       	movw	r30, r16
    4e04:	b7 fe       	sbrs	r11, 7
    4e06:	07 c0       	rjmp	.+14     	; 0x4e16 <vfprintf+0x274>
    4e08:	60 81       	ld	r22, Z
    4e0a:	71 81       	ldd	r23, Z+1	; 0x01
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	0c 5f       	subi	r16, 0xFC	; 252
    4e12:	1f 4f       	sbci	r17, 0xFF	; 255
    4e14:	06 c0       	rjmp	.+12     	; 0x4e22 <vfprintf+0x280>
    4e16:	60 81       	ld	r22, Z
    4e18:	71 81       	ldd	r23, Z+1	; 0x01
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	0e 5f       	subi	r16, 0xFE	; 254
    4e20:	1f 4f       	sbci	r17, 0xFF	; 255
    4e22:	a4 01       	movw	r20, r8
    4e24:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <__ultoa_invert>
    4e28:	a8 2e       	mov	r10, r24
    4e2a:	a8 18       	sub	r10, r8
    4e2c:	fb 2d       	mov	r31, r11
    4e2e:	ff 77       	andi	r31, 0x7F	; 127
    4e30:	bf 2e       	mov	r11, r31
    4e32:	b6 fe       	sbrs	r11, 6
    4e34:	0b c0       	rjmp	.+22     	; 0x4e4c <vfprintf+0x2aa>
    4e36:	2b 2d       	mov	r18, r11
    4e38:	2e 7f       	andi	r18, 0xFE	; 254
    4e3a:	a5 14       	cp	r10, r5
    4e3c:	50 f4       	brcc	.+20     	; 0x4e52 <vfprintf+0x2b0>
    4e3e:	b4 fe       	sbrs	r11, 4
    4e40:	0a c0       	rjmp	.+20     	; 0x4e56 <vfprintf+0x2b4>
    4e42:	b2 fc       	sbrc	r11, 2
    4e44:	08 c0       	rjmp	.+16     	; 0x4e56 <vfprintf+0x2b4>
    4e46:	2b 2d       	mov	r18, r11
    4e48:	2e 7e       	andi	r18, 0xEE	; 238
    4e4a:	05 c0       	rjmp	.+10     	; 0x4e56 <vfprintf+0x2b4>
    4e4c:	7a 2c       	mov	r7, r10
    4e4e:	2b 2d       	mov	r18, r11
    4e50:	03 c0       	rjmp	.+6      	; 0x4e58 <vfprintf+0x2b6>
    4e52:	7a 2c       	mov	r7, r10
    4e54:	01 c0       	rjmp	.+2      	; 0x4e58 <vfprintf+0x2b6>
    4e56:	75 2c       	mov	r7, r5
    4e58:	24 ff       	sbrs	r18, 4
    4e5a:	0d c0       	rjmp	.+26     	; 0x4e76 <vfprintf+0x2d4>
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	ea 0d       	add	r30, r10
    4e60:	f1 1d       	adc	r31, r1
    4e62:	80 81       	ld	r24, Z
    4e64:	80 33       	cpi	r24, 0x30	; 48
    4e66:	11 f4       	brne	.+4      	; 0x4e6c <vfprintf+0x2ca>
    4e68:	29 7e       	andi	r18, 0xE9	; 233
    4e6a:	09 c0       	rjmp	.+18     	; 0x4e7e <vfprintf+0x2dc>
    4e6c:	22 ff       	sbrs	r18, 2
    4e6e:	06 c0       	rjmp	.+12     	; 0x4e7c <vfprintf+0x2da>
    4e70:	73 94       	inc	r7
    4e72:	73 94       	inc	r7
    4e74:	04 c0       	rjmp	.+8      	; 0x4e7e <vfprintf+0x2dc>
    4e76:	82 2f       	mov	r24, r18
    4e78:	86 78       	andi	r24, 0x86	; 134
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <vfprintf+0x2dc>
    4e7c:	73 94       	inc	r7
    4e7e:	23 fd       	sbrc	r18, 3
    4e80:	13 c0       	rjmp	.+38     	; 0x4ea8 <vfprintf+0x306>
    4e82:	20 ff       	sbrs	r18, 0
    4e84:	06 c0       	rjmp	.+12     	; 0x4e92 <vfprintf+0x2f0>
    4e86:	5a 2c       	mov	r5, r10
    4e88:	73 14       	cp	r7, r3
    4e8a:	18 f4       	brcc	.+6      	; 0x4e92 <vfprintf+0x2f0>
    4e8c:	53 0c       	add	r5, r3
    4e8e:	57 18       	sub	r5, r7
    4e90:	73 2c       	mov	r7, r3
    4e92:	73 14       	cp	r7, r3
    4e94:	68 f4       	brcc	.+26     	; 0x4eb0 <vfprintf+0x30e>
    4e96:	b7 01       	movw	r22, r14
    4e98:	80 e2       	ldi	r24, 0x20	; 32
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	2c 87       	std	Y+12, r18	; 0x0c
    4e9e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4ea2:	73 94       	inc	r7
    4ea4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ea6:	f5 cf       	rjmp	.-22     	; 0x4e92 <vfprintf+0x2f0>
    4ea8:	73 14       	cp	r7, r3
    4eaa:	10 f4       	brcc	.+4      	; 0x4eb0 <vfprintf+0x30e>
    4eac:	37 18       	sub	r3, r7
    4eae:	01 c0       	rjmp	.+2      	; 0x4eb2 <vfprintf+0x310>
    4eb0:	31 2c       	mov	r3, r1
    4eb2:	24 ff       	sbrs	r18, 4
    4eb4:	12 c0       	rjmp	.+36     	; 0x4eda <vfprintf+0x338>
    4eb6:	b7 01       	movw	r22, r14
    4eb8:	80 e3       	ldi	r24, 0x30	; 48
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	2c 87       	std	Y+12, r18	; 0x0c
    4ebe:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4ec2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ec4:	22 ff       	sbrs	r18, 2
    4ec6:	17 c0       	rjmp	.+46     	; 0x4ef6 <vfprintf+0x354>
    4ec8:	21 ff       	sbrs	r18, 1
    4eca:	03 c0       	rjmp	.+6      	; 0x4ed2 <vfprintf+0x330>
    4ecc:	88 e5       	ldi	r24, 0x58	; 88
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <vfprintf+0x334>
    4ed2:	88 e7       	ldi	r24, 0x78	; 120
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	b7 01       	movw	r22, r14
    4ed8:	0c c0       	rjmp	.+24     	; 0x4ef2 <vfprintf+0x350>
    4eda:	82 2f       	mov	r24, r18
    4edc:	86 78       	andi	r24, 0x86	; 134
    4ede:	59 f0       	breq	.+22     	; 0x4ef6 <vfprintf+0x354>
    4ee0:	21 fd       	sbrc	r18, 1
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <vfprintf+0x346>
    4ee4:	80 e2       	ldi	r24, 0x20	; 32
    4ee6:	01 c0       	rjmp	.+2      	; 0x4eea <vfprintf+0x348>
    4ee8:	8b e2       	ldi	r24, 0x2B	; 43
    4eea:	27 fd       	sbrc	r18, 7
    4eec:	8d e2       	ldi	r24, 0x2D	; 45
    4eee:	b7 01       	movw	r22, r14
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4ef6:	a5 14       	cp	r10, r5
    4ef8:	38 f4       	brcc	.+14     	; 0x4f08 <vfprintf+0x366>
    4efa:	b7 01       	movw	r22, r14
    4efc:	80 e3       	ldi	r24, 0x30	; 48
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4f04:	5a 94       	dec	r5
    4f06:	f7 cf       	rjmp	.-18     	; 0x4ef6 <vfprintf+0x354>
    4f08:	aa 94       	dec	r10
    4f0a:	f4 01       	movw	r30, r8
    4f0c:	ea 0d       	add	r30, r10
    4f0e:	f1 1d       	adc	r31, r1
    4f10:	80 81       	ld	r24, Z
    4f12:	b7 01       	movw	r22, r14
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4f1a:	a1 10       	cpse	r10, r1
    4f1c:	f5 cf       	rjmp	.-22     	; 0x4f08 <vfprintf+0x366>
    4f1e:	33 20       	and	r3, r3
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <vfprintf+0x382>
    4f22:	51 ce       	rjmp	.-862    	; 0x4bc6 <vfprintf+0x24>
    4f24:	b7 01       	movw	r22, r14
    4f26:	80 e2       	ldi	r24, 0x20	; 32
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <fputc>
    4f2e:	3a 94       	dec	r3
    4f30:	f6 cf       	rjmp	.-20     	; 0x4f1e <vfprintf+0x37c>
    4f32:	f7 01       	movw	r30, r14
    4f34:	86 81       	ldd	r24, Z+6	; 0x06
    4f36:	97 81       	ldd	r25, Z+7	; 0x07
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <vfprintf+0x39c>
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	9f ef       	ldi	r25, 0xFF	; 255
    4f3e:	2c 96       	adiw	r28, 0x0c	; 12
    4f40:	e2 e1       	ldi	r30, 0x12	; 18
    4f42:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <__epilogue_restores__>

00004f46 <strnlen_P>:
    4f46:	fc 01       	movw	r30, r24
    4f48:	05 90       	lpm	r0, Z+
    4f4a:	61 50       	subi	r22, 0x01	; 1
    4f4c:	70 40       	sbci	r23, 0x00	; 0
    4f4e:	01 10       	cpse	r0, r1
    4f50:	d8 f7       	brcc	.-10     	; 0x4f48 <strnlen_P+0x2>
    4f52:	80 95       	com	r24
    4f54:	90 95       	com	r25
    4f56:	8e 0f       	add	r24, r30
    4f58:	9f 1f       	adc	r25, r31
    4f5a:	08 95       	ret

00004f5c <strnlen>:
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	61 50       	subi	r22, 0x01	; 1
    4f60:	70 40       	sbci	r23, 0x00	; 0
    4f62:	01 90       	ld	r0, Z+
    4f64:	01 10       	cpse	r0, r1
    4f66:	d8 f7       	brcc	.-10     	; 0x4f5e <strnlen+0x2>
    4f68:	80 95       	com	r24
    4f6a:	90 95       	com	r25
    4f6c:	8e 0f       	add	r24, r30
    4f6e:	9f 1f       	adc	r25, r31
    4f70:	08 95       	ret

00004f72 <fputc>:
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
    4f7a:	18 2f       	mov	r17, r24
    4f7c:	09 2f       	mov	r16, r25
    4f7e:	eb 01       	movw	r28, r22
    4f80:	8b 81       	ldd	r24, Y+3	; 0x03
    4f82:	81 fd       	sbrc	r24, 1
    4f84:	03 c0       	rjmp	.+6      	; 0x4f8c <fputc+0x1a>
    4f86:	8f ef       	ldi	r24, 0xFF	; 255
    4f88:	9f ef       	ldi	r25, 0xFF	; 255
    4f8a:	20 c0       	rjmp	.+64     	; 0x4fcc <fputc+0x5a>
    4f8c:	82 ff       	sbrs	r24, 2
    4f8e:	10 c0       	rjmp	.+32     	; 0x4fb0 <fputc+0x3e>
    4f90:	4e 81       	ldd	r20, Y+6	; 0x06
    4f92:	5f 81       	ldd	r21, Y+7	; 0x07
    4f94:	2c 81       	ldd	r18, Y+4	; 0x04
    4f96:	3d 81       	ldd	r19, Y+5	; 0x05
    4f98:	42 17       	cp	r20, r18
    4f9a:	53 07       	cpc	r21, r19
    4f9c:	7c f4       	brge	.+30     	; 0x4fbc <fputc+0x4a>
    4f9e:	e8 81       	ld	r30, Y
    4fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa2:	9f 01       	movw	r18, r30
    4fa4:	2f 5f       	subi	r18, 0xFF	; 255
    4fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa8:	39 83       	std	Y+1, r19	; 0x01
    4faa:	28 83       	st	Y, r18
    4fac:	10 83       	st	Z, r17
    4fae:	06 c0       	rjmp	.+12     	; 0x4fbc <fputc+0x4a>
    4fb0:	e8 85       	ldd	r30, Y+8	; 0x08
    4fb2:	f9 85       	ldd	r31, Y+9	; 0x09
    4fb4:	81 2f       	mov	r24, r17
    4fb6:	09 95       	icall
    4fb8:	89 2b       	or	r24, r25
    4fba:	29 f7       	brne	.-54     	; 0x4f86 <fputc+0x14>
    4fbc:	2e 81       	ldd	r18, Y+6	; 0x06
    4fbe:	3f 81       	ldd	r19, Y+7	; 0x07
    4fc0:	2f 5f       	subi	r18, 0xFF	; 255
    4fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc4:	3f 83       	std	Y+7, r19	; 0x07
    4fc6:	2e 83       	std	Y+6, r18	; 0x06
    4fc8:	81 2f       	mov	r24, r17
    4fca:	90 2f       	mov	r25, r16
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	1f 91       	pop	r17
    4fd2:	0f 91       	pop	r16
    4fd4:	08 95       	ret

00004fd6 <__ultoa_invert>:
    4fd6:	fa 01       	movw	r30, r20
    4fd8:	aa 27       	eor	r26, r26
    4fda:	28 30       	cpi	r18, 0x08	; 8
    4fdc:	51 f1       	breq	.+84     	; 0x5032 <__ultoa_invert+0x5c>
    4fde:	20 31       	cpi	r18, 0x10	; 16
    4fe0:	81 f1       	breq	.+96     	; 0x5042 <__ultoa_invert+0x6c>
    4fe2:	e8 94       	clt
    4fe4:	6f 93       	push	r22
    4fe6:	6e 7f       	andi	r22, 0xFE	; 254
    4fe8:	6e 5f       	subi	r22, 0xFE	; 254
    4fea:	7f 4f       	sbci	r23, 0xFF	; 255
    4fec:	8f 4f       	sbci	r24, 0xFF	; 255
    4fee:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff0:	af 4f       	sbci	r26, 0xFF	; 255
    4ff2:	b1 e0       	ldi	r27, 0x01	; 1
    4ff4:	3e d0       	rcall	.+124    	; 0x5072 <__ultoa_invert+0x9c>
    4ff6:	b4 e0       	ldi	r27, 0x04	; 4
    4ff8:	3c d0       	rcall	.+120    	; 0x5072 <__ultoa_invert+0x9c>
    4ffa:	67 0f       	add	r22, r23
    4ffc:	78 1f       	adc	r23, r24
    4ffe:	89 1f       	adc	r24, r25
    5000:	9a 1f       	adc	r25, r26
    5002:	a1 1d       	adc	r26, r1
    5004:	68 0f       	add	r22, r24
    5006:	79 1f       	adc	r23, r25
    5008:	8a 1f       	adc	r24, r26
    500a:	91 1d       	adc	r25, r1
    500c:	a1 1d       	adc	r26, r1
    500e:	6a 0f       	add	r22, r26
    5010:	71 1d       	adc	r23, r1
    5012:	81 1d       	adc	r24, r1
    5014:	91 1d       	adc	r25, r1
    5016:	a1 1d       	adc	r26, r1
    5018:	20 d0       	rcall	.+64     	; 0x505a <__ultoa_invert+0x84>
    501a:	09 f4       	brne	.+2      	; 0x501e <__ultoa_invert+0x48>
    501c:	68 94       	set
    501e:	3f 91       	pop	r19
    5020:	2a e0       	ldi	r18, 0x0A	; 10
    5022:	26 9f       	mul	r18, r22
    5024:	11 24       	eor	r1, r1
    5026:	30 19       	sub	r19, r0
    5028:	30 5d       	subi	r19, 0xD0	; 208
    502a:	31 93       	st	Z+, r19
    502c:	de f6       	brtc	.-74     	; 0x4fe4 <__ultoa_invert+0xe>
    502e:	cf 01       	movw	r24, r30
    5030:	08 95       	ret
    5032:	46 2f       	mov	r20, r22
    5034:	47 70       	andi	r20, 0x07	; 7
    5036:	40 5d       	subi	r20, 0xD0	; 208
    5038:	41 93       	st	Z+, r20
    503a:	b3 e0       	ldi	r27, 0x03	; 3
    503c:	0f d0       	rcall	.+30     	; 0x505c <__ultoa_invert+0x86>
    503e:	c9 f7       	brne	.-14     	; 0x5032 <__ultoa_invert+0x5c>
    5040:	f6 cf       	rjmp	.-20     	; 0x502e <__ultoa_invert+0x58>
    5042:	46 2f       	mov	r20, r22
    5044:	4f 70       	andi	r20, 0x0F	; 15
    5046:	40 5d       	subi	r20, 0xD0	; 208
    5048:	4a 33       	cpi	r20, 0x3A	; 58
    504a:	18 f0       	brcs	.+6      	; 0x5052 <__ultoa_invert+0x7c>
    504c:	49 5d       	subi	r20, 0xD9	; 217
    504e:	31 fd       	sbrc	r19, 1
    5050:	40 52       	subi	r20, 0x20	; 32
    5052:	41 93       	st	Z+, r20
    5054:	02 d0       	rcall	.+4      	; 0x505a <__ultoa_invert+0x84>
    5056:	a9 f7       	brne	.-22     	; 0x5042 <__ultoa_invert+0x6c>
    5058:	ea cf       	rjmp	.-44     	; 0x502e <__ultoa_invert+0x58>
    505a:	b4 e0       	ldi	r27, 0x04	; 4
    505c:	a6 95       	lsr	r26
    505e:	97 95       	ror	r25
    5060:	87 95       	ror	r24
    5062:	77 95       	ror	r23
    5064:	67 95       	ror	r22
    5066:	ba 95       	dec	r27
    5068:	c9 f7       	brne	.-14     	; 0x505c <__ultoa_invert+0x86>
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	61 05       	cpc	r22, r1
    506e:	71 05       	cpc	r23, r1
    5070:	08 95       	ret
    5072:	9b 01       	movw	r18, r22
    5074:	ac 01       	movw	r20, r24
    5076:	0a 2e       	mov	r0, r26
    5078:	06 94       	lsr	r0
    507a:	57 95       	ror	r21
    507c:	47 95       	ror	r20
    507e:	37 95       	ror	r19
    5080:	27 95       	ror	r18
    5082:	ba 95       	dec	r27
    5084:	c9 f7       	brne	.-14     	; 0x5078 <__ultoa_invert+0xa2>
    5086:	62 0f       	add	r22, r18
    5088:	73 1f       	adc	r23, r19
    508a:	84 1f       	adc	r24, r20
    508c:	95 1f       	adc	r25, r21
    508e:	a0 1d       	adc	r26, r0
    5090:	08 95       	ret

00005092 <__prologue_saves__>:
    5092:	2f 92       	push	r2
    5094:	3f 92       	push	r3
    5096:	4f 92       	push	r4
    5098:	5f 92       	push	r5
    509a:	6f 92       	push	r6
    509c:	7f 92       	push	r7
    509e:	8f 92       	push	r8
    50a0:	9f 92       	push	r9
    50a2:	af 92       	push	r10
    50a4:	bf 92       	push	r11
    50a6:	cf 92       	push	r12
    50a8:	df 92       	push	r13
    50aa:	ef 92       	push	r14
    50ac:	ff 92       	push	r15
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    50ba:	ca 1b       	sub	r28, r26
    50bc:	db 0b       	sbc	r29, r27
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	cd bf       	out	0x3d, r28	; 61
    50c8:	09 94       	ijmp

000050ca <__epilogue_restores__>:
    50ca:	2a 88       	ldd	r2, Y+18	; 0x12
    50cc:	39 88       	ldd	r3, Y+17	; 0x11
    50ce:	48 88       	ldd	r4, Y+16	; 0x10
    50d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    50d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    50d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    50d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    50d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    50da:	aa 84       	ldd	r10, Y+10	; 0x0a
    50dc:	b9 84       	ldd	r11, Y+9	; 0x09
    50de:	c8 84       	ldd	r12, Y+8	; 0x08
    50e0:	df 80       	ldd	r13, Y+7	; 0x07
    50e2:	ee 80       	ldd	r14, Y+6	; 0x06
    50e4:	fd 80       	ldd	r15, Y+5	; 0x05
    50e6:	0c 81       	ldd	r16, Y+4	; 0x04
    50e8:	1b 81       	ldd	r17, Y+3	; 0x03
    50ea:	aa 81       	ldd	r26, Y+2	; 0x02
    50ec:	b9 81       	ldd	r27, Y+1	; 0x01
    50ee:	ce 0f       	add	r28, r30
    50f0:	d1 1d       	adc	r29, r1
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	de bf       	out	0x3e, r29	; 62
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	cd bf       	out	0x3d, r28	; 61
    50fc:	ed 01       	movw	r28, r26
    50fe:	08 95       	ret

00005100 <_exit>:
    5100:	f8 94       	cli

00005102 <__stop_program>:
    5102:	ff cf       	rjmp	.-2      	; 0x5102 <__stop_program>
