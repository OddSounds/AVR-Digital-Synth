
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00001354  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  008002a4  008002a4  0000158c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001620  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c7  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000470  00000000  00000000  00003163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b81  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f20  00000000  00000000  00004461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00005381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__ctors_end>
       4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       8:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
       c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      10:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      18:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      1c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      20:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      24:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_9>
      28:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      2c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      30:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      34:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      38:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      3c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      40:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      44:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      48:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_18>
      4c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_20>
      54:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_21>
      58:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      5c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      60:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>
      64:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z5setupv+0x62>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <__vector_9+0x2ce>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <__muluhisi3+0x4>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <__do_global_ctors+0x18>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z5setupv+0xc0>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <__stack+0x411>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <__vector_21+0x12>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <__stack+0x26d>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <__muldi3+0x8a>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <__stack+0x253>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z5setupv+0x78>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <__do_global_ctors+0x12>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <__do_clear_bss>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__vector_20+0xc>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <__stack+0x215>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <__muldi3+0x4a>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <__stack+0x23b>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <__muldi3+0x76>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <__vector_9+0x264>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <.do_clear_bss_loop>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <__ctors_start>:
     668:	47 08       	sbc	r4, r7

0000066a <__ctors_end>:
     66a:	11 24       	eor	r1, r1
     66c:	1f be       	out	0x3f, r1	; 63
     66e:	cf ef       	ldi	r28, 0xFF	; 255
     670:	d8 e0       	ldi	r29, 0x08	; 8
     672:	de bf       	out	0x3e, r29	; 62
     674:	cd bf       	out	0x3d, r28	; 61

00000676 <__do_copy_data>:
     676:	12 e0       	ldi	r17, 0x02	; 2
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	e4 e5       	ldi	r30, 0x54	; 84
     67e:	f3 e1       	ldi	r31, 0x13	; 19
     680:	02 c0       	rjmp	.+4      	; 0x686 <__do_copy_data+0x10>
     682:	05 90       	lpm	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	a4 3a       	cpi	r26, 0xA4	; 164
     688:	b1 07       	cpc	r27, r17
     68a:	d9 f7       	brne	.-10     	; 0x682 <__do_copy_data+0xc>

0000068c <__do_clear_bss>:
     68c:	25 e0       	ldi	r18, 0x05	; 5
     68e:	a4 ea       	ldi	r26, 0xA4	; 164
     690:	b2 e0       	ldi	r27, 0x02	; 2
     692:	01 c0       	rjmp	.+2      	; 0x696 <.do_clear_bss_start>

00000694 <.do_clear_bss_loop>:
     694:	1d 92       	st	X+, r1

00000696 <.do_clear_bss_start>:
     696:	a1 31       	cpi	r26, 0x11	; 17
     698:	b2 07       	cpc	r27, r18
     69a:	e1 f7       	brne	.-8      	; 0x694 <.do_clear_bss_loop>

0000069c <__do_global_ctors>:
     69c:	16 e0       	ldi	r17, 0x06	; 6
     69e:	ca e6       	ldi	r28, 0x6A	; 106
     6a0:	d6 e0       	ldi	r29, 0x06	; 6
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__do_global_ctors+0x10>
     6a4:	22 97       	sbiw	r28, 0x02	; 2
     6a6:	fe 01       	movw	r30, r28
     6a8:	0e 94 95 09 	call	0x132a	; 0x132a <__tablejump__>
     6ac:	c8 36       	cpi	r28, 0x68	; 104
     6ae:	d1 07       	cpc	r29, r17
     6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__do_global_ctors+0x8>
     6b2:	0e 94 8b 06 	call	0xd16	; 0xd16 <main>
     6b6:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <_exit>

000006ba <__bad_interrupt>:
     6ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006be <_Z10serialInitv>:

RXEvent rxEvent = 0;

void serialInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     6be:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     6c2:	8f e1       	ldi	r24, 0x1F	; 31
     6c4:	80 93 c4 00 	sts	0x00C4, r24
		
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     6c8:	88 ed       	ldi	r24, 0xD8	; 216
     6ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	80 93 c2 00 	sts	0x00C2, r24
     6d4:	08 95       	ret

000006d6 <_Z9putStringPc>:
	UDR0 = c;
}

void putString(char* c)
{
	while(*c)
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 81       	ld	r18, Z
     6da:	22 23       	and	r18, r18
     6dc:	51 f0       	breq	.+20     	; 0x6f2 <_Z9putStringPc+0x1c>
     6de:	31 96       	adiw	r30, 0x01	; 1
	rxEvent = handler;
}

void putChar(char c)
{
	while(!( UCSR0A & (1<<UDRE0)));
     6e0:	80 91 c0 00 	lds	r24, 0x00C0
     6e4:	85 ff       	sbrs	r24, 5
     6e6:	fc cf       	rjmp	.-8      	; 0x6e0 <_Z9putStringPc+0xa>
	UDR0 = c;
     6e8:	20 93 c6 00 	sts	0x00C6, r18
}

void putString(char* c)
{
	while(*c)
     6ec:	21 91       	ld	r18, Z+
     6ee:	21 11       	cpse	r18, r1
     6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <_Z9putStringPc+0xa>
     6f2:	08 95       	ret

000006f4 <__vector_20>:
{
	return rxMessagesRemaining;
}

ISR(USART_TX_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
	txMessagesRemaining--;
     706:	80 91 aa 03 	lds	r24, 0x03AA
     70a:	90 91 ab 03 	lds	r25, 0x03AB
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	90 93 ab 03 	sts	0x03AB, r25
     714:	80 93 aa 03 	sts	0x03AA, r24
	
	if(txMessagesRemaining > 0)
     718:	18 16       	cp	r1, r24
     71a:	19 06       	cpc	r1, r25
     71c:	5c f4       	brge	.+22     	; 0x734 <__vector_20+0x40>
		UDR0 = txBuffer[txBufferReadIndex & TX_BUFFER_SIZE];
     71e:	e0 91 ac 03 	lds	r30, 0x03AC
     722:	f0 91 ad 03 	lds	r31, 0x03AD
     726:	ee 27       	eor	r30, r30
     728:	f1 70       	andi	r31, 0x01	; 1
     72a:	e2 55       	subi	r30, 0x52	; 82
     72c:	fc 4f       	sbci	r31, 0xFC	; 252
     72e:	80 81       	ld	r24, Z
     730:	80 93 c6 00 	sts	0x00C6, r24
	
	txBufferReadIndex++;
     734:	80 91 ac 03 	lds	r24, 0x03AC
     738:	90 91 ad 03 	lds	r25, 0x03AD
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 ad 03 	sts	0x03AD, r25
     742:	80 93 ac 03 	sts	0x03AC, r24
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <__vector_18>:

ISR(USART_RX_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	4f 93       	push	r20
     768:	5f 93       	push	r21
     76a:	6f 93       	push	r22
     76c:	7f 93       	push	r23
     76e:	8f 93       	push	r24
     770:	9f 93       	push	r25
     772:	af 93       	push	r26
     774:	bf 93       	push	r27
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
	rxBuffer[rxBufferWriteIndex & RX_BUFFER_SIZE] = UDR0;
     77a:	80 91 a8 02 	lds	r24, 0x02A8
     77e:	90 91 a9 02 	lds	r25, 0x02A9
     782:	20 91 c6 00 	lds	r18, 0x00C6
     786:	fc 01       	movw	r30, r24
     788:	ee 27       	eor	r30, r30
     78a:	f1 70       	andi	r31, 0x01	; 1
     78c:	e6 55       	subi	r30, 0x56	; 86
     78e:	fd 4f       	sbci	r31, 0xFD	; 253
     790:	20 83       	st	Z, r18
	
	rxBufferWriteIndex++;
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	90 93 a9 02 	sts	0x02A9, r25
     798:	80 93 a8 02 	sts	0x02A8, r24
	rxMessagesRemaining++;
     79c:	80 91 a6 02 	lds	r24, 0x02A6
     7a0:	90 91 a7 02 	lds	r25, 0x02A7
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	90 93 a7 02 	sts	0x02A7, r25
     7aa:	80 93 a6 02 	sts	0x02A6, r24
	
	if(rxEvent != 0)
     7ae:	e0 91 a4 02 	lds	r30, 0x02A4
     7b2:	f0 91 a5 02 	lds	r31, 0x02A5
     7b6:	30 97       	sbiw	r30, 0x00	; 0
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_18+0x64>
		rxEvent(rxMessagesRemaining);
     7ba:	09 95       	icall
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <_Z5setupv>:
		putString("\r\n");*/
	}
}

void setup()
{
     7de:	2f 92       	push	r2
     7e0:	3f 92       	push	r3
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <_Z5setupv+0x26>
     804:	00 d0       	rcall	.+0      	; 0x806 <_Z5setupv+0x28>
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	9d e8       	ldi	r25, 0x8D	; 141
     80e:	ac e8       	ldi	r26, 0x8C	; 140
     810:	ba e7       	ldi	r27, 0x7A	; 122
     812:	80 93 b3 04 	sts	0x04B3, r24
     816:	90 93 b4 04 	sts	0x04B4, r25
     81a:	a0 93 b5 04 	sts	0x04B5, r26
     81e:	b0 93 b6 04 	sts	0x04B6, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	9c 83       	std	Y+4, r25	; 0x04
     828:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
     82a:	1a 82       	std	Y+2, r1	; 0x02
     82c:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     82e:	89 80       	ldd	r8, Y+1	; 0x01
     830:	9a 80       	ldd	r9, Y+2	; 0x02
     832:	ab 80       	ldd	r10, Y+3	; 0x03
     834:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     836:	94 01       	movw	r18, r8
     838:	a5 01       	movw	r20, r10
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	00 e1       	ldi	r16, 0x10	; 16
     844:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     848:	a1 2c       	mov	r10, r1
     84a:	ed e8       	ldi	r30, 0x8D	; 141
     84c:	be 2e       	mov	r11, r30
     84e:	fc e8       	ldi	r31, 0x8C	; 140
     850:	cf 2e       	mov	r12, r31
     852:	aa e7       	ldi	r26, 0x7A	; 122
     854:	da 2e       	mov	r13, r26
     856:	e1 2c       	mov	r14, r1
     858:	f1 2c       	mov	r15, r1
     85a:	00 e0       	ldi	r16, 0x00	; 0
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivdi3>
     862:	20 93 af 04 	sts	0x04AF, r18
     866:	30 93 b0 04 	sts	0x04B0, r19
     86a:	40 93 b1 04 	sts	0x04B1, r20
     86e:	50 93 b2 04 	sts	0x04B2, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9c 83       	std	Y+4, r25	; 0x04
     878:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     87a:	89 80       	ldd	r8, Y+1	; 0x01
     87c:	9a 80       	ldd	r9, Y+2	; 0x02
     87e:	ab 80       	ldd	r10, Y+3	; 0x03
     880:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     882:	94 01       	movw	r18, r8
     884:	a5 01       	movw	r20, r10
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	00 e1       	ldi	r16, 0x10	; 16
     890:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     894:	a1 2c       	mov	r10, r1
     896:	bd e8       	ldi	r27, 0x8D	; 141
     898:	bb 2e       	mov	r11, r27
     89a:	0c e8       	ldi	r16, 0x8C	; 140
     89c:	c0 2e       	mov	r12, r16
     89e:	ea e7       	ldi	r30, 0x7A	; 122
     8a0:	de 2e       	mov	r13, r30
     8a2:	e1 2c       	mov	r14, r1
     8a4:	f1 2c       	mov	r15, r1
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivdi3>
     8ac:	39 01       	movw	r6, r18
     8ae:	4a 01       	movw	r8, r20
     8b0:	1b 01       	movw	r2, r22
     8b2:	2c 01       	movw	r4, r24
     8b4:	32 2f       	mov	r19, r18
     8b6:	30 93 b7 04 	sts	0x04B7, r19
     8ba:	70 92 b8 04 	sts	0x04B8, r7
     8be:	80 92 b9 04 	sts	0x04B9, r8
     8c2:	90 92 ba 04 	sts	0x04BA, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     8c6:	80 e7       	ldi	r24, 0x70	; 112
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	90 93 07 05 	sts	0x0507, r25
     8ce:	80 93 06 05 	sts	0x0506, r24
	*((unsigned short*)&(b)) = 0;
     8d2:	10 92 05 05 	sts	0x0505, r1
     8d6:	10 92 04 05 	sts	0x0504, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     8da:	00 91 04 05 	lds	r16, 0x0504
     8de:	10 91 05 05 	lds	r17, 0x0505
     8e2:	20 91 06 05 	lds	r18, 0x0506
     8e6:	30 91 07 05 	lds	r19, 0x0507
	temp *= rhs;
     8ea:	58 01       	movw	r10, r16
     8ec:	69 01       	movw	r12, r18
     8ee:	00 e0       	ldi	r16, 0x00	; 0
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	93 01       	movw	r18, r6
     8f4:	a4 01       	movw	r20, r8
     8f6:	b1 01       	movw	r22, r2
     8f8:	c2 01       	movw	r24, r4
     8fa:	0e 94 67 08 	call	0x10ce	; 0x10ce <__muldi3>
	
	return (unsigned long)(temp >> 16);
     8fe:	00 e1       	ldi	r16, 0x10	; 16
     900:	0e 94 65 09 	call	0x12ca	; 0x12ca <__lshrdi3>
     904:	20 93 f4 04 	sts	0x04F4, r18
     908:	30 93 f5 04 	sts	0x04F5, r19
     90c:	40 93 f6 04 	sts	0x04F6, r20
     910:	50 93 f7 04 	sts	0x04F7, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     914:	80 e7       	ldi	r24, 0x70	; 112
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	90 93 e5 04 	sts	0x04E5, r25
     91c:	80 93 e4 04 	sts	0x04E4, r24
	*((unsigned short*)&(b)) = 0;
     920:	10 92 e3 04 	sts	0x04E3, r1
     924:	10 92 e2 04 	sts	0x04E2, r1
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
     928:	00 91 e2 04 	lds	r16, 0x04E2
     92c:	10 91 e3 04 	lds	r17, 0x04E3
     930:	20 91 e4 04 	lds	r18, 0x04E4
     934:	30 91 e5 04 	lds	r19, 0x04E5
	temp *= rhs;
     938:	58 01       	movw	r10, r16
     93a:	69 01       	movw	r12, r18
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	93 01       	movw	r18, r6
     942:	a4 01       	movw	r20, r8
     944:	b1 01       	movw	r22, r2
     946:	c2 01       	movw	r24, r4
     948:	0e 94 67 08 	call	0x10ce	; 0x10ce <__muldi3>
	
	return (unsigned long)(temp >> 16);
     94c:	00 e1       	ldi	r16, 0x10	; 16
     94e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__lshrdi3>
     952:	20 93 da 04 	sts	0x04DA, r18
     956:	30 93 db 04 	sts	0x04DB, r19
     95a:	40 93 dc 04 	sts	0x04DC, r20
     95e:	50 93 dd 04 	sts	0x04DD, r21
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     962:	89 e9       	ldi	r24, 0x99	; 153
     964:	99 e1       	ldi	r25, 0x19	; 25
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	80 93 be 04 	sts	0x04BE, r24
     96e:	90 93 bf 04 	sts	0x04BF, r25
     972:	a0 93 c0 04 	sts	0x04C0, r26
     976:	b0 93 c1 04 	sts	0x04C1, r27

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     97a:	93 01       	movw	r18, r6
     97c:	a4 01       	movw	r20, r8
     97e:	b1 01       	movw	r22, r2
     980:	c2 01       	movw	r24, r4
     982:	03 e0       	ldi	r16, 0x03	; 3
     984:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
     988:	53 01       	movw	r10, r6
     98a:	64 01       	movw	r12, r8
     98c:	71 01       	movw	r14, r2
     98e:	82 01       	movw	r16, r4
     990:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     994:	01 e0       	ldi	r16, 0x01	; 1
     996:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
     99a:	04 2d       	mov	r16, r4
     99c:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     9a0:	59 01       	movw	r10, r18
     9a2:	6a 01       	movw	r12, r20
     9a4:	7b 01       	movw	r14, r22
     9a6:	e8 2f       	mov	r30, r24
     9a8:	19 2f       	mov	r17, r25
     9aa:	06 e0       	ldi	r16, 0x06	; 6
     9ac:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
     9b0:	0e 2f       	mov	r16, r30
     9b2:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     9b6:	03 e0       	ldi	r16, 0x03	; 3
     9b8:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ashldi3>
     9bc:	53 01       	movw	r10, r6
     9be:	64 01       	movw	r12, r8
     9c0:	71 01       	movw	r14, r2
     9c2:	82 01       	movw	r16, r4
     9c4:	0e 94 81 09 	call	0x1302	; 0x1302 <__adddi3>
	
	return (unsigned long)(temp >> 16);
     9c8:	00 e1       	ldi	r16, 0x10	; 16
     9ca:	0e 94 65 09 	call	0x12ca	; 0x12ca <__lshrdi3>
     9ce:	20 93 ca 04 	sts	0x04CA, r18
     9d2:	30 93 cb 04 	sts	0x04CB, r19
     9d6:	40 93 cc 04 	sts	0x04CC, r20
     9da:	50 93 cd 04 	sts	0x04CD, r21
{
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
     9de:	8f e0       	ldi	r24, 0x0F	; 15
     9e0:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1);
     9e4:	82 e8       	ldi	r24, 0x82	; 130
     9e6:	80 93 7a 00 	sts	0x007A, r24
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	
	char buf[100];
	
	adcInit();
	serialInit();
     9ea:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z10serialInitv>
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
     9ee:	80 91 b1 00 	lds	r24, 0x00B1
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
     9f8:	80 91 b1 00 	lds	r24, 0x00B1
     9fc:	8d 7f       	andi	r24, 0xFD	; 253
     9fe:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
     a02:	80 91 b1 00 	lds	r24, 0x00B1
     a06:	8b 7f       	andi	r24, 0xFB	; 251
     a08:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
     a0c:	80 91 b0 00 	lds	r24, 0x00B0
     a10:	8f 7b       	andi	r24, 0xBF	; 191
     a12:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
     a16:	80 91 b0 00 	lds	r24, 0x00B0
     a1a:	80 68       	ori	r24, 0x80	; 128
     a1c:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
     a20:	80 91 b0 00 	lds	r24, 0x00B0
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
     a2a:	80 91 b0 00 	lds	r24, 0x00B0
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
     a34:	80 91 b1 00 	lds	r24, 0x00B1
     a38:	87 7f       	andi	r24, 0xF7	; 247
     a3a:	80 93 b1 00 	sts	0x00B1, r24
	adcInit();
	serialInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
     a3e:	23 9a       	sbi	0x04, 3	; 4
		
	putString("ADC Setup\r\n");
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
	sbi (TIMSK2,TOIE2);
     a48:	80 91 70 00 	lds	r24, 0x0070
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	80 93 70 00 	sts	0x0070, r24
	sei();
     a52:	78 94       	sei
	sei();
}

void noteUpdate()
{
	cli();
     a54:	f8 94       	cli
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     a56:	20 91 be 04 	lds	r18, 0x04BE
     a5a:	30 91 bf 04 	lds	r19, 0x04BF
     a5e:	40 91 c0 04 	lds	r20, 0x04C0
     a62:	50 91 c1 04 	lds	r21, 0x04C1
     a66:	60 91 b7 04 	lds	r22, 0x04B7
     a6a:	70 91 b8 04 	lds	r23, 0x04B8
     a6e:	80 91 b9 04 	lds	r24, 0x04B9
     a72:	90 91 ba 04 	lds	r25, 0x04BA

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     a76:	0e 94 c0 08 	call	0x1180	; 0x1180 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     a7a:	0e 94 65 09 	call	0x12ca	; 0x12ca <__lshrdi3>
     a7e:	20 93 ca 04 	sts	0x04CA, r18
     a82:	30 93 cb 04 	sts	0x04CB, r19
     a86:	40 93 cc 04 	sts	0x04CC, r20
     a8a:	50 93 cd 04 	sts	0x04CD, r21

void noteUpdate()
{
	cli();
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
	sei();
     a8e:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
     a90:	20 91 ee 04 	lds	r18, 0x04EE
     a94:	30 91 0b 01 	lds	r19, 0x010B
     a98:	40 91 f0 04 	lds	r20, 0x04F0
     a9c:	80 91 ef 04 	lds	r24, 0x04EF
     aa0:	99 27       	eor	r25, r25
     aa2:	87 fd       	sbrc	r24, 7
     aa4:	90 95       	com	r25
     aa6:	84 0f       	add	r24, r20
     aa8:	91 1d       	adc	r25, r1
     aaa:	47 fd       	sbrc	r20, 7
     aac:	9a 95       	dec	r25
     aae:	83 0f       	add	r24, r19
     ab0:	91 1d       	adc	r25, r1
     ab2:	3c e0       	ldi	r19, 0x0C	; 12
     ab4:	23 02       	muls	r18, r19
     ab6:	80 0d       	add	r24, r0
     ab8:	91 1d       	adc	r25, r1
     aba:	11 24       	eor	r1, r1
     abc:	97 fd       	sbrc	r25, 7
     abe:	1c c1       	rjmp	.+568    	; 0xcf8 <__stack+0x3f9>
	{
		cli();
		osc1TWord = keyFreq[0];
		sei();		
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
     ac0:	88 35       	cpi	r24, 0x58	; 88
     ac2:	91 05       	cpc	r25, r1
     ac4:	0c f0       	brlt	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	eb c0       	rjmp	.+470    	; 0xc9e <__stack+0x39f>
		osc1TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     ac8:	f8 94       	cli
		osc1TWord = keyFreq[osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)];
     aca:	80 91 ee 04 	lds	r24, 0x04EE
     ace:	20 91 0b 01 	lds	r18, 0x010B
     ad2:	e0 91 f0 04 	lds	r30, 0x04F0
     ad6:	ff 27       	eor	r31, r31
     ad8:	e7 fd       	sbrc	r30, 7
     ada:	f0 95       	com	r31
     adc:	90 91 ef 04 	lds	r25, 0x04EF
     ae0:	e2 0f       	add	r30, r18
     ae2:	f1 1d       	adc	r31, r1
     ae4:	e9 0f       	add	r30, r25
     ae6:	f1 1d       	adc	r31, r1
     ae8:	97 fd       	sbrc	r25, 7
     aea:	fa 95       	dec	r31
     aec:	9c e0       	ldi	r25, 0x0C	; 12
     aee:	89 02       	muls	r24, r25
     af0:	e0 0d       	add	r30, r0
     af2:	f1 1d       	adc	r31, r1
     af4:	11 24       	eor	r1, r1
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ea 5c       	subi	r30, 0xCA	; 202
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	a2 81       	ldd	r26, Z+2	; 0x02
     b08:	b3 81       	ldd	r27, Z+3	; 0x03
     b0a:	80 93 f4 04 	sts	0x04F4, r24
     b0e:	90 93 f5 04 	sts	0x04F5, r25
     b12:	a0 93 f6 04 	sts	0x04F6, r26
     b16:	b0 93 f7 04 	sts	0x04F7, r27
		sei();		
     b1a:	78 94       	sei
	}
}

inline void osc1CentsUpdate()
{
	unsigned long cents1Coef = 0x27*(osc1CentsShift + dOsc1CentsShift);
     b1c:	20 91 f1 04 	lds	r18, 0x04F1
     b20:	80 91 f2 04 	lds	r24, 0x04F2
     b24:	90 91 f3 04 	lds	r25, 0x04F3
     b28:	82 0f       	add	r24, r18
     b2a:	91 1d       	adc	r25, r1
     b2c:	27 fd       	sbrc	r18, 7
     b2e:	9a 95       	dec	r25
     b30:	47 e2       	ldi	r20, 0x27	; 39
     b32:	48 9f       	mul	r20, r24
     b34:	90 01       	movw	r18, r0
     b36:	49 9f       	mul	r20, r25
     b38:	30 0d       	add	r19, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	44 27       	eor	r20, r20
     b3e:	37 fd       	sbrc	r19, 7
     b40:	40 95       	com	r20
     b42:	54 2f       	mov	r21, r20
	
	cli();
     b44:	f8 94       	cli
	cents1Coef *= osc1TWord;
     b46:	c0 90 f4 04 	lds	r12, 0x04F4
     b4a:	d0 90 f5 04 	lds	r13, 0x04F5
     b4e:	e0 90 f6 04 	lds	r14, 0x04F6
     b52:	f0 90 f7 04 	lds	r15, 0x04F7
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 4c 08 	call	0x1098	; 0x1098 <__mulsi3>
	cents1Coef = ((long)cents1Coef) >> 16;
     b5e:	bb 27       	eor	r27, r27
     b60:	97 fd       	sbrc	r25, 7
     b62:	b0 95       	com	r27
     b64:	ab 2f       	mov	r26, r27
	osc1TWord += cents1Coef; 
     b66:	8c 0d       	add	r24, r12
     b68:	9d 1d       	adc	r25, r13
     b6a:	ae 1d       	adc	r26, r14
     b6c:	bf 1d       	adc	r27, r15
     b6e:	80 93 f4 04 	sts	0x04F4, r24
     b72:	90 93 f5 04 	sts	0x04F5, r25
     b76:	a0 93 f6 04 	sts	0x04F6, r26
     b7a:	b0 93 f7 04 	sts	0x04F7, r27
	sei();
     b7e:	78 94       	sei
}

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
     b80:	20 91 d6 04 	lds	r18, 0x04D6
     b84:	30 91 06 01 	lds	r19, 0x0106
     b88:	40 91 d8 04 	lds	r20, 0x04D8
     b8c:	80 91 d7 04 	lds	r24, 0x04D7
     b90:	99 27       	eor	r25, r25
     b92:	87 fd       	sbrc	r24, 7
     b94:	90 95       	com	r25
     b96:	84 0f       	add	r24, r20
     b98:	91 1d       	adc	r25, r1
     b9a:	47 fd       	sbrc	r20, 7
     b9c:	9a 95       	dec	r25
     b9e:	83 0f       	add	r24, r19
     ba0:	91 1d       	adc	r25, r1
     ba2:	3c e0       	ldi	r19, 0x0C	; 12
     ba4:	23 02       	muls	r18, r19
     ba6:	80 0d       	add	r24, r0
     ba8:	91 1d       	adc	r25, r1
     baa:	11 24       	eor	r1, r1
     bac:	97 fd       	sbrc	r25, 7
     bae:	95 c0       	rjmp	.+298    	; 0xcda <__stack+0x3db>
	{
		cli();
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
     bb0:	88 35       	cpi	r24, 0x58	; 88
     bb2:	91 05       	cpc	r25, r1
     bb4:	0c f0       	brlt	.+2      	; 0xbb8 <__stack+0x2b9>
     bb6:	82 c0       	rjmp	.+260    	; 0xcbc <__stack+0x3bd>
		osc2TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     bb8:	f8 94       	cli
		osc2TWord = keyFreq[osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)];
     bba:	80 91 d6 04 	lds	r24, 0x04D6
     bbe:	20 91 06 01 	lds	r18, 0x0106
     bc2:	e0 91 d8 04 	lds	r30, 0x04D8
     bc6:	ff 27       	eor	r31, r31
     bc8:	e7 fd       	sbrc	r30, 7
     bca:	f0 95       	com	r31
     bcc:	90 91 d7 04 	lds	r25, 0x04D7
     bd0:	e2 0f       	add	r30, r18
     bd2:	f1 1d       	adc	r31, r1
     bd4:	e9 0f       	add	r30, r25
     bd6:	f1 1d       	adc	r31, r1
     bd8:	97 fd       	sbrc	r25, 7
     bda:	fa 95       	dec	r31
     bdc:	9c e0       	ldi	r25, 0x0C	; 12
     bde:	89 02       	muls	r24, r25
     be0:	e0 0d       	add	r30, r0
     be2:	f1 1d       	adc	r31, r1
     be4:	11 24       	eor	r1, r1
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ea 5c       	subi	r30, 0xCA	; 202
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	a2 81       	ldd	r26, Z+2	; 0x02
     bf8:	b3 81       	ldd	r27, Z+3	; 0x03
     bfa:	80 93 da 04 	sts	0x04DA, r24
     bfe:	90 93 db 04 	sts	0x04DB, r25
     c02:	a0 93 dc 04 	sts	0x04DC, r26
     c06:	b0 93 dd 04 	sts	0x04DD, r27
		sei();
     c0a:	78 94       	sei
	}	
}

inline void osc2CentsUpdate()
{
	unsigned long cents2Coef = 0x27*(osc2CentsShift + dOsc2CentsShift);
     c0c:	20 91 d9 04 	lds	r18, 0x04D9
     c10:	80 91 09 01 	lds	r24, 0x0109
     c14:	90 91 0a 01 	lds	r25, 0x010A
     c18:	82 0f       	add	r24, r18
     c1a:	91 1d       	adc	r25, r1
     c1c:	27 fd       	sbrc	r18, 7
     c1e:	9a 95       	dec	r25
     c20:	47 e2       	ldi	r20, 0x27	; 39
     c22:	48 9f       	mul	r20, r24
     c24:	90 01       	movw	r18, r0
     c26:	49 9f       	mul	r20, r25
     c28:	30 0d       	add	r19, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	44 27       	eor	r20, r20
     c2e:	37 fd       	sbrc	r19, 7
     c30:	40 95       	com	r20
     c32:	54 2f       	mov	r21, r20
	
	cli();
     c34:	f8 94       	cli
	cents2Coef *= osc2TWord;
     c36:	c0 90 da 04 	lds	r12, 0x04DA
     c3a:	d0 90 db 04 	lds	r13, 0x04DB
     c3e:	e0 90 dc 04 	lds	r14, 0x04DC
     c42:	f0 90 dd 04 	lds	r15, 0x04DD
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	0e 94 4c 08 	call	0x1098	; 0x1098 <__mulsi3>
	cents2Coef = ((long)cents2Coef) >> 16;
     c4e:	bb 27       	eor	r27, r27
     c50:	97 fd       	sbrc	r25, 7
     c52:	b0 95       	com	r27
     c54:	ab 2f       	mov	r26, r27
	osc2TWord += cents2Coef;
     c56:	8c 0d       	add	r24, r12
     c58:	9d 1d       	adc	r25, r13
     c5a:	ae 1d       	adc	r26, r14
     c5c:	bf 1d       	adc	r27, r15
     c5e:	80 93 da 04 	sts	0x04DA, r24
     c62:	90 93 db 04 	sts	0x04DB, r25
     c66:	a0 93 dc 04 	sts	0x04DC, r26
     c6a:	b0 93 dd 04 	sts	0x04DD, r27
	sei();
     c6e:	78 94       	sei
	sei();

	//lfoRouteFunction = lfoRouteCents1;

	noteUpdate();
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	7f 90       	pop	r7
     c92:	6f 90       	pop	r6
     c94:	5f 90       	pop	r5
     c96:	4f 90       	pop	r4
     c98:	3f 90       	pop	r3
     c9a:	2f 90       	pop	r2
     c9c:	08 95       	ret
		osc1TWord = keyFreq[0];
		sei();		
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
	{
		cli();
     c9e:	f8 94       	cli
		osc1TWord = keyFreq[87];
     ca0:	80 e8       	ldi	r24, 0x80	; 128
     ca2:	9b e1       	ldi	r25, 0x1B	; 27
     ca4:	a2 e2       	ldi	r26, 0x22	; 34
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	80 93 f4 04 	sts	0x04F4, r24
     cac:	90 93 f5 04 	sts	0x04F5, r25
     cb0:	a0 93 f6 04 	sts	0x04F6, r26
     cb4:	b0 93 f7 04 	sts	0x04F7, r27
		sei();
     cb8:	78 94       	sei
     cba:	30 cf       	rjmp	.-416    	; 0xb1c <__stack+0x21d>
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
	{
		cli();
     cbc:	f8 94       	cli
		osc2TWord = keyFreq[87];
     cbe:	80 e8       	ldi	r24, 0x80	; 128
     cc0:	9b e1       	ldi	r25, 0x1B	; 27
     cc2:	a2 e2       	ldi	r26, 0x22	; 34
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	80 93 da 04 	sts	0x04DA, r24
     cca:	90 93 db 04 	sts	0x04DB, r25
     cce:	a0 93 dc 04 	sts	0x04DC, r26
     cd2:	b0 93 dd 04 	sts	0x04DD, r27
		sei();
     cd6:	78 94       	sei
     cd8:	99 cf       	rjmp	.-206    	; 0xc0c <__stack+0x30d>

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
	{
		cli();
     cda:	f8 94       	cli
		osc2TWord = keyFreq[0];
     cdc:	8d e5       	ldi	r24, 0x5D	; 93
     cde:	99 e3       	ldi	r25, 0x39	; 57
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	80 93 da 04 	sts	0x04DA, r24
     ce8:	90 93 db 04 	sts	0x04DB, r25
     cec:	a0 93 dc 04 	sts	0x04DC, r26
     cf0:	b0 93 dd 04 	sts	0x04DD, r27
		sei();
     cf4:	78 94       	sei
     cf6:	8a cf       	rjmp	.-236    	; 0xc0c <__stack+0x30d>

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
	{
		cli();
     cf8:	f8 94       	cli
		osc1TWord = keyFreq[0];
     cfa:	8d e5       	ldi	r24, 0x5D	; 93
     cfc:	99 e3       	ldi	r25, 0x39	; 57
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	80 93 f4 04 	sts	0x04F4, r24
     d06:	90 93 f5 04 	sts	0x04F5, r25
     d0a:	a0 93 f6 04 	sts	0x04F6, r26
     d0e:	b0 93 f7 04 	sts	0x04F7, r27
		sei();		
     d12:	78 94       	sei
     d14:	03 cf       	rjmp	.-506    	; 0xb1c <__stack+0x21d>

00000d16 <main>:
inline void osc2NoteUpdate();
inline void osc2CentsUpdate();

int main(void)
{
	setup();
     d16:	0e 94 ef 03 	call	0x7de	; 0x7de <_Z5setupv>

	char buf[100];

	putString("HELLO WORLD\r\n\r\n");
     d1a:	88 e1       	ldi	r24, 0x18	; 24
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
     d22:	ff cf       	rjmp	.-2      	; 0xd22 <main+0xc>

00000d24 <__vector_21>:
		lfsrState ^= 0xB400;
	}
}

ISR(ADC_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
	putString("ADC Updated\r\n");
     d46:	88 e2       	ldi	r24, 0x28	; 40
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z9putStringPc>
	adcValue[adcSelect] = ADC;
     d4e:	20 91 10 05 	lds	r18, 0x0510
     d52:	e2 2f       	mov	r30, r18
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 91 78 00 	lds	r24, 0x0078
     d5a:	90 91 79 00 	lds	r25, 0x0079
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	e8 5f       	subi	r30, 0xF8	; 248
     d64:	fa 4f       	sbci	r31, 0xFA	; 250
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24

	adcSelect++;
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
	
	if(adcSelect > 3)
     d6c:	24 30       	cpi	r18, 0x04	; 4
     d6e:	b0 f0       	brcs	.+44     	; 0xd9c <__vector_21+0x78>
	adcSelect = 0;
     d70:	10 92 10 05 	sts	0x0510, r1
     d74:	20 e0       	ldi	r18, 0x00	; 0
	
	ADMUX = adcSelect;
     d76:	20 93 7c 00 	sts	0x007C, r18
}
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti
ISR(ADC_vect)
{
	putString("ADC Updated\r\n");
	adcValue[adcSelect] = ADC;

	adcSelect++;
     d9c:	20 93 10 05 	sts	0x0510, r18
     da0:	ea cf       	rjmp	.-44     	; 0xd76 <__vector_21+0x52>

00000da2 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <__vector_9+0x30>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <__vector_9+0x32>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
     dd8:	80 91 05 01 	lds	r24, 0x0105
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <__vector_9+0x40>
     de0:	1b c1       	rjmp	.+566    	; 0x1018 <__vector_9+0x276>
	{
		osc1Phaccu[0] = osc1Phaccu[1];
     de2:	80 91 fc 04 	lds	r24, 0x04FC
     de6:	90 91 fd 04 	lds	r25, 0x04FD
     dea:	a0 91 fe 04 	lds	r26, 0x04FE
     dee:	b0 91 ff 04 	lds	r27, 0x04FF
     df2:	80 93 f8 04 	sts	0x04F8, r24
     df6:	90 93 f9 04 	sts	0x04F9, r25
     dfa:	a0 93 fa 04 	sts	0x04FA, r26
     dfe:	b0 93 fb 04 	sts	0x04FB, r27
		osc1Phaccu[1] = osc1Phaccu[2];
     e02:	40 91 00 05 	lds	r20, 0x0500
     e06:	50 91 01 05 	lds	r21, 0x0501
     e0a:	60 91 02 05 	lds	r22, 0x0502
     e0e:	70 91 03 05 	lds	r23, 0x0503
     e12:	40 93 fc 04 	sts	0x04FC, r20
     e16:	50 93 fd 04 	sts	0x04FD, r21
     e1a:	60 93 fe 04 	sts	0x04FE, r22
     e1e:	70 93 ff 04 	sts	0x04FF, r23
		osc1Phaccu[2] += osc1TWord;
     e22:	80 91 f4 04 	lds	r24, 0x04F4
     e26:	90 91 f5 04 	lds	r25, 0x04F5
     e2a:	a0 91 f6 04 	lds	r26, 0x04F6
     e2e:	b0 91 f7 04 	lds	r27, 0x04F7
     e32:	84 0f       	add	r24, r20
     e34:	95 1f       	adc	r25, r21
     e36:	a6 1f       	adc	r26, r22
     e38:	b7 1f       	adc	r27, r23
     e3a:	80 93 00 05 	sts	0x0500, r24
     e3e:	90 93 01 05 	sts	0x0501, r25
     e42:	a0 93 02 05 	sts	0x0502, r26
     e46:	b0 93 03 05 	sts	0x0503, r27

		osc2Phaccu += osc2TWord;
     e4a:	40 91 de 04 	lds	r20, 0x04DE
     e4e:	50 91 df 04 	lds	r21, 0x04DF
     e52:	60 91 e0 04 	lds	r22, 0x04E0
     e56:	70 91 e1 04 	lds	r23, 0x04E1
     e5a:	c0 90 da 04 	lds	r12, 0x04DA
     e5e:	d0 90 db 04 	lds	r13, 0x04DB
     e62:	e0 90 dc 04 	lds	r14, 0x04DC
     e66:	f0 90 dd 04 	lds	r15, 0x04DD
     e6a:	4c 0d       	add	r20, r12
     e6c:	5d 1d       	adc	r21, r13
     e6e:	6e 1d       	adc	r22, r14
     e70:	7f 1d       	adc	r23, r15
     e72:	40 93 de 04 	sts	0x04DE, r20
     e76:	50 93 df 04 	sts	0x04DF, r21
     e7a:	60 93 e0 04 	sts	0x04E0, r22
     e7e:	70 93 e1 04 	sts	0x04E1, r23
	osc2CentsUpdate();
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
     e82:	40 91 00 01 	lds	r20, 0x0100
     e86:	50 91 01 01 	lds	r21, 0x0101
	lfsrState = lfsrState >> 1;
     e8a:	9a 01       	movw	r18, r20
     e8c:	36 95       	lsr	r19
     e8e:	27 95       	ror	r18
	
	if(lsb == 1)
     e90:	40 fd       	sbrc	r20, 0
     e92:	ee c0       	rjmp	.+476    	; 0x1070 <__vector_9+0x2ce>
	{
		lfsrState ^= 0xB400;
     e94:	30 93 01 01 	sts	0x0101, r19
     e98:	20 93 00 01 	sts	0x0100, r18

		osc2Phaccu += osc2TWord;
		
		lfsrUpdate();

		osc1Out[0] = osc1Out[1];
     e9c:	40 91 e8 04 	lds	r20, 0x04E8
     ea0:	50 91 e9 04 	lds	r21, 0x04E9
     ea4:	50 93 e7 04 	sts	0x04E7, r21
     ea8:	40 93 e6 04 	sts	0x04E6, r20
		osc1Out[1] = osc1Out[2];
     eac:	40 91 ea 04 	lds	r20, 0x04EA
     eb0:	50 91 eb 04 	lds	r21, 0x04EB
     eb4:	50 93 e9 04 	sts	0x04E9, r21
     eb8:	40 93 e8 04 	sts	0x04E8, r20
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     ebc:	50 91 03 01 	lds	r21, 0x0103
     ec0:	60 91 02 05 	lds	r22, 0x0502
     ec4:	40 91 ed 04 	lds	r20, 0x04ED
     ec8:	46 0f       	add	r20, r22
     eca:	e5 2f       	mov	r30, r21
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ea 56       	subi	r30, 0x6A	; 106
     ed4:	fd 4f       	sbci	r31, 0xFD	; 253
     ed6:	01 90       	ld	r0, Z+
     ed8:	f0 81       	ld	r31, Z
     eda:	e0 2d       	mov	r30, r0
     edc:	e4 0f       	add	r30, r20
     ede:	f1 1d       	adc	r31, r1
     ee0:	e8 59       	subi	r30, 0x98	; 152
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	e4 91       	lpm	r30, Z
		
		if(osc1WaveForm == WAVE_NOISE)
     ee6:	55 30       	cpi	r21, 0x05	; 5
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_9+0x14a>
     eea:	bc c0       	rjmp	.+376    	; 0x1064 <__vector_9+0x2c2>
		
		lfsrUpdate();

		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
     eec:	4e 2f       	mov	r20, r30
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	50 93 eb 04 	sts	0x04EB, r21
     ef4:	40 93 ea 04 	sts	0x04EA, r20
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
     ef8:	70 91 07 01 	lds	r23, 0x0107
     efc:	77 23       	and	r23, r23
     efe:	39 f0       	breq	.+14     	; 0xf0e <__vector_9+0x16c>
     f00:	70 91 fe 04 	lds	r23, 0x04FE
     f04:	e0 91 fa 04 	lds	r30, 0x04FA
     f08:	7e 17       	cp	r23, r30
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__vector_9+0x16c>
     f0c:	b4 c0       	rjmp	.+360    	; 0x1076 <__vector_9+0x2d4>
		{
			osc2Phaccu = osc1Phaccu[2];
		}

		if(osc2WaveForm != WAVE_NOISE)
     f0e:	a0 91 02 01 	lds	r26, 0x0102
     f12:	a5 30       	cpi	r26, 0x05	; 5
     f14:	b1 f0       	breq	.+44     	; 0xf42 <__vector_9+0x1a0>
			osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
     f16:	80 91 d5 04 	lds	r24, 0x04D5
     f1a:	e0 91 e0 04 	lds	r30, 0x04E0
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	e8 0f       	add	r30, r24
     f22:	f1 1d       	adc	r31, r1
     f24:	87 fd       	sbrc	r24, 7
     f26:	fa 95       	dec	r31
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	aa 0f       	add	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	aa 56       	subi	r26, 0x6A	; 106
     f30:	bd 4f       	sbci	r27, 0xFD	; 253
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	e8 0f       	add	r30, r24
     f38:	f9 1f       	adc	r31, r25
     f3a:	e8 59       	subi	r30, 0x98	; 152
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	24 91       	lpm	r18, Z
     f40:	30 e0       	ldi	r19, 0x00	; 0
		else
			osc2Out[2] = lfsrState;

		lfoPhaccu += lfoTWord;
     f42:	80 91 c6 04 	lds	r24, 0x04C6
     f46:	90 91 c7 04 	lds	r25, 0x04C7
     f4a:	a0 91 c8 04 	lds	r26, 0x04C8
     f4e:	b0 91 c9 04 	lds	r27, 0x04C9
     f52:	c0 90 ca 04 	lds	r12, 0x04CA
     f56:	d0 90 cb 04 	lds	r13, 0x04CB
     f5a:	e0 90 cc 04 	lds	r14, 0x04CC
     f5e:	f0 90 cd 04 	lds	r15, 0x04CD
     f62:	8c 0d       	add	r24, r12
     f64:	9d 1d       	adc	r25, r13
     f66:	ae 1d       	adc	r26, r14
     f68:	bf 1d       	adc	r27, r15
     f6a:	80 93 c6 04 	sts	0x04C6, r24
     f6e:	90 93 c7 04 	sts	0x04C7, r25
     f72:	a0 93 c8 04 	sts	0x04C8, r26
     f76:	b0 93 c9 04 	sts	0x04C9, r27
		
		lfoOut[0] = lfoOut[1];
     f7a:	60 91 c4 04 	lds	r22, 0x04C4
     f7e:	70 91 c5 04 	lds	r23, 0x04C5
     f82:	70 93 c3 04 	sts	0x04C3, r23
     f86:	60 93 c2 04 	sts	0x04C2, r22
		lfoOut[1] = pgm_read_byte(analogWaveTable + waveformOffset[lfoWaveForm] + (unsigned char)*((unsigned char*)(&lfoPhaccu)+2));
     f8a:	e0 91 bd 04 	lds	r30, 0x04BD
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	ea 56       	subi	r30, 0x6A	; 106
     f96:	fd 4f       	sbci	r31, 0xFD	; 253
     f98:	80 91 c8 04 	lds	r24, 0x04C8
     f9c:	01 90       	ld	r0, Z+
     f9e:	f0 81       	ld	r31, Z
     fa0:	e0 2d       	mov	r30, r0
     fa2:	e8 0f       	add	r30, r24
     fa4:	f1 1d       	adc	r31, r1
     fa6:	e8 59       	subi	r30, 0x98	; 152
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	e4 91       	lpm	r30, Z
     fac:	f0 e0       	ldi	r31, 0x00	; 0
		lfoOut[1] -= 128;
     fae:	e0 58       	subi	r30, 0x80	; 128
     fb0:	f1 09       	sbc	r31, r1
     fb2:	f0 93 c5 04 	sts	0x04C5, r31
     fb6:	e0 93 c4 04 	sts	0x04C4, r30

		unsigned long temp = 0;
	
		osc1Out[2] *= osc1Weight;
     fba:	a0 91 ec 04 	lds	r26, 0x04EC
     fbe:	a4 9f       	mul	r26, r20
     fc0:	c0 01       	movw	r24, r0
     fc2:	a5 9f       	mul	r26, r21
     fc4:	90 0d       	add	r25, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	90 93 eb 04 	sts	0x04EB, r25
     fcc:	80 93 ea 04 	sts	0x04EA, r24
		osc2Out[2] *= osc2Weight;
     fd0:	a0 91 08 01 	lds	r26, 0x0108
     fd4:	a2 9f       	mul	r26, r18
     fd6:	a0 01       	movw	r20, r0
     fd8:	a3 9f       	mul	r26, r19
     fda:	50 0d       	add	r21, r0
     fdc:	11 24       	eor	r1, r1
     fde:	50 93 d4 04 	sts	0x04D4, r21
     fe2:	40 93 d3 04 	sts	0x04D3, r20

		if(ringMod)
     fe6:	20 91 ce 04 	lds	r18, 0x04CE
     fea:	22 23       	and	r18, r18
     fec:	81 f1       	breq	.+96     	; 0x104e <__vector_9+0x2ac>
			temp = osc1Out[2] ^ osc2Out[2];
     fee:	84 27       	eor	r24, r20
     ff0:	95 27       	eor	r25, r21
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	ab 83       	std	Y+3, r26	; 0x03
     ffc:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		if(lfoOut[0] != lfoOut[1] && lfoRouteFunction != NULL)
     ffe:	6e 17       	cp	r22, r30
    1000:	7f 07       	cpc	r23, r31
    1002:	39 f0       	breq	.+14     	; 0x1012 <__vector_9+0x270>
    1004:	e0 91 bb 04 	lds	r30, 0x04BB
    1008:	f0 91 bc 04 	lds	r31, 0x04BC
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_9+0x270>
			lfoRouteFunction();
    1010:	09 95       	icall
		/*delayLine[delayWriteIndex] = *((unsigned char*)(&temp) + 1);
		delayWriteIndex--;
		if(delayWriteIndex > delayLineTap)
			delayWriteIndex = delayLineTap;*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
		else
		{
			temp = osc1Out[2];
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
			temp += osc2Out[2];
    1052:	84 0f       	add	r24, r20
    1054:	95 1f       	adc	r25, r21
    1056:	a1 1d       	adc	r26, r1
    1058:	b1 1d       	adc	r27, r1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	ab 83       	std	Y+3, r26	; 0x03
    1060:	bc 83       	std	Y+4, r27	; 0x04
    1062:	cd cf       	rjmp	.-102    	; 0xffe <__vector_9+0x25c>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;
    1064:	30 93 eb 04 	sts	0x04EB, r19
    1068:	20 93 ea 04 	sts	0x04EA, r18
    106c:	a9 01       	movw	r20, r18
    106e:	44 cf       	rjmp	.-376    	; 0xef8 <__vector_9+0x156>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    1070:	44 eb       	ldi	r20, 0xB4	; 180
    1072:	34 27       	eor	r19, r20
    1074:	0f cf       	rjmp	.-482    	; 0xe94 <__vector_9+0xf2>
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
		osc1Out[2] = lfsrState;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    1076:	76 17       	cp	r23, r22
    1078:	08 f0       	brcs	.+2      	; 0x107c <__vector_9+0x2da>
    107a:	49 cf       	rjmp	.-366    	; 0xf0e <__vector_9+0x16c>
		{
			osc2Phaccu = osc1Phaccu[2];
    107c:	80 93 de 04 	sts	0x04DE, r24
    1080:	90 93 df 04 	sts	0x04DF, r25
    1084:	a0 93 e0 04 	sts	0x04E0, r26
    1088:	b0 93 e1 04 	sts	0x04E1, r27
    108c:	40 cf       	rjmp	.-384    	; 0xf0e <__vector_9+0x16c>

0000108e <_GLOBAL__sub_I_adcSelect>:
char keyArrayWrite = 0;
char keyArrayRead = 0;

unsigned char delayLine[256];
unsigned char delayLineTap = 10;
unsigned char delayWriteIndex = delayLineTap;
    108e:	80 91 04 01 	lds	r24, 0x0104
    1092:	80 93 ae 04 	sts	0x04AE, r24
    1096:	08 95       	ret

00001098 <__mulsi3>:
    1098:	db 01       	movw	r26, r22
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__muluhisi3>
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	a2 9f       	mul	r26, r18
    10a8:	80 0d       	add	r24, r0
    10aa:	91 1d       	adc	r25, r1
    10ac:	a3 9f       	mul	r26, r19
    10ae:	90 0d       	add	r25, r0
    10b0:	b2 9f       	mul	r27, r18
    10b2:	90 0d       	add	r25, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	08 95       	ret

000010b8 <__muluhisi3>:
    10b8:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    10bc:	a5 9f       	mul	r26, r21
    10be:	90 0d       	add	r25, r0
    10c0:	b4 9f       	mul	r27, r20
    10c2:	90 0d       	add	r25, r0
    10c4:	a4 9f       	mul	r26, r20
    10c6:	80 0d       	add	r24, r0
    10c8:	91 1d       	adc	r25, r1
    10ca:	11 24       	eor	r1, r1
    10cc:	08 95       	ret

000010ce <__muldi3>:
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	1f 93       	push	r17
    10d4:	0f 93       	push	r16
    10d6:	9a 9d       	mul	r25, r10
    10d8:	f0 2d       	mov	r31, r0
    10da:	21 9f       	mul	r18, r17
    10dc:	f0 0d       	add	r31, r0
    10de:	8b 9d       	mul	r24, r11
    10e0:	f0 0d       	add	r31, r0
    10e2:	8a 9d       	mul	r24, r10
    10e4:	e0 2d       	mov	r30, r0
    10e6:	f1 0d       	add	r31, r1
    10e8:	03 9f       	mul	r16, r19
    10ea:	f0 0d       	add	r31, r0
    10ec:	02 9f       	mul	r16, r18
    10ee:	e0 0d       	add	r30, r0
    10f0:	f1 1d       	adc	r31, r1
    10f2:	4e 9d       	mul	r20, r14
    10f4:	e0 0d       	add	r30, r0
    10f6:	f1 1d       	adc	r31, r1
    10f8:	5e 9d       	mul	r21, r14
    10fa:	f0 0d       	add	r31, r0
    10fc:	4f 9d       	mul	r20, r15
    10fe:	f0 0d       	add	r31, r0
    1100:	7f 93       	push	r23
    1102:	6f 93       	push	r22
    1104:	bf 92       	push	r11
    1106:	af 92       	push	r10
    1108:	5f 93       	push	r21
    110a:	4f 93       	push	r20
    110c:	d5 01       	movw	r26, r10
    110e:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    1112:	8b 01       	movw	r16, r22
    1114:	ac 01       	movw	r20, r24
    1116:	d7 01       	movw	r26, r14
    1118:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    111c:	eb 01       	movw	r28, r22
    111e:	e8 0f       	add	r30, r24
    1120:	f9 1f       	adc	r31, r25
    1122:	d6 01       	movw	r26, r12
    1124:	0e 94 b7 08 	call	0x116e	; 0x116e <__muldi3_6>
    1128:	2f 91       	pop	r18
    112a:	3f 91       	pop	r19
    112c:	d6 01       	movw	r26, r12
    112e:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    1132:	c6 0f       	add	r28, r22
    1134:	d7 1f       	adc	r29, r23
    1136:	e8 1f       	adc	r30, r24
    1138:	f9 1f       	adc	r31, r25
    113a:	af 91       	pop	r26
    113c:	bf 91       	pop	r27
    113e:	0e 94 b7 08 	call	0x116e	; 0x116e <__muldi3_6>
    1142:	2f 91       	pop	r18
    1144:	3f 91       	pop	r19
    1146:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    114a:	c6 0f       	add	r28, r22
    114c:	d7 1f       	adc	r29, r23
    114e:	e8 1f       	adc	r30, r24
    1150:	f9 1f       	adc	r31, r25
    1152:	d6 01       	movw	r26, r12
    1154:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    1158:	e6 0f       	add	r30, r22
    115a:	f7 1f       	adc	r31, r23
    115c:	98 01       	movw	r18, r16
    115e:	be 01       	movw	r22, r28
    1160:	cf 01       	movw	r24, r30
    1162:	11 24       	eor	r1, r1
    1164:	0f 91       	pop	r16
    1166:	1f 91       	pop	r17
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <__muldi3_6>:
    116e:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    1172:	46 0f       	add	r20, r22
    1174:	57 1f       	adc	r21, r23
    1176:	c8 1f       	adc	r28, r24
    1178:	d9 1f       	adc	r29, r25
    117a:	08 f4       	brcc	.+2      	; 0x117e <__muldi3_6+0x10>
    117c:	31 96       	adiw	r30, 0x01	; 1
    117e:	08 95       	ret

00001180 <__umulsidi3>:
    1180:	e8 94       	clt

00001182 <__umulsidi3_helper>:
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	fc 01       	movw	r30, r24
    1188:	db 01       	movw	r26, r22
    118a:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    118e:	7f 93       	push	r23
    1190:	6f 93       	push	r22
    1192:	e9 01       	movw	r28, r18
    1194:	9a 01       	movw	r18, r20
    1196:	ac 01       	movw	r20, r24
    1198:	bf 93       	push	r27
    119a:	af 93       	push	r26
    119c:	3f 93       	push	r19
    119e:	2f 93       	push	r18
    11a0:	df 01       	movw	r26, r30
    11a2:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulhisi3>
    11a6:	26 f4       	brtc	.+8      	; 0x11b0 <__umulsidi3_helper+0x2e>
    11a8:	6c 1b       	sub	r22, r28
    11aa:	7d 0b       	sbc	r23, r29
    11ac:	82 0b       	sbc	r24, r18
    11ae:	93 0b       	sbc	r25, r19
    11b0:	9e 01       	movw	r18, r28
    11b2:	eb 01       	movw	r28, r22
    11b4:	fc 01       	movw	r30, r24
    11b6:	0e 94 b7 08 	call	0x116e	; 0x116e <__muldi3_6>
    11ba:	af 91       	pop	r26
    11bc:	bf 91       	pop	r27
    11be:	2f 91       	pop	r18
    11c0:	3f 91       	pop	r19
    11c2:	0e 94 b7 08 	call	0x116e	; 0x116e <__muldi3_6>
    11c6:	be 01       	movw	r22, r28
    11c8:	cf 01       	movw	r24, r30
    11ca:	f9 01       	movw	r30, r18
    11cc:	2f 91       	pop	r18
    11ce:	3f 91       	pop	r19
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <__umoddi3>:
    11d6:	68 94       	set
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <__udivdi3_umoddi3>

000011da <__udivdi3>:
    11da:	e8 94       	clt

000011dc <__udivdi3_umoddi3>:
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmod64>
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	08 95       	ret

000011f2 <__udivmod64>:
    11f2:	88 24       	eor	r8, r8
    11f4:	99 24       	eor	r9, r9
    11f6:	f4 01       	movw	r30, r8
    11f8:	e4 01       	movw	r28, r8
    11fa:	b0 e4       	ldi	r27, 0x40	; 64
    11fc:	9f 93       	push	r25
    11fe:	aa 27       	eor	r26, r26
    1200:	9a 15       	cp	r25, r10
    1202:	8b 04       	cpc	r8, r11
    1204:	9c 04       	cpc	r9, r12
    1206:	ed 05       	cpc	r30, r13
    1208:	fe 05       	cpc	r31, r14
    120a:	cf 05       	cpc	r28, r15
    120c:	d0 07       	cpc	r29, r16
    120e:	a1 07       	cpc	r26, r17
    1210:	98 f4       	brcc	.+38     	; 0x1238 <__udivmod64+0x46>
    1212:	ad 2f       	mov	r26, r29
    1214:	dc 2f       	mov	r29, r28
    1216:	cf 2f       	mov	r28, r31
    1218:	fe 2f       	mov	r31, r30
    121a:	e9 2d       	mov	r30, r9
    121c:	98 2c       	mov	r9, r8
    121e:	89 2e       	mov	r8, r25
    1220:	98 2f       	mov	r25, r24
    1222:	87 2f       	mov	r24, r23
    1224:	76 2f       	mov	r23, r22
    1226:	65 2f       	mov	r22, r21
    1228:	54 2f       	mov	r21, r20
    122a:	43 2f       	mov	r20, r19
    122c:	32 2f       	mov	r19, r18
    122e:	22 27       	eor	r18, r18
    1230:	b8 50       	subi	r27, 0x08	; 8
    1232:	31 f7       	brne	.-52     	; 0x1200 <__udivmod64+0xe>
    1234:	bf 91       	pop	r27
    1236:	27 c0       	rjmp	.+78     	; 0x1286 <__udivmod64+0x94>
    1238:	1b 2e       	mov	r1, r27
    123a:	bf 91       	pop	r27
    123c:	bb 27       	eor	r27, r27
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	44 1f       	adc	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	66 1f       	adc	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	88 1c       	adc	r8, r8
    1250:	99 1c       	adc	r9, r9
    1252:	ee 1f       	adc	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	cc 1f       	adc	r28, r28
    1258:	dd 1f       	adc	r29, r29
    125a:	aa 1f       	adc	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	8a 14       	cp	r8, r10
    1260:	9b 04       	cpc	r9, r11
    1262:	ec 05       	cpc	r30, r12
    1264:	fd 05       	cpc	r31, r13
    1266:	ce 05       	cpc	r28, r14
    1268:	df 05       	cpc	r29, r15
    126a:	a0 07       	cpc	r26, r16
    126c:	b1 07       	cpc	r27, r17
    126e:	48 f0       	brcs	.+18     	; 0x1282 <__udivmod64+0x90>
    1270:	8a 18       	sub	r8, r10
    1272:	9b 08       	sbc	r9, r11
    1274:	ec 09       	sbc	r30, r12
    1276:	fd 09       	sbc	r31, r13
    1278:	ce 09       	sbc	r28, r14
    127a:	df 09       	sbc	r29, r15
    127c:	a0 0b       	sbc	r26, r16
    127e:	b1 0b       	sbc	r27, r17
    1280:	21 60       	ori	r18, 0x01	; 1
    1282:	1a 94       	dec	r1
    1284:	e1 f6       	brne	.-72     	; 0x123e <__udivmod64+0x4c>
    1286:	2e f4       	brtc	.+10     	; 0x1292 <__udivmod64+0xa0>
    1288:	94 01       	movw	r18, r8
    128a:	af 01       	movw	r20, r30
    128c:	be 01       	movw	r22, r28
    128e:	cd 01       	movw	r24, r26
    1290:	00 0c       	add	r0, r0
    1292:	08 95       	ret

00001294 <__ashldi3>:
    1294:	0f 93       	push	r16
    1296:	08 30       	cpi	r16, 0x08	; 8
    1298:	90 f0       	brcs	.+36     	; 0x12be <__ashldi3+0x2a>
    129a:	98 2f       	mov	r25, r24
    129c:	87 2f       	mov	r24, r23
    129e:	76 2f       	mov	r23, r22
    12a0:	65 2f       	mov	r22, r21
    12a2:	54 2f       	mov	r21, r20
    12a4:	43 2f       	mov	r20, r19
    12a6:	32 2f       	mov	r19, r18
    12a8:	22 27       	eor	r18, r18
    12aa:	08 50       	subi	r16, 0x08	; 8
    12ac:	f4 cf       	rjmp	.-24     	; 0x1296 <__ashldi3+0x2>
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	44 1f       	adc	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	66 1f       	adc	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 95       	dec	r16
    12c0:	b2 f7       	brpl	.-20     	; 0x12ae <__ashldi3+0x1a>
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <__ashrdi3>:
    12c6:	97 fb       	bst	r25, 7
    12c8:	10 f8       	bld	r1, 0

000012ca <__lshrdi3>:
    12ca:	16 94       	lsr	r1
    12cc:	00 08       	sbc	r0, r0
    12ce:	0f 93       	push	r16
    12d0:	08 30       	cpi	r16, 0x08	; 8
    12d2:	98 f0       	brcs	.+38     	; 0x12fa <__lshrdi3+0x30>
    12d4:	08 50       	subi	r16, 0x08	; 8
    12d6:	23 2f       	mov	r18, r19
    12d8:	34 2f       	mov	r19, r20
    12da:	45 2f       	mov	r20, r21
    12dc:	56 2f       	mov	r21, r22
    12de:	67 2f       	mov	r22, r23
    12e0:	78 2f       	mov	r23, r24
    12e2:	89 2f       	mov	r24, r25
    12e4:	90 2d       	mov	r25, r0
    12e6:	f4 cf       	rjmp	.-24     	; 0x12d0 <__lshrdi3+0x6>
    12e8:	05 94       	asr	r0
    12ea:	97 95       	ror	r25
    12ec:	87 95       	ror	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	57 95       	ror	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	0a 95       	dec	r16
    12fc:	aa f7       	brpl	.-22     	; 0x12e8 <__lshrdi3+0x1e>
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <__adddi3>:
    1302:	2a 0d       	add	r18, r10
    1304:	3b 1d       	adc	r19, r11
    1306:	4c 1d       	adc	r20, r12
    1308:	5d 1d       	adc	r21, r13
    130a:	6e 1d       	adc	r22, r14
    130c:	7f 1d       	adc	r23, r15
    130e:	80 1f       	adc	r24, r16
    1310:	91 1f       	adc	r25, r17
    1312:	08 95       	ret

00001314 <__subdi3>:
    1314:	2a 19       	sub	r18, r10
    1316:	3b 09       	sbc	r19, r11
    1318:	4c 09       	sbc	r20, r12
    131a:	5d 09       	sbc	r21, r13
    131c:	6e 09       	sbc	r22, r14
    131e:	7f 09       	sbc	r23, r15
    1320:	80 0b       	sbc	r24, r16
    1322:	91 0b       	sbc	r25, r17
    1324:	08 95       	ret

00001326 <__tablejump2__>:
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31

0000132a <__tablejump__>:
    132a:	05 90       	lpm	r0, Z+
    132c:	f4 91       	lpm	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	09 94       	ijmp

00001332 <__umulhisi3>:
    1332:	a2 9f       	mul	r26, r18
    1334:	b0 01       	movw	r22, r0
    1336:	b3 9f       	mul	r27, r19
    1338:	c0 01       	movw	r24, r0
    133a:	a3 9f       	mul	r26, r19
    133c:	70 0d       	add	r23, r0
    133e:	81 1d       	adc	r24, r1
    1340:	11 24       	eor	r1, r1
    1342:	91 1d       	adc	r25, r1
    1344:	b2 9f       	mul	r27, r18
    1346:	70 0d       	add	r23, r0
    1348:	81 1d       	adc	r24, r1
    134a:	11 24       	eor	r1, r1
    134c:	91 1d       	adc	r25, r1
    134e:	08 95       	ret

00001350 <_exit>:
    1350:	f8 94       	cli

00001352 <__stop_program>:
    1352:	ff cf       	rjmp	.-2      	; 0x1352 <__stop_program>
