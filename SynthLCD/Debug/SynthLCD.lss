
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  0000135a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  0080027a  0080027a  00001568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001863  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d8  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097a  00000000  00000000  000033db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008eb1  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed4  00000000  00000000  0000cf01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002c62  00000000  00000000  0000dfe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 03 	jmp	0x668	; 0x668 <__ctors_end>
       4:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
       8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
       c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      10:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      14:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      18:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      1c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      20:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      24:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_9>
      28:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      2c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      30:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      34:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      38:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      3c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      40:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      44:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      48:	0c 94 91 03 	jmp	0x722	; 0x722 <__vector_18>
      4c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      50:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_20>
      54:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_21>
      58:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      5c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      60:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>
      64:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	80 80       	ld	r8, Z
      6a:	80 80       	ld	r8, Z
      6c:	81 81       	ldd	r24, Z+1	; 0x01
      6e:	81 82       	std	Z+1, r8	; 0x01
      70:	82 83       	std	Z+2, r24	; 0x02
      72:	84 85       	ldd	r24, Z+12	; 0x0c
      74:	85 86       	std	Z+13, r8	; 0x0d
      76:	87 89       	ldd	r24, Z+23	; 0x17
      78:	8a 8b       	std	Y+18, r24	; 0x12
      7a:	8c 8e       	std	Y+28, r8	; 0x1c
      7c:	8f 90       	pop	r8
      7e:	92 94       	swap	r9
      80:	95 97       	sbiw	r26, 0x25	; 37
      82:	99 9b       	sbis	0x13, 1	; 19
      84:	9d 9f       	mul	r25, r29
      86:	a1 a3       	std	Z+33, r26	; 0x21
      88:	a5 a7       	std	Z+45, r26	; 0x2d
      8a:	aa ac       	ldd	r10, Y+58	; 0x3a
      8c:	ae b1       	in	r26, 0x0e	; 14
      8e:	b3 b6       	in	r11, 0x33	; 51
      90:	b8 bb       	out	0x18, r27	; 24
      92:	be c0       	rjmp	.+380    	; 0x210 <__trampolines_end+0x1a8>
      94:	c3 c6       	rjmp	.+3462   	; 0xe1c <__vector_9+0xee>
      96:	c9 cc       	rjmp	.-1646   	; 0xfffffa2a <__eeprom_end+0xff7efa2a>
      98:	ce d1       	rcall	.+924    	; 0x436 <__trampolines_end+0x3ce>
      9a:	d4 d7       	rcall	.+4008   	; 0x1044 <__vector_9+0x316>
      9c:	da dd       	rcall	.-1100   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	e6 e9       	ldi	r30, 0x96	; 150
      a2:	ec ef       	ldi	r30, 0xFC	; 252
      a4:	f3 f6       	brvc	.-68     	; 0x62 <__SREG__+0x23>
      a6:	f9 fc       	.word	0xfcf9	; ????
      a8:	ff 02       	muls	r31, r31
      aa:	05 08       	sbc	r0, r5
      ac:	0b 0f       	add	r16, r27
      ae:	12 15       	cp	r17, r2
      b0:	18 1b       	sub	r17, r24
      b2:	1e 21       	and	r17, r14
      b4:	24 27       	eor	r18, r20
      b6:	2a 2d       	mov	r18, r10
      b8:	30 32       	cpi	r19, 0x20	; 32
      ba:	35 38       	cpi	r19, 0x85	; 133
      bc:	3b 3e       	cpi	r19, 0xEB	; 235
      be:	40 43       	sbci	r20, 0x30	; 48
      c0:	46 48       	sbci	r20, 0x86	; 134
      c2:	4b 4d       	sbci	r20, 0xDB	; 219
      c4:	50 52       	subi	r21, 0x20	; 32
      c6:	54 57       	subi	r21, 0x74	; 116
      c8:	59 5b       	subi	r21, 0xB9	; 185
      ca:	5d 5f       	subi	r21, 0xFD	; 253
      cc:	61 63       	ori	r22, 0x31	; 49
      ce:	65 67       	ori	r22, 0x75	; 117
      d0:	69 6a       	ori	r22, 0xA9	; 169
      d2:	6c 6e       	ori	r22, 0xEC	; 236
      d4:	6f 70       	andi	r22, 0x0F	; 15
      d6:	72 73       	andi	r23, 0x32	; 50
      d8:	74 75       	andi	r23, 0x54	; 84
      da:	77 78       	andi	r23, 0x87	; 135
      dc:	79 79       	andi	r23, 0x99	; 153
      de:	7a 7b       	andi	r23, 0xBA	; 186
      e0:	7c 7c       	andi	r23, 0xCC	; 204
      e2:	7d 7d       	andi	r23, 0xDD	; 221
      e4:	7d 7e       	andi	r23, 0xED	; 237
      e6:	7e 7e       	andi	r23, 0xEE	; 238
      e8:	7e 7e       	andi	r23, 0xEE	; 238
      ea:	7e 7e       	andi	r23, 0xEE	; 238
      ec:	7d 7d       	andi	r23, 0xDD	; 221
      ee:	7d 7c       	andi	r23, 0xCD	; 205
      f0:	7c 7b       	andi	r23, 0xBC	; 188
      f2:	7a 79       	andi	r23, 0x9A	; 154
      f4:	79 78       	andi	r23, 0x89	; 137
      f6:	77 75       	andi	r23, 0x57	; 87
      f8:	74 73       	andi	r23, 0x34	; 52
      fa:	72 70       	andi	r23, 0x02	; 2
      fc:	6f 6e       	ori	r22, 0xEF	; 239
      fe:	6c 6a       	ori	r22, 0xAC	; 172
     100:	69 67       	ori	r22, 0x79	; 121
     102:	65 63       	ori	r22, 0x35	; 53
     104:	61 5f       	subi	r22, 0xF1	; 241
     106:	5d 5b       	subi	r21, 0xBD	; 189
     108:	59 57       	subi	r21, 0x79	; 121
     10a:	54 52       	subi	r21, 0x24	; 36
     10c:	50 4d       	sbci	r21, 0xD0	; 208
     10e:	4b 48       	sbci	r20, 0x8B	; 139
     110:	46 43       	sbci	r20, 0x36	; 54
     112:	40 3e       	cpi	r20, 0xE0	; 224
     114:	3b 38       	cpi	r19, 0x8B	; 139
     116:	35 32       	cpi	r19, 0x25	; 37
     118:	30 2d       	mov	r19, r0
     11a:	2a 27       	eor	r18, r26
     11c:	24 21       	and	r18, r4
     11e:	1e 1b       	sub	r17, r30
     120:	18 15       	cp	r17, r8
     122:	12 0f       	add	r17, r18
     124:	0b 08       	sbc	r0, r11
     126:	05 02       	muls	r16, r21
     128:	ff fc       	.word	0xfcff	; ????
     12a:	f9 f6       	brne	.-66     	; 0xea <__trampolines_end+0x82>
     12c:	f3 ef       	ldi	r31, 0xF3	; 243
     12e:	ec e9       	ldi	r30, 0x9C	; 156
     130:	e6 e3       	ldi	r30, 0x36	; 54
     132:	e0 dd       	rcall	.-1088   	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>
     134:	da d7       	rcall	.+4020   	; 0x10ea <__vector_9+0x3bc>
     136:	d4 d1       	rcall	.+936    	; 0x4e0 <__trampolines_end+0x478>
     138:	ce cc       	rjmp	.-1636   	; 0xfffffad6 <__eeprom_end+0xff7efad6>
     13a:	c9 c6       	rjmp	.+3474   	; 0xece <__vector_9+0x1a0>
     13c:	c3 c0       	rjmp	.+390    	; 0x2c4 <__trampolines_end+0x25c>
     13e:	be bb       	out	0x1e, r27	; 30
     140:	b8 b6       	in	r11, 0x38	; 56
     142:	b3 b1       	in	r27, 0x03	; 3
     144:	ae ac       	ldd	r10, Y+62	; 0x3e
     146:	aa a7       	std	Y+42, r26	; 0x2a
     148:	a5 a3       	std	Z+37, r26	; 0x25
     14a:	a1 9f       	mul	r26, r17
     14c:	9d 9b       	sbis	0x13, 5	; 19
     14e:	99 97       	sbiw	r26, 0x29	; 41
     150:	95 94       	asr	r9
     152:	92 90       	ld	r9, -Z
     154:	8f 8e       	std	Y+31, r8	; 0x1f
     156:	8c 8b       	std	Y+20, r24	; 0x14
     158:	8a 89       	ldd	r24, Y+18	; 0x12
     15a:	87 86       	std	Z+15, r8	; 0x0f
     15c:	85 85       	ldd	r24, Z+13	; 0x0d
     15e:	84 83       	std	Z+4, r24	; 0x04
     160:	82 82       	std	Z+2, r8	; 0x02
     162:	81 81       	ldd	r24, Z+1	; 0x01
     164:	81 80       	ldd	r8, Z+1	; 0x01
     166:	80 80       	ld	r8, Z
     168:	00 01       	movw	r0, r0
     16a:	03 05       	cpc	r16, r3
     16c:	07 09       	sbc	r16, r7
     16e:	0b 0d       	add	r16, r11
     170:	10 12       	cpse	r1, r16
     172:	14 16       	cp	r1, r20
     174:	18 1a       	sub	r1, r24
     176:	1d 1f       	adc	r17, r29
     178:	21 24       	eor	r2, r1
     17a:	26 28       	or	r2, r6
     17c:	2a 2d       	mov	r18, r10
     17e:	2f 31       	cpi	r18, 0x1F	; 31
     180:	33 35       	cpi	r19, 0x53	; 83
     182:	37 39       	cpi	r19, 0x97	; 151
     184:	3b 3d       	cpi	r19, 0xDB	; 219
     186:	3f 41       	sbci	r19, 0x1F	; 31
     188:	43 45       	sbci	r20, 0x53	; 83
     18a:	46 48       	sbci	r20, 0x86	; 134
     18c:	4a 4c       	sbci	r20, 0xCA	; 202
     18e:	4e 50       	subi	r20, 0x0E	; 14
     190:	52 55       	subi	r21, 0x52	; 82
     192:	57 59       	subi	r21, 0x97	; 151
     194:	5c 5e       	subi	r21, 0xEC	; 236
     196:	60 63       	ori	r22, 0x30	; 48
     198:	65 68       	ori	r22, 0x85	; 133
     19a:	6a 6d       	ori	r22, 0xDA	; 218
     19c:	6f 71       	andi	r22, 0x1F	; 31
     19e:	74 76       	andi	r23, 0x64	; 100
     1a0:	78 79       	andi	r23, 0x98	; 152
     1a2:	7b 7c       	andi	r23, 0xCB	; 203
     1a4:	7d 7e       	andi	r23, 0xED	; 237
     1a6:	7f 7f       	andi	r23, 0xFF	; 255
     1a8:	7f 7f       	andi	r23, 0xFF	; 255
     1aa:	7e 7e       	andi	r23, 0xEE	; 238
     1ac:	7d 7b       	andi	r23, 0xBD	; 189
     1ae:	7a 78       	andi	r23, 0x8A	; 138
     1b0:	77 75       	andi	r23, 0x57	; 87
     1b2:	73 70       	andi	r23, 0x03	; 3
     1b4:	6e 6c       	ori	r22, 0xCE	; 206
     1b6:	69 67       	ori	r22, 0x79	; 121
     1b8:	64 62       	ori	r22, 0x24	; 36
     1ba:	5f 5d       	subi	r21, 0xDF	; 223
     1bc:	5a 58       	subi	r21, 0x8A	; 138
     1be:	56 54       	subi	r21, 0x46	; 70
     1c0:	51 4f       	sbci	r21, 0xF1	; 241
     1c2:	4d 4b       	sbci	r20, 0xBD	; 189
     1c4:	49 47       	sbci	r20, 0x79	; 121
     1c6:	45 44       	sbci	r20, 0x45	; 69
     1c8:	42 40       	sbci	r20, 0x02	; 2
     1ca:	3e 3c       	cpi	r19, 0xCE	; 206
     1cc:	3a 38       	cpi	r19, 0x8A	; 138
     1ce:	36 34       	cpi	r19, 0x46	; 70
     1d0:	32 30       	cpi	r19, 0x02	; 2
     1d2:	2e 2b       	or	r18, r30
     1d4:	29 27       	eor	r18, r25
     1d6:	25 22       	and	r2, r21
     1d8:	20 1e       	adc	r2, r16
     1da:	1c 19       	sub	r17, r12
     1dc:	17 15       	cp	r17, r7
     1de:	13 11       	cpse	r17, r3
     1e0:	0e 0c       	add	r0, r14
     1e2:	0a 08       	sbc	r0, r10
     1e4:	06 04       	cpc	r0, r6
     1e6:	02 00       	.word	0x0002	; ????
     1e8:	ff fd       	.word	0xfdff	; ????
     1ea:	fb f9       	.word	0xf9fb	; ????
     1ec:	f7 f5       	brid	.+124    	; 0x26a <__trampolines_end+0x202>
     1ee:	f3 f1       	brvs	.+124    	; 0x26c <__trampolines_end+0x204>
     1f0:	ee ec       	ldi	r30, 0xCE	; 206
     1f2:	ea e8       	ldi	r30, 0x8A	; 138
     1f4:	e6 e3       	ldi	r30, 0x36	; 54
     1f6:	e1 df       	rcall	.-62     	; 0x1ba <__trampolines_end+0x152>
     1f8:	dd da       	rcall	.-2630   	; 0xfffff7b4 <__eeprom_end+0xff7ef7b4>
     1fa:	d8 d6       	rcall	.+3504   	; 0xfac <__vector_9+0x27e>
     1fc:	d4 d1       	rcall	.+936    	; 0x5a6 <__trampolines_end+0x53e>
     1fe:	cf cd       	rjmp	.-1122   	; 0xfffffd9e <__eeprom_end+0xff7efd9e>
     200:	cb c9       	rjmp	.-3178   	; 0xfffff598 <__eeprom_end+0xff7ef598>
     202:	c7 c5       	rjmp	.+2958   	; 0xd92 <__vector_9+0x64>
     204:	c3 c1       	rjmp	.+902    	; 0x58c <__trampolines_end+0x524>
     206:	bf bd       	out	0x2f, r27	; 47
     208:	bb ba       	out	0x1b, r11	; 27
     20a:	b8 b6       	in	r11, 0x38	; 56
     20c:	b4 b2       	in	r11, 0x14	; 20
     20e:	b0 ae       	std	Z+56, r11	; 0x38
     210:	ab a9       	ldd	r26, Y+51	; 0x33
     212:	a7 a5       	ldd	r26, Z+47	; 0x2f
     214:	a2 a0       	ldd	r10, Z+34	; 0x22
     216:	9d 9b       	sbis	0x13, 5	; 19
     218:	98 96       	adiw	r26, 0x28	; 40
     21a:	93 91       	.word	0x9193	; ????
     21c:	8f 8c       	ldd	r8, Y+31	; 0x1f
     21e:	8a 88       	ldd	r8, Y+18	; 0x12
     220:	87 85       	ldd	r24, Z+15	; 0x0f
     222:	84 82       	std	Z+4, r8	; 0x04
     224:	81 81       	ldd	r24, Z+1	; 0x01
     226:	80 80       	ld	r8, Z
     228:	80 80       	ld	r8, Z
     22a:	81 82       	std	Z+1, r8	; 0x01
     22c:	83 84       	ldd	r8, Z+11	; 0x0b
     22e:	86 87       	std	Z+14, r24	; 0x0e
     230:	89 8b       	std	Y+17, r24	; 0x11
     232:	8e 90       	ld	r8, -X
     234:	92 95       	swap	r25
     236:	97 9a       	sbi	0x12, 7	; 18
     238:	9c 9f       	mul	r25, r28
     23a:	a1 a3       	std	Z+33, r26	; 0x21
     23c:	a6 a8       	ldd	r10, Z+54	; 0x36
     23e:	aa ad       	ldd	r26, Y+58	; 0x3a
     240:	af b1       	in	r26, 0x0f	; 15
     242:	b3 b5       	in	r27, 0x23	; 35
     244:	b7 b9       	out	0x07, r27	; 7
     246:	ba bc       	out	0x2a, r11	; 42
     248:	be c0       	rjmp	.+380    	; 0x3c6 <__trampolines_end+0x35e>
     24a:	c2 c4       	rjmp	.+2436   	; 0xbd0 <__stack+0x2d1>
     24c:	c6 c8       	rjmp	.-3700   	; 0xfffff3da <__eeprom_end+0xff7ef3da>
     24e:	ca cc       	rjmp	.-1644   	; 0xfffffbe4 <__eeprom_end+0xff7efbe4>
     250:	ce d0       	rcall	.+412    	; 0x3ee <__trampolines_end+0x386>
     252:	d2 d5       	rcall	.+2980   	; 0xdf8 <__vector_9+0xca>
     254:	d7 d9       	rcall	.-3154   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     256:	db de       	rcall	.-586    	; 0xe <__zero_reg__+0xd>
     258:	e0 e2       	ldi	r30, 0x20	; 32
     25a:	e5 e7       	ldi	r30, 0x75	; 117
     25c:	e9 eb       	ldi	r30, 0xB9	; 185
     25e:	ed ef       	ldi	r30, 0xFD	; 253
     260:	f2 f4       	brpl	.+60     	; 0x29e <__trampolines_end+0x236>
     262:	f6 f8       	bld	r15, 6
     264:	fa fc       	.word	0xfcfa	; ????
     266:	fe ff       	.word	0xfffe	; ????
     268:	d7 d7       	rcall	.+4014   	; 0x1218 <__udivmod64+0x14>
     26a:	d7 d7       	rcall	.+4014   	; 0x121a <__udivmod64+0x16>
     26c:	d7 d6       	rcall	.+3502   	; 0x101c <__vector_9+0x2ee>
     26e:	d6 d5       	rcall	.+2988   	; 0xe1c <__vector_9+0xee>
     270:	d4 d3       	rcall	.+1960   	; 0xa1a <__stack+0x11b>
     272:	d1 d0       	rcall	.+418    	; 0x416 <__trampolines_end+0x3ae>
     274:	ce cd       	rjmp	.-1124   	; 0xfffffe12 <__eeprom_end+0xff7efe12>
     276:	cb c9       	rjmp	.-3178   	; 0xfffff60e <__eeprom_end+0xff7ef60e>
     278:	c7 c5       	rjmp	.+2958   	; 0xe08 <__vector_9+0xda>
     27a:	c4 c2       	rjmp	.+1416   	; 0x804 <_Z5setupv+0x5c>
     27c:	c1 c0       	rjmp	.+386    	; 0x400 <__trampolines_end+0x398>
     27e:	bf be       	out	0x3f, r11	; 63
     280:	bd bd       	out	0x2d, r27	; 45
     282:	bd bd       	out	0x2d, r27	; 45
     284:	bd bd       	out	0x2d, r27	; 45
     286:	bd bd       	out	0x2d, r27	; 45
     288:	bd bd       	out	0x2d, r27	; 45
     28a:	bd bd       	out	0x2d, r27	; 45
     28c:	bc bc       	out	0x2c, r11	; 44
     28e:	bb b9       	out	0x0b, r27	; 11
     290:	b8 b7       	in	r27, 0x38	; 56
     292:	b5 b3       	in	r27, 0x15	; 21
     294:	b1 af       	std	Z+57, r27	; 0x39
     296:	ae ac       	ldd	r10, Y+62	; 0x3e
     298:	aa a9       	ldd	r26, Y+50	; 0x32
     29a:	a7 a6       	std	Z+47, r10	; 0x2f
     29c:	a5 a5       	ldd	r26, Z+45	; 0x2d
     29e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2a0:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2a2:	a5 a5       	ldd	r26, Z+45	; 0x2d
     2a4:	a6 a6       	std	Z+46, r10	; 0x2e
     2a6:	a7 a7       	std	Z+47, r26	; 0x2f
     2a8:	a7 a7       	std	Z+47, r26	; 0x2f
     2aa:	a7 a7       	std	Z+47, r26	; 0x2f
     2ac:	a6 a5       	ldd	r26, Z+46	; 0x2e
     2ae:	a3 a2       	std	Z+35, r10	; 0x23
     2b0:	a0 9e       	mul	r10, r16
     2b2:	9c 9a       	sbi	0x13, 4	; 19
     2b4:	98 96       	adiw	r26, 0x28	; 40
     2b6:	94 93       	xch	Z, r25
     2b8:	91 90       	ld	r9, Z+
     2ba:	90 8f       	std	Z+24, r25	; 0x18
     2bc:	8f 90       	pop	r8
     2be:	91 92       	st	Z+, r9
     2c0:	93 95       	inc	r25
     2c2:	97 98       	cbi	0x12, 7	; 18
     2c4:	9a 9c       	mul	r9, r10
     2c6:	9d 9e       	mul	r9, r29
     2c8:	9e 9f       	mul	r25, r30
     2ca:	9e 9d       	mul	r25, r14
     2cc:	9c 9a       	sbi	0x13, 4	; 19
     2ce:	98 95       	break
     2d0:	92 8f       	std	Z+26, r25	; 0x1a
     2d2:	8c 88       	ldd	r8, Y+20	; 0x14
     2d4:	86 83       	std	Z+6, r24	; 0x06
     2d6:	81 80       	ldd	r8, Z+1	; 0x01
     2d8:	80 81       	ld	r24, Z
     2da:	83 86       	std	Z+11, r8	; 0x0b
     2dc:	8b 91       	.word	0x918b	; ????
     2de:	98 a1       	ldd	r25, Y+32	; 0x20
     2e0:	ab b6       	in	r10, 0x3b	; 59
     2e2:	c2 d0       	rcall	.+388    	; 0x468 <__trampolines_end+0x400>
     2e4:	de ec       	ldi	r29, 0xCE	; 206
     2e6:	fb 0a       	sbc	r15, r27
     2e8:	19 27       	eor	r17, r25
     2ea:	35 42       	sbci	r19, 0x25	; 37
     2ec:	4f 5a       	subi	r20, 0xAF	; 175
     2ee:	63 6c       	ori	r22, 0xC3	; 195
     2f0:	73 78       	andi	r23, 0x83	; 131
     2f2:	7c 7e       	andi	r23, 0xEC	; 236
     2f4:	7f 7f       	andi	r23, 0xFF	; 255
     2f6:	7d 7a       	andi	r23, 0xAD	; 173
     2f8:	76 72       	andi	r23, 0x26	; 38
     2fa:	6d 68       	ori	r22, 0x8D	; 141
     2fc:	62 5c       	subi	r22, 0xC2	; 194
     2fe:	57 51       	subi	r21, 0x17	; 23
     300:	4c 48       	sbci	r20, 0x8C	; 140
     302:	44 41       	sbci	r20, 0x14	; 20
     304:	3e 3c       	cpi	r19, 0xCE	; 206
     306:	3a 39       	cpi	r19, 0x9A	; 154
     308:	39 39       	cpi	r19, 0x99	; 153
     30a:	39 39       	cpi	r19, 0x99	; 153
     30c:	3a 3a       	cpi	r19, 0xAA	; 170
     30e:	3b 3b       	cpi	r19, 0xBB	; 187
     310:	3b 3b       	cpi	r19, 0xBB	; 187
     312:	3a 3a       	cpi	r19, 0xAA	; 170
     314:	38 37       	cpi	r19, 0x78	; 120
     316:	35 33       	cpi	r19, 0x35	; 53
     318:	30 2d       	mov	r19, r0
     31a:	2b 28       	or	r2, r11
     31c:	25 22       	and	r2, r21
     31e:	1f 1d       	adc	r17, r15
     320:	1b 19       	sub	r17, r11
     322:	17 16       	cp	r1, r23
     324:	14 14       	cp	r1, r4
     326:	13 13       	cpse	r17, r19
     328:	13 13       	cpse	r17, r19
     32a:	13 13       	cpse	r17, r19
     32c:	13 13       	cpse	r17, r19
     32e:	13 13       	cpse	r17, r19
     330:	12 11       	cpse	r17, r2
     332:	10 0f       	add	r17, r16
     334:	0e 0c       	add	r0, r14
     336:	0a 08       	sbc	r0, r10
     338:	06 04       	cpc	r0, r6
     33a:	02 00       	.word	0x0002	; ????
     33c:	fe fc       	.word	0xfcfe	; ????
     33e:	fa f9       	.word	0xf9fa	; ????
     340:	f7 f6       	brid	.-68     	; 0x2fe <__trampolines_end+0x296>
     342:	f5 f5       	brhc	.+124    	; 0x3c0 <__trampolines_end+0x358>
     344:	f4 f4       	brge	.+60     	; 0x382 <__trampolines_end+0x31a>
     346:	f4 f3       	brlt	.-4      	; 0x344 <__trampolines_end+0x2dc>
     348:	f3 f3       	brvs	.-4      	; 0x346 <__trampolines_end+0x2de>
     34a:	f3 f3       	brvs	.-4      	; 0x348 <__trampolines_end+0x2e0>
     34c:	f3 f3       	brvs	.-4      	; 0x34a <__trampolines_end+0x2e2>
     34e:	f2 f2       	brmi	.-68     	; 0x30c <__trampolines_end+0x2a4>
     350:	f1 f0       	breq	.+60     	; 0x38e <__trampolines_end+0x326>
     352:	ef ed       	ldi	r30, 0xDF	; 223
     354:	ec ea       	ldi	r30, 0xAC	; 172
     356:	e8 e6       	ldi	r30, 0x68	; 104
     358:	e4 e2       	ldi	r30, 0x24	; 36
     35a:	e1 df       	rcall	.-62     	; 0x31e <__trampolines_end+0x2b6>
     35c:	dd dc       	rcall	.-1606   	; 0xfffffd18 <__eeprom_end+0xff7efd18>
     35e:	db da       	rcall	.-2634   	; 0xfffff916 <__eeprom_end+0xff7ef916>
     360:	d9 d8       	rcall	.-3662   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     362:	d8 d7       	rcall	.+4016   	; 0x1314 <__subdi3>
     364:	d7 d7       	rcall	.+4014   	; 0x1314 <__subdi3>
     366:	d7 d7       	rcall	.+4014   	; 0x1316 <__subdi3+0x2>
     368:	28 28       	or	r2, r8
     36a:	28 28       	or	r2, r8
     36c:	28 29       	or	r18, r8
     36e:	29 2a       	or	r2, r25
     370:	2b 2c       	mov	r2, r11
     372:	2e 2f       	mov	r18, r30
     374:	31 32       	cpi	r19, 0x21	; 33
     376:	34 36       	cpi	r19, 0x64	; 100
     378:	38 3a       	cpi	r19, 0xA8	; 168
     37a:	3b 3d       	cpi	r19, 0xDB	; 219
     37c:	3e 3f       	cpi	r19, 0xFE	; 254
     37e:	40 41       	sbci	r20, 0x10	; 16
     380:	42 42       	sbci	r20, 0x22	; 34
     382:	42 42       	sbci	r20, 0x22	; 34
     384:	42 42       	sbci	r20, 0x22	; 34
     386:	42 42       	sbci	r20, 0x22	; 34
     388:	42 42       	sbci	r20, 0x22	; 34
     38a:	42 42       	sbci	r20, 0x22	; 34
     38c:	43 43       	sbci	r20, 0x33	; 51
     38e:	44 46       	sbci	r20, 0x64	; 100
     390:	47 48       	sbci	r20, 0x87	; 135
     392:	4a 4c       	sbci	r20, 0xCA	; 202
     394:	4e 50       	subi	r20, 0x0E	; 14
     396:	51 53       	subi	r21, 0x31	; 49
     398:	55 56       	subi	r21, 0x65	; 101
     39a:	58 59       	subi	r21, 0x98	; 152
     39c:	5a 5a       	subi	r21, 0xAA	; 170
     39e:	5b 5b       	subi	r21, 0xBB	; 187
     3a0:	5b 5b       	subi	r21, 0xBB	; 187
     3a2:	5a 5a       	subi	r21, 0xAA	; 170
     3a4:	59 59       	subi	r21, 0x99	; 153
     3a6:	58 58       	subi	r21, 0x88	; 136
     3a8:	58 58       	subi	r21, 0x88	; 136
     3aa:	58 58       	subi	r21, 0x88	; 136
     3ac:	59 5a       	subi	r21, 0xA9	; 169
     3ae:	5c 5d       	subi	r21, 0xDC	; 220
     3b0:	5f 61       	ori	r21, 0x1F	; 31
     3b2:	63 65       	ori	r22, 0x53	; 83
     3b4:	67 69       	ori	r22, 0x97	; 151
     3b6:	6b 6c       	ori	r22, 0xCB	; 203
     3b8:	6e 6f       	ori	r22, 0xFE	; 254
     3ba:	6f 70       	andi	r22, 0x0F	; 15
     3bc:	70 6f       	ori	r23, 0xF0	; 240
     3be:	6e 6d       	ori	r22, 0xDE	; 222
     3c0:	6c 6a       	ori	r22, 0xAC	; 172
     3c2:	68 67       	ori	r22, 0x78	; 120
     3c4:	65 63       	ori	r22, 0x35	; 53
     3c6:	62 61       	ori	r22, 0x12	; 18
     3c8:	61 60       	ori	r22, 0x01	; 1
     3ca:	61 62       	ori	r22, 0x21	; 33
     3cc:	63 65       	ori	r22, 0x53	; 83
     3ce:	67 6a       	ori	r22, 0xA7	; 167
     3d0:	6d 70       	andi	r22, 0x0D	; 13
     3d2:	73 77       	andi	r23, 0x73	; 115
     3d4:	79 7c       	andi	r23, 0xC9	; 201
     3d6:	7e 7f       	andi	r23, 0xFE	; 254
     3d8:	7f 7e       	andi	r23, 0xEF	; 239
     3da:	7c 79       	andi	r23, 0x9C	; 156
     3dc:	74 6e       	ori	r23, 0xE4	; 228
     3de:	67 5e       	subi	r22, 0xE7	; 231
     3e0:	54 49       	sbci	r21, 0x94	; 148
     3e2:	3d 2f       	mov	r19, r29
     3e4:	21 13       	cpse	r18, r17
     3e6:	04 f5       	brge	.+64     	; 0x428 <__trampolines_end+0x3c0>
     3e8:	e6 d8       	rcall	.-3636   	; 0xfffff5b6 <__eeprom_end+0xff7ef5b6>
     3ea:	ca bd       	out	0x2a, r28	; 42
     3ec:	b0 a5       	ldd	r27, Z+40	; 0x28
     3ee:	9c 93       	st	X, r25
     3f0:	8c 87       	std	Y+12, r24	; 0x0c
     3f2:	83 81       	ldd	r24, Z+3	; 0x03
     3f4:	80 80       	ld	r8, Z
     3f6:	82 85       	ldd	r24, Z+10	; 0x0a
     3f8:	89 8d       	ldd	r24, Y+25	; 0x19
     3fa:	92 97       	sbiw	r26, 0x22	; 34
     3fc:	9d a3       	std	Y+37, r25	; 0x25
     3fe:	a8 ae       	std	Y+56, r10	; 0x38
     400:	b3 b7       	in	r27, 0x33	; 51
     402:	bb be       	out	0x3b, r11	; 59
     404:	c1 c3       	rjmp	.+1922   	; 0xb88 <__stack+0x289>
     406:	c5 c6       	rjmp	.+3466   	; 0x1192 <__umulsidi3>
     408:	c6 c6       	rjmp	.+3468   	; 0x1196 <__umulsidi3_helper+0x2>
     40a:	c6 c6       	rjmp	.+3468   	; 0x1198 <__umulsidi3_helper+0x4>
     40c:	c5 c5       	rjmp	.+2954   	; 0xf98 <__vector_9+0x26a>
     40e:	c4 c4       	rjmp	.+2440   	; 0xd98 <__vector_9+0x6a>
     410:	c4 c4       	rjmp	.+2440   	; 0xd9a <__vector_9+0x6c>
     412:	c5 c5       	rjmp	.+2954   	; 0xf9e <__vector_9+0x270>
     414:	c7 c8       	rjmp	.-3698   	; 0xfffff5a4 <__eeprom_end+0xff7ef5a4>
     416:	ca cc       	rjmp	.-1644   	; 0xfffffdac <__eeprom_end+0xff7efdac>
     418:	cf d2       	rcall	.+1438   	; 0x9b8 <__stack+0xb9>
     41a:	d4 d7       	rcall	.+4008   	; 0x13c4 <_etext+0x6a>
     41c:	da dd       	rcall	.-1100   	; 0xffffffd2 <__eeprom_end+0xff7effd2>
     41e:	e0 e2       	ldi	r30, 0x20	; 32
     420:	e4 e6       	ldi	r30, 0x64	; 100
     422:	e8 e9       	ldi	r30, 0x98	; 152
     424:	eb eb       	ldi	r30, 0xBB	; 187
     426:	ec ec       	ldi	r30, 0xCC	; 204
     428:	ec ec       	ldi	r30, 0xCC	; 204
     42a:	ec ec       	ldi	r30, 0xCC	; 204
     42c:	ec ec       	ldi	r30, 0xCC	; 204
     42e:	ec ec       	ldi	r30, 0xCC	; 204
     430:	ed ee       	ldi	r30, 0xED	; 237
     432:	ef f0       	brie	.+58     	; 0x46e <__trampolines_end+0x406>
     434:	f1 f3       	breq	.-4      	; 0x432 <__trampolines_end+0x3ca>
     436:	f5 f7       	brhc	.-4      	; 0x434 <__trampolines_end+0x3cc>
     438:	f9 fb       	.word	0xfbf9	; ????
     43a:	fd ff       	.word	0xfffd	; ????
     43c:	01 03       	mulsu	r16, r17
     43e:	05 06       	cpc	r0, r21
     440:	08 09       	sbc	r16, r8
     442:	0a 0a       	sbc	r0, r26
     444:	0b 0b       	sbc	r16, r27
     446:	0b 0c       	add	r0, r11
     448:	0c 0c       	add	r0, r12
     44a:	0c 0c       	add	r0, r12
     44c:	0c 0c       	add	r0, r12
     44e:	0d 0d       	add	r16, r13
     450:	0e 0f       	add	r16, r30
     452:	10 12       	cpse	r1, r16
     454:	13 15       	cp	r17, r3
     456:	17 19       	sub	r17, r7
     458:	1b 1d       	adc	r17, r11
     45a:	1e 20       	and	r1, r14
     45c:	22 23       	and	r18, r18
     45e:	24 25       	eor	r18, r4
     460:	26 27       	eor	r18, r22
     462:	27 28       	or	r2, r7
     464:	28 28       	or	r2, r8
     466:	28 28       	or	r2, r8
     468:	ff 0d       	add	r31, r15
     46a:	1a 27       	eor	r17, r26
     46c:	34 40       	sbci	r19, 0x04	; 4
     46e:	4b 55       	subi	r20, 0x5B	; 91
     470:	5e 66       	ori	r21, 0x6E	; 110
     472:	6d 73       	andi	r22, 0x3D	; 61
     474:	77 7b       	andi	r23, 0xB7	; 183
     476:	7d 7f       	andi	r23, 0xFD	; 253
     478:	7f 7f       	andi	r23, 0xFF	; 255
     47a:	7d 7b       	andi	r23, 0xBD	; 189
     47c:	79 76       	andi	r23, 0x69	; 105
     47e:	73 70       	andi	r23, 0x03	; 3
     480:	6d 6a       	ori	r22, 0xAD	; 173
     482:	68 65       	ori	r22, 0x58	; 88
     484:	63 62       	ori	r22, 0x23	; 35
     486:	60 60       	ori	r22, 0x00	; 0
     488:	60 60       	ori	r22, 0x00	; 0
     48a:	61 62       	ori	r22, 0x21	; 33
     48c:	63 65       	ori	r22, 0x53	; 83
     48e:	67 69       	ori	r22, 0x97	; 151
     490:	6b 6d       	ori	r22, 0xDB	; 219
     492:	6f 70       	andi	r22, 0x0F	; 15
     494:	72 73       	andi	r23, 0x32	; 50
     496:	74 74       	andi	r23, 0x44	; 68
     498:	74 74       	andi	r23, 0x44	; 68
     49a:	73 73       	andi	r23, 0x33	; 51
     49c:	71 70       	andi	r23, 0x01	; 1
     49e:	6e 6d       	ori	r22, 0xDE	; 222
     4a0:	6b 69       	ori	r22, 0x9B	; 155
     4a2:	68 66       	ori	r22, 0x68	; 104
     4a4:	65 64       	ori	r22, 0x45	; 69
     4a6:	63 63       	ori	r22, 0x33	; 51
     4a8:	63 63       	ori	r22, 0x33	; 51
     4aa:	64 64       	ori	r22, 0x44	; 68
     4ac:	66 67       	ori	r22, 0x76	; 118
     4ae:	68 6a       	ori	r22, 0xA8	; 168
     4b0:	6c 6e       	ori	r22, 0xEC	; 236
     4b2:	6f 71       	andi	r22, 0x1F	; 31
     4b4:	72 73       	andi	r23, 0x32	; 50
     4b6:	74 74       	andi	r23, 0x44	; 68
     4b8:	74 74       	andi	r23, 0x44	; 68
     4ba:	73 72       	andi	r23, 0x23	; 35
     4bc:	71 6f       	ori	r23, 0xF1	; 241
     4be:	6e 6c       	ori	r22, 0xCE	; 206
     4c0:	6a 68       	ori	r22, 0x8A	; 138
     4c2:	66 64       	ori	r22, 0x46	; 70
     4c4:	62 61       	ori	r22, 0x12	; 18
     4c6:	60 60       	ori	r22, 0x00	; 0
     4c8:	60 60       	ori	r22, 0x00	; 0
     4ca:	61 62       	ori	r22, 0x21	; 33
     4cc:	64 66       	ori	r22, 0x64	; 100
     4ce:	69 6c       	ori	r22, 0xC9	; 201
     4d0:	6f 72       	andi	r22, 0x2F	; 47
     4d2:	75 78       	andi	r23, 0x85	; 133
     4d4:	7a 7c       	andi	r23, 0xCA	; 202
     4d6:	7e 7f       	andi	r23, 0xFE	; 254
     4d8:	7f 7e       	andi	r23, 0xEF	; 239
     4da:	7c 79       	andi	r23, 0x9C	; 156
     4dc:	75 70       	andi	r23, 0x05	; 5
     4de:	6a 62       	ori	r22, 0x2A	; 42
     4e0:	59 50       	subi	r21, 0x09	; 9
     4e2:	45 3a       	cpi	r20, 0xA5	; 165
     4e4:	2e 21       	and	r18, r14
     4e6:	14 06       	cpc	r1, r20
     4e8:	f9 eb       	ldi	r31, 0xB9	; 185
     4ea:	de d1       	rcall	.+956    	; 0x8a8 <_Z5setupv+0x100>
     4ec:	c5 ba       	out	0x15, r12	; 21
     4ee:	af a6       	std	Y+47, r10	; 0x2f
     4f0:	9d 95 8f 8a 	jmp	0x67151e	; 0x67151e <__data_load_end+0x67004a>
     4f4:	86 83       	std	Z+6, r24	; 0x06
     4f6:	81 80       	ldd	r8, Z+1	; 0x01
     4f8:	80 81       	ld	r24, Z
     4fa:	83 85       	ldd	r24, Z+11	; 0x0b
     4fc:	87 8a       	std	Z+23, r8	; 0x17
     4fe:	8d 90       	ld	r8, X+
     500:	93 96       	adiw	r26, 0x23	; 35
     502:	99 9b       	sbis	0x13, 1	; 19
     504:	9d 9e       	mul	r9, r29
     506:	9f 9f       	mul	r25, r31
     508:	9f 9f       	mul	r25, r31
     50a:	9e 9d       	mul	r25, r14
     50c:	9b 99       	sbic	0x13, 3	; 19
     50e:	97 95       	ror	r25
     510:	93 91       	.word	0x9193	; ????
     512:	90 8e       	std	Z+24, r9	; 0x18
     514:	8d 8c       	ldd	r8, Y+29	; 0x1d
     516:	8b 8b       	std	Y+19, r24	; 0x13
     518:	8b 8b       	std	Y+19, r24	; 0x13
     51a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     51c:	8e 90       	ld	r8, -X
     51e:	91 93       	st	Z+, r25
     520:	95 97       	sbiw	r26, 0x25	; 37
     522:	98 99       	sbic	0x13, 0	; 19
     524:	9b 9b       	sbis	0x13, 3	; 19
     526:	9c 9c       	mul	r9, r12
     528:	9c 9c       	mul	r9, r12
     52a:	9b 9a       	sbi	0x13, 3	; 19
     52c:	99 97       	sbiw	r26, 0x29	; 41
     52e:	96 94       	lsr	r9
     530:	92 91       	ld	r25, -Z
     532:	8f 8e       	std	Y+31, r8	; 0x1f
     534:	8c 8c       	ldd	r8, Y+28	; 0x1c
     536:	8b 8b       	std	Y+19, r24	; 0x13
     538:	8b 8b       	std	Y+19, r24	; 0x13
     53a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     53c:	8f 90       	pop	r8
     53e:	92 94       	swap	r9
     540:	96 98       	cbi	0x12, 6	; 18
     542:	9a 9c       	mul	r9, r10
     544:	9d 9e       	mul	r9, r29
     546:	9f 9f       	mul	r25, r31
     548:	9f 9f       	mul	r25, r31
     54a:	9d 9c       	mul	r9, r13
     54c:	9a 97       	sbiw	r26, 0x2a	; 42
     54e:	95 92       	las	Z, r9
     550:	8f 8c       	ldd	r8, Y+31	; 0x1f
     552:	89 86       	std	Y+9, r8	; 0x09
     554:	84 82       	std	Z+4, r8	; 0x04
     556:	80 80       	ld	r8, Z
     558:	80 82       	st	Z, r8
     55a:	84 88       	ldd	r8, Z+20	; 0x14
     55c:	8c 92       	st	X, r8
     55e:	99 a1       	ldd	r25, Y+33	; 0x21
     560:	aa b4       	in	r10, 0x2a	; 42
     562:	bf cb       	rjmp	.-2178   	; 0xfffffce2 <__eeprom_end+0xff7efce2>
     564:	d8 e5       	ldi	r29, 0x58	; 88
     566:	f2 ff       	sbrs	r31, 2
     568:	80 80       	ld	r8, Z
     56a:	80 80       	ld	r8, Z
     56c:	80 80       	ld	r8, Z
     56e:	80 80       	ld	r8, Z
     570:	80 80       	ld	r8, Z
     572:	80 80       	ld	r8, Z
     574:	80 80       	ld	r8, Z
     576:	80 80       	ld	r8, Z
     578:	80 80       	ld	r8, Z
     57a:	80 80       	ld	r8, Z
     57c:	80 80       	ld	r8, Z
     57e:	80 80       	ld	r8, Z
     580:	80 80       	ld	r8, Z
     582:	80 80       	ld	r8, Z
     584:	80 80       	ld	r8, Z
     586:	80 80       	ld	r8, Z
     588:	80 80       	ld	r8, Z
     58a:	80 80       	ld	r8, Z
     58c:	80 80       	ld	r8, Z
     58e:	80 80       	ld	r8, Z
     590:	80 80       	ld	r8, Z
     592:	80 80       	ld	r8, Z
     594:	80 80       	ld	r8, Z
     596:	80 80       	ld	r8, Z
     598:	80 80       	ld	r8, Z
     59a:	80 80       	ld	r8, Z
     59c:	80 80       	ld	r8, Z
     59e:	80 80       	ld	r8, Z
     5a0:	80 80       	ld	r8, Z
     5a2:	80 80       	ld	r8, Z
     5a4:	80 80       	ld	r8, Z
     5a6:	80 80       	ld	r8, Z
     5a8:	80 80       	ld	r8, Z
     5aa:	80 80       	ld	r8, Z
     5ac:	80 80       	ld	r8, Z
     5ae:	80 80       	ld	r8, Z
     5b0:	80 80       	ld	r8, Z
     5b2:	80 80       	ld	r8, Z
     5b4:	80 80       	ld	r8, Z
     5b6:	80 80       	ld	r8, Z
     5b8:	80 80       	ld	r8, Z
     5ba:	80 80       	ld	r8, Z
     5bc:	80 80       	ld	r8, Z
     5be:	80 80       	ld	r8, Z
     5c0:	80 80       	ld	r8, Z
     5c2:	80 80       	ld	r8, Z
     5c4:	80 80       	ld	r8, Z
     5c6:	80 80       	ld	r8, Z
     5c8:	80 80       	ld	r8, Z
     5ca:	80 80       	ld	r8, Z
     5cc:	80 80       	ld	r8, Z
     5ce:	80 80       	ld	r8, Z
     5d0:	80 80       	ld	r8, Z
     5d2:	80 80       	ld	r8, Z
     5d4:	80 80       	ld	r8, Z
     5d6:	80 80       	ld	r8, Z
     5d8:	80 80       	ld	r8, Z
     5da:	80 80       	ld	r8, Z
     5dc:	80 80       	ld	r8, Z
     5de:	80 80       	ld	r8, Z
     5e0:	80 80       	ld	r8, Z
     5e2:	80 80       	ld	r8, Z
     5e4:	80 80       	ld	r8, Z
     5e6:	80 80       	ld	r8, Z
     5e8:	80 80       	ld	r8, Z
     5ea:	80 80       	ld	r8, Z
     5ec:	80 80       	ld	r8, Z
     5ee:	80 80       	ld	r8, Z
     5f0:	80 80       	ld	r8, Z
     5f2:	80 80       	ld	r8, Z
     5f4:	80 80       	ld	r8, Z
     5f6:	80 80       	ld	r8, Z
     5f8:	80 80       	ld	r8, Z
     5fa:	80 80       	ld	r8, Z
     5fc:	80 80       	ld	r8, Z
     5fe:	80 80       	ld	r8, Z
     600:	80 80       	ld	r8, Z
     602:	80 80       	ld	r8, Z
     604:	80 80       	ld	r8, Z
     606:	80 80       	ld	r8, Z
     608:	80 80       	ld	r8, Z
     60a:	80 80       	ld	r8, Z
     60c:	80 80       	ld	r8, Z
     60e:	80 80       	ld	r8, Z
     610:	80 80       	ld	r8, Z
     612:	80 80       	ld	r8, Z
     614:	80 80       	ld	r8, Z
     616:	80 80       	ld	r8, Z
     618:	80 80       	ld	r8, Z
     61a:	80 80       	ld	r8, Z
     61c:	80 80       	ld	r8, Z
     61e:	80 80       	ld	r8, Z
     620:	80 80       	ld	r8, Z
     622:	80 80       	ld	r8, Z
     624:	80 80       	ld	r8, Z
     626:	80 80       	ld	r8, Z
     628:	80 80       	ld	r8, Z
     62a:	80 80       	ld	r8, Z
     62c:	80 80       	ld	r8, Z
     62e:	80 80       	ld	r8, Z
     630:	80 80       	ld	r8, Z
     632:	80 80       	ld	r8, Z
     634:	80 80       	ld	r8, Z
     636:	80 80       	ld	r8, Z
     638:	80 80       	ld	r8, Z
     63a:	80 80       	ld	r8, Z
     63c:	80 80       	ld	r8, Z
     63e:	80 80       	ld	r8, Z
     640:	80 80       	ld	r8, Z
     642:	80 80       	ld	r8, Z
     644:	80 80       	ld	r8, Z
     646:	80 80       	ld	r8, Z
     648:	80 80       	ld	r8, Z
     64a:	80 80       	ld	r8, Z
     64c:	80 80       	ld	r8, Z
     64e:	80 80       	ld	r8, Z
     650:	80 80       	ld	r8, Z
     652:	80 80       	ld	r8, Z
     654:	80 80       	ld	r8, Z
     656:	80 80       	ld	r8, Z
     658:	80 80       	ld	r8, Z
     65a:	80 80       	ld	r8, Z
     65c:	80 80       	ld	r8, Z
     65e:	80 80       	ld	r8, Z
     660:	80 80       	ld	r8, Z
     662:	80 80       	ld	r8, Z
     664:	80 80       	ld	r8, Z
     666:	80 80       	ld	r8, Z

00000668 <__ctors_end>:
     668:	11 24       	eor	r1, r1
     66a:	1f be       	out	0x3f, r1	; 63
     66c:	cf ef       	ldi	r28, 0xFF	; 255
     66e:	d8 e0       	ldi	r29, 0x08	; 8
     670:	de bf       	out	0x3e, r29	; 62
     672:	cd bf       	out	0x3d, r28	; 61

00000674 <__do_copy_data>:
     674:	12 e0       	ldi	r17, 0x02	; 2
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b1 e0       	ldi	r27, 0x01	; 1
     67a:	ea e5       	ldi	r30, 0x5A	; 90
     67c:	f3 e1       	ldi	r31, 0x13	; 19
     67e:	02 c0       	rjmp	.+4      	; 0x684 <__do_copy_data+0x10>
     680:	05 90       	lpm	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	aa 37       	cpi	r26, 0x7A	; 122
     686:	b1 07       	cpc	r27, r17
     688:	d9 f7       	brne	.-10     	; 0x680 <__do_copy_data+0xc>

0000068a <__do_clear_bss>:
     68a:	24 e0       	ldi	r18, 0x04	; 4
     68c:	aa e7       	ldi	r26, 0x7A	; 122
     68e:	b2 e0       	ldi	r27, 0x02	; 2
     690:	01 c0       	rjmp	.+2      	; 0x694 <.do_clear_bss_start>

00000692 <.do_clear_bss_loop>:
     692:	1d 92       	st	X+, r1

00000694 <.do_clear_bss_start>:
     694:	a8 3d       	cpi	r26, 0xD8	; 216
     696:	b2 07       	cpc	r27, r18
     698:	e1 f7       	brne	.-8      	; 0x692 <.do_clear_bss_loop>
     69a:	0e 94 27 06 	call	0xc4e	; 0xc4e <main>
     69e:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

000006a2 <__bad_interrupt>:
     6a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a6 <_Z10serialInitv>:

RXEvent rxEvent = 0;

void serialInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     6a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     6aa:	8f e1       	ldi	r24, 0x1F	; 31
     6ac:	80 93 c4 00 	sts	0x00C4, r24
		
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     6b0:	88 ed       	ldi	r24, 0xD8	; 216
     6b2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     6b6:	86 e0       	ldi	r24, 0x06	; 6
     6b8:	80 93 c2 00 	sts	0x00C2, r24
     6bc:	08 95       	ret

000006be <__vector_20>:
{
	return rxMessagesRemaining;
}

ISR(USART_TX_vect)
{
     6be:	1f 92       	push	r1
     6c0:	0f 92       	push	r0
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	0f 92       	push	r0
     6c6:	11 24       	eor	r1, r1
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
	txMessagesRemaining--;
     6d0:	80 91 80 03 	lds	r24, 0x0380
     6d4:	90 91 81 03 	lds	r25, 0x0381
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	90 93 81 03 	sts	0x0381, r25
     6de:	80 93 80 03 	sts	0x0380, r24
	
	if(txMessagesRemaining > 0)
     6e2:	18 16       	cp	r1, r24
     6e4:	19 06       	cpc	r1, r25
     6e6:	5c f4       	brge	.+22     	; 0x6fe <__vector_20+0x40>
		UDR0 = txBuffer[txBufferReadIndex & TX_BUFFER_SIZE];
     6e8:	e0 91 82 03 	lds	r30, 0x0382
     6ec:	f0 91 83 03 	lds	r31, 0x0383
     6f0:	ee 27       	eor	r30, r30
     6f2:	f1 70       	andi	r31, 0x01	; 1
     6f4:	ec 57       	subi	r30, 0x7C	; 124
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	80 81       	ld	r24, Z
     6fa:	80 93 c6 00 	sts	0x00C6, r24
	
	txBufferReadIndex++;
     6fe:	80 91 82 03 	lds	r24, 0x0382
     702:	90 91 83 03 	lds	r25, 0x0383
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	90 93 83 03 	sts	0x0383, r25
     70c:	80 93 82 03 	sts	0x0382, r24
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <__vector_18>:

ISR(USART_RX_vect)
{
     722:	1f 92       	push	r1
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
	rxBuffer[rxBufferWriteIndex & RX_BUFFER_SIZE] = UDR0;
     744:	80 91 7e 02 	lds	r24, 0x027E
     748:	90 91 7f 02 	lds	r25, 0x027F
     74c:	20 91 c6 00 	lds	r18, 0x00C6
     750:	fc 01       	movw	r30, r24
     752:	ee 27       	eor	r30, r30
     754:	f1 70       	andi	r31, 0x01	; 1
     756:	e0 58       	subi	r30, 0x80	; 128
     758:	fd 4f       	sbci	r31, 0xFD	; 253
     75a:	20 83       	st	Z, r18
	
	rxBufferWriteIndex++;
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	90 93 7f 02 	sts	0x027F, r25
     762:	80 93 7e 02 	sts	0x027E, r24
	rxMessagesRemaining++;
     766:	80 91 7c 02 	lds	r24, 0x027C
     76a:	90 91 7d 02 	lds	r25, 0x027D
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 7d 02 	sts	0x027D, r25
     774:	80 93 7c 02 	sts	0x027C, r24
	
	if(rxEvent != 0)
     778:	e0 91 7a 02 	lds	r30, 0x027A
     77c:	f0 91 7b 02 	lds	r31, 0x027B
     780:	30 97       	sbiw	r30, 0x00	; 0
     782:	09 f0       	breq	.+2      	; 0x786 <__vector_18+0x64>
		rxEvent(rxMessagesRemaining);
     784:	09 95       	icall
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	bf 91       	pop	r27
     78c:	af 91       	pop	r26
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	7f 91       	pop	r23
     794:	6f 91       	pop	r22
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <_Z5setupv>:
		putString("\r\n");*/
	}
}

void setup()
{
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <_Z5setupv+0x1e>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <_Z5setupv+0x20>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	9d e8       	ldi	r25, 0x8D	; 141
     7d0:	ac e8       	ldi	r26, 0x8C	; 140
     7d2:	ba e7       	ldi	r27, 0x7A	; 122
     7d4:	80 93 90 04 	sts	0x0490, r24
     7d8:	90 93 91 04 	sts	0x0491, r25
     7dc:	a0 93 92 04 	sts	0x0492, r26
     7e0:	b0 93 93 04 	sts	0x0493, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
     7ec:	1a 82       	std	Y+2, r1	; 0x02
     7ee:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     7f0:	89 80       	ldd	r8, Y+1	; 0x01
     7f2:	9a 80       	ldd	r9, Y+2	; 0x02
     7f4:	ab 80       	ldd	r10, Y+3	; 0x03
     7f6:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     7f8:	94 01       	movw	r18, r8
     7fa:	a5 01       	movw	r20, r10
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	00 e1       	ldi	r16, 0x10	; 16
     806:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     80a:	a1 2c       	mov	r10, r1
     80c:	ed e8       	ldi	r30, 0x8D	; 141
     80e:	be 2e       	mov	r11, r30
     810:	fc e8       	ldi	r31, 0x8C	; 140
     812:	cf 2e       	mov	r12, r31
     814:	aa e7       	ldi	r26, 0x7A	; 122
     816:	da 2e       	mov	r13, r26
     818:	e1 2c       	mov	r14, r1
     81a:	f1 2c       	mov	r15, r1
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivdi3>
     824:	20 93 8c 04 	sts	0x048C, r18
     828:	30 93 8d 04 	sts	0x048D, r19
     82c:	40 93 8e 04 	sts	0x048E, r20
     830:	50 93 8f 04 	sts	0x048F, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
     83c:	89 80       	ldd	r8, Y+1	; 0x01
     83e:	9a 80       	ldd	r9, Y+2	; 0x02
     840:	ab 80       	ldd	r10, Y+3	; 0x03
     842:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
     844:	94 01       	movw	r18, r8
     846:	a5 01       	movw	r20, r10
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	00 e1       	ldi	r16, 0x10	; 16
     852:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
     856:	a1 2c       	mov	r10, r1
     858:	bd e8       	ldi	r27, 0x8D	; 141
     85a:	bb 2e       	mov	r11, r27
     85c:	0c e8       	ldi	r16, 0x8C	; 140
     85e:	c0 2e       	mov	r12, r16
     860:	ea e7       	ldi	r30, 0x7A	; 122
     862:	de 2e       	mov	r13, r30
     864:	e1 2c       	mov	r14, r1
     866:	f1 2c       	mov	r15, r1
     868:	00 e0       	ldi	r16, 0x00	; 0
     86a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivdi3>
     86e:	3b 01       	movw	r6, r22
     870:	4c 01       	movw	r8, r24
     872:	b2 2f       	mov	r27, r18
     874:	a3 2f       	mov	r26, r19
     876:	f4 2f       	mov	r31, r20
     878:	e5 2f       	mov	r30, r21
     87a:	20 93 94 04 	sts	0x0494, r18
     87e:	30 93 95 04 	sts	0x0495, r19
     882:	40 93 96 04 	sts	0x0496, r20
     886:	50 93 97 04 	sts	0x0497, r21
	*((unsigned short*)&(b)) = 0;
}

inline void toFixed(double a, unsigned long &b)
{
	b = (unsigned long)(a*65536);
     88a:	4c ec       	ldi	r20, 0xCC	; 204
     88c:	5c e0       	ldi	r21, 0x0C	; 12
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	40 93 98 04 	sts	0x0498, r20
     896:	50 93 99 04 	sts	0x0499, r21
     89a:	60 93 9a 04 	sts	0x049A, r22
     89e:	70 93 9b 04 	sts	0x049B, r23

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     8a2:	2b 2f       	mov	r18, r27
     8a4:	3a 2f       	mov	r19, r26
     8a6:	4f 2f       	mov	r20, r31
     8a8:	5e 2f       	mov	r21, r30
     8aa:	b3 01       	movw	r22, r6
     8ac:	c4 01       	movw	r24, r8
     8ae:	03 e0       	ldi	r16, 0x03	; 3
     8b0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
     8b4:	ab 2e       	mov	r10, r27
     8b6:	ba 2e       	mov	r11, r26
     8b8:	cf 2e       	mov	r12, r31
     8ba:	de 2e       	mov	r13, r30
     8bc:	73 01       	movw	r14, r6
     8be:	84 01       	movw	r16, r8
     8c0:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     8c4:	01 e0       	ldi	r16, 0x01	; 1
     8c6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
     8ca:	08 2d       	mov	r16, r8
     8cc:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     8d0:	59 01       	movw	r10, r18
     8d2:	6a 01       	movw	r12, r20
     8d4:	7b 01       	movw	r14, r22
     8d6:	e8 2f       	mov	r30, r24
     8d8:	19 2f       	mov	r17, r25
     8da:	06 e0       	ldi	r16, 0x06	; 6
     8dc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
     8e0:	0e 2f       	mov	r16, r30
     8e2:	0e 94 8a 09 	call	0x1314	; 0x1314 <__subdi3>
     8e6:	02 e0       	ldi	r16, 0x02	; 2
     8e8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__ashldi3>
	
	return (unsigned long)(temp >> 16);
     8ec:	00 e1       	ldi	r16, 0x10	; 16
     8ee:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__lshrdi3>
     8f2:	c9 01       	movw	r24, r18
     8f4:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);
	
	toFixed(0.05, lfoFreq);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);	
     8f6:	80 93 9c 04 	sts	0x049C, r24
     8fa:	90 93 9d 04 	sts	0x049D, r25
     8fe:	a0 93 9e 04 	sts	0x049E, r26
     902:	b0 93 9f 04 	sts	0x049F, r27
	//lfoRouteFunction = lfoRouteCents2;
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
     906:	8f e0       	ldi	r24, 0x0F	; 15
     908:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1);
     90c:	82 e8       	ldi	r24, 0x82	; 130
     90e:	80 93 7a 00 	sts	0x007A, r24
	
	toFixed(0.05, lfoFreq);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);	
	
	adcInit();
	serialInit();
     912:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_Z10serialInitv>
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
     916:	80 91 b1 00 	lds	r24, 0x00B1
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
     920:	80 91 b1 00 	lds	r24, 0x00B1
     924:	8d 7f       	andi	r24, 0xFD	; 253
     926:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
     92a:	80 91 b1 00 	lds	r24, 0x00B1
     92e:	8b 7f       	andi	r24, 0xFB	; 251
     930:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
     934:	80 91 b0 00 	lds	r24, 0x00B0
     938:	8f 7b       	andi	r24, 0xBF	; 191
     93a:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
     93e:	80 91 b0 00 	lds	r24, 0x00B0
     942:	80 68       	ori	r24, 0x80	; 128
     944:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
     948:	80 91 b0 00 	lds	r24, 0x00B0
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
     952:	80 91 b0 00 	lds	r24, 0x00B0
     956:	8d 7f       	andi	r24, 0xFD	; 253
     958:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
     95c:	80 91 b1 00 	lds	r24, 0x00B1
     960:	87 7f       	andi	r24, 0xF7	; 247
     962:	80 93 b1 00 	sts	0x00B1, r24
	sei();
}

void noteUpdate()
{
	sei();
     966:	78 94       	sei
     968:	20 91 98 04 	lds	r18, 0x0498
     96c:	30 91 99 04 	lds	r19, 0x0499
     970:	40 91 9a 04 	lds	r20, 0x049A
     974:	50 91 9b 04 	lds	r21, 0x049B
     978:	60 91 94 04 	lds	r22, 0x0494
     97c:	70 91 95 04 	lds	r23, 0x0495
     980:	80 91 96 04 	lds	r24, 0x0496
     984:	90 91 97 04 	lds	r25, 0x0497

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = 0;
	temp = lhs;
	temp *= rhs;
     988:	0e 94 c9 08 	call	0x1192	; 0x1192 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     98c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__lshrdi3>
     990:	c9 01       	movw	r24, r18
     992:	da 01       	movw	r26, r20
}

void noteUpdate()
{
	sei();
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     994:	80 93 9c 04 	sts	0x049C, r24
     998:	90 93 9d 04 	sts	0x049D, r25
     99c:	a0 93 9e 04 	sts	0x049E, r26
     9a0:	b0 93 9f 04 	sts	0x049F, r27
	cli();
     9a4:	f8 94       	cli
	cbi (TCCR2B, WGM22);
}

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
     9a6:	20 91 be 04 	lds	r18, 0x04BE
     9aa:	30 91 0b 01 	lds	r19, 0x010B
     9ae:	40 91 c0 04 	lds	r20, 0x04C0
     9b2:	80 91 bf 04 	lds	r24, 0x04BF
     9b6:	08 2e       	mov	r0, r24
     9b8:	00 0c       	add	r0, r0
     9ba:	99 0b       	sbc	r25, r25
     9bc:	84 0f       	add	r24, r20
     9be:	91 1d       	adc	r25, r1
     9c0:	47 fd       	sbrc	r20, 7
     9c2:	9a 95       	dec	r25
     9c4:	83 0f       	add	r24, r19
     9c6:	91 1d       	adc	r25, r1
     9c8:	3c e0       	ldi	r19, 0x0C	; 12
     9ca:	23 02       	muls	r18, r19
     9cc:	80 0d       	add	r24, r0
     9ce:	91 1d       	adc	r25, r1
     9d0:	11 24       	eor	r1, r1
     9d2:	97 fd       	sbrc	r25, 7
     9d4:	2d c1       	rjmp	.+602    	; 0xc30 <__stack+0x331>
	{
		cli();
		osc1TWord = keyFreq[0];	
		sei();
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
     9d6:	88 35       	cpi	r24, 0x58	; 88
     9d8:	91 05       	cpc	r25, r1
     9da:	0c f0       	brlt	.+2      	; 0x9de <__stack+0xdf>
     9dc:	fc c0       	rjmp	.+504    	; 0xbd6 <__stack+0x2d7>
		osc1TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     9de:	f8 94       	cli
		osc1TWord = keyFreq[osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)];
     9e0:	80 91 be 04 	lds	r24, 0x04BE
     9e4:	20 91 0b 01 	lds	r18, 0x010B
     9e8:	e0 91 c0 04 	lds	r30, 0x04C0
     9ec:	0e 2e       	mov	r0, r30
     9ee:	00 0c       	add	r0, r0
     9f0:	ff 0b       	sbc	r31, r31
     9f2:	90 91 bf 04 	lds	r25, 0x04BF
     9f6:	e2 0f       	add	r30, r18
     9f8:	f1 1d       	adc	r31, r1
     9fa:	e9 0f       	add	r30, r25
     9fc:	f1 1d       	adc	r31, r1
     9fe:	97 fd       	sbrc	r25, 7
     a00:	fa 95       	dec	r31
     a02:	9c e0       	ldi	r25, 0x0C	; 12
     a04:	89 02       	muls	r24, r25
     a06:	e0 0d       	add	r30, r0
     a08:	f1 1d       	adc	r31, r1
     a0a:	11 24       	eor	r1, r1
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e4 5f       	subi	r30, 0xF4	; 244
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	a2 81       	ldd	r26, Z+2	; 0x02
     a1e:	b3 81       	ldd	r27, Z+3	; 0x03
     a20:	80 93 c4 04 	sts	0x04C4, r24
     a24:	90 93 c5 04 	sts	0x04C5, r25
     a28:	a0 93 c6 04 	sts	0x04C6, r26
     a2c:	b0 93 c7 04 	sts	0x04C7, r27
		sei();
     a30:	78 94       	sei
	}
}

inline void osc1CentsUpdate()
{
	unsigned long cents1Coef = 0x27*(osc1CentsShift + dOsc1CentsShift);
     a32:	20 91 c1 04 	lds	r18, 0x04C1
     a36:	80 91 c2 04 	lds	r24, 0x04C2
     a3a:	90 91 c3 04 	lds	r25, 0x04C3
     a3e:	82 0f       	add	r24, r18
     a40:	91 1d       	adc	r25, r1
     a42:	27 fd       	sbrc	r18, 7
     a44:	9a 95       	dec	r25
     a46:	47 e2       	ldi	r20, 0x27	; 39
     a48:	48 9f       	mul	r20, r24
     a4a:	90 01       	movw	r18, r0
     a4c:	49 9f       	mul	r20, r25
     a4e:	30 0d       	add	r19, r0
     a50:	11 24       	eor	r1, r1
     a52:	03 2e       	mov	r0, r19
     a54:	00 0c       	add	r0, r0
     a56:	44 0b       	sbc	r20, r20
     a58:	55 0b       	sbc	r21, r21
	
	cli();
     a5a:	f8 94       	cli
	cents1Coef *= osc1TWord;
     a5c:	60 91 c4 04 	lds	r22, 0x04C4
     a60:	70 91 c5 04 	lds	r23, 0x04C5
     a64:	80 91 c6 04 	lds	r24, 0x04C6
     a68:	90 91 c7 04 	lds	r25, 0x04C7
     a6c:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsi3>
	cents1Coef = ((long)cents1Coef) >> 16;
     a70:	ac 01       	movw	r20, r24
     a72:	77 27       	eor	r23, r23
     a74:	57 fd       	sbrc	r21, 7
     a76:	70 95       	com	r23
     a78:	67 2f       	mov	r22, r23
	osc1TWord += cents1Coef;
     a7a:	80 91 c4 04 	lds	r24, 0x04C4
     a7e:	90 91 c5 04 	lds	r25, 0x04C5
     a82:	a0 91 c6 04 	lds	r26, 0x04C6
     a86:	b0 91 c7 04 	lds	r27, 0x04C7
     a8a:	84 0f       	add	r24, r20
     a8c:	95 1f       	adc	r25, r21
     a8e:	a6 1f       	adc	r26, r22
     a90:	b7 1f       	adc	r27, r23
     a92:	80 93 c4 04 	sts	0x04C4, r24
     a96:	90 93 c5 04 	sts	0x04C5, r25
     a9a:	a0 93 c6 04 	sts	0x04C6, r26
     a9e:	b0 93 c7 04 	sts	0x04C7, r27
	sei();
     aa2:	78 94       	sei
}

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
     aa4:	20 91 a9 04 	lds	r18, 0x04A9
     aa8:	30 91 08 01 	lds	r19, 0x0108
     aac:	40 91 ab 04 	lds	r20, 0x04AB
     ab0:	80 91 aa 04 	lds	r24, 0x04AA
     ab4:	08 2e       	mov	r0, r24
     ab6:	00 0c       	add	r0, r0
     ab8:	99 0b       	sbc	r25, r25
     aba:	84 0f       	add	r24, r20
     abc:	91 1d       	adc	r25, r1
     abe:	47 fd       	sbrc	r20, 7
     ac0:	9a 95       	dec	r25
     ac2:	83 0f       	add	r24, r19
     ac4:	91 1d       	adc	r25, r1
     ac6:	3c e0       	ldi	r19, 0x0C	; 12
     ac8:	23 02       	muls	r18, r19
     aca:	80 0d       	add	r24, r0
     acc:	91 1d       	adc	r25, r1
     ace:	11 24       	eor	r1, r1
     ad0:	97 fd       	sbrc	r25, 7
     ad2:	9f c0       	rjmp	.+318    	; 0xc12 <__stack+0x313>
	{
		cli();
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
     ad4:	88 35       	cpi	r24, 0x58	; 88
     ad6:	91 05       	cpc	r25, r1
     ad8:	0c f0       	brlt	.+2      	; 0xadc <__stack+0x1dd>
     ada:	8c c0       	rjmp	.+280    	; 0xbf4 <__stack+0x2f5>
		osc2TWord = keyFreq[87];
		sei();
	}
	else
	{
		cli();
     adc:	f8 94       	cli
		osc2TWord = keyFreq[osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)];
     ade:	80 91 a9 04 	lds	r24, 0x04A9
     ae2:	20 91 08 01 	lds	r18, 0x0108
     ae6:	e0 91 ab 04 	lds	r30, 0x04AB
     aea:	0e 2e       	mov	r0, r30
     aec:	00 0c       	add	r0, r0
     aee:	ff 0b       	sbc	r31, r31
     af0:	90 91 aa 04 	lds	r25, 0x04AA
     af4:	e2 0f       	add	r30, r18
     af6:	f1 1d       	adc	r31, r1
     af8:	e9 0f       	add	r30, r25
     afa:	f1 1d       	adc	r31, r1
     afc:	97 fd       	sbrc	r25, 7
     afe:	fa 95       	dec	r31
     b00:	9c e0       	ldi	r25, 0x0C	; 12
     b02:	89 02       	muls	r24, r25
     b04:	e0 0d       	add	r30, r0
     b06:	f1 1d       	adc	r31, r1
     b08:	11 24       	eor	r1, r1
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e4 5f       	subi	r30, 0xF4	; 244
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	a2 81       	ldd	r26, Z+2	; 0x02
     b1c:	b3 81       	ldd	r27, Z+3	; 0x03
     b1e:	80 93 af 04 	sts	0x04AF, r24
     b22:	90 93 b0 04 	sts	0x04B0, r25
     b26:	a0 93 b1 04 	sts	0x04B1, r26
     b2a:	b0 93 b2 04 	sts	0x04B2, r27
		sei();
     b2e:	78 94       	sei
	}	
}

inline void osc2CentsUpdate()
{
	unsigned long cents2Coef = 0x27*(osc2CentsShift + dOsc2CentsShift);
     b30:	20 91 ac 04 	lds	r18, 0x04AC
     b34:	80 91 ad 04 	lds	r24, 0x04AD
     b38:	90 91 ae 04 	lds	r25, 0x04AE
     b3c:	82 0f       	add	r24, r18
     b3e:	91 1d       	adc	r25, r1
     b40:	27 fd       	sbrc	r18, 7
     b42:	9a 95       	dec	r25
     b44:	47 e2       	ldi	r20, 0x27	; 39
     b46:	48 9f       	mul	r20, r24
     b48:	90 01       	movw	r18, r0
     b4a:	49 9f       	mul	r20, r25
     b4c:	30 0d       	add	r19, r0
     b4e:	11 24       	eor	r1, r1
     b50:	03 2e       	mov	r0, r19
     b52:	00 0c       	add	r0, r0
     b54:	44 0b       	sbc	r20, r20
     b56:	55 0b       	sbc	r21, r21
	
	cli();
     b58:	f8 94       	cli
	cents2Coef *= osc2TWord;
     b5a:	60 91 af 04 	lds	r22, 0x04AF
     b5e:	70 91 b0 04 	lds	r23, 0x04B0
     b62:	80 91 b1 04 	lds	r24, 0x04B1
     b66:	90 91 b2 04 	lds	r25, 0x04B2
     b6a:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsi3>
	cents2Coef = ((long)cents2Coef) >> 16;
     b6e:	ac 01       	movw	r20, r24
     b70:	77 27       	eor	r23, r23
     b72:	57 fd       	sbrc	r21, 7
     b74:	70 95       	com	r23
     b76:	67 2f       	mov	r22, r23
	osc2TWord += cents2Coef;
     b78:	80 91 af 04 	lds	r24, 0x04AF
     b7c:	90 91 b0 04 	lds	r25, 0x04B0
     b80:	a0 91 b1 04 	lds	r26, 0x04B1
     b84:	b0 91 b2 04 	lds	r27, 0x04B2
     b88:	84 0f       	add	r24, r20
     b8a:	95 1f       	adc	r25, r21
     b8c:	a6 1f       	adc	r26, r22
     b8e:	b7 1f       	adc	r27, r23
     b90:	80 93 af 04 	sts	0x04AF, r24
     b94:	90 93 b0 04 	sts	0x04B0, r25
     b98:	a0 93 b1 04 	sts	0x04B1, r26
     b9c:	b0 93 b2 04 	sts	0x04B2, r27
	sei();
     ba0:	78 94       	sei
	serialInit();
	oscInit();
	
	noteUpdate();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
     ba2:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
     ba4:	80 91 70 00 	lds	r24, 0x0070
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 93 70 00 	sts	0x0070, r24
	sei();
     bae:	78 94       	sei

	//lfoRouteFunction = lfoRouteCents2;
}
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	08 95       	ret
		osc1TWord = keyFreq[0];	
		sei();
	}
	else if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12) > 87)
	{
		cli();
     bd6:	f8 94       	cli
		osc1TWord = keyFreq[87];
     bd8:	80 e8       	ldi	r24, 0x80	; 128
     bda:	9b e1       	ldi	r25, 0x1B	; 27
     bdc:	a2 e2       	ldi	r26, 0x22	; 34
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	80 93 c4 04 	sts	0x04C4, r24
     be4:	90 93 c5 04 	sts	0x04C5, r25
     be8:	a0 93 c6 04 	sts	0x04C6, r26
     bec:	b0 93 c7 04 	sts	0x04C7, r27
		sei();
     bf0:	78 94       	sei
     bf2:	1f cf       	rjmp	.-450    	; 0xa32 <__stack+0x133>
		osc2TWord = keyFreq[0];
		sei();
	}
	else if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12) > 87)
	{
		cli();
     bf4:	f8 94       	cli
		osc2TWord = keyFreq[87];
     bf6:	80 e8       	ldi	r24, 0x80	; 128
     bf8:	9b e1       	ldi	r25, 0x1B	; 27
     bfa:	a2 e2       	ldi	r26, 0x22	; 34
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	80 93 af 04 	sts	0x04AF, r24
     c02:	90 93 b0 04 	sts	0x04B0, r25
     c06:	a0 93 b1 04 	sts	0x04B1, r26
     c0a:	b0 93 b2 04 	sts	0x04B2, r27
		sei();
     c0e:	78 94       	sei
     c10:	8f cf       	rjmp	.-226    	; 0xb30 <__stack+0x231>

inline void osc2NoteUpdate()
{
	if(osc2Note + (osc2SemisShift + dOsc2SemisShift) + (osc2OctaveShift*12)  < 0)
	{
		cli();
     c12:	f8 94       	cli
		osc2TWord = keyFreq[0];
     c14:	8d e5       	ldi	r24, 0x5D	; 93
     c16:	99 e3       	ldi	r25, 0x39	; 57
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	80 93 af 04 	sts	0x04AF, r24
     c20:	90 93 b0 04 	sts	0x04B0, r25
     c24:	a0 93 b1 04 	sts	0x04B1, r26
     c28:	b0 93 b2 04 	sts	0x04B2, r27
		sei();
     c2c:	78 94       	sei
     c2e:	80 cf       	rjmp	.-256    	; 0xb30 <__stack+0x231>

inline void osc1NoteUpdate()
{	
	if(osc1Note + (osc1SemisShift + dOsc1SemisShift) + (osc1OctaveShift*12)  < 0)
	{
		cli();
     c30:	f8 94       	cli
		osc1TWord = keyFreq[0];	
     c32:	8d e5       	ldi	r24, 0x5D	; 93
     c34:	99 e3       	ldi	r25, 0x39	; 57
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	80 93 c4 04 	sts	0x04C4, r24
     c3e:	90 93 c5 04 	sts	0x04C5, r25
     c42:	a0 93 c6 04 	sts	0x04C6, r26
     c46:	b0 93 c7 04 	sts	0x04C7, r27
		sei();
     c4a:	78 94       	sei
     c4c:	f2 ce       	rjmp	.-540    	; 0xa32 <__stack+0x133>

00000c4e <main>:
inline void osc2NoteUpdate();
inline void osc2CentsUpdate();

int main(void)
{
	setup();
     c4e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_Z5setupv>

	while(1)
	{
		for(int i = 0; i < 4; i++)
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
		{			
			adcValue[i] = ADC;
     c56:	80 91 78 00 	lds	r24, 0x0078
     c5a:	90 91 79 00 	lds	r25, 0x0079
     c5e:	f9 01       	movw	r30, r18
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e1 53       	subi	r30, 0x31	; 49
     c66:	fb 4f       	sbci	r31, 0xFB	; 251
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
			ADMUX = i;
     c6c:	20 93 7c 00 	sts	0x007C, r18
			
			sbi(ADCSRA, ADSC);
     c70:	80 91 7a 00 	lds	r24, 0x007A
     c74:	80 64       	ori	r24, 0x40	; 64
     c76:	80 93 7a 00 	sts	0x007A, r24
			while(ADCSRA & (1 << ADSC));
     c7a:	80 91 7a 00 	lds	r24, 0x007A
     c7e:	86 fd       	sbrc	r24, 6
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <main+0x2c>
			sbi(ADCSRA, ADSC);
     c82:	80 91 7a 00 	lds	r24, 0x007A
     c86:	80 64       	ori	r24, 0x40	; 64
     c88:	80 93 7a 00 	sts	0x007A, r24
			while(ADCSRA & (1 << ADSC));
     c8c:	80 91 7a 00 	lds	r24, 0x007A
     c90:	86 fd       	sbrc	r24, 6
     c92:	fc cf       	rjmp	.-8      	; 0xc8c <main+0x3e>
{
	setup();

	while(1)
	{
		for(int i = 0; i < 4; i++)
     c94:	2f 5f       	subi	r18, 0xFF	; 255
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	24 30       	cpi	r18, 0x04	; 4
     c9a:	31 05       	cpc	r19, r1
     c9c:	e1 f6       	brne	.-72     	; 0xc56 <main+0x8>
			while(ADCSRA & (1 << ADSC));
			sbi(ADCSRA, ADSC);
			while(ADCSRA & (1 << ADSC));
		}		
		
		osc1PhaseShift++;
     c9e:	80 91 bd 04 	lds	r24, 0x04BD
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 93 bd 04 	sts	0x04BD, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	80 e7       	ldi	r24, 0x70	; 112
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	80 40       	sbci	r24, 0x00	; 0
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x60>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x6a>
     cb8:	00 00       	nop
		_delay_ms(50);
		
		osc1WaveForm = adcValue[1] >> 8;
     cba:	80 91 d1 04 	lds	r24, 0x04D1
     cbe:	90 91 d2 04 	lds	r25, 0x04D2
     cc2:	90 93 06 01 	sts	0x0106, r25
		osc2WaveForm = adcValue[2] >> 8;
     cc6:	80 91 d3 04 	lds	r24, 0x04D3
     cca:	90 91 d4 04 	lds	r25, 0x04D4
     cce:	90 93 05 01 	sts	0x0105, r25
		putString(buf);
		putChar('\t');	
		itoa(adcValue[3], buf, 10);
		putString(buf);
		putString("\r\n");*/
	}
     cd2:	bf cf       	rjmp	.-130    	; 0xc52 <main+0x4>

00000cd4 <__vector_21>:
		lfsrState ^= 0xB400;
	}
}

ISR(ADC_vect)
{
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	8f 93       	push	r24
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
     ce8:	80 91 d7 04 	lds	r24, 0x04D7
     cec:	e8 2f       	mov	r30, r24
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	20 91 78 00 	lds	r18, 0x0078
     cf4:	30 91 79 00 	lds	r19, 0x0079
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e1 53       	subi	r30, 0x31	; 49
     cfe:	fb 4f       	sbci	r31, 0xFB	; 251
     d00:	31 83       	std	Z+1, r19	; 0x01
     d02:	20 83       	st	Z, r18

	adcSelect++;
     d04:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(adcSelect > 3)
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	78 f0       	brcs	.+30     	; 0xd28 <__vector_21+0x54>
	adcSelect = 0;
     d0a:	10 92 d7 04 	sts	0x04D7, r1
     d0e:	80 e0       	ldi	r24, 0x00	; 0
	
	ADMUX = adcSelect;
     d10:	80 93 7c 00 	sts	0x007C, r24
}
     d14:	ff 91       	pop	r31
     d16:	ef 91       	pop	r30
     d18:	8f 91       	pop	r24
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;

	adcSelect++;
     d28:	80 93 d7 04 	sts	0x04D7, r24
     d2c:	f1 cf       	rjmp	.-30     	; 0xd10 <__vector_21+0x3c>

00000d2e <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{	
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <__vector_9+0x3c>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <__vector_9+0x3e>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	osc2CentsUpdate();
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
     d70:	20 91 03 01 	lds	r18, 0x0103
     d74:	30 91 04 01 	lds	r19, 0x0104
	lfsrState = lfsrState >> 1;
     d78:	c9 01       	movw	r24, r18
     d7a:	95 95       	asr	r25
     d7c:	87 95       	ror	r24
	
	if(lsb == 1)
     d7e:	20 fd       	sbrc	r18, 0
     d80:	55 c1       	rjmp	.+682    	; 0x102c <__vector_9+0x2fe>
	{
		lfsrState ^= 0xB400;
     d82:	90 93 04 01 	sts	0x0104, r25
     d86:	80 93 03 01 	sts	0x0103, r24
}

ISR(TIMER2_OVF_vect)
{	
	lfsrUpdate();	
	if(notePlaying)
     d8a:	20 91 07 01 	lds	r18, 0x0107
     d8e:	22 23       	and	r18, r18
     d90:	09 f4       	brne	.+2      	; 0xd94 <__vector_9+0x66>
     d92:	0a c1       	rjmp	.+532    	; 0xfa8 <__vector_9+0x27a>
	{
		clock_32k++;
     d94:	20 91 8a 04 	lds	r18, 0x048A
     d98:	30 91 8b 04 	lds	r19, 0x048B
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if(clock_32k > 32000)
     da0:	21 30       	cpi	r18, 0x01	; 1
     da2:	1d e7       	ldi	r17, 0x7D	; 125
     da4:	31 07       	cpc	r19, r17
     da6:	08 f0       	brcs	.+2      	; 0xdaa <__vector_9+0x7c>
     da8:	20 c1       	rjmp	.+576    	; 0xfea <__vector_9+0x2bc>
ISR(TIMER2_OVF_vect)
{	
	lfsrUpdate();	
	if(notePlaying)
	{
		clock_32k++;
     daa:	30 93 8b 04 	sts	0x048B, r19
     dae:	20 93 8a 04 	sts	0x048A, r18
		
		if(clock_32k > 32000)
			clock_32k = 0;
		
		osc1Phaccu += osc1TWord;
     db2:	c0 90 c4 04 	lds	r12, 0x04C4
     db6:	d0 90 c5 04 	lds	r13, 0x04C5
     dba:	e0 90 c6 04 	lds	r14, 0x04C6
     dbe:	f0 90 c7 04 	lds	r15, 0x04C7
     dc2:	40 91 c8 04 	lds	r20, 0x04C8
     dc6:	50 91 c9 04 	lds	r21, 0x04C9
     dca:	60 91 ca 04 	lds	r22, 0x04CA
     dce:	70 91 cb 04 	lds	r23, 0x04CB
     dd2:	4c 0d       	add	r20, r12
     dd4:	5d 1d       	adc	r21, r13
     dd6:	6e 1d       	adc	r22, r14
     dd8:	7f 1d       	adc	r23, r15
     dda:	40 93 c8 04 	sts	0x04C8, r20
     dde:	50 93 c9 04 	sts	0x04C9, r21
     de2:	60 93 ca 04 	sts	0x04CA, r22
     de6:	70 93 cb 04 	sts	0x04CB, r23
		
		osc1PhaccuShort[0] = osc1PhaccuShort[1];
     dea:	10 91 cd 04 	lds	r17, 0x04CD
     dee:	10 93 cc 04 	sts	0x04CC, r17
		osc1PhaccuShort[1] = osc1PhaccuShort[2];
     df2:	b0 91 ce 04 	lds	r27, 0x04CE
     df6:	b0 93 cd 04 	sts	0x04CD, r27
		osc1PhaccuShort[2] = (unsigned char)*((unsigned char*)(&osc1Phaccu) + 2);
     dfa:	a0 91 ca 04 	lds	r26, 0x04CA
     dfe:	a0 93 ce 04 	sts	0x04CE, r26

		osc1Out[2] = (short)pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(osc1PhaccuShort[2] + osc1PhaseShift));
     e02:	30 91 06 01 	lds	r19, 0x0106
     e06:	20 91 bd 04 	lds	r18, 0x04BD
     e0a:	2a 0f       	add	r18, r26
     e0c:	e3 2f       	mov	r30, r19
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e4 59       	subi	r30, 0x94	; 148
     e16:	fd 4f       	sbci	r31, 0xFD	; 253
     e18:	01 90       	ld	r0, Z+
     e1a:	f0 81       	ld	r31, Z
     e1c:	e0 2d       	mov	r30, r0
     e1e:	e2 0f       	add	r30, r18
     e20:	f1 1d       	adc	r31, r1
     e22:	e8 59       	subi	r30, 0x98	; 152
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	e4 91       	lpm	r30, Z
     e28:	ee 2e       	mov	r14, r30
     e2a:	f1 2c       	mov	r15, r1
     e2c:	f0 92 bc 04 	sts	0x04BC, r15
     e30:	e0 92 bb 04 	sts	0x04BB, r14
	
		if(osc1Out[2] & 0x80)
     e34:	e7 ff       	sbrs	r30, 7
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <__vector_9+0x110>
			*((char*)(&osc1Out[2]) + 1) = 0xFF;
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	20 93 bc 04 	sts	0x04BC, r18
	
		if(osc1WaveForm == WAVE_NOISE)
     e3e:	35 30       	cpi	r19, 0x05	; 5
     e40:	09 f4       	brne	.+2      	; 0xe44 <__vector_9+0x116>
     e42:	5c c1       	rjmp	.+696    	; 0x10fc <__vector_9+0x3ce>
     e44:	20 91 bb 04 	lds	r18, 0x04BB
     e48:	30 91 bc 04 	lds	r19, 0x04BC
			osc1Out[2] = lfsrState;
		
		osc2Phaccu += osc2TWord;
     e4c:	c0 90 af 04 	lds	r12, 0x04AF
     e50:	d0 90 b0 04 	lds	r13, 0x04B0
     e54:	e0 90 b1 04 	lds	r14, 0x04B1
     e58:	f0 90 b2 04 	lds	r15, 0x04B2
     e5c:	80 90 b3 04 	lds	r8, 0x04B3
     e60:	90 90 b4 04 	lds	r9, 0x04B4
     e64:	a0 90 b5 04 	lds	r10, 0x04B5
     e68:	b0 90 b6 04 	lds	r11, 0x04B6
     e6c:	c8 0c       	add	r12, r8
     e6e:	d9 1c       	adc	r13, r9
     e70:	ea 1c       	adc	r14, r10
     e72:	fb 1c       	adc	r15, r11
     e74:	c0 92 b3 04 	sts	0x04B3, r12
     e78:	d0 92 b4 04 	sts	0x04B4, r13
     e7c:	e0 92 b5 04 	sts	0x04B5, r14
     e80:	f0 92 b6 04 	sts	0x04B6, r15

		if(osc2Sync && osc1PhaccuShort[1] < osc1PhaccuShort[0] &&  osc1PhaccuShort[1] < osc1PhaccuShort[2])
     e84:	e0 91 a1 04 	lds	r30, 0x04A1
     e88:	ee 23       	and	r30, r30
     e8a:	19 f0       	breq	.+6      	; 0xe92 <__vector_9+0x164>
     e8c:	b1 17       	cp	r27, r17
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <__vector_9+0x164>
     e90:	d9 c0       	rjmp	.+434    	; 0x1044 <__vector_9+0x316>
		{
			osc2Phaccu = osc1Phaccu;
		}

		if(osc2WaveForm != WAVE_NOISE)
     e92:	a0 91 05 01 	lds	r26, 0x0105
     e96:	a5 30       	cpi	r26, 0x05	; 5
     e98:	09 f4       	brne	.+2      	; 0xe9c <__vector_9+0x16e>
     e9a:	36 c1       	rjmp	.+620    	; 0x1108 <__vector_9+0x3da>
			osc2Out[2] = (short)pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
     e9c:	80 91 a8 04 	lds	r24, 0x04A8
     ea0:	e0 91 b5 04 	lds	r30, 0x04B5
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	e8 0f       	add	r30, r24
     ea8:	f1 1d       	adc	r31, r1
     eaa:	87 fd       	sbrc	r24, 7
     eac:	fa 95       	dec	r31
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	aa 0f       	add	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	a4 59       	subi	r26, 0x94	; 148
     eb6:	bd 4f       	sbci	r27, 0xFD	; 253
     eb8:	4d 91       	ld	r20, X+
     eba:	5c 91       	ld	r21, X
     ebc:	e4 0f       	add	r30, r20
     ebe:	f5 1f       	adc	r31, r21
     ec0:	e8 59       	subi	r30, 0x98	; 152
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	e4 91       	lpm	r30, Z
     ec6:	8e 2f       	mov	r24, r30
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 a7 04 	sts	0x04A7, r25
     ece:	80 93 a6 04 	sts	0x04A6, r24
		else
			osc2Out[2] = lfsrState;

		if(osc2Out[2] & 0x80)
     ed2:	87 ff       	sbrs	r24, 7
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <__vector_9+0x1b6>
			*((char*)(&osc2Out[2]) + 1) = 0xFF;
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	80 93 a7 04 	sts	0x04A7, r24
     edc:	80 91 a6 04 	lds	r24, 0x04A6
     ee0:	90 91 a7 04 	lds	r25, 0x04A7
		lfoOut[1] -= 128;*/

		long temp = 0;
		unsigned char output = 0;
		
		osc1Out[2] *= osc1Weight;
     ee4:	60 91 0a 01 	lds	r22, 0x010A
     ee8:	62 9f       	mul	r22, r18
     eea:	a0 01       	movw	r20, r0
     eec:	63 9f       	mul	r22, r19
     eee:	50 0d       	add	r21, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	50 93 bc 04 	sts	0x04BC, r21
     ef6:	40 93 bb 04 	sts	0x04BB, r20
		osc2Out[2] *= osc2Weight;
     efa:	60 91 09 01 	lds	r22, 0x0109
     efe:	68 9f       	mul	r22, r24
     f00:	90 01       	movw	r18, r0
     f02:	69 9f       	mul	r22, r25
     f04:	30 0d       	add	r19, r0
     f06:	11 24       	eor	r1, r1
     f08:	30 93 a7 04 	sts	0x04A7, r19
     f0c:	20 93 a6 04 	sts	0x04A6, r18

		if(ringMod)
     f10:	80 91 a0 04 	lds	r24, 0x04A0
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <__vector_9+0x1ec>
     f18:	6d c0       	rjmp	.+218    	; 0xff4 <__vector_9+0x2c6>
			temp = osc1Out[2] ^ osc2Out[2];
     f1a:	c9 01       	movw	r24, r18
     f1c:	84 27       	eor	r24, r20
     f1e:	95 27       	eor	r25, r21
     f20:	09 2e       	mov	r0, r25
     f22:	00 0c       	add	r0, r0
     f24:	aa 0b       	sbc	r26, r26
     f26:	bb 0b       	sbc	r27, r27
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	ab 83       	std	Y+3, r26	; 0x03
     f2e:	bc 83       	std	Y+4, r27	; 0x04
				temp = 0;			
		}
		
#ifdef USE_ENVELOPE 

		if(envelopePhase == ATTACK_SLOPE)
     f30:	80 91 84 04 	lds	r24, 0x0484
     f34:	81 11       	cpse	r24, r1
     f36:	21 c0       	rjmp	.+66     	; 0xf7a <__vector_9+0x24c>
		{
			if(attackRate > 0)
     f38:	80 91 02 01 	lds	r24, 0x0102
     f3c:	81 11       	cpse	r24, r1
     f3e:	8e c0       	rjmp	.+284    	; 0x105c <__vector_9+0x32e>
					envelopePhase++;
				}
			}
			else
			{
				envelopePhase++;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 84 04 	sts	0x0484, r24
				envelopeGain = 0xFF00;
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	9f ef       	ldi	r25, 0xFF	; 255
     f4a:	a0 e0       	ldi	r26, 0x00	; 0
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	80 93 86 04 	sts	0x0486, r24
     f52:	90 93 87 04 	sts	0x0487, r25
     f56:	a0 93 88 04 	sts	0x0488, r26
     f5a:	b0 93 89 04 	sts	0x0489, r27
			}
		}
		if(envelopePhase == DECAY_SLOPE)
		{
			if(decayRate > 0)
     f5e:	80 91 01 01 	lds	r24, 0x0101
     f62:	81 11       	cpse	r24, r1
     f64:	d6 c0       	rjmp	.+428    	; 0x1112 <__vector_9+0x3e4>
					envelopePhase++;
				}
			}
			else if(decayRate == 0)
			{
				*((unsigned char*)(&envelopeGain) + 1) = sustainLevel;
     f66:	90 91 00 01 	lds	r25, 0x0100
     f6a:	90 93 87 04 	sts	0x0487, r25
				*((unsigned char*)(&envelopeGain)) = 0;
     f6e:	10 92 86 04 	sts	0x0486, r1
				envelopePhase++;
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	80 93 84 04 	sts	0x0484, r24
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <__vector_9+0x25c>
			{
				envelopePhase++;
				envelopeGain = 0xFF00;
			}
		}
		if(envelopePhase == DECAY_SLOPE)
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	81 f3       	breq	.-32     	; 0xf5e <__vector_9+0x230>
				*((unsigned char*)(&envelopeGain) + 1) = sustainLevel;
				*((unsigned char*)(&envelopeGain)) = 0;
				envelopePhase++;
			}
		}
		if(envelopePhase == RELEASE_SLOPE)
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	09 f4       	brne	.+2      	; 0xf84 <__vector_9+0x256>
     f82:	97 c0       	rjmp	.+302    	; 0x10b2 <__vector_9+0x384>
     f84:	80 91 87 04 	lds	r24, 0x0487
     f88:	98 2f       	mov	r25, r24
			}
			else
				*((unsigned short*)(&envelopeGain)) = 0;
		}
		
		temp = (*((unsigned char*)(&temp) + 1))*(*((unsigned char*)(&envelopeGain) + 1));
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	89 9f       	mul	r24, r25
     f8e:	c0 01       	movw	r24, r0
     f90:	11 24       	eor	r1, r1
     f92:	09 2e       	mov	r0, r25
     f94:	00 0c       	add	r0, r0
     f96:	aa 0b       	sbc	r26, r26
     f98:	bb 0b       	sbc	r27, r27
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	ab 83       	std	Y+3, r26	; 0x03
     fa0:	bc 83       	std	Y+4, r27	; 0x04
		}*/
		
		/*if(lfoOut[0] != lfoOut[1] && lfoRouteFunction != NULL)
			lfoRouteFunction();*/
		
		OCR2A = *(((unsigned char*)&temp) + 1);
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 93 b3 00 	sts	0x00B3, r24
	}
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti
	if(notePlaying)
	{
		clock_32k++;
		
		if(clock_32k > 32000)
			clock_32k = 0;
     fea:	10 92 8b 04 	sts	0x048B, r1
     fee:	10 92 8a 04 	sts	0x048A, r1
     ff2:	df ce       	rjmp	.-578    	; 0xdb2 <__vector_9+0x84>

		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
		else
		{
			temp = osc1Out[2];
     ff4:	05 2e       	mov	r0, r21
     ff6:	00 0c       	add	r0, r0
     ff8:	66 0b       	sbc	r22, r22
     ffa:	77 0b       	sbc	r23, r23
			temp += osc2Out[2];
     ffc:	c9 01       	movw	r24, r18
     ffe:	33 0f       	add	r19, r19
    1000:	aa 0b       	sbc	r26, r26
    1002:	bb 0b       	sbc	r27, r27
    1004:	84 0f       	add	r24, r20
    1006:	95 1f       	adc	r25, r21
    1008:	a6 1f       	adc	r26, r22
    100a:	b7 1f       	adc	r27, r23
			
			temp += 0x8000;
    100c:	90 58       	subi	r25, 0x80	; 128
    100e:	af 4f       	sbci	r26, 0xFF	; 255
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
		
			if(temp > 0xFF00)
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	92 07       	cpc	r25, r18
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	54 f4       	brge	.+20     	; 0x1032 <__vector_9+0x304>
				temp = 0xFF00;
		
			if(temp < 0)
    101e:	b7 ff       	sbrs	r27, 7
    1020:	98 c0       	rjmp	.+304    	; 0x1152 <__vector_9+0x424>
				temp = 0;			
    1022:	19 82       	std	Y+1, r1	; 0x01
    1024:	1a 82       	std	Y+2, r1	; 0x02
    1026:	1b 82       	std	Y+3, r1	; 0x03
    1028:	1c 82       	std	Y+4, r1	; 0x04
    102a:	82 cf       	rjmp	.-252    	; 0xf30 <__vector_9+0x202>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    102c:	04 eb       	ldi	r16, 0xB4	; 180
    102e:	90 27       	eor	r25, r16
    1030:	a8 ce       	rjmp	.-688    	; 0xd82 <__vector_9+0x54>
			temp += osc2Out[2];
			
			temp += 0x8000;
		
			if(temp > 0xFF00)
				temp = 0xFF00;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	9f ef       	ldi	r25, 0xFF	; 255
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	ab 83       	std	Y+3, r26	; 0x03
    1040:	bc 83       	std	Y+4, r27	; 0x04
    1042:	76 cf       	rjmp	.-276    	; 0xf30 <__vector_9+0x202>
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
		
		osc2Phaccu += osc2TWord;

		if(osc2Sync && osc1PhaccuShort[1] < osc1PhaccuShort[0] &&  osc1PhaccuShort[1] < osc1PhaccuShort[2])
    1044:	ba 17       	cp	r27, r26
    1046:	08 f0       	brcs	.+2      	; 0x104a <__vector_9+0x31c>
    1048:	24 cf       	rjmp	.-440    	; 0xe92 <__vector_9+0x164>
		{
			osc2Phaccu = osc1Phaccu;
    104a:	40 93 b3 04 	sts	0x04B3, r20
    104e:	50 93 b4 04 	sts	0x04B4, r21
    1052:	60 93 b5 04 	sts	0x04B5, r22
    1056:	70 93 b6 04 	sts	0x04B6, r23
    105a:	1b cf       	rjmp	.-458    	; 0xe92 <__vector_9+0x164>

		if(envelopePhase == ATTACK_SLOPE)
		{
			if(attackRate > 0)
			{
				envelopeGain += attackRate;
    105c:	40 91 86 04 	lds	r20, 0x0486
    1060:	50 91 87 04 	lds	r21, 0x0487
    1064:	60 91 88 04 	lds	r22, 0x0488
    1068:	70 91 89 04 	lds	r23, 0x0489
    106c:	8a 01       	movw	r16, r20
    106e:	9b 01       	movw	r18, r22
    1070:	08 0f       	add	r16, r24
    1072:	11 1d       	adc	r17, r1
    1074:	21 1d       	adc	r18, r1
    1076:	31 1d       	adc	r19, r1
    1078:	00 93 86 04 	sts	0x0486, r16
    107c:	10 93 87 04 	sts	0x0487, r17
    1080:	20 93 88 04 	sts	0x0488, r18
    1084:	30 93 89 04 	sts	0x0489, r19
				
				if(*((unsigned char*)(&envelopeGain) + 1) >= 0xFF)
    1088:	80 91 87 04 	lds	r24, 0x0487
    108c:	8f 3f       	cpi	r24, 0xFF	; 255
    108e:	09 f0       	breq	.+2      	; 0x1092 <__vector_9+0x364>
    1090:	7b cf       	rjmp	.-266    	; 0xf88 <__vector_9+0x25a>
				{
					envelopeGain = 0xFF00;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	80 93 86 04 	sts	0x0486, r24
    109e:	90 93 87 04 	sts	0x0487, r25
    10a2:	a0 93 88 04 	sts	0x0488, r26
    10a6:	b0 93 89 04 	sts	0x0489, r27
					envelopePhase++;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 84 04 	sts	0x0484, r24
    10b0:	56 cf       	rjmp	.-340    	; 0xf5e <__vector_9+0x230>
				envelopePhase++;
			}
		}
		if(envelopePhase == RELEASE_SLOPE)
		{
			if(releaseRate > 0)
    10b2:	80 91 85 04 	lds	r24, 0x0485
    10b6:	88 23       	and	r24, r24
    10b8:	d1 f0       	breq	.+52     	; 0x10ee <__vector_9+0x3c0>
			{
				envelopeGain -= releaseRate;
    10ba:	40 91 86 04 	lds	r20, 0x0486
    10be:	50 91 87 04 	lds	r21, 0x0487
    10c2:	60 91 88 04 	lds	r22, 0x0488
    10c6:	70 91 89 04 	lds	r23, 0x0489
    10ca:	8a 01       	movw	r16, r20
    10cc:	9b 01       	movw	r18, r22
    10ce:	08 1b       	sub	r16, r24
    10d0:	11 09       	sbc	r17, r1
    10d2:	21 09       	sbc	r18, r1
    10d4:	31 09       	sbc	r19, r1
    10d6:	00 93 86 04 	sts	0x0486, r16
    10da:	10 93 87 04 	sts	0x0487, r17
    10de:	20 93 88 04 	sts	0x0488, r18
    10e2:	30 93 89 04 	sts	0x0489, r19
				
				if(*((unsigned char*)(&envelopeGain) + 1) <= 0)
    10e6:	90 91 87 04 	lds	r25, 0x0487
    10ea:	91 11       	cpse	r25, r1
    10ec:	4e cf       	rjmp	.-356    	; 0xf8a <__vector_9+0x25c>
					*((unsigned short*)(&envelopeGain)) = 0;
			}
			else
				*((unsigned short*)(&envelopeGain)) = 0;
    10ee:	10 92 87 04 	sts	0x0487, r1
    10f2:	10 92 86 04 	sts	0x0486, r1
    10f6:	90 91 87 04 	lds	r25, 0x0487
    10fa:	47 cf       	rjmp	.-370    	; 0xf8a <__vector_9+0x25c>
	
		if(osc1Out[2] & 0x80)
			*((char*)(&osc1Out[2]) + 1) = 0xFF;
	
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    10fc:	90 93 bc 04 	sts	0x04BC, r25
    1100:	80 93 bb 04 	sts	0x04BB, r24
    1104:	9c 01       	movw	r18, r24
    1106:	a2 ce       	rjmp	.-700    	; 0xe4c <__vector_9+0x11e>
		}

		if(osc2WaveForm != WAVE_NOISE)
			osc2Out[2] = (short)pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)*((unsigned char*)(&osc2Phaccu)+2) + osc2PhaseShift);
		else
			osc2Out[2] = lfsrState;
    1108:	90 93 a7 04 	sts	0x04A7, r25
    110c:	80 93 a6 04 	sts	0x04A6, r24
    1110:	e0 ce       	rjmp	.-576    	; 0xed2 <__vector_9+0x1a4>
		}
		if(envelopePhase == DECAY_SLOPE)
		{
			if(decayRate > 0)
			{
				envelopeGain -= decayRate;
    1112:	40 91 86 04 	lds	r20, 0x0486
    1116:	50 91 87 04 	lds	r21, 0x0487
    111a:	60 91 88 04 	lds	r22, 0x0488
    111e:	70 91 89 04 	lds	r23, 0x0489
    1122:	8a 01       	movw	r16, r20
    1124:	9b 01       	movw	r18, r22
    1126:	08 1b       	sub	r16, r24
    1128:	11 09       	sbc	r17, r1
    112a:	21 09       	sbc	r18, r1
    112c:	31 09       	sbc	r19, r1
    112e:	00 93 86 04 	sts	0x0486, r16
    1132:	10 93 87 04 	sts	0x0487, r17
    1136:	20 93 88 04 	sts	0x0488, r18
    113a:	30 93 89 04 	sts	0x0489, r19
				
				if(*((unsigned char*)(&envelopeGain) + 1) <= sustainLevel)
    113e:	90 91 00 01 	lds	r25, 0x0100
    1142:	80 91 87 04 	lds	r24, 0x0487
    1146:	98 17       	cp	r25, r24
    1148:	08 f0       	brcs	.+2      	; 0x114c <__vector_9+0x41e>
    114a:	0f cf       	rjmp	.-482    	; 0xf6a <__vector_9+0x23c>
    114c:	80 91 84 04 	lds	r24, 0x0484
    1150:	16 cf       	rjmp	.-468    	; 0xf7e <__vector_9+0x250>
		else
		{
			temp = osc1Out[2];
			temp += osc2Out[2];
			
			temp += 0x8000;
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	ab 83       	std	Y+3, r26	; 0x03
    1158:	bc 83       	std	Y+4, r27	; 0x04
    115a:	ea ce       	rjmp	.-556    	; 0xf30 <__vector_9+0x202>

0000115c <__mulsi3>:
    115c:	db 01       	movw	r26, r22
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	0e 94 be 08 	call	0x117c	; 0x117c <__muluhisi3>
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	a2 9f       	mul	r26, r18
    116c:	80 0d       	add	r24, r0
    116e:	91 1d       	adc	r25, r1
    1170:	a3 9f       	mul	r26, r19
    1172:	90 0d       	add	r25, r0
    1174:	b2 9f       	mul	r27, r18
    1176:	90 0d       	add	r25, r0
    1178:	11 24       	eor	r1, r1
    117a:	08 95       	ret

0000117c <__muluhisi3>:
    117c:	0e 94 93 09 	call	0x1326	; 0x1326 <__umulhisi3>
    1180:	a5 9f       	mul	r26, r21
    1182:	90 0d       	add	r25, r0
    1184:	b4 9f       	mul	r27, r20
    1186:	90 0d       	add	r25, r0
    1188:	a4 9f       	mul	r26, r20
    118a:	80 0d       	add	r24, r0
    118c:	91 1d       	adc	r25, r1
    118e:	11 24       	eor	r1, r1
    1190:	08 95       	ret

00001192 <__umulsidi3>:
    1192:	e8 94       	clt

00001194 <__umulsidi3_helper>:
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	fc 01       	movw	r30, r24
    119a:	db 01       	movw	r26, r22
    119c:	0e 94 93 09 	call	0x1326	; 0x1326 <__umulhisi3>
    11a0:	7f 93       	push	r23
    11a2:	6f 93       	push	r22
    11a4:	e9 01       	movw	r28, r18
    11a6:	9a 01       	movw	r18, r20
    11a8:	ac 01       	movw	r20, r24
    11aa:	bf 93       	push	r27
    11ac:	af 93       	push	r26
    11ae:	3f 93       	push	r19
    11b0:	2f 93       	push	r18
    11b2:	df 01       	movw	r26, r30
    11b4:	0e 94 93 09 	call	0x1326	; 0x1326 <__umulhisi3>
    11b8:	26 f4       	brtc	.+8      	; 0x11c2 <__umulsidi3_helper+0x2e>
    11ba:	6c 1b       	sub	r22, r28
    11bc:	7d 0b       	sbc	r23, r29
    11be:	82 0b       	sbc	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	9e 01       	movw	r18, r28
    11c4:	eb 01       	movw	r28, r22
    11c6:	fc 01       	movw	r30, r24
    11c8:	0e 94 a2 09 	call	0x1344	; 0x1344 <__muldi3_6>
    11cc:	af 91       	pop	r26
    11ce:	bf 91       	pop	r27
    11d0:	2f 91       	pop	r18
    11d2:	3f 91       	pop	r19
    11d4:	0e 94 a2 09 	call	0x1344	; 0x1344 <__muldi3_6>
    11d8:	be 01       	movw	r22, r28
    11da:	cf 01       	movw	r24, r30
    11dc:	f9 01       	movw	r30, r18
    11de:	2f 91       	pop	r18
    11e0:	3f 91       	pop	r19
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <__umoddi3>:
    11e8:	68 94       	set
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <__udivdi3_umoddi3>

000011ec <__udivdi3>:
    11ec:	e8 94       	clt

000011ee <__udivdi3_umoddi3>:
    11ee:	8f 92       	push	r8
    11f0:	9f 92       	push	r9
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	0e 94 02 09 	call	0x1204	; 0x1204 <__udivmod64>
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	9f 90       	pop	r9
    1200:	8f 90       	pop	r8
    1202:	08 95       	ret

00001204 <__udivmod64>:
    1204:	88 24       	eor	r8, r8
    1206:	99 24       	eor	r9, r9
    1208:	f4 01       	movw	r30, r8
    120a:	e4 01       	movw	r28, r8
    120c:	b0 e4       	ldi	r27, 0x40	; 64
    120e:	9f 93       	push	r25
    1210:	aa 27       	eor	r26, r26
    1212:	9a 15       	cp	r25, r10
    1214:	8b 04       	cpc	r8, r11
    1216:	9c 04       	cpc	r9, r12
    1218:	ed 05       	cpc	r30, r13
    121a:	fe 05       	cpc	r31, r14
    121c:	cf 05       	cpc	r28, r15
    121e:	d0 07       	cpc	r29, r16
    1220:	a1 07       	cpc	r26, r17
    1222:	98 f4       	brcc	.+38     	; 0x124a <__udivmod64+0x46>
    1224:	ad 2f       	mov	r26, r29
    1226:	dc 2f       	mov	r29, r28
    1228:	cf 2f       	mov	r28, r31
    122a:	fe 2f       	mov	r31, r30
    122c:	e9 2d       	mov	r30, r9
    122e:	98 2c       	mov	r9, r8
    1230:	89 2e       	mov	r8, r25
    1232:	98 2f       	mov	r25, r24
    1234:	87 2f       	mov	r24, r23
    1236:	76 2f       	mov	r23, r22
    1238:	65 2f       	mov	r22, r21
    123a:	54 2f       	mov	r21, r20
    123c:	43 2f       	mov	r20, r19
    123e:	32 2f       	mov	r19, r18
    1240:	22 27       	eor	r18, r18
    1242:	b8 50       	subi	r27, 0x08	; 8
    1244:	31 f7       	brne	.-52     	; 0x1212 <__udivmod64+0xe>
    1246:	bf 91       	pop	r27
    1248:	27 c0       	rjmp	.+78     	; 0x1298 <__udivmod64+0x94>
    124a:	1b 2e       	mov	r1, r27
    124c:	bf 91       	pop	r27
    124e:	bb 27       	eor	r27, r27
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	44 1f       	adc	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	66 1f       	adc	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	88 1f       	adc	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 1c       	adc	r8, r8
    1262:	99 1c       	adc	r9, r9
    1264:	ee 1f       	adc	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	cc 1f       	adc	r28, r28
    126a:	dd 1f       	adc	r29, r29
    126c:	aa 1f       	adc	r26, r26
    126e:	bb 1f       	adc	r27, r27
    1270:	8a 14       	cp	r8, r10
    1272:	9b 04       	cpc	r9, r11
    1274:	ec 05       	cpc	r30, r12
    1276:	fd 05       	cpc	r31, r13
    1278:	ce 05       	cpc	r28, r14
    127a:	df 05       	cpc	r29, r15
    127c:	a0 07       	cpc	r26, r16
    127e:	b1 07       	cpc	r27, r17
    1280:	48 f0       	brcs	.+18     	; 0x1294 <__udivmod64+0x90>
    1282:	8a 18       	sub	r8, r10
    1284:	9b 08       	sbc	r9, r11
    1286:	ec 09       	sbc	r30, r12
    1288:	fd 09       	sbc	r31, r13
    128a:	ce 09       	sbc	r28, r14
    128c:	df 09       	sbc	r29, r15
    128e:	a0 0b       	sbc	r26, r16
    1290:	b1 0b       	sbc	r27, r17
    1292:	21 60       	ori	r18, 0x01	; 1
    1294:	1a 94       	dec	r1
    1296:	e1 f6       	brne	.-72     	; 0x1250 <__udivmod64+0x4c>
    1298:	2e f4       	brtc	.+10     	; 0x12a4 <__udivmod64+0xa0>
    129a:	94 01       	movw	r18, r8
    129c:	af 01       	movw	r20, r30
    129e:	be 01       	movw	r22, r28
    12a0:	cd 01       	movw	r24, r26
    12a2:	00 0c       	add	r0, r0
    12a4:	08 95       	ret

000012a6 <__ashldi3>:
    12a6:	0f 93       	push	r16
    12a8:	08 30       	cpi	r16, 0x08	; 8
    12aa:	90 f0       	brcs	.+36     	; 0x12d0 <__ashldi3+0x2a>
    12ac:	98 2f       	mov	r25, r24
    12ae:	87 2f       	mov	r24, r23
    12b0:	76 2f       	mov	r23, r22
    12b2:	65 2f       	mov	r22, r21
    12b4:	54 2f       	mov	r21, r20
    12b6:	43 2f       	mov	r20, r19
    12b8:	32 2f       	mov	r19, r18
    12ba:	22 27       	eor	r18, r18
    12bc:	08 50       	subi	r16, 0x08	; 8
    12be:	f4 cf       	rjmp	.-24     	; 0x12a8 <__ashldi3+0x2>
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	44 1f       	adc	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	66 1f       	adc	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 95       	dec	r16
    12d2:	b2 f7       	brpl	.-20     	; 0x12c0 <__ashldi3+0x1a>
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <__ashrdi3>:
    12d8:	97 fb       	bst	r25, 7
    12da:	10 f8       	bld	r1, 0

000012dc <__lshrdi3>:
    12dc:	16 94       	lsr	r1
    12de:	00 08       	sbc	r0, r0
    12e0:	0f 93       	push	r16
    12e2:	08 30       	cpi	r16, 0x08	; 8
    12e4:	98 f0       	brcs	.+38     	; 0x130c <__lshrdi3+0x30>
    12e6:	08 50       	subi	r16, 0x08	; 8
    12e8:	23 2f       	mov	r18, r19
    12ea:	34 2f       	mov	r19, r20
    12ec:	45 2f       	mov	r20, r21
    12ee:	56 2f       	mov	r21, r22
    12f0:	67 2f       	mov	r22, r23
    12f2:	78 2f       	mov	r23, r24
    12f4:	89 2f       	mov	r24, r25
    12f6:	90 2d       	mov	r25, r0
    12f8:	f4 cf       	rjmp	.-24     	; 0x12e2 <__lshrdi3+0x6>
    12fa:	05 94       	asr	r0
    12fc:	97 95       	ror	r25
    12fe:	87 95       	ror	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	57 95       	ror	r21
    1306:	47 95       	ror	r20
    1308:	37 95       	ror	r19
    130a:	27 95       	ror	r18
    130c:	0a 95       	dec	r16
    130e:	aa f7       	brpl	.-22     	; 0x12fa <__lshrdi3+0x1e>
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <__subdi3>:
    1314:	2a 19       	sub	r18, r10
    1316:	3b 09       	sbc	r19, r11
    1318:	4c 09       	sbc	r20, r12
    131a:	5d 09       	sbc	r21, r13
    131c:	6e 09       	sbc	r22, r14
    131e:	7f 09       	sbc	r23, r15
    1320:	80 0b       	sbc	r24, r16
    1322:	91 0b       	sbc	r25, r17
    1324:	08 95       	ret

00001326 <__umulhisi3>:
    1326:	a2 9f       	mul	r26, r18
    1328:	b0 01       	movw	r22, r0
    132a:	b3 9f       	mul	r27, r19
    132c:	c0 01       	movw	r24, r0
    132e:	a3 9f       	mul	r26, r19
    1330:	70 0d       	add	r23, r0
    1332:	81 1d       	adc	r24, r1
    1334:	11 24       	eor	r1, r1
    1336:	91 1d       	adc	r25, r1
    1338:	b2 9f       	mul	r27, r18
    133a:	70 0d       	add	r23, r0
    133c:	81 1d       	adc	r24, r1
    133e:	11 24       	eor	r1, r1
    1340:	91 1d       	adc	r25, r1
    1342:	08 95       	ret

00001344 <__muldi3_6>:
    1344:	0e 94 93 09 	call	0x1326	; 0x1326 <__umulhisi3>
    1348:	46 0f       	add	r20, r22
    134a:	57 1f       	adc	r21, r23
    134c:	c8 1f       	adc	r28, r24
    134e:	d9 1f       	adc	r29, r25
    1350:	08 f4       	brcc	.+2      	; 0x1354 <__muldi3_6+0x10>
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
