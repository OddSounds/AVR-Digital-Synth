
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f0  00800100  000049d6  00004a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  008004f0  008004f0  00004e5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004e5a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00004eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000041e6  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000343  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000138a  00000000  00000000  00009467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  0000a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af8  00000000  00000000  0000aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005365  00000000  00000000  0000b59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a40  00000000  00000000  00010901  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__ctors_end>
       4:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
       8:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
       c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      10:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      14:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      18:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      1c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      20:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      24:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__vector_9>
      28:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      2c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      30:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      34:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      38:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      3c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      40:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      44:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      48:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__vector_18>
      4c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      50:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      54:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__vector_21>
      58:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      5c:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      60:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>
      64:	0c 94 93 03 	jmp	0x726	; 0x726 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z9writeLinehPc+0x116>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <_Z14osc1MenuUpdatev+0x71c>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <_Z14osc1MenuUpdatev+0x768>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <_ZL15cents2RouteName+0x2>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z9writeLinehPc+0x174>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <_Z14osc1MenuUpdatev+0x3bc>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <_Z14osc1MenuUpdatev+0x3e2>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <_Z14osc1MenuUpdatev+0x218>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <_Z14osc1MenuUpdatev+0x804>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <_Z14osc1MenuUpdatev+0x1fe>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z9writeLinehPc+0x12c>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <_ZL15semis1RouteName+0x3>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <_ZL17osc2WaveRouteName+0x2>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__do_copy_data+0x8>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <_Z14osc1MenuUpdatev+0x1c0>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <_Z14osc1MenuUpdatev+0x7c4>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <_Z14osc1MenuUpdatev+0x1e6>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <_Z14osc1MenuUpdatev+0x7f0>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <_Z14osc1MenuUpdatev+0x6b2>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <_ZL17osc1WaveRouteName+0x4>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <_ZL14routeNameTable>:
     668:	c5 06 c0 06 b9 06 b2 06 ab 06 a4 06 9d 06 96 06     ................
     678:	90 06 8a 06                                         ....

0000067c <_ZL13waveNameTable>:
     67c:	e7 06 e3 06 de 06 d9 06 d5 06 cf 06 ca 06           ..............

0000068a <_ZL17osc2WaveRouteName>:
     68a:	57 41 56 45 32 00                                   WAVE2.

00000690 <_ZL17osc1WaveRouteName>:
     690:	57 41 56 45 31 00                                   WAVE1.

00000696 <_ZL15phase2RouteName>:
     696:	50 48 41 53 45 32 00                                PHASE2.

0000069d <_ZL15phase1RouteName>:
     69d:	50 48 41 53 45 31 00                                PHASE1.

000006a4 <_ZL15semis2RouteName>:
     6a4:	53 45 4d 49 53 32 00                                SEMIS2.

000006ab <_ZL15semis1RouteName>:
     6ab:	53 45 4d 49 53 31 00                                SEMIS1.

000006b2 <_ZL15cents2RouteName>:
     6b2:	43 45 4e 54 53 32 00                                CENTS2.

000006b9 <_ZL15cents1RouteName>:
     6b9:	43 45 4e 54 53 31 00                                CENTS1.

000006c0 <_ZL13osc2RouteName>:
     6c0:	4f 53 43 32 00                                      OSC2.

000006c5 <_ZL13osc1RouteName>:
     6c5:	4f 53 43 31 00                                      OSC1.

000006ca <_ZL12flatWaveName>:
     6ca:	46 4c 41 54 00                                      FLAT.

000006cf <_ZL13noiseWaveName>:
     6cf:	4e 4f 49 53 45 00                                   NOISE.

000006d5 <_ZL10sqWaveName>:
     6d5:	53 51 55 00                                         SQU.

000006d9 <_ZL12rsawWaveName>:
     6d9:	52 53 41 57 00                                      RSAW.

000006de <_ZL12lsawWaveName>:
     6de:	4c 53 41 57 00                                      LSAW.

000006e3 <_ZL11triWaveName>:
     6e3:	54 52 49 00                                         TRI.

000006e7 <_ZL12sineWaveName>:
     6e7:	53 49 4e 45 00                                      SINE.

000006ec <__ctors_end>:
     6ec:	11 24       	eor	r1, r1
     6ee:	1f be       	out	0x3f, r1	; 63
     6f0:	cf ef       	ldi	r28, 0xFF	; 255
     6f2:	d8 e0       	ldi	r29, 0x08	; 8
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	cd bf       	out	0x3d, r28	; 61

000006f8 <__do_copy_data>:
     6f8:	14 e0       	ldi	r17, 0x04	; 4
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b1 e0       	ldi	r27, 0x01	; 1
     6fe:	e6 ed       	ldi	r30, 0xD6	; 214
     700:	f9 e4       	ldi	r31, 0x49	; 73
     702:	02 c0       	rjmp	.+4      	; 0x708 <__do_copy_data+0x10>
     704:	05 90       	lpm	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	a0 3f       	cpi	r26, 0xF0	; 240
     70a:	b1 07       	cpc	r27, r17
     70c:	d9 f7       	brne	.-10     	; 0x704 <__do_copy_data+0xc>

0000070e <__do_clear_bss>:
     70e:	25 e0       	ldi	r18, 0x05	; 5
     710:	a0 ef       	ldi	r26, 0xF0	; 240
     712:	b4 e0       	ldi	r27, 0x04	; 4
     714:	01 c0       	rjmp	.+2      	; 0x718 <.do_clear_bss_start>

00000716 <.do_clear_bss_loop>:
     716:	1d 92       	st	X+, r1

00000718 <.do_clear_bss_start>:
     718:	a9 39       	cpi	r26, 0x99	; 153
     71a:	b2 07       	cpc	r27, r18
     71c:	e1 f7       	brne	.-8      	; 0x716 <.do_clear_bss_loop>
     71e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <main>
     722:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <_exit>

00000726 <__bad_interrupt>:
     726:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000072a <_Z9writeLinehPc>:
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
}

inline void writeLine(unsigned char line, char* str)
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	2d 97       	sbiw	r28, 0x0d	; 13
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
	char buf[13];
	memcpy(buf, str, 12);
     73e:	9c e0       	ldi	r25, 0x0C	; 12
     740:	fb 01       	movw	r30, r22
     742:	de 01       	movw	r26, r28
     744:	11 96       	adiw	r26, 0x01	; 1
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	9a 95       	dec	r25
     74c:	e1 f7       	brne	.-8      	; 0x746 <_Z9writeLinehPc+0x1c>
	buf[12] = '\0';
     74e:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     750:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     752:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     754:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     756:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     758:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     75a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     75c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     75e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     760:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     762:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     764:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     766:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     768:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     76a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     76c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     76e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     770:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     772:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     774:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     776:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     778:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     77a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     77c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     77e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     780:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     782:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     784:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     786:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     788:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     78a:	44 98       	cbi	0x08, 4	; 8
}

inline void gotoXY(char x, char y)
{
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
     78c:	80 64       	ori	r24, 0x40	; 64

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     78e:	5c 98       	cbi	0x0b, 4	; 11
     790:	28 2f       	mov	r18, r24
     792:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     794:	a9 01       	movw	r20, r18
     796:	44 0f       	add	r20, r20
     798:	45 2f       	mov	r20, r21
     79a:	44 1f       	adc	r20, r20
     79c:	55 0b       	sbc	r21, r21
     79e:	45 2b       	or	r20, r21
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <_Z9writeLinehPc+0x7a>
     7a2:	d6 c0       	rjmp	.+428    	; 0x950 <__stack+0x51>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7a8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7aa:	26 fd       	sbrc	r18, 6
     7ac:	cf c0       	rjmp	.+414    	; 0x94c <__stack+0x4d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7b2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7b4:	25 fd       	sbrc	r18, 5
     7b6:	c8 c0       	rjmp	.+400    	; 0x948 <__stack+0x49>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7bc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7be:	24 fd       	sbrc	r18, 4
     7c0:	c1 c0       	rjmp	.+386    	; 0x944 <__stack+0x45>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7c8:	23 fd       	sbrc	r18, 3
     7ca:	ba c0       	rjmp	.+372    	; 0x940 <__stack+0x41>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7d2:	22 fd       	sbrc	r18, 2
     7d4:	b3 c0       	rjmp	.+358    	; 0x93c <__stack+0x3d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7da:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7dc:	21 fd       	sbrc	r18, 1
     7de:	ac c0       	rjmp	.+344    	; 0x938 <__stack+0x39>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7e6:	80 ff       	sbrs	r24, 0
     7e8:	a5 c0       	rjmp	.+330    	; 0x934 <__stack+0x35>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     7ea:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ee:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     7f0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	88 23       	and	r24, r24
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_Z9writeLinehPc+0xd0>
     7f8:	81 c0       	rjmp	.+258    	; 0x8fc <_Z9writeLinehPc+0x1d2>
     7fa:	de 01       	movw	r26, r28
     7fc:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     7fe:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     800:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     802:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     804:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     806:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     808:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     80a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     80c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     80e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     810:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     812:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     814:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     816:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     818:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     81a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     81c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     81e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     820:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     822:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     824:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     826:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     828:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     82a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     82c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     82e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     830:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     832:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     834:	44 9a       	sbi	0x08, 4	; 8
     836:	99 27       	eor	r25, r25
     838:	87 fd       	sbrc	r24, 7
     83a:	90 95       	com	r25
     83c:	80 97       	sbiw	r24, 0x20	; 32
     83e:	fc 01       	movw	r30, r24
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	e0 5f       	subi	r30, 0xF0	; 240
     84e:	fc 4f       	sbci	r31, 0xFC	; 252
     850:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     852:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     854:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     856:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     858:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     85a:	82 2f       	mov	r24, r18
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	88 0f       	add	r24, r24
     860:	89 2f       	mov	r24, r25
     862:	88 1f       	adc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	89 2b       	or	r24, r25
     868:	09 f0       	breq	.+2      	; 0x86c <_Z9writeLinehPc+0x142>
     86a:	5d c0       	rjmp	.+186    	; 0x926 <__stack+0x27>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     86c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     86e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     870:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     872:	26 fd       	sbrc	r18, 6
     874:	5d c0       	rjmp	.+186    	; 0x930 <__stack+0x31>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     876:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     878:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     87a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     87c:	25 fd       	sbrc	r18, 5
     87e:	51 c0       	rjmp	.+162    	; 0x922 <__stack+0x23>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     880:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     882:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     884:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     886:	24 fd       	sbrc	r18, 4
     888:	4a c0       	rjmp	.+148    	; 0x91e <__stack+0x1f>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     88a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     88c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     88e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     890:	23 fd       	sbrc	r18, 3
     892:	43 c0       	rjmp	.+134    	; 0x91a <__stack+0x1b>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     894:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     896:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     898:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     89a:	22 fd       	sbrc	r18, 2
     89c:	3c c0       	rjmp	.+120    	; 0x916 <__stack+0x17>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     89e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8a4:	21 fd       	sbrc	r18, 1
     8a6:	35 c0       	rjmp	.+106    	; 0x912 <__stack+0x13>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8ae:	20 fd       	sbrc	r18, 0
     8b0:	2e c0       	rjmp	.+92     	; 0x90e <__stack+0xf>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     8b8:	44 9a       	sbi	0x08, 4	; 8
     8ba:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     8bc:	51 f6       	brne	.-108    	; 0x852 <_Z9writeLinehPc+0x128>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     8be:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     8c0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8da:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     8f4:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     8f6:	8d 91       	ld	r24, X+
     8f8:	81 11       	cpse	r24, r1
     8fa:	81 cf       	rjmp	.-254    	; 0x7fe <_Z9writeLinehPc+0xd4>
	memcpy(buf, str, 12);
	buf[12] = '\0';
	
	gotoXY(0, line);
	lcdString(buf);
}
     8fc:	2d 96       	adiw	r28, 0x0d	; 13
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     90e:	5d 9a       	sbi	0x0b, 5	; 11
     910:	d1 cf       	rjmp	.-94     	; 0x8b4 <_Z9writeLinehPc+0x18a>
     912:	5d 9a       	sbi	0x0b, 5	; 11
     914:	ca cf       	rjmp	.-108    	; 0x8aa <_Z9writeLinehPc+0x180>
     916:	5d 9a       	sbi	0x0b, 5	; 11
     918:	c3 cf       	rjmp	.-122    	; 0x8a0 <_Z9writeLinehPc+0x176>
     91a:	5d 9a       	sbi	0x0b, 5	; 11
     91c:	bc cf       	rjmp	.-136    	; 0x896 <_Z9writeLinehPc+0x16c>
     91e:	5d 9a       	sbi	0x0b, 5	; 11
     920:	b5 cf       	rjmp	.-150    	; 0x88c <_Z9writeLinehPc+0x162>
     922:	5d 9a       	sbi	0x0b, 5	; 11
     924:	ae cf       	rjmp	.-164    	; 0x882 <_Z9writeLinehPc+0x158>
     926:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     928:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     92a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     92c:	26 ff       	sbrs	r18, 6
     92e:	a3 cf       	rjmp	.-186    	; 0x876 <_Z9writeLinehPc+0x14c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     930:	5d 9a       	sbi	0x0b, 5	; 11
     932:	a2 cf       	rjmp	.-188    	; 0x878 <_Z9writeLinehPc+0x14e>
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     934:	5d 98       	cbi	0x0b, 5	; 11
     936:	5a cf       	rjmp	.-332    	; 0x7ec <_Z9writeLinehPc+0xc2>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     938:	5d 9a       	sbi	0x0b, 5	; 11
     93a:	53 cf       	rjmp	.-346    	; 0x7e2 <_Z9writeLinehPc+0xb8>
     93c:	5d 9a       	sbi	0x0b, 5	; 11
     93e:	4c cf       	rjmp	.-360    	; 0x7d8 <_Z9writeLinehPc+0xae>
     940:	5d 9a       	sbi	0x0b, 5	; 11
     942:	45 cf       	rjmp	.-374    	; 0x7ce <_Z9writeLinehPc+0xa4>
     944:	5d 9a       	sbi	0x0b, 5	; 11
     946:	3e cf       	rjmp	.-388    	; 0x7c4 <_Z9writeLinehPc+0x9a>
     948:	5d 9a       	sbi	0x0b, 5	; 11
     94a:	37 cf       	rjmp	.-402    	; 0x7ba <_Z9writeLinehPc+0x90>
     94c:	5d 9a       	sbi	0x0b, 5	; 11
     94e:	30 cf       	rjmp	.-416    	; 0x7b0 <_Z9writeLinehPc+0x86>
     950:	5d 9a       	sbi	0x0b, 5	; 11
     952:	29 cf       	rjmp	.-430    	; 0x7a6 <_Z9writeLinehPc+0x7c>

00000954 <_Z14osc1MenuUpdatev>:
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
}

inline void osc1MenuUpdate()
{
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	e5 97       	sbiw	r28, 0x35	; 53
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
     970:	8d e0       	ldi	r24, 0x0D	; 13
     972:	eb e0       	ldi	r30, 0x0B	; 11
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	de 01       	movw	r26, r28
     978:	55 96       	adiw	r26, 0x15	; 21
     97a:	01 90       	ld	r0, Z+
     97c:	0d 92       	st	X+, r0
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <_Z14osc1MenuUpdatev+0x26>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     982:	8c e0       	ldi	r24, 0x0C	; 12
     984:	fe 01       	movw	r30, r28
     986:	75 96       	adiw	r30, 0x15	; 21
     988:	8e 01       	movw	r16, r28
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	d8 01       	movw	r26, r16
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	8a 95       	dec	r24
     996:	e1 f7       	brne	.-8      	; 0x990 <_Z14osc1MenuUpdatev+0x3c>
	buf[12] = '\0';
     998:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     99a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     99c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     99e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9a0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9aa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9bc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9be:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ce:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     9d0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     9d2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9d4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9dc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9de:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a00:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a02:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a04:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a06:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a08:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	88 23       	and	r24, r24
     a0e:	09 f4       	brne	.+2      	; 0xa12 <_Z14osc1MenuUpdatev+0xbe>
     a10:	82 c0       	rjmp	.+260    	; 0xb16 <_Z14osc1MenuUpdatev+0x1c2>
     a12:	de 01       	movw	r26, r28
     a14:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a16:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a18:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a20:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a22:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a24:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a26:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a28:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a2a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a2c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a2e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a30:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a32:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a34:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a36:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a38:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a3a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a40:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a42:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a44:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a46:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a4a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a4c:	44 9a       	sbi	0x08, 4	; 8
     a4e:	99 27       	eor	r25, r25
     a50:	87 fd       	sbrc	r24, 7
     a52:	90 95       	com	r25
     a54:	80 97       	sbiw	r24, 0x20	; 32
     a56:	fc 01       	movw	r30, r24
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e8 0f       	add	r30, r24
     a62:	f9 1f       	adc	r31, r25
     a64:	e0 5f       	subi	r30, 0xF0	; 240
     a66:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     a68:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     a6a:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a6c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a6e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a70:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a72:	82 2f       	mov	r24, r18
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	88 0f       	add	r24, r24
     a78:	89 2f       	mov	r24, r25
     a7a:	88 1f       	adc	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	89 2b       	or	r24, r25
     a80:	09 f0       	breq	.+2      	; 0xa84 <_Z14osc1MenuUpdatev+0x130>
     a82:	60 c4       	rjmp	.+2240   	; 0x1344 <_Z14osc1MenuUpdatev+0x9f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a84:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a86:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a88:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a8a:	26 fd       	sbrc	r18, 6
     a8c:	60 c4       	rjmp	.+2240   	; 0x134e <_Z14osc1MenuUpdatev+0x9fa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a8e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a92:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a94:	25 fd       	sbrc	r18, 5
     a96:	54 c4       	rjmp	.+2216   	; 0x1340 <_Z14osc1MenuUpdatev+0x9ec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a98:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a9e:	24 fd       	sbrc	r18, 4
     aa0:	4d c4       	rjmp	.+2202   	; 0x133c <_Z14osc1MenuUpdatev+0x9e8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aa2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     aa8:	23 fd       	sbrc	r18, 3
     aaa:	46 c4       	rjmp	.+2188   	; 0x1338 <_Z14osc1MenuUpdatev+0x9e4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ab2:	22 fd       	sbrc	r18, 2
     ab4:	3f c4       	rjmp	.+2174   	; 0x1334 <_Z14osc1MenuUpdatev+0x9e0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ab6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aba:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     abc:	21 fd       	sbrc	r18, 1
     abe:	38 c4       	rjmp	.+2160   	; 0x1330 <_Z14osc1MenuUpdatev+0x9dc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ac0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ac6:	20 fd       	sbrc	r18, 0
     ac8:	2f c4       	rjmp	.+2142   	; 0x1328 <_Z14osc1MenuUpdatev+0x9d4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     acc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ace:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ad0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ad2:	3f 5f       	subi	r19, 0xFF	; 255
     ad4:	35 30       	cpi	r19, 0x05	; 5
     ad6:	49 f6       	brne	.-110    	; 0xa6a <_Z14osc1MenuUpdatev+0x116>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     ad8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     ada:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     adc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ade:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ae4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     af2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     af4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     af8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     afa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     afc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     afe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b00:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b02:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b04:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b06:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b08:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     b0e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     b10:	8d 91       	ld	r24, X+
     b12:	81 11       	cpse	r24, r1
     b14:	80 cf       	rjmp	.-256    	; 0xa16 <_Z14osc1MenuUpdatev+0xc2>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	e8 e1       	ldi	r30, 0x18	; 24
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	d8 01       	movw	r26, r16
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	8a 95       	dec	r24
     b24:	e1 f7       	brne	.-8      	; 0xb1e <_Z14osc1MenuUpdatev+0x1ca>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
     b26:	e0 91 03 01 	lds	r30, 0x0103
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	e4 58       	subi	r30, 0x84	; 132
     b32:	f9 4f       	sbci	r31, 0xF9	; 249
     b34:	65 91       	lpm	r22, Z+
     b36:	74 91       	lpm	r23, Z
     b38:	8e 01       	movw	r16, r28
     b3a:	0f 5f       	subi	r16, 0xFF	; 255
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	c8 01       	movw	r24, r16
     b40:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "       ");
     b44:	d8 01       	movw	r26, r16
     b46:	0d 90       	ld	r0, X+
     b48:	00 20       	and	r0, r0
     b4a:	e9 f7       	brne	.-6      	; 0xb46 <_Z14osc1MenuUpdatev+0x1f2>
     b4c:	11 97       	sbiw	r26, 0x01	; 1
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	e2 e4       	ldi	r30, 0x42	; 66
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	01 90       	ld	r0, Z+
     b56:	0d 92       	st	X+, r0
     b58:	8a 95       	dec	r24
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <_Z14osc1MenuUpdatev+0x200>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     b5c:	8c e0       	ldi	r24, 0x0C	; 12
     b5e:	f8 01       	movw	r30, r16
     b60:	de 01       	movw	r26, r28
     b62:	99 96       	adiw	r26, 0x29	; 41
     b64:	01 90       	ld	r0, Z+
     b66:	0d 92       	st	X+, r0
     b68:	8a 95       	dec	r24
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <_Z14osc1MenuUpdatev+0x210>
	buf[12] = '\0';
     b6c:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     b6e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     b70:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b72:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b74:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b78:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b7a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b7c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b7e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b84:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b8c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b90:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b92:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b94:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b96:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b98:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ba4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     ba6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     ba8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     baa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     bb2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bb8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bbc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bbe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bcc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bce:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bda:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bdc:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     bde:	89 a5       	ldd	r24, Y+41	; 0x29
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <_Z14osc1MenuUpdatev+0x292>
     be4:	81 c0       	rjmp	.+258    	; 0xce8 <_Z14osc1MenuUpdatev+0x394>
     be6:	de 01       	movw	r26, r28
     be8:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     bea:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     bec:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bf0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bf2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bf4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bf6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bf8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bfa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bfc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bfe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c00:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c02:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c04:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c06:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c08:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c0e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c10:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c12:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c14:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c16:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c18:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c1a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     c20:	44 9a       	sbi	0x08, 4	; 8
     c22:	99 27       	eor	r25, r25
     c24:	87 fd       	sbrc	r24, 7
     c26:	90 95       	com	r25
     c28:	80 97       	sbiw	r24, 0x20	; 32
     c2a:	fc 01       	movw	r30, r24
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e8 0f       	add	r30, r24
     c36:	f9 1f       	adc	r31, r25
     c38:	e0 5f       	subi	r30, 0xF0	; 240
     c3a:	fc 4f       	sbci	r31, 0xFC	; 252
     c3c:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     c3e:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     c40:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c42:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c44:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c46:	82 2f       	mov	r24, r18
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	88 0f       	add	r24, r24
     c4c:	89 2f       	mov	r24, r25
     c4e:	88 1f       	adc	r24, r24
     c50:	99 0b       	sbc	r25, r25
     c52:	89 2b       	or	r24, r25
     c54:	09 f0       	breq	.+2      	; 0xc58 <_Z14osc1MenuUpdatev+0x304>
     c56:	6a c3       	rjmp	.+1748   	; 0x132c <_Z14osc1MenuUpdatev+0x9d8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c58:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c5a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c5c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c5e:	26 fd       	sbrc	r18, 6
     c60:	61 c3       	rjmp	.+1730   	; 0x1324 <_Z14osc1MenuUpdatev+0x9d0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c62:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c64:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c66:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c68:	25 fd       	sbrc	r18, 5
     c6a:	5a c3       	rjmp	.+1716   	; 0x1320 <_Z14osc1MenuUpdatev+0x9cc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c6c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c6e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c70:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c72:	24 fd       	sbrc	r18, 4
     c74:	53 c3       	rjmp	.+1702   	; 0x131c <_Z14osc1MenuUpdatev+0x9c8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c7a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c7c:	23 fd       	sbrc	r18, 3
     c7e:	4c c3       	rjmp	.+1688   	; 0x1318 <_Z14osc1MenuUpdatev+0x9c4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c84:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c86:	22 fd       	sbrc	r18, 2
     c88:	45 c3       	rjmp	.+1674   	; 0x1314 <_Z14osc1MenuUpdatev+0x9c0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c90:	21 fd       	sbrc	r18, 1
     c92:	3e c3       	rjmp	.+1660   	; 0x1310 <_Z14osc1MenuUpdatev+0x9bc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c98:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c9a:	20 fd       	sbrc	r18, 0
     c9c:	37 c3       	rjmp	.+1646   	; 0x130c <_Z14osc1MenuUpdatev+0x9b8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ca4:	44 9a       	sbi	0x08, 4	; 8
     ca6:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ca8:	51 f6       	brne	.-108    	; 0xc3e <_Z14osc1MenuUpdatev+0x2ea>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     caa:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     cac:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cb0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cb6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cbc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cbe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cc2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cc8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ccc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cde:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ce0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ce2:	8d 91       	ld	r24, X+
     ce4:	81 11       	cpse	r24, r1
     ce6:	81 cf       	rjmp	.-254    	; 0xbea <_Z14osc1MenuUpdatev+0x296>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
     ce8:	88 e0       	ldi	r24, 0x08	; 8
     cea:	ef e1       	ldi	r30, 0x1F	; 31
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	d8 01       	movw	r26, r16
     cf0:	01 90       	ld	r0, Z+
     cf2:	0d 92       	st	X+, r0
     cf4:	8a 95       	dec	r24
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <_Z14osc1MenuUpdatev+0x39c>
	sprintf(buf + 7, "%d", osc1CentsShift);
     cf8:	20 91 7b 05 	lds	r18, 0x057B
     cfc:	82 2f       	mov	r24, r18
     cfe:	99 27       	eor	r25, r25
     d00:	87 fd       	sbrc	r24, 7
     d02:	90 95       	com	r25
     d04:	9f 93       	push	r25
     d06:	2f 93       	push	r18
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	9f 93       	push	r25
     d0e:	8f 93       	push	r24
     d10:	7e 01       	movw	r14, r28
     d12:	88 e0       	ldi	r24, 0x08	; 8
     d14:	e8 0e       	add	r14, r24
     d16:	f1 1c       	adc	r15, r1
     d18:	ff 92       	push	r15
     d1a:	ef 92       	push	r14
     d1c:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
     d20:	d8 01       	movw	r26, r16
     d22:	0d 90       	ld	r0, X+
     d24:	00 20       	and	r0, r0
     d26:	e9 f7       	brne	.-6      	; 0xd22 <_Z14osc1MenuUpdatev+0x3ce>
     d28:	11 97       	sbiw	r26, 0x01	; 1
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	e2 e4       	ldi	r30, 0x42	; 66
     d2e:	f1 e0       	ldi	r31, 0x01	; 1
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <_Z14osc1MenuUpdatev+0x3dc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     d38:	8c e0       	ldi	r24, 0x0C	; 12
     d3a:	f8 01       	movw	r30, r16
     d3c:	de 01       	movw	r26, r28
     d3e:	99 96       	adiw	r26, 0x29	; 41
     d40:	01 90       	ld	r0, Z+
     d42:	0d 92       	st	X+, r0
     d44:	8a 95       	dec	r24
     d46:	e1 f7       	brne	.-8      	; 0xd40 <_Z14osc1MenuUpdatev+0x3ec>
	buf[12] = '\0';
     d48:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d4a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d4c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d4e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d50:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d52:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d54:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d56:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d58:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d5a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d5c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d5e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d60:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d62:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d64:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d66:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d6e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d70:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d72:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d74:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d78:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d7a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     d80:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d82:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d84:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d86:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d8e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d92:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d98:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     da0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     da2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     da6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     da8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     daa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     db2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     db8:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     dba:	89 a5       	ldd	r24, Y+41	; 0x29
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	88 23       	and	r24, r24
     dca:	09 f4       	brne	.+2      	; 0xdce <_Z14osc1MenuUpdatev+0x47a>
     dcc:	82 c0       	rjmp	.+260    	; 0xed2 <_Z14osc1MenuUpdatev+0x57e>
     dce:	de 01       	movw	r26, r28
     dd0:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     dd2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     dd4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dd6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dd8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ddc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dde:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     de0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     de2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     de4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     de6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     de8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     df2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     df8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dfc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e00:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e02:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e04:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e06:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e08:	44 9a       	sbi	0x08, 4	; 8
     e0a:	99 27       	eor	r25, r25
     e0c:	87 fd       	sbrc	r24, 7
     e0e:	90 95       	com	r25
     e10:	80 97       	sbiw	r24, 0x20	; 32
     e12:	fc 01       	movw	r30, r24
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e8 0f       	add	r30, r24
     e1e:	f9 1f       	adc	r31, r25
     e20:	e0 5f       	subi	r30, 0xF0	; 240
     e22:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     e24:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     e26:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e28:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e2a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e2c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e2e:	82 2f       	mov	r24, r18
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	88 0f       	add	r24, r24
     e34:	89 2f       	mov	r24, r25
     e36:	88 1f       	adc	r24, r24
     e38:	99 0b       	sbc	r25, r25
     e3a:	89 2b       	or	r24, r25
     e3c:	09 f0       	breq	.+2      	; 0xe40 <_Z14osc1MenuUpdatev+0x4ec>
     e3e:	5a c2       	rjmp	.+1204   	; 0x12f4 <_Z14osc1MenuUpdatev+0x9a0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e40:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e42:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e44:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e46:	26 fd       	sbrc	r18, 6
     e48:	5a c2       	rjmp	.+1204   	; 0x12fe <_Z14osc1MenuUpdatev+0x9aa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e4a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e4c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e4e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e50:	25 fd       	sbrc	r18, 5
     e52:	5a c2       	rjmp	.+1204   	; 0x1308 <_Z14osc1MenuUpdatev+0x9b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e58:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e5a:	24 fd       	sbrc	r18, 4
     e5c:	49 c2       	rjmp	.+1170   	; 0x12f0 <_Z14osc1MenuUpdatev+0x99c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e62:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e64:	23 fd       	sbrc	r18, 3
     e66:	42 c2       	rjmp	.+1156   	; 0x12ec <_Z14osc1MenuUpdatev+0x998>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e6e:	22 fd       	sbrc	r18, 2
     e70:	3b c2       	rjmp	.+1142   	; 0x12e8 <_Z14osc1MenuUpdatev+0x994>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e72:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e74:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e76:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e78:	21 fd       	sbrc	r18, 1
     e7a:	34 c2       	rjmp	.+1128   	; 0x12e4 <_Z14osc1MenuUpdatev+0x990>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e80:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e82:	20 fd       	sbrc	r18, 0
     e84:	29 c2       	rjmp	.+1106   	; 0x12d8 <_Z14osc1MenuUpdatev+0x984>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e8a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e8c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     e8e:	3f 5f       	subi	r19, 0xFF	; 255
     e90:	35 30       	cpi	r19, 0x05	; 5
     e92:	49 f6       	brne	.-110    	; 0xe26 <_Z14osc1MenuUpdatev+0x4d2>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e94:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e96:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e98:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ea0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ea6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eaa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ebe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     eca:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ecc:	8d 91       	ld	r24, X+
     ece:	81 11       	cpse	r24, r1
     ed0:	80 cf       	rjmp	.-256    	; 0xdd2 <_Z14osc1MenuUpdatev+0x47e>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
     ed2:	88 e0       	ldi	r24, 0x08	; 8
     ed4:	e7 e2       	ldi	r30, 0x27	; 39
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	d8 01       	movw	r26, r16
     eda:	01 90       	ld	r0, Z+
     edc:	0d 92       	st	X+, r0
     ede:	8a 95       	dec	r24
     ee0:	e1 f7       	brne	.-8      	; 0xeda <_Z14osc1MenuUpdatev+0x586>
	sprintf(buf + 7, "%d", osc1SemisShift);
     ee2:	20 91 7a 05 	lds	r18, 0x057A
     ee6:	82 2f       	mov	r24, r18
     ee8:	99 27       	eor	r25, r25
     eea:	87 fd       	sbrc	r24, 7
     eec:	90 95       	com	r25
     eee:	9f 93       	push	r25
     ef0:	2f 93       	push	r18
     ef2:	88 e0       	ldi	r24, 0x08	; 8
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	ff 92       	push	r15
     efc:	ef 92       	push	r14
     efe:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
     f02:	d8 01       	movw	r26, r16
     f04:	0d 90       	ld	r0, X+
     f06:	00 20       	and	r0, r0
     f08:	e9 f7       	brne	.-6      	; 0xf04 <_Z14osc1MenuUpdatev+0x5b0>
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	88 e0       	ldi	r24, 0x08	; 8
     f0e:	e2 e4       	ldi	r30, 0x42	; 66
     f10:	f1 e0       	ldi	r31, 0x01	; 1
     f12:	01 90       	ld	r0, Z+
     f14:	0d 92       	st	X+, r0
     f16:	8a 95       	dec	r24
     f18:	e1 f7       	brne	.-8      	; 0xf12 <_Z14osc1MenuUpdatev+0x5be>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     f1a:	8c e0       	ldi	r24, 0x0C	; 12
     f1c:	f8 01       	movw	r30, r16
     f1e:	de 01       	movw	r26, r28
     f20:	99 96       	adiw	r26, 0x29	; 41
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	8a 95       	dec	r24
     f28:	e1 f7       	brne	.-8      	; 0xf22 <_Z14osc1MenuUpdatev+0x5ce>
	buf[12] = '\0';
     f2a:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f2c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f2e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f30:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f32:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f34:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f36:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f38:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f3a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f3c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f3e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f40:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f42:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f44:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f46:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f48:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f4a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f50:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f52:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f54:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f56:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f58:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f5c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f60:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     f62:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f64:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f66:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f70:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f74:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f80:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f82:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f84:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f86:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f8e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f92:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f94:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f98:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     f9a:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     f9c:	89 a5       	ldd	r24, Y+41	; 0x29
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <_Z14osc1MenuUpdatev+0x65c>
     fae:	82 c0       	rjmp	.+260    	; 0x10b4 <_Z14osc1MenuUpdatev+0x760>
     fb0:	de 01       	movw	r26, r28
     fb2:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     fb4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     fb6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fb8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fbc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fc6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fcc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fd2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fd8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fdc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fde:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     fea:	44 9a       	sbi	0x08, 4	; 8
     fec:	99 27       	eor	r25, r25
     fee:	87 fd       	sbrc	r24, 7
     ff0:	90 95       	com	r25
     ff2:	80 97       	sbiw	r24, 0x20	; 32
     ff4:	fc 01       	movw	r30, r24
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
    1002:	e0 5f       	subi	r30, 0xF0	; 240
    1004:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1006:	90 e0       	ldi	r25, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    1008:	81 91       	ld	r24, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    100a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    100c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    100e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	22 0f       	add	r18, r18
    1016:	23 2f       	mov	r18, r19
    1018:	22 1f       	adc	r18, r18
    101a:	33 0b       	sbc	r19, r19
    101c:	23 2b       	or	r18, r19
    101e:	09 f0       	breq	.+2      	; 0x1022 <_Z14osc1MenuUpdatev+0x6ce>
    1020:	5f c1       	rjmp	.+702    	; 0x12e0 <_Z14osc1MenuUpdatev+0x98c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1022:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1024:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1026:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1028:	86 fd       	sbrc	r24, 6
    102a:	58 c1       	rjmp	.+688    	; 0x12dc <_Z14osc1MenuUpdatev+0x988>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    102c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    102e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1030:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1032:	85 fd       	sbrc	r24, 5
    1034:	4f c1       	rjmp	.+670    	; 0x12d4 <_Z14osc1MenuUpdatev+0x980>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1036:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1038:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    103a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    103c:	84 fd       	sbrc	r24, 4
    103e:	48 c1       	rjmp	.+656    	; 0x12d0 <_Z14osc1MenuUpdatev+0x97c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1040:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1042:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1044:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1046:	83 fd       	sbrc	r24, 3
    1048:	41 c1       	rjmp	.+642    	; 0x12cc <_Z14osc1MenuUpdatev+0x978>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    104a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    104c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    104e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1050:	82 fd       	sbrc	r24, 2
    1052:	3a c1       	rjmp	.+628    	; 0x12c8 <_Z14osc1MenuUpdatev+0x974>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1054:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1056:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1058:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    105a:	81 fd       	sbrc	r24, 1
    105c:	33 c1       	rjmp	.+614    	; 0x12c4 <_Z14osc1MenuUpdatev+0x970>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    105e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1060:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1062:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1064:	80 fd       	sbrc	r24, 0
    1066:	2c c1       	rjmp	.+600    	; 0x12c0 <_Z14osc1MenuUpdatev+0x96c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1068:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    106a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    106c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    106e:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	95 30       	cpi	r25, 0x05	; 5
    1074:	49 f6       	brne	.-110    	; 0x1008 <_Z14osc1MenuUpdatev+0x6b4>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1076:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1078:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    107a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    107c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    107e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1080:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1082:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1084:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1086:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1088:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    108a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    108c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    108e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1090:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1092:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1094:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1096:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1098:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    109a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    109c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    109e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10aa:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    10ac:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    10ae:	8d 91       	ld	r24, X+
    10b0:	81 11       	cpse	r24, r1
    10b2:	80 cf       	rjmp	.-256    	; 0xfb4 <_Z14osc1MenuUpdatev+0x660>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	ef e2       	ldi	r30, 0x2F	; 47
    10b8:	f1 e0       	ldi	r31, 0x01	; 1
    10ba:	d8 01       	movw	r26, r16
    10bc:	01 90       	ld	r0, Z+
    10be:	0d 92       	st	X+, r0
    10c0:	8a 95       	dec	r24
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <_Z14osc1MenuUpdatev+0x768>
	if(osc1NoteSync != false)
    10c4:	80 91 72 05 	lds	r24, 0x0572
    10c8:	81 11       	cpse	r24, r1
    10ca:	43 c1       	rjmp	.+646    	; 0x1352 <_Z14osc1MenuUpdatev+0x9fe>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    10cc:	4f e4       	ldi	r20, 0x4F	; 79
    10ce:	56 e4       	ldi	r21, 0x46	; 70
    10d0:	66 e4       	ldi	r22, 0x46	; 70
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	4f 83       	std	Y+7, r20	; 0x07
    10d6:	58 87       	std	Y+8, r21	; 0x08
    10d8:	69 87       	std	Y+9, r22	; 0x09
    10da:	7a 87       	std	Y+10, r23	; 0x0a
	}
	strcat(buf, "       ");
    10dc:	d8 01       	movw	r26, r16
    10de:	0d 90       	ld	r0, X+
    10e0:	00 20       	and	r0, r0
    10e2:	e9 f7       	brne	.-6      	; 0x10de <_Z14osc1MenuUpdatev+0x78a>
    10e4:	11 97       	sbiw	r26, 0x01	; 1
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	e2 e4       	ldi	r30, 0x42	; 66
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	01 90       	ld	r0, Z+
    10ee:	0d 92       	st	X+, r0
    10f0:	8a 95       	dec	r24
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <_Z14osc1MenuUpdatev+0x798>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    10f4:	8c e0       	ldi	r24, 0x0C	; 12
    10f6:	f8 01       	movw	r30, r16
    10f8:	de 01       	movw	r26, r28
    10fa:	99 96       	adiw	r26, 0x29	; 41
    10fc:	01 90       	ld	r0, Z+
    10fe:	0d 92       	st	X+, r0
    1100:	8a 95       	dec	r24
    1102:	e1 f7       	brne	.-8      	; 0x10fc <_Z14osc1MenuUpdatev+0x7a8>
	buf[12] = '\0';
    1104:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1106:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1108:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    110a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    110c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    110e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1110:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1112:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1114:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1116:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1118:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    111a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    111c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    111e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1120:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1122:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1124:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1126:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1128:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    112a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    112c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    112e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1130:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1132:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1134:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1136:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1138:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    113a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    113c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    113e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1140:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1142:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1144:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1146:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1148:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    114a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    114c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    114e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1150:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1152:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1154:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1156:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1158:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    115a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    115c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    115e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1160:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1162:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1164:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1166:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1168:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    116a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    116c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    116e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1170:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1172:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1174:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1176:	89 a5       	ldd	r24, Y+41	; 0x29
    1178:	88 23       	and	r24, r24
    117a:	09 f4       	brne	.+2      	; 0x117e <_Z14osc1MenuUpdatev+0x82a>
    117c:	81 c0       	rjmp	.+258    	; 0x1280 <_Z14osc1MenuUpdatev+0x92c>
    117e:	de 01       	movw	r26, r28
    1180:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1182:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1184:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1186:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1188:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    118a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    118c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    118e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1190:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1192:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1194:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1196:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1198:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    119a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    119c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    119e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11aa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    11b8:	44 9a       	sbi	0x08, 4	; 8
    11ba:	99 27       	eor	r25, r25
    11bc:	87 fd       	sbrc	r24, 7
    11be:	90 95       	com	r25
    11c0:	80 97       	sbiw	r24, 0x20	; 32
    11c2:	fc 01       	movw	r30, r24
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	e0 5f       	subi	r30, 0xF0	; 240
    11d2:	fc 4f       	sbci	r31, 0xFC	; 252
    11d4:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    11d6:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    11d8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    11da:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11dc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    11de:	82 2f       	mov	r24, r18
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	88 0f       	add	r24, r24
    11e4:	89 2f       	mov	r24, r25
    11e6:	88 1f       	adc	r24, r24
    11e8:	99 0b       	sbc	r25, r25
    11ea:	89 2b       	or	r24, r25
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <_Z14osc1MenuUpdatev+0x89c>
    11ee:	61 c0       	rjmp	.+194    	; 0x12b2 <_Z14osc1MenuUpdatev+0x95e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11f4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    11f6:	26 fd       	sbrc	r18, 6
    11f8:	61 c0       	rjmp	.+194    	; 0x12bc <_Z14osc1MenuUpdatev+0x968>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11fe:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1200:	25 fd       	sbrc	r18, 5
    1202:	55 c0       	rjmp	.+170    	; 0x12ae <_Z14osc1MenuUpdatev+0x95a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1204:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1206:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1208:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    120a:	24 fd       	sbrc	r18, 4
    120c:	4e c0       	rjmp	.+156    	; 0x12aa <_Z14osc1MenuUpdatev+0x956>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    120e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1210:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1212:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1214:	23 fd       	sbrc	r18, 3
    1216:	47 c0       	rjmp	.+142    	; 0x12a6 <_Z14osc1MenuUpdatev+0x952>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1218:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    121a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    121c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    121e:	22 fd       	sbrc	r18, 2
    1220:	40 c0       	rjmp	.+128    	; 0x12a2 <_Z14osc1MenuUpdatev+0x94e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1222:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1224:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1226:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1228:	21 fd       	sbrc	r18, 1
    122a:	39 c0       	rjmp	.+114    	; 0x129e <_Z14osc1MenuUpdatev+0x94a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    122c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    122e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1230:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1232:	20 fd       	sbrc	r18, 0
    1234:	32 c0       	rjmp	.+100    	; 0x129a <_Z14osc1MenuUpdatev+0x946>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1236:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1238:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    123a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    123c:	44 9a       	sbi	0x08, 4	; 8
    123e:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1240:	51 f6       	brne	.-108    	; 0x11d6 <_Z14osc1MenuUpdatev+0x882>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1242:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1244:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1246:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1248:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    124a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    124c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    124e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1250:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1252:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1254:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1256:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1258:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    125a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    125c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    125e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1260:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1262:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1264:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1266:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1268:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    126a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    126c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    126e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1270:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1272:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1274:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1276:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1278:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    127a:	8d 91       	ld	r24, X+
    127c:	81 11       	cpse	r24, r1
    127e:	81 cf       	rjmp	.-254    	; 0x1182 <_Z14osc1MenuUpdatev+0x82e>
	
	osc1MenuWaveformUpdate();
	osc1MenuCentsUpdate();
	osc1MenuSemisUpdate();
	osc1MenuSyncUpdate();
}
    1280:	e5 96       	adiw	r28, 0x35	; 53
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    129a:	5d 9a       	sbi	0x0b, 5	; 11
    129c:	cd cf       	rjmp	.-102    	; 0x1238 <_Z14osc1MenuUpdatev+0x8e4>
    129e:	5d 9a       	sbi	0x0b, 5	; 11
    12a0:	c6 cf       	rjmp	.-116    	; 0x122e <_Z14osc1MenuUpdatev+0x8da>
    12a2:	5d 9a       	sbi	0x0b, 5	; 11
    12a4:	bf cf       	rjmp	.-130    	; 0x1224 <_Z14osc1MenuUpdatev+0x8d0>
    12a6:	5d 9a       	sbi	0x0b, 5	; 11
    12a8:	b8 cf       	rjmp	.-144    	; 0x121a <_Z14osc1MenuUpdatev+0x8c6>
    12aa:	5d 9a       	sbi	0x0b, 5	; 11
    12ac:	b1 cf       	rjmp	.-158    	; 0x1210 <_Z14osc1MenuUpdatev+0x8bc>
    12ae:	5d 9a       	sbi	0x0b, 5	; 11
    12b0:	aa cf       	rjmp	.-172    	; 0x1206 <_Z14osc1MenuUpdatev+0x8b2>
    12b2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12b6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    12b8:	26 ff       	sbrs	r18, 6
    12ba:	9f cf       	rjmp	.-194    	; 0x11fa <_Z14osc1MenuUpdatev+0x8a6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12bc:	5d 9a       	sbi	0x0b, 5	; 11
    12be:	9e cf       	rjmp	.-196    	; 0x11fc <_Z14osc1MenuUpdatev+0x8a8>
    12c0:	5d 9a       	sbi	0x0b, 5	; 11
    12c2:	d3 ce       	rjmp	.-602    	; 0x106a <_Z14osc1MenuUpdatev+0x716>
    12c4:	5d 9a       	sbi	0x0b, 5	; 11
    12c6:	cc ce       	rjmp	.-616    	; 0x1060 <_Z14osc1MenuUpdatev+0x70c>
    12c8:	5d 9a       	sbi	0x0b, 5	; 11
    12ca:	c5 ce       	rjmp	.-630    	; 0x1056 <_Z14osc1MenuUpdatev+0x702>
    12cc:	5d 9a       	sbi	0x0b, 5	; 11
    12ce:	be ce       	rjmp	.-644    	; 0x104c <_Z14osc1MenuUpdatev+0x6f8>
    12d0:	5d 9a       	sbi	0x0b, 5	; 11
    12d2:	b7 ce       	rjmp	.-658    	; 0x1042 <_Z14osc1MenuUpdatev+0x6ee>
    12d4:	5d 9a       	sbi	0x0b, 5	; 11
    12d6:	b0 ce       	rjmp	.-672    	; 0x1038 <_Z14osc1MenuUpdatev+0x6e4>
    12d8:	5d 9a       	sbi	0x0b, 5	; 11
    12da:	d6 cd       	rjmp	.-1108   	; 0xe88 <_Z14osc1MenuUpdatev+0x534>
    12dc:	5d 9a       	sbi	0x0b, 5	; 11
    12de:	a7 ce       	rjmp	.-690    	; 0x102e <_Z14osc1MenuUpdatev+0x6da>
    12e0:	5d 9a       	sbi	0x0b, 5	; 11
    12e2:	a0 ce       	rjmp	.-704    	; 0x1024 <_Z14osc1MenuUpdatev+0x6d0>
    12e4:	5d 9a       	sbi	0x0b, 5	; 11
    12e6:	cb cd       	rjmp	.-1130   	; 0xe7e <_Z14osc1MenuUpdatev+0x52a>
    12e8:	5d 9a       	sbi	0x0b, 5	; 11
    12ea:	c4 cd       	rjmp	.-1144   	; 0xe74 <_Z14osc1MenuUpdatev+0x520>
    12ec:	5d 9a       	sbi	0x0b, 5	; 11
    12ee:	bd cd       	rjmp	.-1158   	; 0xe6a <_Z14osc1MenuUpdatev+0x516>
    12f0:	5d 9a       	sbi	0x0b, 5	; 11
    12f2:	b6 cd       	rjmp	.-1172   	; 0xe60 <_Z14osc1MenuUpdatev+0x50c>
    12f4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12f8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    12fa:	26 ff       	sbrs	r18, 6
    12fc:	a6 cd       	rjmp	.-1204   	; 0xe4a <_Z14osc1MenuUpdatev+0x4f6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12fe:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1300:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1302:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1304:	25 ff       	sbrs	r18, 5
    1306:	a6 cd       	rjmp	.-1204   	; 0xe54 <_Z14osc1MenuUpdatev+0x500>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1308:	5d 9a       	sbi	0x0b, 5	; 11
    130a:	a5 cd       	rjmp	.-1206   	; 0xe56 <_Z14osc1MenuUpdatev+0x502>
    130c:	5d 9a       	sbi	0x0b, 5	; 11
    130e:	c8 cc       	rjmp	.-1648   	; 0xca0 <_Z14osc1MenuUpdatev+0x34c>
    1310:	5d 9a       	sbi	0x0b, 5	; 11
    1312:	c1 cc       	rjmp	.-1662   	; 0xc96 <_Z14osc1MenuUpdatev+0x342>
    1314:	5d 9a       	sbi	0x0b, 5	; 11
    1316:	ba cc       	rjmp	.-1676   	; 0xc8c <_Z14osc1MenuUpdatev+0x338>
    1318:	5d 9a       	sbi	0x0b, 5	; 11
    131a:	b3 cc       	rjmp	.-1690   	; 0xc82 <_Z14osc1MenuUpdatev+0x32e>
    131c:	5d 9a       	sbi	0x0b, 5	; 11
    131e:	ac cc       	rjmp	.-1704   	; 0xc78 <_Z14osc1MenuUpdatev+0x324>
    1320:	5d 9a       	sbi	0x0b, 5	; 11
    1322:	a5 cc       	rjmp	.-1718   	; 0xc6e <_Z14osc1MenuUpdatev+0x31a>
    1324:	5d 9a       	sbi	0x0b, 5	; 11
    1326:	9e cc       	rjmp	.-1732   	; 0xc64 <_Z14osc1MenuUpdatev+0x310>
    1328:	5d 9a       	sbi	0x0b, 5	; 11
    132a:	d0 cb       	rjmp	.-2144   	; 0xacc <_Z14osc1MenuUpdatev+0x178>
    132c:	5d 9a       	sbi	0x0b, 5	; 11
    132e:	95 cc       	rjmp	.-1750   	; 0xc5a <_Z14osc1MenuUpdatev+0x306>
    1330:	5d 9a       	sbi	0x0b, 5	; 11
    1332:	c7 cb       	rjmp	.-2162   	; 0xac2 <_Z14osc1MenuUpdatev+0x16e>
    1334:	5d 9a       	sbi	0x0b, 5	; 11
    1336:	c0 cb       	rjmp	.-2176   	; 0xab8 <_Z14osc1MenuUpdatev+0x164>
    1338:	5d 9a       	sbi	0x0b, 5	; 11
    133a:	b9 cb       	rjmp	.-2190   	; 0xaae <_Z14osc1MenuUpdatev+0x15a>
    133c:	5d 9a       	sbi	0x0b, 5	; 11
    133e:	b2 cb       	rjmp	.-2204   	; 0xaa4 <_Z14osc1MenuUpdatev+0x150>
    1340:	5d 9a       	sbi	0x0b, 5	; 11
    1342:	ab cb       	rjmp	.-2218   	; 0xa9a <_Z14osc1MenuUpdatev+0x146>
    1344:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1346:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1348:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    134a:	26 ff       	sbrs	r18, 6
    134c:	a0 cb       	rjmp	.-2240   	; 0xa8e <_Z14osc1MenuUpdatev+0x13a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    134e:	5d 9a       	sbi	0x0b, 5	; 11
    1350:	9f cb       	rjmp	.-2242   	; 0xa90 <_Z14osc1MenuUpdatev+0x13c>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    1352:	2f e4       	ldi	r18, 0x4F	; 79
    1354:	3e e4       	ldi	r19, 0x4E	; 78
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	2f 83       	std	Y+7, r18	; 0x07
    135a:	38 87       	std	Y+8, r19	; 0x08
    135c:	49 87       	std	Y+9, r20	; 0x09
    135e:	be ce       	rjmp	.-644    	; 0x10dc <_Z14osc1MenuUpdatev+0x788>

00001360 <_Z18lfoMenuRouteUpdatev>:
	strcat(buf, "    ");
	writeLine(4, buf);
}

inline void lfoMenuRouteUpdate()
{
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	a1 97       	sbiw	r28, 0x21	; 33
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	e6 e3       	ldi	r30, 0x36	; 54
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	de 01       	movw	r26, r28
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	01 90       	ld	r0, Z+
    1384:	0d 92       	st	X+, r0
    1386:	8a 95       	dec	r24
    1388:	e1 f7       	brne	.-8      	; 0x1382 <_Z18lfoMenuRouteUpdatev+0x22>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    138a:	e0 91 59 05 	lds	r30, 0x0559
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	e8 59       	subi	r30, 0x98	; 152
    1396:	f9 4f       	sbci	r31, 0xF9	; 249
    1398:	65 91       	lpm	r22, Z+
    139a:	74 91       	lpm	r23, Z
    139c:	8e 01       	movw	r16, r28
    139e:	0f 5f       	subi	r16, 0xFF	; 255
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	c8 01       	movw	r24, r16
    13a4:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    13a8:	d8 01       	movw	r26, r16
    13aa:	0d 90       	ld	r0, X+
    13ac:	00 20       	and	r0, r0
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <_Z18lfoMenuRouteUpdatev+0x4a>
    13b0:	11 97       	sbiw	r26, 0x01	; 1
    13b2:	85 e0       	ldi	r24, 0x05	; 5
    13b4:	e5 e4       	ldi	r30, 0x45	; 69
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	01 90       	ld	r0, Z+
    13ba:	0d 92       	st	X+, r0
    13bc:	8a 95       	dec	r24
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <_Z18lfoMenuRouteUpdatev+0x58>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	f8 01       	movw	r30, r16
    13c4:	de 01       	movw	r26, r28
    13c6:	55 96       	adiw	r26, 0x15	; 21
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	8a 95       	dec	r24
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <_Z18lfoMenuRouteUpdatev+0x68>
	buf[12] = '\0';
    13d0:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    13d2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    13d4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13d6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    13d8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1400:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1402:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1404:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1406:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1408:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    140a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    140c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    140e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1410:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1412:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1414:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1416:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1418:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    141a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    141c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    141e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1420:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1422:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1424:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1426:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1428:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    142a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    142c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    142e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1430:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1432:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1434:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1436:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1438:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    143a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    143c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    143e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1440:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1442:	8d 89       	ldd	r24, Y+21	; 0x15
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <_Z18lfoMenuRouteUpdatev+0xea>
    1448:	81 c0       	rjmp	.+258    	; 0x154c <_Z18lfoMenuRouteUpdatev+0x1ec>
    144a:	de 01       	movw	r26, r28
    144c:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    144e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1450:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1452:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1454:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1456:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1458:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    145a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    145c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    145e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1460:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1462:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1464:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1466:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1468:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    146a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    146c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    146e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1470:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1472:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1474:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1476:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1478:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    147a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    147c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    147e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1480:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1482:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1484:	44 9a       	sbi	0x08, 4	; 8
    1486:	99 27       	eor	r25, r25
    1488:	87 fd       	sbrc	r24, 7
    148a:	90 95       	com	r25
    148c:	80 97       	sbiw	r24, 0x20	; 32
    148e:	fc 01       	movw	r30, r24
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	e8 0f       	add	r30, r24
    149a:	f9 1f       	adc	r31, r25
    149c:	e0 5f       	subi	r30, 0xF0	; 240
    149e:	fc 4f       	sbci	r31, 0xFC	; 252
    14a0:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    14a2:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    14a4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    14a6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14a8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14aa:	82 2f       	mov	r24, r18
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	88 0f       	add	r24, r24
    14b0:	89 2f       	mov	r24, r25
    14b2:	88 1f       	adc	r24, r24
    14b4:	99 0b       	sbc	r25, r25
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f0       	breq	.+2      	; 0x14bc <_Z18lfoMenuRouteUpdatev+0x15c>
    14ba:	5f c0       	rjmp	.+190    	; 0x157a <_Z18lfoMenuRouteUpdatev+0x21a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14c0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14c2:	26 fd       	sbrc	r18, 6
    14c4:	5f c0       	rjmp	.+190    	; 0x1584 <_Z18lfoMenuRouteUpdatev+0x224>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14ca:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14cc:	25 fd       	sbrc	r18, 5
    14ce:	53 c0       	rjmp	.+166    	; 0x1576 <_Z18lfoMenuRouteUpdatev+0x216>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14d6:	24 fd       	sbrc	r18, 4
    14d8:	4c c0       	rjmp	.+152    	; 0x1572 <_Z18lfoMenuRouteUpdatev+0x212>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14de:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14e0:	23 fd       	sbrc	r18, 3
    14e2:	45 c0       	rjmp	.+138    	; 0x156e <_Z18lfoMenuRouteUpdatev+0x20e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14ea:	22 fd       	sbrc	r18, 2
    14ec:	3e c0       	rjmp	.+124    	; 0x156a <_Z18lfoMenuRouteUpdatev+0x20a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14f4:	21 fd       	sbrc	r18, 1
    14f6:	37 c0       	rjmp	.+110    	; 0x1566 <_Z18lfoMenuRouteUpdatev+0x206>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14fe:	20 fd       	sbrc	r18, 0
    1500:	30 c0       	rjmp	.+96     	; 0x1562 <_Z18lfoMenuRouteUpdatev+0x202>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1502:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1504:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1506:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1508:	44 9a       	sbi	0x08, 4	; 8
    150a:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    150c:	51 f6       	brne	.-108    	; 0x14a2 <_Z18lfoMenuRouteUpdatev+0x142>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    150e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1510:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1512:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1514:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1516:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1518:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    151a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    151c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    151e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1520:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1522:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1524:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1526:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1528:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    152a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    152c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    152e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1530:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1532:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1534:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1536:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1538:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    153a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    153c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    153e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1540:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1542:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1544:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1546:	8d 91       	ld	r24, X+
    1548:	81 11       	cpse	r24, r1
    154a:	81 cf       	rjmp	.-254    	; 0x144e <_Z18lfoMenuRouteUpdatev+0xee>
	
	sprintf(buf, "%s", routeLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
	strcat(buf, "    ");
	writeLine(5, buf);
}
    154c:	a1 96       	adiw	r28, 0x21	; 33
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1562:	5d 9a       	sbi	0x0b, 5	; 11
    1564:	cf cf       	rjmp	.-98     	; 0x1504 <_Z18lfoMenuRouteUpdatev+0x1a4>
    1566:	5d 9a       	sbi	0x0b, 5	; 11
    1568:	c8 cf       	rjmp	.-112    	; 0x14fa <_Z18lfoMenuRouteUpdatev+0x19a>
    156a:	5d 9a       	sbi	0x0b, 5	; 11
    156c:	c1 cf       	rjmp	.-126    	; 0x14f0 <_Z18lfoMenuRouteUpdatev+0x190>
    156e:	5d 9a       	sbi	0x0b, 5	; 11
    1570:	ba cf       	rjmp	.-140    	; 0x14e6 <_Z18lfoMenuRouteUpdatev+0x186>
    1572:	5d 9a       	sbi	0x0b, 5	; 11
    1574:	b3 cf       	rjmp	.-154    	; 0x14dc <_Z18lfoMenuRouteUpdatev+0x17c>
    1576:	5d 9a       	sbi	0x0b, 5	; 11
    1578:	ac cf       	rjmp	.-168    	; 0x14d2 <_Z18lfoMenuRouteUpdatev+0x172>
    157a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    157c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    157e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1580:	26 ff       	sbrs	r18, 6
    1582:	a1 cf       	rjmp	.-190    	; 0x14c6 <_Z18lfoMenuRouteUpdatev+0x166>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1584:	5d 9a       	sbi	0x0b, 5	; 11
    1586:	a0 cf       	rjmp	.-192    	; 0x14c8 <_Z18lfoMenuRouteUpdatev+0x168>

00001588 <_Z7initLCDv>:
	writeLine(5, buf);
}

void initLCD()
{
	sbi(LCD_SCE_DIR, LCD_SCE_PIN);
    1588:	3c 9a       	sbi	0x07, 4	; 7
	sbi(LCD_RST_DIR, LCD_RST_PIN);
    158a:	3d 9a       	sbi	0x07, 5	; 7
	sbi(LCD_DC_DIR, LCD_DC_PIN);
    158c:	25 9a       	sbi	0x04, 5	; 4
	sbi(LCD_DATA_DIR, LCD_DATA_PIN);
    158e:	55 9a       	sbi	0x0a, 5	; 10
	sbi(LCD_CLK_DIR, LCD_CLK_PIN);
    1590:	54 9a       	sbi	0x0a, 4	; 10
	
	cbi(LCD_RST_WR, LCD_RST_PIN);
    1592:	45 98       	cbi	0x08, 5	; 8
	sbi(LCD_RST_WR, LCD_RST_PIN);
    1594:	45 9a       	sbi	0x08, 5	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1596:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1598:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    159a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    159c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    159e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15a6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15a8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    15cc:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15ce:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15d0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15d4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15de:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15f2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1600:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1602:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1604:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1606:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1608:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    160a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    160c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    160e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1610:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1612:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1614:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1616:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1618:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    161a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    161c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    161e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1620:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1622:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1624:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1626:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1628:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    162a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    162c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    162e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1630:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1632:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1634:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1636:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1638:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    163a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    163c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    163e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1640:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1642:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1644:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1646:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1648:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    164a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    164c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    164e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1650:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1652:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1654:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1656:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1658:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    165a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    165c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    165e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1660:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1662:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1664:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1666:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1668:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    166a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    166c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    166e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1670:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1672:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1674:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1676:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1678:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    167a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    167c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    167e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1680:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1682:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1684:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1686:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1688:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    168a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    168c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    168e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1690:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1692:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1694:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1696:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1698:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    169a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    169c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    169e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16aa:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16ac:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    16ae:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    16b0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ca:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16cc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16d2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16e4:	44 9a       	sbi	0x08, 4	; 8
    16e6:	08 95       	ret

000016e8 <_Z5setupv>:
		}
	}
}

void setup()
{
    16e8:	2f 92       	push	r2
    16ea:	3f 92       	push	r3
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	2f 97       	sbiw	r28, 0x0f	; 15
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e8       	ldi	r25, 0x80	; 128
    1720:	ac e8       	ldi	r26, 0x8C	; 140
    1722:	ba e7       	ldi	r27, 0x7A	; 122
    1724:	80 93 06 05 	sts	0x0506, r24
    1728:	90 93 07 05 	sts	0x0507, r25
    172c:	a0 93 08 05 	sts	0x0508, r26
    1730:	b0 93 09 05 	sts	0x0509, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
    173c:	1a 82       	std	Y+2, r1	; 0x02
    173e:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1740:	89 80       	ldd	r8, Y+1	; 0x01
    1742:	9a 80       	ldd	r9, Y+2	; 0x02
    1744:	ab 80       	ldd	r10, Y+3	; 0x03
    1746:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    1748:	94 01       	movw	r18, r8
    174a:	a5 01       	movw	r20, r10
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	00 e1       	ldi	r16, 0x10	; 16
    1756:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    175a:	a1 2c       	mov	r10, r1
    175c:	e0 e8       	ldi	r30, 0x80	; 128
    175e:	be 2e       	mov	r11, r30
    1760:	fc e8       	ldi	r31, 0x8C	; 140
    1762:	cf 2e       	mov	r12, r31
    1764:	aa e7       	ldi	r26, 0x7A	; 122
    1766:	da 2e       	mov	r13, r26
    1768:	e1 2c       	mov	r14, r1
    176a:	f1 2c       	mov	r15, r1
    176c:	00 e0       	ldi	r16, 0x00	; 0
    176e:	10 e0       	ldi	r17, 0x00	; 0
    1770:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__udivdi3>
    1774:	20 93 02 05 	sts	0x0502, r18
    1778:	30 93 03 05 	sts	0x0503, r19
    177c:	40 93 04 05 	sts	0x0504, r20
    1780:	50 93 05 05 	sts	0x0505, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    178c:	89 80       	ldd	r8, Y+1	; 0x01
    178e:	9a 80       	ldd	r9, Y+2	; 0x02
    1790:	ab 80       	ldd	r10, Y+3	; 0x03
    1792:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    1794:	94 01       	movw	r18, r8
    1796:	a5 01       	movw	r20, r10
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	00 e1       	ldi	r16, 0x10	; 16
    17a2:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    17a6:	a1 2c       	mov	r10, r1
    17a8:	b0 e8       	ldi	r27, 0x80	; 128
    17aa:	bb 2e       	mov	r11, r27
    17ac:	0c e8       	ldi	r16, 0x8C	; 140
    17ae:	c0 2e       	mov	r12, r16
    17b0:	ea e7       	ldi	r30, 0x7A	; 122
    17b2:	de 2e       	mov	r13, r30
    17b4:	e1 2c       	mov	r14, r1
    17b6:	f1 2c       	mov	r15, r1
    17b8:	00 e0       	ldi	r16, 0x00	; 0
    17ba:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__udivdi3>
    17be:	39 01       	movw	r6, r18
    17c0:	4a 01       	movw	r8, r20
    17c2:	1b 01       	movw	r2, r22
    17c4:	2c 01       	movw	r4, r24
    17c6:	32 2f       	mov	r19, r18
    17c8:	30 93 0a 05 	sts	0x050A, r19
    17cc:	70 92 0b 05 	sts	0x050B, r7
    17d0:	80 92 0c 05 	sts	0x050C, r8
    17d4:	90 92 0d 05 	sts	0x050D, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    17d8:	88 eb       	ldi	r24, 0xB8	; 184
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	90 93 87 05 	sts	0x0587, r25
    17e0:	80 93 86 05 	sts	0x0586, r24
	*((unsigned short*)&(b)) = 0;
    17e4:	10 92 85 05 	sts	0x0585, r1
    17e8:	10 92 84 05 	sts	0x0584, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    17ec:	00 91 84 05 	lds	r16, 0x0584
    17f0:	10 91 85 05 	lds	r17, 0x0585
    17f4:	20 91 86 05 	lds	r18, 0x0586
    17f8:	30 91 87 05 	lds	r19, 0x0587
	temp *= rhs;
    17fc:	58 01       	movw	r10, r16
    17fe:	69 01       	movw	r12, r18
    1800:	00 e0       	ldi	r16, 0x00	; 0
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	93 01       	movw	r18, r6
    1806:	a4 01       	movw	r20, r8
    1808:	b1 01       	movw	r22, r2
    180a:	c2 01       	movw	r24, r4
    180c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <__muldi3>
	
	return (unsigned long)(temp >> 16);
    1810:	00 e1       	ldi	r16, 0x10	; 16
    1812:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    1816:	c9 01       	movw	r24, r18
    1818:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    181a:	80 93 7c 05 	sts	0x057C, r24
    181e:	90 93 7d 05 	sts	0x057D, r25
    1822:	a0 93 7e 05 	sts	0x057E, r26
    1826:	b0 93 7f 05 	sts	0x057F, r27
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e8       	ldi	r25, 0x80	; 128
    182e:	a8 eb       	ldi	r26, 0xB8	; 184
    1830:	b1 e0       	ldi	r27, 0x01	; 1
    1832:	80 93 6e 05 	sts	0x056E, r24
    1836:	90 93 6f 05 	sts	0x056F, r25
    183a:	a0 93 70 05 	sts	0x0570, r26
    183e:	b0 93 71 05 	sts	0x0571, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1842:	93 01       	movw	r18, r6
    1844:	a4 01       	movw	r20, r8
    1846:	b1 01       	movw	r22, r2
    1848:	c2 01       	movw	r24, r4
    184a:	03 e0       	ldi	r16, 0x03	; 3
    184c:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    1850:	53 01       	movw	r10, r6
    1852:	64 01       	movw	r12, r8
    1854:	71 01       	movw	r14, r2
    1856:	82 01       	movw	r16, r4
    1858:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subdi3>
    185c:	07 e0       	ldi	r16, 0x07	; 7
    185e:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    1862:	04 2d       	mov	r16, r4
    1864:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subdi3>
    1868:	06 e0       	ldi	r16, 0x06	; 6
    186a:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    186e:	04 2d       	mov	r16, r4
    1870:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subdi3>
    1874:	59 01       	movw	r10, r18
    1876:	6a 01       	movw	r12, r20
    1878:	7b 01       	movw	r14, r22
    187a:	e8 2f       	mov	r30, r24
    187c:	19 2f       	mov	r17, r25
    187e:	03 e0       	ldi	r16, 0x03	; 3
    1880:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    1884:	0e 2f       	mov	r16, r30
    1886:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subdi3>
    188a:	03 e0       	ldi	r16, 0x03	; 3
    188c:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    1890:	53 01       	movw	r10, r6
    1892:	64 01       	movw	r12, r8
    1894:	71 01       	movw	r14, r2
    1896:	82 01       	movw	r16, r4
    1898:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__subdi3>
    189c:	2d 83       	std	Y+5, r18	; 0x05
    189e:	3d 87       	std	Y+13, r19	; 0x0d
    18a0:	4e 87       	std	Y+14, r20	; 0x0e
    18a2:	5f 87       	std	Y+15, r21	; 0x0f
    18a4:	b6 2f       	mov	r27, r22
    18a6:	a7 2f       	mov	r26, r23
    18a8:	f8 2f       	mov	r31, r24
    18aa:	e9 2f       	mov	r30, r25
    18ac:	7a 2f       	mov	r23, r26
    18ae:	8f 2f       	mov	r24, r31
    18b0:	9e 2f       	mov	r25, r30
    18b2:	03 e0       	ldi	r16, 0x03	; 3
    18b4:	0e 94 b5 21 	call	0x436a	; 0x436a <__ashldi3>
    18b8:	59 01       	movw	r10, r18
    18ba:	6a 01       	movw	r12, r20
    18bc:	7b 01       	movw	r14, r22
    18be:	8c 01       	movw	r16, r24
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    18c4:	4e 85       	ldd	r20, Y+14	; 0x0e
    18c6:	5f 85       	ldd	r21, Y+15	; 0x0f
    18c8:	6b 2f       	mov	r22, r27
    18ca:	7a 2f       	mov	r23, r26
    18cc:	8f 2f       	mov	r24, r31
    18ce:	9e 2f       	mov	r25, r30
    18d0:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__adddi3>
    18d4:	53 01       	movw	r10, r6
    18d6:	64 01       	movw	r12, r8
    18d8:	71 01       	movw	r14, r2
    18da:	82 01       	movw	r16, r4
    18dc:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__adddi3>
	
	return (unsigned long)(temp >> 16);
    18e0:	00 e1       	ldi	r16, 0x10	; 16
    18e2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    18e6:	c9 01       	movw	r24, r18
    18e8:	da 01       	movw	r26, r20

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);

	toFixed(440.5, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    18ea:	80 93 66 05 	sts	0x0566, r24
    18ee:	90 93 67 05 	sts	0x0567, r25
    18f2:	a0 93 68 05 	sts	0x0568, r26
    18f6:	b0 93 69 05 	sts	0x0569, r27
	
	initLCD();
    18fa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_Z7initLCDv>
    18fe:	88 ef       	ldi	r24, 0xF8	; 248
    1900:	91 e0       	ldi	r25, 0x01	; 1
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1902:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1904:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1906:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1908:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    190a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    190c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    190e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1910:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1912:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1914:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1916:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1918:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    191a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    191c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    191e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1920:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1922:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1924:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1926:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1928:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    192a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    192c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    192e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1930:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1932:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1934:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1936:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1938:	44 9a       	sbi	0x08, 4	; 8
    193a:	01 97       	sbiw	r24, 0x01	; 1
		lcdCharacter(*str++);
}

inline void lcdClear()
{
	for(int index = 0; index < (LCD_X*LCD_Y)/8; index++)
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	09 f7       	brne	.-62     	; 0x1902 <_Z5setupv+0x21a>

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1940:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1942:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1944:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1946:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1948:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    194a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    194c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    194e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1950:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1952:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1954:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1956:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1958:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    195a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    195c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    195e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1960:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1962:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1964:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1966:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1968:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    196a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    196c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    196e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1970:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1972:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1974:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1976:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1978:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    197a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    197c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    197e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1980:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1982:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1984:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1986:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1988:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    198a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    198c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    198e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1990:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1992:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1994:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1996:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1998:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    199a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    199c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    199e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    19ae:	44 9a       	sbi	0x08, 4	; 8
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
    19b0:	8f e0       	ldi	r24, 0x0F	; 15
    19b2:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1);
    19b6:	8a e8       	ldi	r24, 0x8A	; 138
    19b8:	80 93 7a 00 	sts	0x007A, r24
	gotoXY(0,0);
}

void uartInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    19bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    19c0:	8f e1       	ldi	r24, 0x1F	; 31
    19c2:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    19c6:	88 e9       	ldi	r24, 0x98	; 152
    19c8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	80 93 c2 00 	sts	0x00C2, r24
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
    19d2:	80 91 b1 00 	lds	r24, 0x00B1
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
    19dc:	80 91 b1 00 	lds	r24, 0x00B1
    19e0:	8d 7f       	andi	r24, 0xFD	; 253
    19e2:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
    19e6:	80 91 b1 00 	lds	r24, 0x00B1
    19ea:	8b 7f       	andi	r24, 0xFB	; 251
    19ec:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
    19f0:	80 91 b0 00 	lds	r24, 0x00B0
    19f4:	8f 7b       	andi	r24, 0xBF	; 191
    19f6:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
    19fa:	80 91 b0 00 	lds	r24, 0x00B0
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
    1a04:	80 91 b0 00 	lds	r24, 0x00B0
    1a08:	81 60       	ori	r24, 0x01	; 1
    1a0a:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
    1a0e:	80 91 b0 00 	lds	r24, 0x00B0
    1a12:	8d 7f       	andi	r24, 0xFD	; 253
    1a14:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
    1a18:	80 91 b1 00 	lds	r24, 0x00B1
    1a1c:	87 7f       	andi	r24, 0xF7	; 247
    1a1e:	80 93 b1 00 	sts	0x00B1, r24
	noteUpdate();
}

void btnInit()
{
	cbi(OSC1_BTN_DIR, OSC1_BTN_PIN);
    1a22:	56 98       	cbi	0x0a, 6	; 10
	sbi(OSC1_BTN_WR, OSC1_BTN_PIN);
    1a24:	5e 9a       	sbi	0x0b, 6	; 11
	
	cbi(OSC2_BTN_DIR, OSC2_BTN_PIN); //Set OSC2_BTN as an input
    1a26:	57 98       	cbi	0x0a, 7	; 10
	sbi(OSC2_BTN_WR, OSC2_BTN_PIN); //Set the internal pull-up
    1a28:	5f 9a       	sbi	0x0b, 7	; 11
	
	cbi(SAVE_BTN_DIR, SAVE_BTN_PIN); //Set SAVE_BTN as an input
    1a2a:	20 98       	cbi	0x04, 0	; 4
	sbi(SAVE_BTN_WR, SAVE_BTN_PIN);	//Set the internal pull-up
    1a2c:	28 9a       	sbi	0x05, 0	; 5
	
	cbi(BANK_BTN_DIR, BANK_BTN_PIN);
    1a2e:	24 98       	cbi	0x04, 4	; 4
	sbi(BANK_BTN_WR, BANK_BTN_PIN);
    1a30:	2c 9a       	sbi	0x05, 4	; 5
	
	cbi(LOCK_BTN_DIR, LOCK_BTN_PIN);
    1a32:	22 98       	cbi	0x04, 2	; 4
	sbi(LOCK_BTN_WR, LOCK_BTN_PIN);
    1a34:	2a 9a       	sbi	0x05, 2	; 5
	
	cbi(EXTRA_BTN_DIR, EXTRA_BTN_PIN);
    1a36:	21 98       	cbi	0x04, 1	; 4
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
    1a38:	29 9a       	sbi	0x05, 1	; 5
	adcInit();
	uartInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
    1a3a:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
    1a3c:	80 91 70 00 	lds	r24, 0x0070
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	80 93 70 00 	sts	0x0070, r24
	sei();
    1a46:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    1a48:	e0 91 04 01 	lds	r30, 0x0104
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 91 7a 05 	lds	r24, 0x057A
    1a52:	df 01       	movw	r26, r30
    1a54:	a8 0f       	add	r26, r24
    1a56:	b1 1d       	adc	r27, r1
    1a58:	87 fd       	sbrc	r24, 7
    1a5a:	ba 95       	dec	r27
    1a5c:	aa 0f       	add	r26, r26
    1a5e:	bb 1f       	adc	r27, r27
    1a60:	aa 0f       	add	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	ae 55       	subi	r26, 0x5E	; 94
    1a66:	be 4f       	sbci	r27, 0xFE	; 254
    1a68:	cd 90       	ld	r12, X+
    1a6a:	dd 90       	ld	r13, X+
    1a6c:	ed 90       	ld	r14, X+
    1a6e:	fc 90       	ld	r15, X
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    1a70:	80 91 63 05 	lds	r24, 0x0563
    1a74:	90 91 64 05 	lds	r25, 0x0564
    1a78:	e9 0f       	add	r30, r25
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	97 fd       	sbrc	r25, 7
    1a7e:	fa 95       	dec	r31
    1a80:	9c e0       	ldi	r25, 0x0C	; 12
    1a82:	89 02       	muls	r24, r25
    1a84:	e0 0d       	add	r30, r0
    1a86:	f1 1d       	adc	r31, r1
    1a88:	11 24       	eor	r1, r1
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	ee 55       	subi	r30, 0x5E	; 94
    1a94:	fe 4f       	sbci	r31, 0xFE	; 254
    1a96:	80 80       	ld	r8, Z
    1a98:	91 80       	ldd	r9, Z+1	; 0x01
    1a9a:	a2 80       	ldd	r10, Z+2	; 0x02
    1a9c:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    1a9e:	60 91 7b 05 	lds	r22, 0x057B
    1aa2:	a7 e2       	ldi	r26, 0x27	; 39
    1aa4:	6a 02       	muls	r22, r26
    1aa6:	b0 01       	movw	r22, r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	88 27       	eor	r24, r24
    1aac:	77 fd       	sbrc	r23, 7
    1aae:	80 95       	com	r24
    1ab0:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1ab2:	a7 01       	movw	r20, r14
    1ab4:	96 01       	movw	r18, r12
    1ab6:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1aba:	00 e1       	ldi	r16, 0x10	; 16
    1abc:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    1ac0:	2d 83       	std	Y+5, r18	; 0x05
    1ac2:	3e 83       	std	Y+6, r19	; 0x06
    1ac4:	4f 83       	std	Y+7, r20	; 0x07
    1ac6:	58 87       	std	Y+8, r21	; 0x08
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	af 81       	ldd	r26, Y+7	; 0x07
    1ace:	b8 85       	ldd	r27, Y+8	; 0x08
    1ad0:	c8 0e       	add	r12, r24
    1ad2:	d9 1e       	adc	r13, r25
    1ad4:	ea 1e       	adc	r14, r26
    1ad6:	fb 1e       	adc	r15, r27
    1ad8:	c0 92 84 05 	sts	0x0584, r12
    1adc:	d0 92 85 05 	sts	0x0585, r13
    1ae0:	e0 92 86 05 	sts	0x0586, r14
    1ae4:	f0 92 87 05 	sts	0x0587, r15

	centsConst = 0x27*osc2CentsShift;
    1ae8:	20 91 65 05 	lds	r18, 0x0565
    1aec:	97 e2       	ldi	r25, 0x27	; 39
    1aee:	29 02       	muls	r18, r25
    1af0:	90 01       	movw	r18, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	44 27       	eor	r20, r20
    1af6:	37 fd       	sbrc	r19, 7
    1af8:	40 95       	com	r20
    1afa:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1afc:	c5 01       	movw	r24, r10
    1afe:	b4 01       	movw	r22, r8
    1b00:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b04:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    1b08:	2d 83       	std	Y+5, r18	; 0x05
    1b0a:	3e 83       	std	Y+6, r19	; 0x06
    1b0c:	4f 83       	std	Y+7, r20	; 0x07
    1b0e:	58 87       	std	Y+8, r21	; 0x08
    1b10:	69 87       	std	Y+9, r22	; 0x09
    1b12:	7a 87       	std	Y+10, r23	; 0x0a
    1b14:	8b 87       	std	Y+11, r24	; 0x0b
    1b16:	9c 87       	std	Y+12, r25	; 0x0c

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	af 81       	ldd	r26, Y+7	; 0x07
    1b1e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b20:	88 0e       	add	r8, r24
    1b22:	99 1e       	adc	r9, r25
    1b24:	aa 1e       	adc	r10, r26
    1b26:	bb 1e       	adc	r11, r27
    1b28:	80 92 6e 05 	sts	0x056E, r8
    1b2c:	90 92 6f 05 	sts	0x056F, r9
    1b30:	a0 92 70 05 	sts	0x0570, r10
    1b34:	b0 92 71 05 	sts	0x0571, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b38:	40 90 0a 05 	lds	r4, 0x050A
    1b3c:	50 90 0b 05 	lds	r5, 0x050B
    1b40:	60 90 0c 05 	lds	r6, 0x050C
    1b44:	70 90 0d 05 	lds	r7, 0x050D
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b48:	c7 01       	movw	r24, r14
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	a3 01       	movw	r20, r6
    1b4e:	92 01       	movw	r18, r4
    1b50:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b54:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    1b58:	c9 01       	movw	r24, r18
    1b5a:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b5c:	80 93 7c 05 	sts	0x057C, r24
    1b60:	90 93 7d 05 	sts	0x057D, r25
    1b64:	a0 93 7e 05 	sts	0x057E, r26
    1b68:	b0 93 7f 05 	sts	0x057F, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	b4 01       	movw	r22, r8
    1b70:	a3 01       	movw	r20, r6
    1b72:	92 01       	movw	r18, r4
    1b74:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b78:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    1b80:	80 93 66 05 	sts	0x0566, r24
    1b84:	90 93 67 05 	sts	0x0567, r25
    1b88:	a0 93 68 05 	sts	0x0568, r26
    1b8c:	b0 93 69 05 	sts	0x0569, r27
	
	sbi (TIMSK2,TOIE2);
	sei();

	noteUpdate();
}
    1b90:	2f 96       	adiw	r28, 0x0f	; 15
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	7f 90       	pop	r7
    1bb6:	6f 90       	pop	r6
    1bb8:	5f 90       	pop	r5
    1bba:	4f 90       	pop	r4
    1bbc:	3f 90       	pop	r3
    1bbe:	2f 90       	pop	r2
    1bc0:	08 95       	ret

00001bc2 <main>:
void setup(void);

void noteUpdate(void);

int main(void)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	c1 55       	subi	r28, 0x51	; 81
    1bcc:	d1 09       	sbc	r29, r1
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
	setup();
    1bd8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_Z5setupv>
	
	osc1MenuUpdate();
    1bdc:	0e 94 aa 04 	call	0x954	; 0x954 <_Z14osc1MenuUpdatev>
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	90 93 27 05 	sts	0x0527, r25
    1be8:	80 93 26 05 	sts	0x0526, r24
		menuKnobPos[i][1] = 512;
    1bec:	90 93 29 05 	sts	0x0529, r25
    1bf0:	80 93 28 05 	sts	0x0528, r24
		menuKnobPos[i][2] = 512;
    1bf4:	90 93 2b 05 	sts	0x052B, r25
    1bf8:	80 93 2a 05 	sts	0x052A, r24
		menuKnobPos[i][3] = 512;
    1bfc:	90 93 2d 05 	sts	0x052D, r25
    1c00:	80 93 2c 05 	sts	0x052C, r24
		
		menuChange[i][0] = 0;
    1c04:	10 92 0e 05 	sts	0x050E, r1
		menuChange[i][1] = 0;
    1c08:	10 92 0f 05 	sts	0x050F, r1
		menuChange[i][2] = 0;
    1c0c:	10 92 10 05 	sts	0x0510, r1
		menuChange[i][3] = 0;
    1c10:	10 92 11 05 	sts	0x0511, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c14:	90 93 2f 05 	sts	0x052F, r25
    1c18:	80 93 2e 05 	sts	0x052E, r24
		menuKnobPos[i][1] = 512;
    1c1c:	90 93 31 05 	sts	0x0531, r25
    1c20:	80 93 30 05 	sts	0x0530, r24
		menuKnobPos[i][2] = 512;
    1c24:	90 93 33 05 	sts	0x0533, r25
    1c28:	80 93 32 05 	sts	0x0532, r24
		menuKnobPos[i][3] = 512;
    1c2c:	90 93 35 05 	sts	0x0535, r25
    1c30:	80 93 34 05 	sts	0x0534, r24
		
		menuChange[i][0] = 0;
    1c34:	10 92 12 05 	sts	0x0512, r1
		menuChange[i][1] = 0;
    1c38:	10 92 13 05 	sts	0x0513, r1
		menuChange[i][2] = 0;
    1c3c:	10 92 14 05 	sts	0x0514, r1
		menuChange[i][3] = 0;
    1c40:	10 92 15 05 	sts	0x0515, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c44:	90 93 37 05 	sts	0x0537, r25
    1c48:	80 93 36 05 	sts	0x0536, r24
		menuKnobPos[i][1] = 512;
    1c4c:	90 93 39 05 	sts	0x0539, r25
    1c50:	80 93 38 05 	sts	0x0538, r24
		menuKnobPos[i][2] = 512;
    1c54:	90 93 3b 05 	sts	0x053B, r25
    1c58:	80 93 3a 05 	sts	0x053A, r24
		menuKnobPos[i][3] = 512;
    1c5c:	90 93 3d 05 	sts	0x053D, r25
    1c60:	80 93 3c 05 	sts	0x053C, r24
		
		menuChange[i][0] = 0;
    1c64:	10 92 16 05 	sts	0x0516, r1
		menuChange[i][1] = 0;
    1c68:	10 92 17 05 	sts	0x0517, r1
		menuChange[i][2] = 0;
    1c6c:	10 92 18 05 	sts	0x0518, r1
		menuChange[i][3] = 0;
    1c70:	10 92 19 05 	sts	0x0519, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c74:	90 93 3f 05 	sts	0x053F, r25
    1c78:	80 93 3e 05 	sts	0x053E, r24
		menuKnobPos[i][1] = 512;
    1c7c:	90 93 41 05 	sts	0x0541, r25
    1c80:	80 93 40 05 	sts	0x0540, r24
		menuKnobPos[i][2] = 512;
    1c84:	90 93 43 05 	sts	0x0543, r25
    1c88:	80 93 42 05 	sts	0x0542, r24
		menuKnobPos[i][3] = 512;
    1c8c:	90 93 45 05 	sts	0x0545, r25
    1c90:	80 93 44 05 	sts	0x0544, r24
		
		menuChange[i][0] = 0;
    1c94:	10 92 1a 05 	sts	0x051A, r1
		menuChange[i][1] = 0;
    1c98:	10 92 1b 05 	sts	0x051B, r1
		menuChange[i][2] = 0;
    1c9c:	10 92 1c 05 	sts	0x051C, r1
		menuChange[i][3] = 0;
    1ca0:	10 92 1d 05 	sts	0x051D, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1ca4:	90 93 47 05 	sts	0x0547, r25
    1ca8:	80 93 46 05 	sts	0x0546, r24
		menuKnobPos[i][1] = 512;
    1cac:	90 93 49 05 	sts	0x0549, r25
    1cb0:	80 93 48 05 	sts	0x0548, r24
		menuKnobPos[i][2] = 512;
    1cb4:	90 93 4b 05 	sts	0x054B, r25
    1cb8:	80 93 4a 05 	sts	0x054A, r24
		menuKnobPos[i][3] = 512;
    1cbc:	90 93 4d 05 	sts	0x054D, r25
    1cc0:	80 93 4c 05 	sts	0x054C, r24
		
		menuChange[i][0] = 0;
    1cc4:	10 92 1e 05 	sts	0x051E, r1
		menuChange[i][1] = 0;
    1cc8:	10 92 1f 05 	sts	0x051F, r1
		menuChange[i][2] = 0;
    1ccc:	10 92 20 05 	sts	0x0520, r1
		menuChange[i][3] = 0;
    1cd0:	10 92 21 05 	sts	0x0521, r1
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	2b 5e       	subi	r18, 0xEB	; 235
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	3f af       	std	Y+63, r19	; 0x3f
    1cdc:	2e af       	std	Y+62, r18	; 0x3e
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	5c 01       	movw	r10, r24
    1ce4:	de 01       	movw	r26, r28
    1ce6:	18 96       	adiw	r26, 0x08	; 8
    1ce8:	bb af       	std	Y+59, r27	; 0x3b
    1cea:	aa af       	std	Y+58, r26	; 0x3a
    1cec:	2f 50       	subi	r18, 0x0F	; 15
    1cee:	31 09       	sbc	r19, r1
    1cf0:	3f ab       	std	Y+55, r19	; 0x37
    1cf2:	2e ab       	std	Y+54, r18	; 0x36
    1cf4:	06 96       	adiw	r24, 0x06	; 6
    1cf6:	99 af       	std	Y+57, r25	; 0x39
    1cf8:	88 af       	std	Y+56, r24	; 0x38
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	bd af       	std	Y+61, r27	; 0x3d
    1cfe:	ac af       	std	Y+60, r26	; 0x3c

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d00:	be ad       	ldd	r27, Y+62	; 0x3e
    1d02:	61 96       	adiw	r28, 0x11	; 17
    1d04:	bf af       	std	Y+63, r27	; 0x3f
    1d06:	61 97       	sbiw	r28, 0x11	; 17
    1d08:	2f ad       	ldd	r18, Y+63	; 0x3f
    1d0a:	62 96       	adiw	r28, 0x12	; 18
    1d0c:	2f af       	std	Y+63, r18	; 0x3f
    1d0e:	62 97       	sbiw	r28, 0x12	; 18
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1d10:	15 01       	movw	r2, r10
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
    1d12:	88 24       	eor	r8, r8
    1d14:	83 94       	inc	r8
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1d16:	1a 2d       	mov	r17, r10
    1d18:	9b 2c       	mov	r9, r11

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d1a:	0d e0       	ldi	r16, 0x0D	; 13
    1d1c:	70 2e       	mov	r7, r16

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1d1e:	87 e0       	ldi	r24, 0x07	; 7
    1d20:	f8 2e       	mov	r15, r24
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
	strcat(buf, "       ");
    1d22:	08 e0       	ldi	r16, 0x08	; 8

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    1d24:	96 e0       	ldi	r25, 0x06	; 6
    1d26:	c9 2e       	mov	r12, r25
	sprintf(buf + 5, "%d", osc2OctaveShift);
	strcat(buf, "        ");
    1d28:	29 e0       	ldi	r18, 0x09	; 9
    1d2a:	e2 2e       	mov	r14, r18

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    1d2c:	3a e0       	ldi	r19, 0x0A	; 10
    1d2e:	d3 2e       	mov	r13, r19
	}
	
	while(1)
	{
		//Refresh analog conversion
		sbi(ADCSRA, ADSC);
    1d30:	80 91 7a 00 	lds	r24, 0x007A
    1d34:	80 64       	ori	r24, 0x40	; 64
    1d36:	80 93 7a 00 	sts	0x007A, r24
		
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
    1d3a:	99 b1       	in	r25, 0x09	; 9
    1d3c:	89 2f       	mov	r24, r25
    1d3e:	80 74       	andi	r24, 0x40	; 64
    1d40:	96 fd       	sbrc	r25, 6
    1d42:	74 c5       	rjmp	.+2792   	; 0x282c <main+0xc6a>
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
    1d44:	90 91 fc 04 	lds	r25, 0x04FC
    1d48:	91 11       	cpse	r25, r1
    1d4a:	81 c5       	rjmp	.+2818   	; 0x284e <main+0xc8c>
    1d4c:	90 91 f6 04 	lds	r25, 0x04F6
    1d50:	99 23       	and	r25, r25
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <main+0x194>
    1d54:	7c c5       	rjmp	.+2808   	; 0x284e <main+0xc8c>
    1d56:	90 91 56 05 	lds	r25, 0x0556
    1d5a:	91 11       	cpse	r25, r1
    1d5c:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <main+0x197a>
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    1d60:	4f 99       	sbic	0x09, 7	; 9
    1d62:	79 c5       	rjmp	.+2802   	; 0x2856 <main+0xc94>
		{
			if(!btnPressed[MENU_OSC2] && btnCanPress[MENU_OSC2] && menuSelect != MENU_OSC2)
    1d64:	90 91 fd 04 	lds	r25, 0x04FD
    1d68:	91 11       	cpse	r25, r1
    1d6a:	da c0       	rjmp	.+436    	; 0x1f20 <main+0x35e>
    1d6c:	90 91 f7 04 	lds	r25, 0x04F7
    1d70:	99 23       	and	r25, r25
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <main+0x1b4>
    1d74:	d5 c0       	rjmp	.+426    	; 0x1f20 <main+0x35e>
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <main+0x1ba>
    1d7a:	d2 c0       	rjmp	.+420    	; 0x1f20 <main+0x35e>
			{
				btnLastPressed[MENU_OSC2] = 0;			
    1d7c:	10 92 f1 04 	sts	0x04F1, r1
				
				menuSelect = MENU_OSC2;				
    1d80:	80 92 56 05 	sts	0x0556, r8
				
				menuChange[menuSelect][0] = 0;
    1d84:	10 92 12 05 	sts	0x0512, r1
				menuChange[menuSelect][1] = 0;
    1d88:	10 92 13 05 	sts	0x0513, r1
				menuChange[menuSelect][2] = 0;
    1d8c:	10 92 14 05 	sts	0x0514, r1
				menuChange[menuSelect][3] = 0;	
    1d90:	10 92 15 05 	sts	0x0515, r1

inline void osc2MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2MenuTitle);
    1d94:	ea e4       	ldi	r30, 0x4A	; 74
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	61 96       	adiw	r28, 0x11	; 17
    1d9a:	af ad       	ldd	r26, Y+63	; 0x3f
    1d9c:	61 97       	sbiw	r28, 0x11	; 17
    1d9e:	62 96       	adiw	r28, 0x12	; 18
    1da0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1da2:	62 97       	sbiw	r28, 0x12	; 18
    1da4:	87 2d       	mov	r24, r7
    1da6:	01 90       	ld	r0, Z+
    1da8:	0d 92       	st	X+, r0
    1daa:	8a 95       	dec	r24
    1dac:	e1 f7       	brne	.-8      	; 0x1da6 <main+0x1e4>
	writeLine(0, buf);
    1dae:	be 01       	movw	r22, r28
    1db0:	6b 5e       	subi	r22, 0xEB	; 235
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1dba:	e8 e1       	ldi	r30, 0x18	; 24
    1dbc:	f1 e0       	ldi	r31, 0x01	; 1
    1dbe:	d5 01       	movw	r26, r10
    1dc0:	8f 2d       	mov	r24, r15
    1dc2:	01 90       	ld	r0, Z+
    1dc4:	0d 92       	st	X+, r0
    1dc6:	8a 95       	dec	r24
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <main+0x200>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    1dca:	e0 91 02 01 	lds	r30, 0x0102
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	e4 58       	subi	r30, 0x84	; 132
    1dd6:	f9 4f       	sbci	r31, 0xF9	; 249
    1dd8:	65 91       	lpm	r22, Z+
    1dda:	74 91       	lpm	r23, Z
    1ddc:	a1 2e       	mov	r10, r17
    1dde:	b9 2c       	mov	r11, r9
    1de0:	81 2f       	mov	r24, r17
    1de2:	99 2d       	mov	r25, r9
    1de4:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "       ");
    1de8:	d1 01       	movw	r26, r2
    1dea:	0d 90       	ld	r0, X+
    1dec:	00 20       	and	r0, r0
    1dee:	e9 f7       	brne	.-6      	; 0x1dea <main+0x228>
    1df0:	11 97       	sbiw	r26, 0x01	; 1
    1df2:	e2 e4       	ldi	r30, 0x42	; 66
    1df4:	f1 e0       	ldi	r31, 0x01	; 1
    1df6:	80 2f       	mov	r24, r16
    1df8:	01 90       	ld	r0, Z+
    1dfa:	0d 92       	st	X+, r0
    1dfc:	8a 95       	dec	r24
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <main+0x236>
	writeLine(2, buf);	
    1e00:	61 2f       	mov	r22, r17
    1e02:	79 2d       	mov	r23, r9
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    1e0a:	e7 e2       	ldi	r30, 0x27	; 39
    1e0c:	f1 e0       	ldi	r31, 0x01	; 1
    1e0e:	a1 2f       	mov	r26, r17
    1e10:	b9 2d       	mov	r27, r9
    1e12:	80 2f       	mov	r24, r16
    1e14:	01 90       	ld	r0, Z+
    1e16:	0d 92       	st	X+, r0
    1e18:	8a 95       	dec	r24
    1e1a:	e1 f7       	brne	.-8      	; 0x1e14 <main+0x252>
	sprintf(buf + 7, "%d", osc2SemisShift);
    1e1c:	20 91 64 05 	lds	r18, 0x0564
    1e20:	82 2f       	mov	r24, r18
    1e22:	99 27       	eor	r25, r25
    1e24:	87 fd       	sbrc	r24, 7
    1e26:	90 95       	com	r25
    1e28:	9f 93       	push	r25
    1e2a:	2f 93       	push	r18
    1e2c:	a8 e0       	ldi	r26, 0x08	; 8
    1e2e:	b1 e0       	ldi	r27, 0x01	; 1
    1e30:	bf 93       	push	r27
    1e32:	af 93       	push	r26
    1e34:	3b ad       	ldd	r19, Y+59	; 0x3b
    1e36:	3f 93       	push	r19
    1e38:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e3a:	8f 93       	push	r24
    1e3c:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    1e40:	d1 01       	movw	r26, r2
    1e42:	0d 90       	ld	r0, X+
    1e44:	00 20       	and	r0, r0
    1e46:	e9 f7       	brne	.-6      	; 0x1e42 <main+0x280>
    1e48:	11 97       	sbiw	r26, 0x01	; 1
    1e4a:	e2 e4       	ldi	r30, 0x42	; 66
    1e4c:	f1 e0       	ldi	r31, 0x01	; 1
    1e4e:	80 2f       	mov	r24, r16
    1e50:	01 90       	ld	r0, Z+
    1e52:	0d 92       	st	X+, r0
    1e54:	8a 95       	dec	r24
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <main+0x28e>
	writeLine(3, buf);
    1e58:	61 2f       	mov	r22, r17
    1e5a:	79 2d       	mov	r23, r9
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    1e62:	ef e1       	ldi	r30, 0x1F	; 31
    1e64:	f1 e0       	ldi	r31, 0x01	; 1
    1e66:	a1 2f       	mov	r26, r17
    1e68:	b9 2d       	mov	r27, r9
    1e6a:	80 2f       	mov	r24, r16
    1e6c:	01 90       	ld	r0, Z+
    1e6e:	0d 92       	st	X+, r0
    1e70:	8a 95       	dec	r24
    1e72:	e1 f7       	brne	.-8      	; 0x1e6c <main+0x2aa>
	sprintf(buf + 7, "%d", osc2CentsShift);
    1e74:	20 91 65 05 	lds	r18, 0x0565
    1e78:	82 2f       	mov	r24, r18
    1e7a:	99 27       	eor	r25, r25
    1e7c:	87 fd       	sbrc	r24, 7
    1e7e:	90 95       	com	r25
    1e80:	9f 93       	push	r25
    1e82:	2f 93       	push	r18
    1e84:	a8 e0       	ldi	r26, 0x08	; 8
    1e86:	b1 e0       	ldi	r27, 0x01	; 1
    1e88:	bf 93       	push	r27
    1e8a:	af 93       	push	r26
    1e8c:	3b ad       	ldd	r19, Y+59	; 0x3b
    1e8e:	3f 93       	push	r19
    1e90:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e92:	8f 93       	push	r24
    1e94:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    1e98:	d1 01       	movw	r26, r2
    1e9a:	0d 90       	ld	r0, X+
    1e9c:	00 20       	and	r0, r0
    1e9e:	e9 f7       	brne	.-6      	; 0x1e9a <main+0x2d8>
    1ea0:	11 97       	sbiw	r26, 0x01	; 1
    1ea2:	e2 e4       	ldi	r30, 0x42	; 66
    1ea4:	f1 e0       	ldi	r31, 0x01	; 1
    1ea6:	80 2f       	mov	r24, r16
    1ea8:	01 90       	ld	r0, Z+
    1eaa:	0d 92       	st	X+, r0
    1eac:	8a 95       	dec	r24
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <main+0x2e6>
	writeLine(4, buf);
    1eb0:	61 2f       	mov	r22, r17
    1eb2:	79 2d       	mov	r23, r9
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    1eba:	e7 e5       	ldi	r30, 0x57	; 87
    1ebc:	f1 e0       	ldi	r31, 0x01	; 1
    1ebe:	a1 2f       	mov	r26, r17
    1ec0:	b9 2d       	mov	r27, r9
    1ec2:	8c 2d       	mov	r24, r12
    1ec4:	01 90       	ld	r0, Z+
    1ec6:	0d 92       	st	X+, r0
    1ec8:	8a 95       	dec	r24
    1eca:	e1 f7       	brne	.-8      	; 0x1ec4 <main+0x302>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    1ecc:	20 91 63 05 	lds	r18, 0x0563
    1ed0:	82 2f       	mov	r24, r18
    1ed2:	99 27       	eor	r25, r25
    1ed4:	87 fd       	sbrc	r24, 7
    1ed6:	90 95       	com	r25
    1ed8:	9f 93       	push	r25
    1eda:	2f 93       	push	r18
    1edc:	a8 e0       	ldi	r26, 0x08	; 8
    1ede:	b1 e0       	ldi	r27, 0x01	; 1
    1ee0:	bf 93       	push	r27
    1ee2:	af 93       	push	r26
    1ee4:	3f a9       	ldd	r19, Y+55	; 0x37
    1ee6:	3f 93       	push	r19
    1ee8:	8e a9       	ldd	r24, Y+54	; 0x36
    1eea:	8f 93       	push	r24
    1eec:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "        ");
    1ef0:	d1 01       	movw	r26, r2
    1ef2:	0d 90       	ld	r0, X+
    1ef4:	00 20       	and	r0, r0
    1ef6:	e9 f7       	brne	.-6      	; 0x1ef2 <main+0x330>
    1ef8:	11 97       	sbiw	r26, 0x01	; 1
    1efa:	e1 e4       	ldi	r30, 0x41	; 65
    1efc:	f1 e0       	ldi	r31, 0x01	; 1
    1efe:	8e 2d       	mov	r24, r14
    1f00:	01 90       	ld	r0, Z+
    1f02:	0d 92       	st	X+, r0
    1f04:	8a 95       	dec	r24
    1f06:	e1 f7       	brne	.-8      	; 0x1f00 <main+0x33e>
	writeLine(5, buf);
    1f08:	61 2f       	mov	r22, r17
    1f0a:	79 2d       	mov	r23, r9
    1f0c:	85 e0       	ldi	r24, 0x05	; 5
    1f0e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    1f12:	80 91 56 05 	lds	r24, 0x0556
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC2] = true;
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    1f20:	18 99       	sbic	0x03, 0	; 3
    1f22:	ac c4       	rjmp	.+2392   	; 0x287c <main+0xcba>
		{
			if(!btnPressed[MENU_LFO] && btnCanPress[MENU_LFO] && menuSelect != MENU_LFO)
    1f24:	90 91 fe 04 	lds	r25, 0x04FE
    1f28:	91 11       	cpse	r25, r1
    1f2a:	ce c0       	rjmp	.+412    	; 0x20c8 <main+0x506>
    1f2c:	90 91 f8 04 	lds	r25, 0x04F8
    1f30:	99 23       	and	r25, r25
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <main+0x374>
    1f34:	c9 c0       	rjmp	.+402    	; 0x20c8 <main+0x506>
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <main+0x37a>
    1f3a:	c6 c0       	rjmp	.+396    	; 0x20c8 <main+0x506>
			{
				btnLastPressed[MENU_LFO] = 0;
    1f3c:	10 92 f2 04 	sts	0x04F2, r1
				
				menuSelect = MENU_LFO;
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	80 93 56 05 	sts	0x0556, r24
				
				menuChange[menuSelect][0] = 0;
    1f46:	10 92 16 05 	sts	0x0516, r1
				menuChange[menuSelect][1] = 0;
    1f4a:	10 92 17 05 	sts	0x0517, r1
				menuChange[menuSelect][2] = 0;
    1f4e:	10 92 18 05 	sts	0x0518, r1
				menuChange[menuSelect][3] = 0;
    1f52:	10 92 19 05 	sts	0x0519, r1

inline void lfoMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", lfoMenuTitle);
    1f56:	ed e5       	ldi	r30, 0x5D	; 93
    1f58:	f1 e0       	ldi	r31, 0x01	; 1
    1f5a:	61 96       	adiw	r28, 0x11	; 17
    1f5c:	af ad       	ldd	r26, Y+63	; 0x3f
    1f5e:	61 97       	sbiw	r28, 0x11	; 17
    1f60:	62 96       	adiw	r28, 0x12	; 18
    1f62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f64:	62 97       	sbiw	r28, 0x12	; 18
    1f66:	87 2d       	mov	r24, r7
    1f68:	01 90       	ld	r0, Z+
    1f6a:	0d 92       	st	X+, r0
    1f6c:	8a 95       	dec	r24
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <main+0x3a6>
	writeLine(0, buf);
    1f70:	be 01       	movw	r22, r28
    1f72:	6b 5e       	subi	r22, 0xEB	; 235
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1f7c:	e8 e1       	ldi	r30, 0x18	; 24
    1f7e:	f1 e0       	ldi	r31, 0x01	; 1
    1f80:	d5 01       	movw	r26, r10
    1f82:	8f 2d       	mov	r24, r15
    1f84:	01 90       	ld	r0, Z+
    1f86:	0d 92       	st	X+, r0
    1f88:	8a 95       	dec	r24
    1f8a:	e1 f7       	brne	.-8      	; 0x1f84 <main+0x3c2>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    1f8c:	e0 91 06 01 	lds	r30, 0x0106
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	e4 58       	subi	r30, 0x84	; 132
    1f98:	f9 4f       	sbci	r31, 0xF9	; 249
    1f9a:	65 91       	lpm	r22, Z+
    1f9c:	74 91       	lpm	r23, Z
    1f9e:	81 2f       	mov	r24, r17
    1fa0:	99 2d       	mov	r25, r9
    1fa2:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    1fa6:	d1 01       	movw	r26, r2
    1fa8:	0d 90       	ld	r0, X+
    1faa:	00 20       	and	r0, r0
    1fac:	e9 f7       	brne	.-6      	; 0x1fa8 <main+0x3e6>
    1fae:	11 97       	sbiw	r26, 0x01	; 1
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	e5 e4       	ldi	r30, 0x45	; 69
    1fb4:	f1 e0       	ldi	r31, 0x01	; 1
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	0d 92       	st	X+, r0
    1fba:	8a 95       	dec	r24
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <main+0x3f4>
	writeLine(2, buf);
    1fbe:	61 2f       	mov	r22, r17
    1fc0:	79 2d       	mov	r23, r9
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    1fc8:	ea e6       	ldi	r30, 0x6A	; 106
    1fca:	f1 e0       	ldi	r31, 0x01	; 1
    1fcc:	a1 2f       	mov	r26, r17
    1fce:	b9 2d       	mov	r27, r9
    1fd0:	8f 2d       	mov	r24, r15
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	0d 92       	st	X+, r0
    1fd6:	8a 95       	dec	r24
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <main+0x410>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    1fda:	80 91 58 05 	lds	r24, 0x0558
    1fde:	1f 92       	push	r1
    1fe0:	8f 93       	push	r24
    1fe2:	a8 e0       	ldi	r26, 0x08	; 8
    1fe4:	b1 e0       	ldi	r27, 0x01	; 1
    1fe6:	bf 93       	push	r27
    1fe8:	af 93       	push	r26
    1fea:	39 ad       	ldd	r19, Y+57	; 0x39
    1fec:	3f 93       	push	r19
    1fee:	88 ad       	ldd	r24, Y+56	; 0x38
    1ff0:	8f 93       	push	r24
    1ff2:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    1ff6:	d1 01       	movw	r26, r2
    1ff8:	0d 90       	ld	r0, X+
    1ffa:	00 20       	and	r0, r0
    1ffc:	e9 f7       	brne	.-6      	; 0x1ff8 <main+0x436>
    1ffe:	11 97       	sbiw	r26, 0x01	; 1
    2000:	85 e0       	ldi	r24, 0x05	; 5
    2002:	e5 e4       	ldi	r30, 0x45	; 69
    2004:	f1 e0       	ldi	r31, 0x01	; 1
    2006:	01 90       	ld	r0, Z+
    2008:	0d 92       	st	X+, r0
    200a:	8a 95       	dec	r24
    200c:	e1 f7       	brne	.-8      	; 0x2006 <main+0x444>
	writeLine(3, buf);
    200e:	61 2f       	mov	r22, r17
    2010:	79 2d       	mov	r23, r9
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    2018:	e1 e7       	ldi	r30, 0x71	; 113
    201a:	f1 e0       	ldi	r31, 0x01	; 1
    201c:	a1 2f       	mov	r26, r17
    201e:	b9 2d       	mov	r27, r9
    2020:	8f 2d       	mov	r24, r15
    2022:	01 90       	ld	r0, Z+
    2024:	0d 92       	st	X+, r0
    2026:	8a 95       	dec	r24
    2028:	e1 f7       	brne	.-8      	; 0x2022 <main+0x460>
	sprintf(buf + 6, "%d", lfoDepth);
    202a:	80 91 57 05 	lds	r24, 0x0557
    202e:	1f 92       	push	r1
    2030:	8f 93       	push	r24
    2032:	a8 e0       	ldi	r26, 0x08	; 8
    2034:	b1 e0       	ldi	r27, 0x01	; 1
    2036:	bf 93       	push	r27
    2038:	af 93       	push	r26
    203a:	39 ad       	ldd	r19, Y+57	; 0x39
    203c:	3f 93       	push	r19
    203e:	88 ad       	ldd	r24, Y+56	; 0x38
    2040:	8f 93       	push	r24
    2042:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    2046:	d1 01       	movw	r26, r2
    2048:	0d 90       	ld	r0, X+
    204a:	00 20       	and	r0, r0
    204c:	e9 f7       	brne	.-6      	; 0x2048 <main+0x486>
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	85 e0       	ldi	r24, 0x05	; 5
    2052:	e5 e4       	ldi	r30, 0x45	; 69
    2054:	f1 e0       	ldi	r31, 0x01	; 1
    2056:	01 90       	ld	r0, Z+
    2058:	0d 92       	st	X+, r0
    205a:	8a 95       	dec	r24
    205c:	e1 f7       	brne	.-8      	; 0x2056 <main+0x494>
	writeLine(4, buf);
    205e:	61 2f       	mov	r22, r17
    2060:	79 2d       	mov	r23, r9
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    2068:	e6 e3       	ldi	r30, 0x36	; 54
    206a:	f1 e0       	ldi	r31, 0x01	; 1
    206c:	a1 2f       	mov	r26, r17
    206e:	b9 2d       	mov	r27, r9
    2070:	8f 2d       	mov	r24, r15
    2072:	01 90       	ld	r0, Z+
    2074:	0d 92       	st	X+, r0
    2076:	8a 95       	dec	r24
    2078:	e1 f7       	brne	.-8      	; 0x2072 <main+0x4b0>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    207a:	e0 91 59 05 	lds	r30, 0x0559
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	e8 59       	subi	r30, 0x98	; 152
    2086:	f9 4f       	sbci	r31, 0xF9	; 249
    2088:	65 91       	lpm	r22, Z+
    208a:	74 91       	lpm	r23, Z
    208c:	a1 2e       	mov	r10, r17
    208e:	b9 2c       	mov	r11, r9
    2090:	81 2f       	mov	r24, r17
    2092:	99 2d       	mov	r25, r9
    2094:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    2098:	d1 01       	movw	r26, r2
    209a:	0d 90       	ld	r0, X+
    209c:	00 20       	and	r0, r0
    209e:	e9 f7       	brne	.-6      	; 0x209a <main+0x4d8>
    20a0:	11 97       	sbiw	r26, 0x01	; 1
    20a2:	85 e0       	ldi	r24, 0x05	; 5
    20a4:	e5 e4       	ldi	r30, 0x45	; 69
    20a6:	f1 e0       	ldi	r31, 0x01	; 1
    20a8:	01 90       	ld	r0, Z+
    20aa:	0d 92       	st	X+, r0
    20ac:	8a 95       	dec	r24
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <main+0x4e6>
	writeLine(5, buf);
    20b0:	61 2f       	mov	r22, r17
    20b2:	79 2d       	mov	r23, r9
    20b4:	85 e0       	ldi	r24, 0x05	; 5
    20b6:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    20ba:	80 91 56 05 	lds	r24, 0x0556
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
			btnCanPress[MENU_LFO] = true;
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    20c8:	1c 99       	sbic	0x03, 4	; 3
    20ca:	eb c3       	rjmp	.+2006   	; 0x28a2 <main+0xce0>
		{
			if(!btnPressed[MENU_MIX] && btnCanPress[MENU_MIX] && menuSelect != MENU_MIX)
    20cc:	90 91 ff 04 	lds	r25, 0x04FF
    20d0:	91 11       	cpse	r25, r1
    20d2:	6f c1       	rjmp	.+734    	; 0x23b2 <main+0x7f0>
    20d4:	90 91 f9 04 	lds	r25, 0x04F9
    20d8:	99 23       	and	r25, r25
    20da:	09 f4       	brne	.+2      	; 0x20de <main+0x51c>
    20dc:	6a c1       	rjmp	.+724    	; 0x23b2 <main+0x7f0>
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <main+0x522>
    20e2:	26 ce       	rjmp	.-948    	; 0x1d30 <main+0x16e>
			{
				btnLastPressed[MENU_MIX] = 0;
    20e4:	10 92 f3 04 	sts	0x04F3, r1
				
				menuSelect = MENU_MIX;
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	80 93 56 05 	sts	0x0556, r24
				
				menuChange[menuSelect][0] = 0;
    20ee:	10 92 1a 05 	sts	0x051A, r1
				menuChange[menuSelect][1] = 0;
    20f2:	10 92 1b 05 	sts	0x051B, r1
				menuChange[menuSelect][2] = 0;
    20f6:	10 92 1c 05 	sts	0x051C, r1
				menuChange[menuSelect][3] = 0;
    20fa:	10 92 1d 05 	sts	0x051D, r1

inline void mixerMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", mixingMenuTitle);
    20fe:	e8 e7       	ldi	r30, 0x78	; 120
    2100:	f1 e0       	ldi	r31, 0x01	; 1
    2102:	61 96       	adiw	r28, 0x11	; 17
    2104:	af ad       	ldd	r26, Y+63	; 0x3f
    2106:	61 97       	sbiw	r28, 0x11	; 17
    2108:	62 96       	adiw	r28, 0x12	; 18
    210a:	bf ad       	ldd	r27, Y+63	; 0x3f
    210c:	62 97       	sbiw	r28, 0x12	; 18
    210e:	87 2d       	mov	r24, r7
    2110:	01 90       	ld	r0, Z+
    2112:	0d 92       	st	X+, r0
    2114:	8a 95       	dec	r24
    2116:	e1 f7       	brne	.-8      	; 0x2110 <main+0x54e>
	writeLine(0, buf);
    2118:	be 01       	movw	r22, r28
    211a:	6b 5e       	subi	r22, 0xEB	; 235
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    2124:	e5 e8       	ldi	r30, 0x85	; 133
    2126:	f1 e0       	ldi	r31, 0x01	; 1
    2128:	d5 01       	movw	r26, r10
    212a:	8d 2d       	mov	r24, r13
    212c:	01 90       	ld	r0, Z+
    212e:	0d 92       	st	X+, r0
    2130:	8a 95       	dec	r24
    2132:	e1 f7       	brne	.-8      	; 0x212c <main+0x56a>
	sprintf(buf + 9, "%d", osc1Weight);
    2134:	80 91 07 01 	lds	r24, 0x0107
    2138:	1f 92       	push	r1
    213a:	8f 93       	push	r24
    213c:	a8 e0       	ldi	r26, 0x08	; 8
    213e:	b1 e0       	ldi	r27, 0x01	; 1
    2140:	bf 93       	push	r27
    2142:	af 93       	push	r26
    2144:	3d ad       	ldd	r19, Y+61	; 0x3d
    2146:	3f 93       	push	r19
    2148:	8c ad       	ldd	r24, Y+60	; 0x3c
    214a:	8f 93       	push	r24
    214c:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    2150:	d5 01       	movw	r26, r10
    2152:	0d 90       	ld	r0, X+
    2154:	00 20       	and	r0, r0
    2156:	e9 f7       	brne	.-6      	; 0x2152 <main+0x590>
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	85 e0       	ldi	r24, 0x05	; 5
    215c:	e5 e4       	ldi	r30, 0x45	; 69
    215e:	f1 e0       	ldi	r31, 0x01	; 1
    2160:	01 90       	ld	r0, Z+
    2162:	0d 92       	st	X+, r0
    2164:	8a 95       	dec	r24
    2166:	e1 f7       	brne	.-8      	; 0x2160 <main+0x59e>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    2168:	8c e0       	ldi	r24, 0x0C	; 12
    216a:	f5 01       	movw	r30, r10
    216c:	de 01       	movw	r26, r28
    216e:	99 96       	adiw	r26, 0x29	; 41
    2170:	01 90       	ld	r0, Z+
    2172:	0d 92       	st	X+, r0
    2174:	8a 95       	dec	r24
    2176:	e1 f7       	brne	.-8      	; 0x2170 <main+0x5ae>
	buf[12] = '\0';
    2178:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    217a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    217c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    217e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2180:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2182:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2184:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2186:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2188:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    218a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    218c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    218e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2190:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2192:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2194:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2196:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2198:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    219a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    219c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    219e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ae:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    21b0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    21b2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    21b4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21bc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    21be:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21da:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    21dc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    21e8:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    21ea:	89 a5       	ldd	r24, Y+41	; 0x29
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <main+0x63c>
    21fc:	82 c0       	rjmp	.+260    	; 0x2302 <main+0x740>
    21fe:	de 01       	movw	r26, r28
    2200:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2202:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2204:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2206:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2208:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    220a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    220c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    220e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2210:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2212:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2214:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2216:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2218:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    221a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    221c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    221e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2220:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2222:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2224:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2226:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2228:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    222a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    222c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    222e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2230:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2232:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2234:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2236:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2238:	44 9a       	sbi	0x08, 4	; 8
    223a:	99 27       	eor	r25, r25
    223c:	87 fd       	sbrc	r24, 7
    223e:	90 95       	com	r25
    2240:	80 97       	sbiw	r24, 0x20	; 32
    2242:	fc 01       	movw	r30, r24
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	e8 0f       	add	r30, r24
    224e:	f9 1f       	adc	r31, r25
    2250:	e0 5f       	subi	r30, 0xF0	; 240
    2252:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2254:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    2256:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2258:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    225a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    225c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    225e:	82 2f       	mov	r24, r18
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	88 0f       	add	r24, r24
    2264:	89 2f       	mov	r24, r25
    2266:	88 1f       	adc	r24, r24
    2268:	99 0b       	sbc	r25, r25
    226a:	89 2b       	or	r24, r25
    226c:	09 f0       	breq	.+2      	; 0x2270 <main+0x6ae>
    226e:	dc c2       	rjmp	.+1464   	; 0x2828 <main+0xc66>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2270:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2272:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2274:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2276:	26 fd       	sbrc	r18, 6
    2278:	d5 c2       	rjmp	.+1450   	; 0x2824 <main+0xc62>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    227a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    227c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    227e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2280:	25 fd       	sbrc	r18, 5
    2282:	ce c2       	rjmp	.+1436   	; 0x2820 <main+0xc5e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2284:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2286:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2288:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    228a:	24 fd       	sbrc	r18, 4
    228c:	c7 c2       	rjmp	.+1422   	; 0x281c <main+0xc5a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    228e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2290:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2292:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2294:	23 fd       	sbrc	r18, 3
    2296:	c0 c2       	rjmp	.+1408   	; 0x2818 <main+0xc56>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2298:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    229a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    229c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    229e:	22 fd       	sbrc	r18, 2
    22a0:	b9 c2       	rjmp	.+1394   	; 0x2814 <main+0xc52>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22a6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    22a8:	21 fd       	sbrc	r18, 1
    22aa:	b2 c2       	rjmp	.+1380   	; 0x2810 <main+0xc4e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    22b2:	20 fd       	sbrc	r18, 0
    22b4:	ab c2       	rjmp	.+1366   	; 0x280c <main+0xc4a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ba:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    22bc:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    22be:	3f 5f       	subi	r19, 0xFF	; 255
    22c0:	35 30       	cpi	r19, 0x05	; 5
    22c2:	49 f6       	brne	.-110    	; 0x2256 <main+0x694>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    22c4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    22c6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22c8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22da:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22f8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    22fa:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    22fc:	8d 91       	ld	r24, X+
    22fe:	81 11       	cpse	r24, r1
    2300:	80 cf       	rjmp	.-256    	; 0x2202 <main+0x640>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    2302:	ef e8       	ldi	r30, 0x8F	; 143
    2304:	f1 e0       	ldi	r31, 0x01	; 1
    2306:	d5 01       	movw	r26, r10
    2308:	8d 2d       	mov	r24, r13
    230a:	01 90       	ld	r0, Z+
    230c:	0d 92       	st	X+, r0
    230e:	8a 95       	dec	r24
    2310:	e1 f7       	brne	.-8      	; 0x230a <main+0x748>
	sprintf(buf + 9, "%d", osc2Weight);
    2312:	80 91 61 05 	lds	r24, 0x0561
    2316:	1f 92       	push	r1
    2318:	8f 93       	push	r24
    231a:	a8 e0       	ldi	r26, 0x08	; 8
    231c:	b1 e0       	ldi	r27, 0x01	; 1
    231e:	bf 93       	push	r27
    2320:	af 93       	push	r26
    2322:	3d ad       	ldd	r19, Y+61	; 0x3d
    2324:	3f 93       	push	r19
    2326:	8c ad       	ldd	r24, Y+60	; 0x3c
    2328:	8f 93       	push	r24
    232a:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    232e:	d5 01       	movw	r26, r10
    2330:	0d 90       	ld	r0, X+
    2332:	00 20       	and	r0, r0
    2334:	e9 f7       	brne	.-6      	; 0x2330 <main+0x76e>
    2336:	11 97       	sbiw	r26, 0x01	; 1
    2338:	85 e0       	ldi	r24, 0x05	; 5
    233a:	e5 e4       	ldi	r30, 0x45	; 69
    233c:	f1 e0       	ldi	r31, 0x01	; 1
    233e:	01 90       	ld	r0, Z+
    2340:	0d 92       	st	X+, r0
    2342:	8a 95       	dec	r24
    2344:	e1 f7       	brne	.-8      	; 0x233e <main+0x77c>
	writeLine(3, buf);
    2346:	b5 01       	movw	r22, r10
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    234e:	e9 e9       	ldi	r30, 0x99	; 153
    2350:	f1 e0       	ldi	r31, 0x01	; 1
    2352:	d5 01       	movw	r26, r10
    2354:	8e 2d       	mov	r24, r14
    2356:	01 90       	ld	r0, Z+
    2358:	0d 92       	st	X+, r0
    235a:	8a 95       	dec	r24
    235c:	e1 f7       	brne	.-8      	; 0x2356 <main+0x794>
	if(osc2Sync != false)
    235e:	80 91 5a 05 	lds	r24, 0x055A
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	81 11       	cpse	r24, r1
    2370:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <main+0x1e9e>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    2374:	8f e4       	ldi	r24, 0x4F	; 79
    2376:	96 e4       	ldi	r25, 0x46	; 70
    2378:	a6 e4       	ldi	r26, 0x46	; 70
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	89 87       	std	Y+9, r24	; 0x09
    237e:	9a 87       	std	Y+10, r25	; 0x0a
    2380:	ab 87       	std	Y+11, r26	; 0x0b
    2382:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    2384:	d5 01       	movw	r26, r10
    2386:	0d 90       	ld	r0, X+
    2388:	00 20       	and	r0, r0
    238a:	e9 f7       	brne	.-6      	; 0x2386 <main+0x7c4>
    238c:	11 97       	sbiw	r26, 0x01	; 1
    238e:	85 e0       	ldi	r24, 0x05	; 5
    2390:	e5 e4       	ldi	r30, 0x45	; 69
    2392:	f1 e0       	ldi	r31, 0x01	; 1
    2394:	01 90       	ld	r0, Z+
    2396:	0d 92       	st	X+, r0
    2398:	8a 95       	dec	r24
    239a:	e1 f7       	brne	.-8      	; 0x2394 <main+0x7d2>
	writeLine(4, buf);
    239c:	b5 01       	movw	r22, r10
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
}

inline void mixerMenuEmptyLine()
{
	writeLine(5, "            ");
    23a4:	6d e3       	ldi	r22, 0x3D	; 61
    23a6:	71 e0       	ldi	r23, 0x01	; 1
    23a8:	85 e0       	ldi	r24, 0x05	; 5
    23aa:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    23ae:	80 91 56 05 	lds	r24, 0x0556
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
			btnCanPress[MENU_MIX] = true;
		}

		//Menu Updates
		switch(menuSelect)
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <main+0x7f6>
    23b6:	89 c2       	rjmp	.+1298   	; 0x28ca <main+0xd08>
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	08 f4       	brcc	.+2      	; 0x23be <main+0x7fc>
    23bc:	f1 c3       	rjmp	.+2018   	; 0x2ba0 <main+0xfde>
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <main+0x802>
    23c2:	b6 cc       	rjmp	.-1684   	; 0x1d30 <main+0x16e>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    23c4:	80 91 8c 05 	lds	r24, 0x058C
    23c8:	88 23       	and	r24, r24
    23ca:	d9 f0       	breq	.+54     	; 0x2402 <main+0x840>
    23cc:	80 91 36 05 	lds	r24, 0x0536
    23d0:	90 91 37 05 	lds	r25, 0x0537
    23d4:	20 91 90 05 	lds	r18, 0x0590
    23d8:	30 91 91 05 	lds	r19, 0x0591
    23dc:	ac 01       	movw	r20, r24
    23de:	47 5f       	subi	r20, 0xF7	; 247
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	42 17       	cp	r20, r18
    23e4:	53 07       	cpc	r21, r19
    23e6:	6c f0       	brlt	.+26     	; 0x2402 <main+0x840>
    23e8:	8b 30       	cpi	r24, 0x0B	; 11
    23ea:	91 05       	cpc	r25, r1
    23ec:	14 f4       	brge	.+4      	; 0x23f2 <main+0x830>
    23ee:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <main+0x1b98>
    23f2:	0a 97       	sbiw	r24, 0x0a	; 10
    23f4:	82 17       	cp	r24, r18
    23f6:	93 07       	cpc	r25, r19
    23f8:	24 f4       	brge	.+8      	; 0x2402 <main+0x840>
			{
				menuChange[MENU_LFO][0] = 1;
    23fa:	80 92 16 05 	sts	0x0516, r8
				updateADC[0] = false;
    23fe:	10 92 8c 05 	sts	0x058C, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    2402:	80 91 8d 05 	lds	r24, 0x058D
    2406:	88 23       	and	r24, r24
    2408:	d9 f0       	breq	.+54     	; 0x2440 <main+0x87e>
    240a:	80 91 38 05 	lds	r24, 0x0538
    240e:	90 91 39 05 	lds	r25, 0x0539
    2412:	20 91 92 05 	lds	r18, 0x0592
    2416:	30 91 93 05 	lds	r19, 0x0593
    241a:	ac 01       	movw	r20, r24
    241c:	47 5f       	subi	r20, 0xF7	; 247
    241e:	5f 4f       	sbci	r21, 0xFF	; 255
    2420:	42 17       	cp	r20, r18
    2422:	53 07       	cpc	r21, r19
    2424:	6c f0       	brlt	.+26     	; 0x2440 <main+0x87e>
    2426:	8b 30       	cpi	r24, 0x0B	; 11
    2428:	91 05       	cpc	r25, r1
    242a:	14 f4       	brge	.+4      	; 0x2430 <main+0x86e>
    242c:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <main+0x1ba0>
    2430:	0a 97       	sbiw	r24, 0x0a	; 10
    2432:	82 17       	cp	r24, r18
    2434:	93 07       	cpc	r25, r19
    2436:	24 f4       	brge	.+8      	; 0x2440 <main+0x87e>
			{
				menuChange[MENU_LFO][1] = 1;
    2438:	80 92 17 05 	sts	0x0517, r8
				updateADC[1] = false;
    243c:	10 92 8d 05 	sts	0x058D, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    2440:	80 91 8e 05 	lds	r24, 0x058E
    2444:	88 23       	and	r24, r24
    2446:	d9 f0       	breq	.+54     	; 0x247e <main+0x8bc>
    2448:	80 91 3a 05 	lds	r24, 0x053A
    244c:	90 91 3b 05 	lds	r25, 0x053B
    2450:	20 91 94 05 	lds	r18, 0x0594
    2454:	30 91 95 05 	lds	r19, 0x0595
    2458:	ac 01       	movw	r20, r24
    245a:	47 5f       	subi	r20, 0xF7	; 247
    245c:	5f 4f       	sbci	r21, 0xFF	; 255
    245e:	42 17       	cp	r20, r18
    2460:	53 07       	cpc	r21, r19
    2462:	6c f0       	brlt	.+26     	; 0x247e <main+0x8bc>
    2464:	8b 30       	cpi	r24, 0x0B	; 11
    2466:	91 05       	cpc	r25, r1
    2468:	14 f4       	brge	.+4      	; 0x246e <main+0x8ac>
    246a:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <main+0x1ba8>
    246e:	0a 97       	sbiw	r24, 0x0a	; 10
    2470:	82 17       	cp	r24, r18
    2472:	93 07       	cpc	r25, r19
    2474:	24 f4       	brge	.+8      	; 0x247e <main+0x8bc>
			{
				menuChange[MENU_LFO][2] = 1;
    2476:	80 92 18 05 	sts	0x0518, r8
				updateADC[2] = false;
    247a:	10 92 8e 05 	sts	0x058E, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    247e:	80 91 8f 05 	lds	r24, 0x058F
    2482:	88 23       	and	r24, r24
    2484:	11 f4       	brne	.+4      	; 0x248a <main+0x8c8>
    2486:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <main+0x18e2>
    248a:	20 91 3c 05 	lds	r18, 0x053C
    248e:	30 91 3d 05 	lds	r19, 0x053D
    2492:	80 91 96 05 	lds	r24, 0x0596
    2496:	90 91 97 05 	lds	r25, 0x0597
    249a:	a9 01       	movw	r20, r18
    249c:	47 5f       	subi	r20, 0xF7	; 247
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	48 17       	cp	r20, r24
    24a2:	59 07       	cpc	r21, r25
    24a4:	14 f4       	brge	.+4      	; 0x24aa <main+0x8e8>
    24a6:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <main+0x18e2>
    24aa:	2b 30       	cpi	r18, 0x0B	; 11
    24ac:	31 05       	cpc	r19, r1
    24ae:	14 f4       	brge	.+4      	; 0x24b4 <main+0x8f2>
    24b0:	0c 94 be 1c 	jmp	0x397c	; 0x397c <main+0x1dba>
    24b4:	2a 50       	subi	r18, 0x0A	; 10
    24b6:	31 09       	sbc	r19, r1
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	14 f0       	brlt	.+4      	; 0x24c2 <main+0x900>
    24be:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <main+0x18e2>
			{
				menuChange[MENU_LFO][3] = 1;
    24c2:	80 92 19 05 	sts	0x0519, r8
				updateADC[3] = false;
    24c6:	10 92 8f 05 	sts	0x058F, r1
			}
						
			if(menuChange[MENU_LFO][3] != 0)
			{
				if(adcValue[3] < 171)
    24ca:	8b 3a       	cpi	r24, 0xAB	; 171
    24cc:	91 05       	cpc	r25, r1
    24ce:	14 f0       	brlt	.+4      	; 0x24d4 <main+0x912>
    24d0:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <main+0x1900>
				{
					if(lfoWaveForm != WAVE_SINE)
    24d4:	80 91 06 01 	lds	r24, 0x0106
    24d8:	81 11       	cpse	r24, r1
    24da:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <main+0x1ed0>
						menuKnobPos[MENU_LFO][0] = 852 + 85;
						lfoMenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_LFO][2] != 0)
    24de:	80 91 18 05 	lds	r24, 0x0518
    24e2:	88 23       	and	r24, r24
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <main+0x926>
    24e6:	03 c1       	rjmp	.+518    	; 0x26ee <main+0xb2c>
			{
				if((adcValue[2] >> 2) != lfoPrintFreq)
    24e8:	20 91 94 05 	lds	r18, 0x0594
    24ec:	30 91 95 05 	lds	r19, 0x0595
    24f0:	c9 01       	movw	r24, r18
    24f2:	95 95       	asr	r25
    24f4:	87 95       	ror	r24
    24f6:	95 95       	asr	r25
    24f8:	87 95       	ror	r24
    24fa:	40 91 58 05 	lds	r20, 0x0558
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	84 17       	cp	r24, r20
    2502:	95 07       	cpc	r25, r21
    2504:	09 f4       	brne	.+2      	; 0x2508 <main+0x946>
    2506:	f3 c0       	rjmp	.+486    	; 0x26ee <main+0xb2c>
				{
					lfoPrintFreq = adcValue[2] >> 2;
    2508:	80 93 58 05 	sts	0x0558, r24
					menuKnobPos[MENU_LFO][0] = adcValue[2];
    250c:	30 93 37 05 	sts	0x0537, r19
    2510:	20 93 36 05 	sts	0x0536, r18

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    2514:	27 e0       	ldi	r18, 0x07	; 7
    2516:	ea e6       	ldi	r30, 0x6A	; 106
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	d5 01       	movw	r26, r10
    251c:	01 90       	ld	r0, Z+
    251e:	0d 92       	st	X+, r0
    2520:	2a 95       	dec	r18
    2522:	e1 f7       	brne	.-8      	; 0x251c <main+0x95a>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    2524:	99 27       	eor	r25, r25
    2526:	9f 93       	push	r25
    2528:	8f 93       	push	r24
    252a:	a8 e0       	ldi	r26, 0x08	; 8
    252c:	b1 e0       	ldi	r27, 0x01	; 1
    252e:	bf 93       	push	r27
    2530:	af 93       	push	r26
    2532:	39 ad       	ldd	r19, Y+57	; 0x39
    2534:	3f 93       	push	r19
    2536:	88 ad       	ldd	r24, Y+56	; 0x38
    2538:	8f 93       	push	r24
    253a:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    253e:	d5 01       	movw	r26, r10
    2540:	0d 90       	ld	r0, X+
    2542:	00 20       	and	r0, r0
    2544:	e9 f7       	brne	.-6      	; 0x2540 <main+0x97e>
    2546:	11 97       	sbiw	r26, 0x01	; 1
    2548:	85 e0       	ldi	r24, 0x05	; 5
    254a:	e5 e4       	ldi	r30, 0x45	; 69
    254c:	f1 e0       	ldi	r31, 0x01	; 1
    254e:	01 90       	ld	r0, Z+
    2550:	0d 92       	st	X+, r0
    2552:	8a 95       	dec	r24
    2554:	e1 f7       	brne	.-8      	; 0x254e <main+0x98c>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    2556:	8c e0       	ldi	r24, 0x0C	; 12
    2558:	f5 01       	movw	r30, r10
    255a:	de 01       	movw	r26, r28
    255c:	55 96       	adiw	r26, 0x15	; 21
    255e:	01 90       	ld	r0, Z+
    2560:	0d 92       	st	X+, r0
    2562:	8a 95       	dec	r24
    2564:	e1 f7       	brne	.-8      	; 0x255e <main+0x99c>
	buf[12] = '\0';
    2566:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2568:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    256a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    256c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    256e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2570:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2572:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2574:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2576:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2578:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    257a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    257c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    257e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2580:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2582:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2584:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2586:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2588:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    258a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    258c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    258e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2590:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2592:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2594:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2596:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2598:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    259a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    259c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    259e:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    25a0:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    25a2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25aa:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    25ac:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25b0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25b6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25bc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25be:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25c8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    25ca:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25ce:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    25d0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25d4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    25d6:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    25d8:	8d 89       	ldd	r24, Y+21	; 0x15
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	88 23       	and	r24, r24
    25e8:	09 f4       	brne	.+2      	; 0x25ec <main+0xa2a>
    25ea:	81 c0       	rjmp	.+258    	; 0x26ee <main+0xb2c>
    25ec:	de 01       	movw	r26, r28
    25ee:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    25f0:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    25f2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2600:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2602:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2604:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2606:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2608:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    260a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    260c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    260e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2610:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2612:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2614:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2616:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2618:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    261a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    261c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    261e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2620:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2622:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2624:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2626:	44 9a       	sbi	0x08, 4	; 8
    2628:	99 27       	eor	r25, r25
    262a:	87 fd       	sbrc	r24, 7
    262c:	90 95       	com	r25
    262e:	80 97       	sbiw	r24, 0x20	; 32
    2630:	fc 01       	movw	r30, r24
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	e8 0f       	add	r30, r24
    263c:	f9 1f       	adc	r31, r25
    263e:	e0 5f       	subi	r30, 0xF0	; 240
    2640:	fc 4f       	sbci	r31, 0xFC	; 252
    2642:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    2644:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2646:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2648:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    264a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    264c:	82 2f       	mov	r24, r18
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	88 0f       	add	r24, r24
    2652:	89 2f       	mov	r24, r25
    2654:	88 1f       	adc	r24, r24
    2656:	99 0b       	sbc	r25, r25
    2658:	89 2b       	or	r24, r25
    265a:	09 f0       	breq	.+2      	; 0x265e <main+0xa9c>
    265c:	d0 c0       	rjmp	.+416    	; 0x27fe <main+0xc3c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    265e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2660:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2662:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2664:	26 fd       	sbrc	r18, 6
    2666:	d0 c0       	rjmp	.+416    	; 0x2808 <main+0xc46>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2668:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    266a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    266c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    266e:	25 fd       	sbrc	r18, 5
    2670:	c4 c0       	rjmp	.+392    	; 0x27fa <main+0xc38>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2672:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2674:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2676:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2678:	24 fd       	sbrc	r18, 4
    267a:	bd c0       	rjmp	.+378    	; 0x27f6 <main+0xc34>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    267c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    267e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2680:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2682:	23 fd       	sbrc	r18, 3
    2684:	b6 c0       	rjmp	.+364    	; 0x27f2 <main+0xc30>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2686:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2688:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    268a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    268c:	22 fd       	sbrc	r18, 2
    268e:	af c0       	rjmp	.+350    	; 0x27ee <main+0xc2c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2690:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2692:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2694:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2696:	21 fd       	sbrc	r18, 1
    2698:	a8 c0       	rjmp	.+336    	; 0x27ea <main+0xc28>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    269a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    269c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    269e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    26a0:	20 fd       	sbrc	r18, 0
    26a2:	a1 c0       	rjmp	.+322    	; 0x27e6 <main+0xc24>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26a8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    26aa:	44 9a       	sbi	0x08, 4	; 8
    26ac:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    26ae:	51 f6       	brne	.-108    	; 0x2644 <main+0xa82>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    26b0:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    26b2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26ba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26de:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26e4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    26e6:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    26e8:	8d 91       	ld	r24, X+
    26ea:	81 11       	cpse	r24, r1
    26ec:	81 cf       	rjmp	.-254    	; 0x25f0 <main+0xa2e>
					lfoPrintFreq = adcValue[2] >> 2;
					menuKnobPos[MENU_LFO][0] = adcValue[2];
					lfoMenuFrequencyUpdate();
				}
			}
			if(menuChange[MENU_LFO][1] != 0)
    26ee:	80 91 17 05 	lds	r24, 0x0517
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <main+0xb36>
    26f6:	40 c0       	rjmp	.+128    	; 0x2778 <main+0xbb6>
			{
				if((adcValue[1] >> 2) != lfoDepth)
    26f8:	20 91 92 05 	lds	r18, 0x0592
    26fc:	30 91 93 05 	lds	r19, 0x0593
    2700:	c9 01       	movw	r24, r18
    2702:	95 95       	asr	r25
    2704:	87 95       	ror	r24
    2706:	95 95       	asr	r25
    2708:	87 95       	ror	r24
    270a:	40 91 57 05 	lds	r20, 0x0557
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	84 17       	cp	r24, r20
    2712:	95 07       	cpc	r25, r21
    2714:	89 f1       	breq	.+98     	; 0x2778 <main+0xbb6>
				{
					lfoDepth = adcValue[1] >> 2;
    2716:	80 93 57 05 	sts	0x0557, r24
					menuKnobPos[MENU_LFO][0] = adcValue[1];
    271a:	30 93 37 05 	sts	0x0537, r19
    271e:	20 93 36 05 	sts	0x0536, r18

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    2722:	27 e0       	ldi	r18, 0x07	; 7
    2724:	e1 e7       	ldi	r30, 0x71	; 113
    2726:	f1 e0       	ldi	r31, 0x01	; 1
    2728:	d5 01       	movw	r26, r10
    272a:	01 90       	ld	r0, Z+
    272c:	0d 92       	st	X+, r0
    272e:	2a 95       	dec	r18
    2730:	e1 f7       	brne	.-8      	; 0x272a <main+0xb68>
	sprintf(buf + 6, "%d", lfoDepth);
    2732:	99 27       	eor	r25, r25
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	a8 e0       	ldi	r26, 0x08	; 8
    273a:	b1 e0       	ldi	r27, 0x01	; 1
    273c:	bf 93       	push	r27
    273e:	af 93       	push	r26
    2740:	39 ad       	ldd	r19, Y+57	; 0x39
    2742:	3f 93       	push	r19
    2744:	88 ad       	ldd	r24, Y+56	; 0x38
    2746:	8f 93       	push	r24
    2748:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "    ");
    274c:	d5 01       	movw	r26, r10
    274e:	0d 90       	ld	r0, X+
    2750:	00 20       	and	r0, r0
    2752:	e9 f7       	brne	.-6      	; 0x274e <main+0xb8c>
    2754:	11 97       	sbiw	r26, 0x01	; 1
    2756:	85 e0       	ldi	r24, 0x05	; 5
    2758:	e5 e4       	ldi	r30, 0x45	; 69
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	01 90       	ld	r0, Z+
    275e:	0d 92       	st	X+, r0
    2760:	8a 95       	dec	r24
    2762:	e1 f7       	brne	.-8      	; 0x275c <main+0xb9a>
	writeLine(4, buf);
    2764:	b5 01       	movw	r22, r10
    2766:	84 e0       	ldi	r24, 0x04	; 4
    2768:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
					lfoDepth = adcValue[1] >> 2;
					menuKnobPos[MENU_LFO][0] = adcValue[1];
					lfoMenuDepthUpdate();
				}
			}
			if(menuChange[MENU_LFO][0] != 0)
    2778:	80 91 16 05 	lds	r24, 0x0516
    277c:	88 23       	and	r24, r24
    277e:	09 f4       	brne	.+2      	; 0x2782 <main+0xbc0>
    2780:	cc ca       	rjmp	.-2664   	; 0x1d1a <main+0x158>
			{
				if(adcValue[0] < 93)
    2782:	80 91 90 05 	lds	r24, 0x0590
    2786:	90 91 91 05 	lds	r25, 0x0591
    278a:	8d 35       	cpi	r24, 0x5D	; 93
    278c:	91 05       	cpc	r25, r1
    278e:	0c f0       	brlt	.+2      	; 0x2792 <main+0xbd0>
    2790:	ce c7       	rjmp	.+3996   	; 0x372e <main+0x1b6c>
				{
					if(lfoRoute != ROUTE_OSC1)
    2792:	80 91 59 05 	lds	r24, 0x0559
    2796:	88 23       	and	r24, r24
    2798:	09 f4       	brne	.+2      	; 0x279c <main+0xbda>
    279a:	bf ca       	rjmp	.-2690   	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_OSC1;
    279c:	10 92 59 05 	sts	0x0559, r1

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    27a0:	87 e0       	ldi	r24, 0x07	; 7
    27a2:	e6 e3       	ldi	r30, 0x36	; 54
    27a4:	f1 e0       	ldi	r31, 0x01	; 1
    27a6:	d5 01       	movw	r26, r10
    27a8:	01 90       	ld	r0, Z+
    27aa:	0d 92       	st	X+, r0
    27ac:	8a 95       	dec	r24
    27ae:	e1 f7       	brne	.-8      	; 0x27a8 <main+0xbe6>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    27b0:	e8 e6       	ldi	r30, 0x68	; 104
    27b2:	f6 e0       	ldi	r31, 0x06	; 6
    27b4:	65 91       	lpm	r22, Z+
    27b6:	74 91       	lpm	r23, Z
    27b8:	51 01       	movw	r10, r2
    27ba:	81 2f       	mov	r24, r17
    27bc:	99 2d       	mov	r25, r9
    27be:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    27c2:	d1 01       	movw	r26, r2
    27c4:	0d 90       	ld	r0, X+
    27c6:	00 20       	and	r0, r0
    27c8:	e9 f7       	brne	.-6      	; 0x27c4 <main+0xc02>
    27ca:	11 97       	sbiw	r26, 0x01	; 1
    27cc:	85 e0       	ldi	r24, 0x05	; 5
    27ce:	e5 e4       	ldi	r30, 0x45	; 69
    27d0:	f1 e0       	ldi	r31, 0x01	; 1
    27d2:	01 90       	ld	r0, Z+
    27d4:	0d 92       	st	X+, r0
    27d6:	8a 95       	dec	r24
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <main+0xc10>
	writeLine(5, buf);
    27da:	61 2f       	mov	r22, r17
    27dc:	79 2d       	mov	r23, r9
    27de:	85 e0       	ldi	r24, 0x05	; 5
    27e0:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    27e4:	9a ca       	rjmp	.-2764   	; 0x1d1a <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    27e6:	5d 9a       	sbi	0x0b, 5	; 11
    27e8:	5e cf       	rjmp	.-324    	; 0x26a6 <main+0xae4>
    27ea:	5d 9a       	sbi	0x0b, 5	; 11
    27ec:	57 cf       	rjmp	.-338    	; 0x269c <main+0xada>
    27ee:	5d 9a       	sbi	0x0b, 5	; 11
    27f0:	50 cf       	rjmp	.-352    	; 0x2692 <main+0xad0>
    27f2:	5d 9a       	sbi	0x0b, 5	; 11
    27f4:	49 cf       	rjmp	.-366    	; 0x2688 <main+0xac6>
    27f6:	5d 9a       	sbi	0x0b, 5	; 11
    27f8:	42 cf       	rjmp	.-380    	; 0x267e <main+0xabc>
    27fa:	5d 9a       	sbi	0x0b, 5	; 11
    27fc:	3b cf       	rjmp	.-394    	; 0x2674 <main+0xab2>
    27fe:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2800:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2802:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2804:	26 ff       	sbrs	r18, 6
    2806:	30 cf       	rjmp	.-416    	; 0x2668 <main+0xaa6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2808:	5d 9a       	sbi	0x0b, 5	; 11
    280a:	2f cf       	rjmp	.-418    	; 0x266a <main+0xaa8>
    280c:	5d 9a       	sbi	0x0b, 5	; 11
    280e:	54 cd       	rjmp	.-1368   	; 0x22b8 <main+0x6f6>
    2810:	5d 9a       	sbi	0x0b, 5	; 11
    2812:	4d cd       	rjmp	.-1382   	; 0x22ae <main+0x6ec>
    2814:	5d 9a       	sbi	0x0b, 5	; 11
    2816:	46 cd       	rjmp	.-1396   	; 0x22a4 <main+0x6e2>
    2818:	5d 9a       	sbi	0x0b, 5	; 11
    281a:	3f cd       	rjmp	.-1410   	; 0x229a <main+0x6d8>
    281c:	5d 9a       	sbi	0x0b, 5	; 11
    281e:	38 cd       	rjmp	.-1424   	; 0x2290 <main+0x6ce>
    2820:	5d 9a       	sbi	0x0b, 5	; 11
    2822:	31 cd       	rjmp	.-1438   	; 0x2286 <main+0x6c4>
    2824:	5d 9a       	sbi	0x0b, 5	; 11
    2826:	2a cd       	rjmp	.-1452   	; 0x227c <main+0x6ba>
    2828:	5d 9a       	sbi	0x0b, 5	; 11
    282a:	23 cd       	rjmp	.-1466   	; 0x2272 <main+0x6b0>
				osc1MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC1])
    282c:	80 91 fc 04 	lds	r24, 0x04FC
    2830:	81 11       	cpse	r24, r1
			btnPressed[MENU_OSC1] = false;
    2832:	10 92 fc 04 	sts	0x04FC, r1
			
			if(!btnCanPress[MENU_OSC1])
    2836:	80 91 f6 04 	lds	r24, 0x04F6
    283a:	88 23       	and	r24, r24
    283c:	11 f4       	brne	.+4      	; 0x2842 <main+0xc80>
    283e:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <main+0x1fe6>
    2842:	80 91 f0 04 	lds	r24, 0x04F0
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
    2846:	85 36       	cpi	r24, 0x65	; 101
    2848:	10 f0       	brcs	.+4      	; 0x284e <main+0xc8c>
			btnCanPress[MENU_OSC1] = true;
    284a:	80 92 f6 04 	sts	0x04F6, r8
    284e:	80 91 56 05 	lds	r24, 0x0556
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    2852:	4f 9b       	sbis	0x09, 7	; 9
    2854:	87 ca       	rjmp	.-2802   	; 0x1d64 <main+0x1a2>
				osc2MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC2])
    2856:	90 91 fd 04 	lds	r25, 0x04FD
    285a:	91 11       	cpse	r25, r1
			btnPressed[MENU_OSC2] = false;
    285c:	10 92 fd 04 	sts	0x04FD, r1
					
			if(!btnCanPress[MENU_OSC2])
    2860:	90 91 f7 04 	lds	r25, 0x04F7
    2864:	99 23       	and	r25, r25
    2866:	09 f4       	brne	.+2      	; 0x286a <main+0xca8>
    2868:	63 c6       	rjmp	.+3270   	; 0x3530 <main+0x196e>
    286a:	90 91 f1 04 	lds	r25, 0x04F1
			btnLastPressed[MENU_OSC2]++;
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
    286e:	95 36       	cpi	r25, 0x65	; 101
    2870:	08 f4       	brcc	.+2      	; 0x2874 <main+0xcb2>
    2872:	56 cb       	rjmp	.-2388   	; 0x1f20 <main+0x35e>
			btnCanPress[MENU_OSC2] = true;
    2874:	80 92 f7 04 	sts	0x04F7, r8
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    2878:	18 9b       	sbis	0x03, 0	; 3
    287a:	54 cb       	rjmp	.-2392   	; 0x1f24 <main+0x362>
				lfoMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_LFO])
    287c:	90 91 fe 04 	lds	r25, 0x04FE
    2880:	91 11       	cpse	r25, r1
			btnPressed[MENU_LFO] = false;
    2882:	10 92 fe 04 	sts	0x04FE, r1
			
			if(!btnCanPress[MENU_LFO])
    2886:	90 91 f8 04 	lds	r25, 0x04F8
    288a:	99 23       	and	r25, r25
    288c:	09 f4       	brne	.+2      	; 0x2890 <main+0xcce>
    288e:	82 c1       	rjmp	.+772    	; 0x2b94 <main+0xfd2>
    2890:	90 91 f2 04 	lds	r25, 0x04F2
			btnLastPressed[MENU_LFO]++;
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
    2894:	95 36       	cpi	r25, 0x65	; 101
    2896:	08 f4       	brcc	.+2      	; 0x289a <main+0xcd8>
    2898:	17 cc       	rjmp	.-2002   	; 0x20c8 <main+0x506>
			btnCanPress[MENU_LFO] = true;
    289a:	80 92 f8 04 	sts	0x04F8, r8
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    289e:	1c 9b       	sbis	0x03, 4	; 3
    28a0:	15 cc       	rjmp	.-2006   	; 0x20cc <main+0x50a>
				mixerMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_MIX])
    28a2:	90 91 ff 04 	lds	r25, 0x04FF
    28a6:	91 11       	cpse	r25, r1
			btnPressed[MENU_MIX] = false;
    28a8:	10 92 ff 04 	sts	0x04FF, r1
			
			if(!btnCanPress[MENU_MIX])
    28ac:	90 91 f9 04 	lds	r25, 0x04F9
    28b0:	99 23       	and	r25, r25
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <main+0xcf4>
    28b4:	69 c1       	rjmp	.+722    	; 0x2b88 <main+0xfc6>
    28b6:	90 91 f3 04 	lds	r25, 0x04F3
			btnLastPressed[MENU_MIX]++;
			
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
    28ba:	95 36       	cpi	r25, 0x65	; 101
    28bc:	08 f4       	brcc	.+2      	; 0x28c0 <main+0xcfe>
    28be:	79 cd       	rjmp	.-1294   	; 0x23b2 <main+0x7f0>
			btnCanPress[MENU_MIX] = true;
    28c0:	80 92 f9 04 	sts	0x04F9, r8
		}

		//Menu Updates
		switch(menuSelect)
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	09 f0       	breq	.+2      	; 0x28ca <main+0xd08>
    28c8:	77 cd       	rjmp	.-1298   	; 0x23b8 <main+0x7f6>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    28ca:	80 91 8c 05 	lds	r24, 0x058C
    28ce:	88 23       	and	r24, r24
    28d0:	d9 f0       	breq	.+54     	; 0x2908 <main+0xd46>
    28d2:	80 91 2e 05 	lds	r24, 0x052E
    28d6:	90 91 2f 05 	lds	r25, 0x052F
    28da:	20 91 90 05 	lds	r18, 0x0590
    28de:	30 91 91 05 	lds	r19, 0x0591
    28e2:	ac 01       	movw	r20, r24
    28e4:	47 5f       	subi	r20, 0xF7	; 247
    28e6:	5f 4f       	sbci	r21, 0xFF	; 255
    28e8:	42 17       	cp	r20, r18
    28ea:	53 07       	cpc	r21, r19
    28ec:	6c f0       	brlt	.+26     	; 0x2908 <main+0xd46>
    28ee:	8b 30       	cpi	r24, 0x0B	; 11
    28f0:	91 05       	cpc	r25, r1
    28f2:	14 f4       	brge	.+4      	; 0x28f8 <main+0xd36>
    28f4:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <main+0x1dc8>
    28f8:	0a 97       	sbiw	r24, 0x0a	; 10
    28fa:	82 17       	cp	r24, r18
    28fc:	93 07       	cpc	r25, r19
    28fe:	24 f4       	brge	.+8      	; 0x2908 <main+0xd46>
			{
				menuChange[MENU_OSC2][0] = 1;
    2900:	80 92 12 05 	sts	0x0512, r8
				updateADC[0] = false;
    2904:	10 92 8c 05 	sts	0x058C, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC2][1] + 10 && adcValue[1] > menuKnobPos[MENU_OSC2][1] - 10)
    2908:	80 91 8d 05 	lds	r24, 0x058D
    290c:	88 23       	and	r24, r24
    290e:	b9 f0       	breq	.+46     	; 0x293e <main+0xd7c>
    2910:	20 91 30 05 	lds	r18, 0x0530
    2914:	30 91 31 05 	lds	r19, 0x0531
    2918:	80 91 92 05 	lds	r24, 0x0592
    291c:	90 91 93 05 	lds	r25, 0x0593
    2920:	a9 01       	movw	r20, r18
    2922:	47 5f       	subi	r20, 0xF7	; 247
    2924:	5f 4f       	sbci	r21, 0xFF	; 255
    2926:	48 17       	cp	r20, r24
    2928:	59 07       	cpc	r21, r25
    292a:	4c f0       	brlt	.+18     	; 0x293e <main+0xd7c>
    292c:	29 50       	subi	r18, 0x09	; 9
    292e:	31 09       	sbc	r19, r1
    2930:	82 17       	cp	r24, r18
    2932:	93 07       	cpc	r25, r19
    2934:	24 f0       	brlt	.+8      	; 0x293e <main+0xd7c>
			{
				menuChange[MENU_OSC2][1] = 1;
    2936:	80 92 13 05 	sts	0x0513, r8
				updateADC[1] = false;
    293a:	10 92 8d 05 	sts	0x058D, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC2][2] + 10 && adcValue[2] > menuKnobPos[MENU_OSC2][2] - 10)
    293e:	80 91 8e 05 	lds	r24, 0x058E
    2942:	88 23       	and	r24, r24
    2944:	b9 f0       	breq	.+46     	; 0x2974 <main+0xdb2>
    2946:	20 91 32 05 	lds	r18, 0x0532
    294a:	30 91 33 05 	lds	r19, 0x0533
    294e:	80 91 94 05 	lds	r24, 0x0594
    2952:	90 91 95 05 	lds	r25, 0x0595
    2956:	a9 01       	movw	r20, r18
    2958:	47 5f       	subi	r20, 0xF7	; 247
    295a:	5f 4f       	sbci	r21, 0xFF	; 255
    295c:	48 17       	cp	r20, r24
    295e:	59 07       	cpc	r21, r25
    2960:	4c f0       	brlt	.+18     	; 0x2974 <main+0xdb2>
    2962:	29 50       	subi	r18, 0x09	; 9
    2964:	31 09       	sbc	r19, r1
    2966:	82 17       	cp	r24, r18
    2968:	93 07       	cpc	r25, r19
    296a:	24 f0       	brlt	.+8      	; 0x2974 <main+0xdb2>
			{
				menuChange[MENU_OSC2][2] = 1;
    296c:	80 92 14 05 	sts	0x0514, r8
				updateADC[2] = false;
    2970:	10 92 8e 05 	sts	0x058E, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC2][3] + 10 && adcValue[3] > menuKnobPos[MENU_OSC2][3] - 10)
    2974:	80 91 8f 05 	lds	r24, 0x058F
    2978:	88 23       	and	r24, r24
    297a:	09 f4       	brne	.+2      	; 0x297e <main+0xdbc>
    297c:	03 c5       	rjmp	.+2566   	; 0x3384 <main+0x17c2>
    297e:	20 91 34 05 	lds	r18, 0x0534
    2982:	30 91 35 05 	lds	r19, 0x0535
    2986:	80 91 96 05 	lds	r24, 0x0596
    298a:	90 91 97 05 	lds	r25, 0x0597
    298e:	a9 01       	movw	r20, r18
    2990:	47 5f       	subi	r20, 0xF7	; 247
    2992:	5f 4f       	sbci	r21, 0xFF	; 255
    2994:	48 17       	cp	r20, r24
    2996:	59 07       	cpc	r21, r25
    2998:	0c f4       	brge	.+2      	; 0x299c <main+0xdda>
    299a:	f4 c4       	rjmp	.+2536   	; 0x3384 <main+0x17c2>
    299c:	29 50       	subi	r18, 0x09	; 9
    299e:	31 09       	sbc	r19, r1
    29a0:	82 17       	cp	r24, r18
    29a2:	93 07       	cpc	r25, r19
    29a4:	0c f4       	brge	.+2      	; 0x29a8 <main+0xde6>
    29a6:	ee c4       	rjmp	.+2524   	; 0x3384 <main+0x17c2>
			{
				menuChange[MENU_OSC2][3] = 1;
    29a8:	80 92 15 05 	sts	0x0515, r8
				updateADC[3] = false;
    29ac:	10 92 8f 05 	sts	0x058F, r1
			}
			
		if(menuChange[MENU_OSC2][3] != 0)
		{
				if(adcValue[3] < 146)
    29b0:	82 39       	cpi	r24, 0x92	; 146
    29b2:	91 05       	cpc	r25, r1
    29b4:	0c f0       	brlt	.+2      	; 0x29b8 <main+0xdf6>
    29b6:	f3 c4       	rjmp	.+2534   	; 0x339e <main+0x17dc>
				{
					if(osc2WaveForm != WAVE_SINE)
    29b8:	80 91 02 01 	lds	r24, 0x0102
    29bc:	81 11       	cpse	r24, r1
    29be:	0c 94 3f 1d 	jmp	0x3a7e	; 0x3a7e <main+0x1ebc>
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
						osc2MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC2][2] != 0)
    29c2:	80 91 14 05 	lds	r24, 0x0514
    29c6:	88 23       	and	r24, r24
    29c8:	09 f4       	brne	.+2      	; 0x29cc <main+0xe0a>
    29ca:	49 c0       	rjmp	.+146    	; 0x2a5e <main+0xe9c>
			{
				if(osc2SemisShift != (adcValue[2] >> 2) - 128)
    29cc:	80 91 94 05 	lds	r24, 0x0594
    29d0:	90 91 95 05 	lds	r25, 0x0595
    29d4:	9c 01       	movw	r18, r24
    29d6:	35 95       	asr	r19
    29d8:	27 95       	ror	r18
    29da:	35 95       	asr	r19
    29dc:	27 95       	ror	r18
    29de:	60 91 64 05 	lds	r22, 0x0564
    29e2:	77 27       	eor	r23, r23
    29e4:	67 fd       	sbrc	r22, 7
    29e6:	70 95       	com	r23
    29e8:	a9 01       	movw	r20, r18
    29ea:	40 58       	subi	r20, 0x80	; 128
    29ec:	51 09       	sbc	r21, r1
    29ee:	64 17       	cp	r22, r20
    29f0:	75 07       	cpc	r23, r21
    29f2:	a9 f1       	breq	.+106    	; 0x2a5e <main+0xe9c>
				{
					osc2SemisShift = (adcValue[2] >> 2) - 128;
    29f4:	20 58       	subi	r18, 0x80	; 128
    29f6:	20 93 64 05 	sts	0x0564, r18
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
    29fa:	90 93 33 05 	sts	0x0533, r25
    29fe:	80 93 32 05 	sts	0x0532, r24

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2a02:	88 e0       	ldi	r24, 0x08	; 8
    2a04:	e7 e2       	ldi	r30, 0x27	; 39
    2a06:	f1 e0       	ldi	r31, 0x01	; 1
    2a08:	d5 01       	movw	r26, r10
    2a0a:	01 90       	ld	r0, Z+
    2a0c:	0d 92       	st	X+, r0
    2a0e:	8a 95       	dec	r24
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <main+0xe48>
	sprintf(buf + 7, "%d", osc2SemisShift);
    2a12:	82 2f       	mov	r24, r18
    2a14:	99 27       	eor	r25, r25
    2a16:	87 fd       	sbrc	r24, 7
    2a18:	90 95       	com	r25
    2a1a:	9f 93       	push	r25
    2a1c:	2f 93       	push	r18
    2a1e:	a8 e0       	ldi	r26, 0x08	; 8
    2a20:	b1 e0       	ldi	r27, 0x01	; 1
    2a22:	bf 93       	push	r27
    2a24:	af 93       	push	r26
    2a26:	3b ad       	ldd	r19, Y+59	; 0x3b
    2a28:	3f 93       	push	r19
    2a2a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a2c:	8f 93       	push	r24
    2a2e:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    2a32:	d5 01       	movw	r26, r10
    2a34:	0d 90       	ld	r0, X+
    2a36:	00 20       	and	r0, r0
    2a38:	e9 f7       	brne	.-6      	; 0x2a34 <main+0xe72>
    2a3a:	11 97       	sbiw	r26, 0x01	; 1
    2a3c:	88 e0       	ldi	r24, 0x08	; 8
    2a3e:	e2 e4       	ldi	r30, 0x42	; 66
    2a40:	f1 e0       	ldi	r31, 0x01	; 1
    2a42:	01 90       	ld	r0, Z+
    2a44:	0d 92       	st	X+, r0
    2a46:	8a 95       	dec	r24
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <main+0xe80>
	writeLine(3, buf);
    2a4a:	b5 01       	movw	r22, r10
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
					osc2SemisShift = (adcValue[2] >> 2) - 128;
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
					osc2MenuSemisUpdate();
				}
			}
			if(menuChange[MENU_OSC2][1] != 0)
    2a5e:	80 91 13 05 	lds	r24, 0x0513
    2a62:	88 23       	and	r24, r24
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <main+0xea6>
    2a66:	49 c0       	rjmp	.+146    	; 0x2afa <main+0xf38>
			{
				if(osc2CentsShift != (adcValue[1] >> 2) - 128)
    2a68:	80 91 92 05 	lds	r24, 0x0592
    2a6c:	90 91 93 05 	lds	r25, 0x0593
    2a70:	9c 01       	movw	r18, r24
    2a72:	35 95       	asr	r19
    2a74:	27 95       	ror	r18
    2a76:	35 95       	asr	r19
    2a78:	27 95       	ror	r18
    2a7a:	60 91 65 05 	lds	r22, 0x0565
    2a7e:	77 27       	eor	r23, r23
    2a80:	67 fd       	sbrc	r22, 7
    2a82:	70 95       	com	r23
    2a84:	a9 01       	movw	r20, r18
    2a86:	40 58       	subi	r20, 0x80	; 128
    2a88:	51 09       	sbc	r21, r1
    2a8a:	64 17       	cp	r22, r20
    2a8c:	75 07       	cpc	r23, r21
    2a8e:	a9 f1       	breq	.+106    	; 0x2afa <main+0xf38>
				{
					osc2CentsShift = (adcValue[1] >> 2) - 128;
    2a90:	20 58       	subi	r18, 0x80	; 128
    2a92:	20 93 65 05 	sts	0x0565, r18
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
    2a96:	90 93 31 05 	sts	0x0531, r25
    2a9a:	80 93 30 05 	sts	0x0530, r24

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2a9e:	88 e0       	ldi	r24, 0x08	; 8
    2aa0:	ef e1       	ldi	r30, 0x1F	; 31
    2aa2:	f1 e0       	ldi	r31, 0x01	; 1
    2aa4:	d5 01       	movw	r26, r10
    2aa6:	01 90       	ld	r0, Z+
    2aa8:	0d 92       	st	X+, r0
    2aaa:	8a 95       	dec	r24
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <main+0xee4>
	sprintf(buf + 7, "%d", osc2CentsShift);
    2aae:	82 2f       	mov	r24, r18
    2ab0:	99 27       	eor	r25, r25
    2ab2:	87 fd       	sbrc	r24, 7
    2ab4:	90 95       	com	r25
    2ab6:	9f 93       	push	r25
    2ab8:	2f 93       	push	r18
    2aba:	a8 e0       	ldi	r26, 0x08	; 8
    2abc:	b1 e0       	ldi	r27, 0x01	; 1
    2abe:	bf 93       	push	r27
    2ac0:	af 93       	push	r26
    2ac2:	3b ad       	ldd	r19, Y+59	; 0x3b
    2ac4:	3f 93       	push	r19
    2ac6:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ac8:	8f 93       	push	r24
    2aca:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    2ace:	d5 01       	movw	r26, r10
    2ad0:	0d 90       	ld	r0, X+
    2ad2:	00 20       	and	r0, r0
    2ad4:	e9 f7       	brne	.-6      	; 0x2ad0 <main+0xf0e>
    2ad6:	11 97       	sbiw	r26, 0x01	; 1
    2ad8:	88 e0       	ldi	r24, 0x08	; 8
    2ada:	e2 e4       	ldi	r30, 0x42	; 66
    2adc:	f1 e0       	ldi	r31, 0x01	; 1
    2ade:	01 90       	ld	r0, Z+
    2ae0:	0d 92       	st	X+, r0
    2ae2:	8a 95       	dec	r24
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <main+0xf1c>
	writeLine(4, buf);
    2ae6:	b5 01       	movw	r22, r10
    2ae8:	84 e0       	ldi	r24, 0x04	; 4
    2aea:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
					osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
					osc2MenuCentsUpdate();
				}
			}
			if(menuChange[MENU_OSC2][0] != 0)
    2afa:	80 91 12 05 	lds	r24, 0x0512
    2afe:	88 23       	and	r24, r24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <main+0xf42>
    2b02:	0b c9       	rjmp	.-3562   	; 0x1d1a <main+0x158>
			{
				if(adcValue[0] < 205)
    2b04:	80 91 90 05 	lds	r24, 0x0590
    2b08:	90 91 91 05 	lds	r25, 0x0591
    2b0c:	8d 3c       	cpi	r24, 0xCD	; 205
    2b0e:	91 05       	cpc	r25, r1
    2b10:	0c f0       	brlt	.+2      	; 0x2b14 <main+0xf52>
    2b12:	ef c5       	rjmp	.+3038   	; 0x36f2 <main+0x1b30>
				{
					if(osc2OctaveShift != -2)
    2b14:	80 91 63 05 	lds	r24, 0x0563
    2b18:	8e 3f       	cpi	r24, 0xFE	; 254
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <main+0xf5c>
    2b1c:	fe c8       	rjmp	.-3588   	; 0x1d1a <main+0x158>
					{
						osc2OctaveShift = -2;
    2b1e:	2e ef       	ldi	r18, 0xFE	; 254
    2b20:	20 93 63 05 	sts	0x0563, r18
						menuKnobPos[MENU_OSC2][0] = 102;
    2b24:	86 e6       	ldi	r24, 0x66	; 102
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	90 93 2f 05 	sts	0x052F, r25
    2b2c:	80 93 2e 05 	sts	0x052E, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    2b30:	86 e0       	ldi	r24, 0x06	; 6
    2b32:	e7 e5       	ldi	r30, 0x57	; 87
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	d5 01       	movw	r26, r10
    2b38:	01 90       	ld	r0, Z+
    2b3a:	0d 92       	st	X+, r0
    2b3c:	8a 95       	dec	r24
    2b3e:	e1 f7       	brne	.-8      	; 0x2b38 <main+0xf76>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	8f 93       	push	r24
    2b44:	2f 93       	push	r18
    2b46:	a8 e0       	ldi	r26, 0x08	; 8
    2b48:	b1 e0       	ldi	r27, 0x01	; 1
    2b4a:	bf 93       	push	r27
    2b4c:	af 93       	push	r26
    2b4e:	3f a9       	ldd	r19, Y+55	; 0x37
    2b50:	3f 93       	push	r19
    2b52:	8e a9       	ldd	r24, Y+54	; 0x36
    2b54:	8f 93       	push	r24
    2b56:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "        ");
    2b5a:	d5 01       	movw	r26, r10
    2b5c:	0d 90       	ld	r0, X+
    2b5e:	00 20       	and	r0, r0
    2b60:	e9 f7       	brne	.-6      	; 0x2b5c <main+0xf9a>
    2b62:	11 97       	sbiw	r26, 0x01	; 1
    2b64:	89 e0       	ldi	r24, 0x09	; 9
    2b66:	e1 e4       	ldi	r30, 0x41	; 65
    2b68:	f1 e0       	ldi	r31, 0x01	; 1
    2b6a:	01 90       	ld	r0, Z+
    2b6c:	0d 92       	st	X+, r0
    2b6e:	8a 95       	dec	r24
    2b70:	e1 f7       	brne	.-8      	; 0x2b6a <main+0xfa8>
	writeLine(5, buf);
    2b72:	b5 01       	movw	r22, r10
    2b74:	85 e0       	ldi	r24, 0x05	; 5
    2b76:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	c9 c8       	rjmp	.-3694   	; 0x1d1a <main+0x158>
		{
			if(btnPressed[MENU_MIX])
			btnPressed[MENU_MIX] = false;
			
			if(!btnCanPress[MENU_MIX])
			btnLastPressed[MENU_MIX]++;
    2b88:	90 91 f3 04 	lds	r25, 0x04F3
    2b8c:	9f 5f       	subi	r25, 0xFF	; 255
    2b8e:	90 93 f3 04 	sts	0x04F3, r25
    2b92:	93 ce       	rjmp	.-730    	; 0x28ba <main+0xcf8>
		{
			if(btnPressed[MENU_LFO])
			btnPressed[MENU_LFO] = false;
			
			if(!btnCanPress[MENU_LFO])
			btnLastPressed[MENU_LFO]++;
    2b94:	90 91 f2 04 	lds	r25, 0x04F2
    2b98:	9f 5f       	subi	r25, 0xFF	; 255
    2b9a:	90 93 f2 04 	sts	0x04F2, r25
    2b9e:	7a ce       	rjmp	.-780    	; 0x2894 <main+0xcd2>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    2ba0:	80 91 8c 05 	lds	r24, 0x058C
    2ba4:	88 23       	and	r24, r24
    2ba6:	d1 f0       	breq	.+52     	; 0x2bdc <main+0x101a>
    2ba8:	80 91 26 05 	lds	r24, 0x0526
    2bac:	90 91 27 05 	lds	r25, 0x0527
    2bb0:	20 91 90 05 	lds	r18, 0x0590
    2bb4:	30 91 91 05 	lds	r19, 0x0591
    2bb8:	ac 01       	movw	r20, r24
    2bba:	47 5f       	subi	r20, 0xF7	; 247
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	42 17       	cp	r20, r18
    2bc0:	53 07       	cpc	r21, r19
    2bc2:	64 f0       	brlt	.+24     	; 0x2bdc <main+0x101a>
    2bc4:	8b 30       	cpi	r24, 0x0B	; 11
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	0c f4       	brge	.+2      	; 0x2bcc <main+0x100a>
    2bca:	dc c6       	rjmp	.+3512   	; 0x3984 <main+0x1dc2>
    2bcc:	0a 97       	sbiw	r24, 0x0a	; 10
    2bce:	82 17       	cp	r24, r18
    2bd0:	93 07       	cpc	r25, r19
    2bd2:	24 f4       	brge	.+8      	; 0x2bdc <main+0x101a>
			{
				menuChange[MENU_OSC1][0] = 1;
    2bd4:	80 92 0e 05 	sts	0x050E, r8
				updateADC[0] = false;
    2bd8:	10 92 8c 05 	sts	0x058C, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    2bdc:	80 91 8d 05 	lds	r24, 0x058D
    2be0:	88 23       	and	r24, r24
    2be2:	d1 f0       	breq	.+52     	; 0x2c18 <main+0x1056>
    2be4:	80 91 28 05 	lds	r24, 0x0528
    2be8:	90 91 29 05 	lds	r25, 0x0529
    2bec:	20 91 92 05 	lds	r18, 0x0592
    2bf0:	30 91 93 05 	lds	r19, 0x0593
    2bf4:	ac 01       	movw	r20, r24
    2bf6:	47 5f       	subi	r20, 0xF7	; 247
    2bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfa:	42 17       	cp	r20, r18
    2bfc:	53 07       	cpc	r21, r19
    2bfe:	64 f0       	brlt	.+24     	; 0x2c18 <main+0x1056>
    2c00:	8b 30       	cpi	r24, 0x0B	; 11
    2c02:	91 05       	cpc	r25, r1
    2c04:	0c f4       	brge	.+2      	; 0x2c08 <main+0x1046>
    2c06:	05 c7       	rjmp	.+3594   	; 0x3a12 <main+0x1e50>
    2c08:	0a 97       	sbiw	r24, 0x0a	; 10
    2c0a:	82 17       	cp	r24, r18
    2c0c:	93 07       	cpc	r25, r19
    2c0e:	24 f4       	brge	.+8      	; 0x2c18 <main+0x1056>
			{
				menuChange[MENU_OSC1][1] = 1;
    2c10:	80 92 0f 05 	sts	0x050F, r8
				updateADC[1] = false;
    2c14:	10 92 8d 05 	sts	0x058D, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    2c18:	80 91 8e 05 	lds	r24, 0x058E
    2c1c:	88 23       	and	r24, r24
    2c1e:	d1 f0       	breq	.+52     	; 0x2c54 <main+0x1092>
    2c20:	80 91 2a 05 	lds	r24, 0x052A
    2c24:	90 91 2b 05 	lds	r25, 0x052B
    2c28:	20 91 94 05 	lds	r18, 0x0594
    2c2c:	30 91 95 05 	lds	r19, 0x0595
    2c30:	ac 01       	movw	r20, r24
    2c32:	47 5f       	subi	r20, 0xF7	; 247
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	42 17       	cp	r20, r18
    2c38:	53 07       	cpc	r21, r19
    2c3a:	64 f0       	brlt	.+24     	; 0x2c54 <main+0x1092>
    2c3c:	8b 30       	cpi	r24, 0x0B	; 11
    2c3e:	91 05       	cpc	r25, r1
    2c40:	0c f4       	brge	.+2      	; 0x2c44 <main+0x1082>
    2c42:	ea c6       	rjmp	.+3540   	; 0x3a18 <main+0x1e56>
    2c44:	0a 97       	sbiw	r24, 0x0a	; 10
    2c46:	82 17       	cp	r24, r18
    2c48:	93 07       	cpc	r25, r19
    2c4a:	24 f4       	brge	.+8      	; 0x2c54 <main+0x1092>
			{
				menuChange[MENU_OSC1][2] = 1;
    2c4c:	80 92 10 05 	sts	0x0510, r8
				updateADC[2] = false;
    2c50:	10 92 8e 05 	sts	0x058E, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    2c54:	80 91 8f 05 	lds	r24, 0x058F
    2c58:	88 23       	and	r24, r24
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <main+0x109c>
    2c5c:	db c3       	rjmp	.+1974   	; 0x3414 <main+0x1852>
    2c5e:	20 91 2c 05 	lds	r18, 0x052C
    2c62:	30 91 2d 05 	lds	r19, 0x052D
    2c66:	80 91 96 05 	lds	r24, 0x0596
    2c6a:	90 91 97 05 	lds	r25, 0x0597
    2c6e:	a9 01       	movw	r20, r18
    2c70:	47 5f       	subi	r20, 0xF7	; 247
    2c72:	5f 4f       	sbci	r21, 0xFF	; 255
    2c74:	48 17       	cp	r20, r24
    2c76:	59 07       	cpc	r21, r25
    2c78:	0c f4       	brge	.+2      	; 0x2c7c <main+0x10ba>
    2c7a:	cc c3       	rjmp	.+1944   	; 0x3414 <main+0x1852>
    2c7c:	2b 30       	cpi	r18, 0x0B	; 11
    2c7e:	31 05       	cpc	r19, r1
    2c80:	0c f4       	brge	.+2      	; 0x2c84 <main+0x10c2>
    2c82:	87 c6       	rjmp	.+3342   	; 0x3992 <main+0x1dd0>
    2c84:	2a 50       	subi	r18, 0x0A	; 10
    2c86:	31 09       	sbc	r19, r1
    2c88:	28 17       	cp	r18, r24
    2c8a:	39 07       	cpc	r19, r25
    2c8c:	0c f0       	brlt	.+2      	; 0x2c90 <main+0x10ce>
    2c8e:	c2 c3       	rjmp	.+1924   	; 0x3414 <main+0x1852>
			{
				menuChange[MENU_OSC1][3] = 1;
    2c90:	80 92 11 05 	sts	0x0511, r8
				updateADC[3] = false;
    2c94:	10 92 8f 05 	sts	0x058F, r1
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
			{
				if(adcValue[3] < 146)
    2c98:	82 39       	cpi	r24, 0x92	; 146
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	0c f0       	brlt	.+2      	; 0x2ca0 <main+0x10de>
    2c9e:	c7 c3       	rjmp	.+1934   	; 0x342e <main+0x186c>
				{
					if(osc1WaveForm != WAVE_SINE)
    2ca0:	80 91 03 01 	lds	r24, 0x0103
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	f0 c6       	rjmp	.+3552   	; 0x3a88 <main+0x1ec6>
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
						osc1MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC1][2] != 0)
    2ca8:	80 91 10 05 	lds	r24, 0x0510
    2cac:	88 23       	and	r24, r24
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <main+0x10f0>
    2cb0:	24 c1       	rjmp	.+584    	; 0x2efa <main+0x1338>
			{
				if(osc1SemisShift != (adcValue[2] >> 4) - 32)
    2cb2:	80 91 94 05 	lds	r24, 0x0594
    2cb6:	90 91 95 05 	lds	r25, 0x0595
    2cba:	9c 01       	movw	r18, r24
    2cbc:	35 95       	asr	r19
    2cbe:	27 95       	ror	r18
    2cc0:	35 95       	asr	r19
    2cc2:	27 95       	ror	r18
    2cc4:	35 95       	asr	r19
    2cc6:	27 95       	ror	r18
    2cc8:	35 95       	asr	r19
    2cca:	27 95       	ror	r18
    2ccc:	60 91 7a 05 	lds	r22, 0x057A
    2cd0:	77 27       	eor	r23, r23
    2cd2:	67 fd       	sbrc	r22, 7
    2cd4:	70 95       	com	r23
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	40 52       	subi	r20, 0x20	; 32
    2cda:	51 09       	sbc	r21, r1
    2cdc:	64 17       	cp	r22, r20
    2cde:	75 07       	cpc	r23, r21
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <main+0x1122>
    2ce2:	0b c1       	rjmp	.+534    	; 0x2efa <main+0x1338>
				{
					osc1SemisShift = (adcValue[2] >> 4) - 32;
    2ce4:	20 52       	subi	r18, 0x20	; 32
    2ce6:	20 93 7a 05 	sts	0x057A, r18
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
    2cea:	90 93 2b 05 	sts	0x052B, r25
    2cee:	80 93 2a 05 	sts	0x052A, r24

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2cf2:	88 e0       	ldi	r24, 0x08	; 8
    2cf4:	e7 e2       	ldi	r30, 0x27	; 39
    2cf6:	f1 e0       	ldi	r31, 0x01	; 1
    2cf8:	d5 01       	movw	r26, r10
    2cfa:	01 90       	ld	r0, Z+
    2cfc:	0d 92       	st	X+, r0
    2cfe:	8a 95       	dec	r24
    2d00:	e1 f7       	brne	.-8      	; 0x2cfa <main+0x1138>
	sprintf(buf + 7, "%d", osc1SemisShift);
    2d02:	82 2f       	mov	r24, r18
    2d04:	99 27       	eor	r25, r25
    2d06:	87 fd       	sbrc	r24, 7
    2d08:	90 95       	com	r25
    2d0a:	9f 93       	push	r25
    2d0c:	2f 93       	push	r18
    2d0e:	a8 e0       	ldi	r26, 0x08	; 8
    2d10:	b1 e0       	ldi	r27, 0x01	; 1
    2d12:	bf 93       	push	r27
    2d14:	af 93       	push	r26
    2d16:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d18:	3f 93       	push	r19
    2d1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d1c:	8f 93       	push	r24
    2d1e:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    2d22:	d5 01       	movw	r26, r10
    2d24:	0d 90       	ld	r0, X+
    2d26:	00 20       	and	r0, r0
    2d28:	e9 f7       	brne	.-6      	; 0x2d24 <main+0x1162>
    2d2a:	11 97       	sbiw	r26, 0x01	; 1
    2d2c:	88 e0       	ldi	r24, 0x08	; 8
    2d2e:	e2 e4       	ldi	r30, 0x42	; 66
    2d30:	f1 e0       	ldi	r31, 0x01	; 1
    2d32:	01 90       	ld	r0, Z+
    2d34:	0d 92       	st	X+, r0
    2d36:	8a 95       	dec	r24
    2d38:	e1 f7       	brne	.-8      	; 0x2d32 <main+0x1170>
	writeLine(3, buf);
    2d3a:	b5 01       	movw	r22, r10
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    2d42:	e0 91 04 01 	lds	r30, 0x0104
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 91 7a 05 	lds	r24, 0x057A
    2d4c:	df 01       	movw	r26, r30
    2d4e:	a8 0f       	add	r26, r24
    2d50:	b1 1d       	adc	r27, r1
    2d52:	87 fd       	sbrc	r24, 7
    2d54:	ba 95       	dec	r27
    2d56:	aa 0f       	add	r26, r26
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	aa 0f       	add	r26, r26
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	ae 55       	subi	r26, 0x5E	; 94
    2d60:	be 4f       	sbci	r27, 0xFE	; 254
    2d62:	4d 90       	ld	r4, X+
    2d64:	5d 90       	ld	r5, X+
    2d66:	6d 90       	ld	r6, X+
    2d68:	7c 90       	ld	r7, X
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    2d6a:	80 91 63 05 	lds	r24, 0x0563
    2d6e:	90 91 64 05 	lds	r25, 0x0564
    2d72:	e9 0f       	add	r30, r25
    2d74:	f1 1d       	adc	r31, r1
    2d76:	97 fd       	sbrc	r25, 7
    2d78:	fa 95       	dec	r31
    2d7a:	9c e0       	ldi	r25, 0x0C	; 12
    2d7c:	89 02       	muls	r24, r25
    2d7e:	e0 0d       	add	r30, r0
    2d80:	f1 1d       	adc	r31, r1
    2d82:	11 24       	eor	r1, r1
    2d84:	ee 0f       	add	r30, r30
    2d86:	ff 1f       	adc	r31, r31
    2d88:	ee 0f       	add	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	ee 55       	subi	r30, 0x5E	; 94
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	c0 80       	ld	r12, Z
    2d92:	d1 80       	ldd	r13, Z+1	; 0x01
    2d94:	e2 80       	ldd	r14, Z+2	; 0x02
    2d96:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    2d98:	60 91 7b 05 	lds	r22, 0x057B
    2d9c:	a7 e2       	ldi	r26, 0x27	; 39
    2d9e:	6a 02       	muls	r22, r26
    2da0:	b0 01       	movw	r22, r0
    2da2:	11 24       	eor	r1, r1
    2da4:	88 27       	eor	r24, r24
    2da6:	77 fd       	sbrc	r23, 7
    2da8:	80 95       	com	r24
    2daa:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2dac:	a3 01       	movw	r20, r6
    2dae:	92 01       	movw	r18, r4
    2db0:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2db4:	00 e1       	ldi	r16, 0x10	; 16
    2db6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    2dba:	21 96       	adiw	r28, 0x01	; 1
    2dbc:	2f af       	std	Y+63, r18	; 0x3f
    2dbe:	21 97       	sbiw	r28, 0x01	; 1
    2dc0:	22 96       	adiw	r28, 0x02	; 2
    2dc2:	3f af       	std	Y+63, r19	; 0x3f
    2dc4:	22 97       	sbiw	r28, 0x02	; 2
    2dc6:	23 96       	adiw	r28, 0x03	; 3
    2dc8:	4f af       	std	Y+63, r20	; 0x3f
    2dca:	23 97       	sbiw	r28, 0x03	; 3
    2dcc:	24 96       	adiw	r28, 0x04	; 4
    2dce:	5f af       	std	Y+63, r21	; 0x3f
    2dd0:	24 97       	sbiw	r28, 0x04	; 4
    2dd2:	25 96       	adiw	r28, 0x05	; 5
    2dd4:	6f af       	std	Y+63, r22	; 0x3f
    2dd6:	25 97       	sbiw	r28, 0x05	; 5
    2dd8:	26 96       	adiw	r28, 0x06	; 6
    2dda:	7f af       	std	Y+63, r23	; 0x3f
    2ddc:	26 97       	sbiw	r28, 0x06	; 6
    2dde:	27 96       	adiw	r28, 0x07	; 7
    2de0:	8f af       	std	Y+63, r24	; 0x3f
    2de2:	27 97       	sbiw	r28, 0x07	; 7
    2de4:	28 96       	adiw	r28, 0x08	; 8
    2de6:	9f af       	std	Y+63, r25	; 0x3f
    2de8:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    2dea:	24 96       	adiw	r28, 0x04	; 4
    2dec:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dee:	9d ad       	ldd	r25, Y+61	; 0x3d
    2df0:	ae ad       	ldd	r26, Y+62	; 0x3e
    2df2:	bf ad       	ldd	r27, Y+63	; 0x3f
    2df4:	24 97       	sbiw	r28, 0x04	; 4
    2df6:	84 0d       	add	r24, r4
    2df8:	95 1d       	adc	r25, r5
    2dfa:	a6 1d       	adc	r26, r6
    2dfc:	b7 1d       	adc	r27, r7
    2dfe:	24 96       	adiw	r28, 0x04	; 4
    2e00:	8c af       	std	Y+60, r24	; 0x3c
    2e02:	9d af       	std	Y+61, r25	; 0x3d
    2e04:	ae af       	std	Y+62, r26	; 0x3e
    2e06:	bf af       	std	Y+63, r27	; 0x3f
    2e08:	24 97       	sbiw	r28, 0x04	; 4
    2e0a:	80 93 84 05 	sts	0x0584, r24
    2e0e:	90 93 85 05 	sts	0x0585, r25
    2e12:	a0 93 86 05 	sts	0x0586, r26
    2e16:	b0 93 87 05 	sts	0x0587, r27

	centsConst = 0x27*osc2CentsShift;
    2e1a:	20 91 65 05 	lds	r18, 0x0565
    2e1e:	97 e2       	ldi	r25, 0x27	; 39
    2e20:	29 02       	muls	r18, r25
    2e22:	90 01       	movw	r18, r0
    2e24:	11 24       	eor	r1, r1
    2e26:	44 27       	eor	r20, r20
    2e28:	37 fd       	sbrc	r19, 7
    2e2a:	40 95       	com	r20
    2e2c:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2e2e:	c7 01       	movw	r24, r14
    2e30:	b6 01       	movw	r22, r12
    2e32:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2e36:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    2e3a:	29 96       	adiw	r28, 0x09	; 9
    2e3c:	2f af       	std	Y+63, r18	; 0x3f
    2e3e:	29 97       	sbiw	r28, 0x09	; 9
    2e40:	2a 96       	adiw	r28, 0x0a	; 10
    2e42:	3f af       	std	Y+63, r19	; 0x3f
    2e44:	2a 97       	sbiw	r28, 0x0a	; 10
    2e46:	2b 96       	adiw	r28, 0x0b	; 11
    2e48:	4f af       	std	Y+63, r20	; 0x3f
    2e4a:	2b 97       	sbiw	r28, 0x0b	; 11
    2e4c:	2c 96       	adiw	r28, 0x0c	; 12
    2e4e:	5f af       	std	Y+63, r21	; 0x3f
    2e50:	2c 97       	sbiw	r28, 0x0c	; 12
    2e52:	2d 96       	adiw	r28, 0x0d	; 13
    2e54:	6f af       	std	Y+63, r22	; 0x3f
    2e56:	2d 97       	sbiw	r28, 0x0d	; 13
    2e58:	2e 96       	adiw	r28, 0x0e	; 14
    2e5a:	7f af       	std	Y+63, r23	; 0x3f
    2e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e5e:	2f 96       	adiw	r28, 0x0f	; 15
    2e60:	8f af       	std	Y+63, r24	; 0x3f
    2e62:	2f 97       	sbiw	r28, 0x0f	; 15
    2e64:	60 96       	adiw	r28, 0x10	; 16
    2e66:	9f af       	std	Y+63, r25	; 0x3f
    2e68:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    2e6a:	2c 96       	adiw	r28, 0x0c	; 12
    2e6c:	4c ac       	ldd	r4, Y+60	; 0x3c
    2e6e:	5d ac       	ldd	r5, Y+61	; 0x3d
    2e70:	6e ac       	ldd	r6, Y+62	; 0x3e
    2e72:	7f ac       	ldd	r7, Y+63	; 0x3f
    2e74:	2c 97       	sbiw	r28, 0x0c	; 12
    2e76:	4c 0c       	add	r4, r12
    2e78:	5d 1c       	adc	r5, r13
    2e7a:	6e 1c       	adc	r6, r14
    2e7c:	7f 1c       	adc	r7, r15
    2e7e:	40 92 6e 05 	sts	0x056E, r4
    2e82:	50 92 6f 05 	sts	0x056F, r5
    2e86:	60 92 70 05 	sts	0x0570, r6
    2e8a:	70 92 71 05 	sts	0x0571, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2e8e:	c0 90 0a 05 	lds	r12, 0x050A
    2e92:	d0 90 0b 05 	lds	r13, 0x050B
    2e96:	e0 90 0c 05 	lds	r14, 0x050C
    2e9a:	f0 90 0d 05 	lds	r15, 0x050D
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2e9e:	24 96       	adiw	r28, 0x04	; 4
    2ea0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ea2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ea4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ea6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea8:	24 97       	sbiw	r28, 0x04	; 4
    2eaa:	a7 01       	movw	r20, r14
    2eac:	96 01       	movw	r18, r12
    2eae:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2eb2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    2eb6:	c9 01       	movw	r24, r18
    2eb8:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2eba:	80 93 7c 05 	sts	0x057C, r24
    2ebe:	90 93 7d 05 	sts	0x057D, r25
    2ec2:	a0 93 7e 05 	sts	0x057E, r26
    2ec6:	b0 93 7f 05 	sts	0x057F, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2eca:	c3 01       	movw	r24, r6
    2ecc:	b2 01       	movw	r22, r4
    2ece:	a7 01       	movw	r20, r14
    2ed0:	96 01       	movw	r18, r12
    2ed2:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2ed6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    2eda:	c9 01       	movw	r24, r18
    2edc:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    2ede:	80 93 66 05 	sts	0x0566, r24
    2ee2:	90 93 67 05 	sts	0x0567, r25
    2ee6:	a0 93 68 05 	sts	0x0568, r26
    2eea:	b0 93 69 05 	sts	0x0569, r27
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
					osc1MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][1] != 0)
    2efa:	80 91 0f 05 	lds	r24, 0x050F
    2efe:	88 23       	and	r24, r24
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <main+0x1342>
    2f02:	e7 c1       	rjmp	.+974    	; 0x32d2 <main+0x1710>
			{
				if(osc1CentsShift != (adcValue[1] >> 4) - 32)
    2f04:	80 91 92 05 	lds	r24, 0x0592
    2f08:	90 91 93 05 	lds	r25, 0x0593
    2f0c:	9c 01       	movw	r18, r24
    2f0e:	35 95       	asr	r19
    2f10:	27 95       	ror	r18
    2f12:	35 95       	asr	r19
    2f14:	27 95       	ror	r18
    2f16:	35 95       	asr	r19
    2f18:	27 95       	ror	r18
    2f1a:	35 95       	asr	r19
    2f1c:	27 95       	ror	r18
    2f1e:	60 91 7b 05 	lds	r22, 0x057B
    2f22:	77 27       	eor	r23, r23
    2f24:	67 fd       	sbrc	r22, 7
    2f26:	70 95       	com	r23
    2f28:	a9 01       	movw	r20, r18
    2f2a:	40 52       	subi	r20, 0x20	; 32
    2f2c:	51 09       	sbc	r21, r1
    2f2e:	64 17       	cp	r22, r20
    2f30:	75 07       	cpc	r23, r21
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <main+0x1374>
    2f34:	ce c1       	rjmp	.+924    	; 0x32d2 <main+0x1710>
				{
					osc1CentsShift = (adcValue[1] >> 4) - 32;
    2f36:	20 52       	subi	r18, 0x20	; 32
    2f38:	20 93 7b 05 	sts	0x057B, r18
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
    2f3c:	90 93 29 05 	sts	0x0529, r25
    2f40:	80 93 28 05 	sts	0x0528, r24

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2f44:	88 e0       	ldi	r24, 0x08	; 8
    2f46:	ef e1       	ldi	r30, 0x1F	; 31
    2f48:	f1 e0       	ldi	r31, 0x01	; 1
    2f4a:	d5 01       	movw	r26, r10
    2f4c:	01 90       	ld	r0, Z+
    2f4e:	0d 92       	st	X+, r0
    2f50:	8a 95       	dec	r24
    2f52:	e1 f7       	brne	.-8      	; 0x2f4c <main+0x138a>
	sprintf(buf + 7, "%d", osc1CentsShift);
    2f54:	82 2f       	mov	r24, r18
    2f56:	99 27       	eor	r25, r25
    2f58:	87 fd       	sbrc	r24, 7
    2f5a:	90 95       	com	r25
    2f5c:	9f 93       	push	r25
    2f5e:	2f 93       	push	r18
    2f60:	a8 e0       	ldi	r26, 0x08	; 8
    2f62:	b1 e0       	ldi	r27, 0x01	; 1
    2f64:	bf 93       	push	r27
    2f66:	af 93       	push	r26
    2f68:	3b ad       	ldd	r19, Y+59	; 0x3b
    2f6a:	3f 93       	push	r19
    2f6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f6e:	8f 93       	push	r24
    2f70:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    2f74:	d5 01       	movw	r26, r10
    2f76:	0d 90       	ld	r0, X+
    2f78:	00 20       	and	r0, r0
    2f7a:	e9 f7       	brne	.-6      	; 0x2f76 <main+0x13b4>
    2f7c:	11 97       	sbiw	r26, 0x01	; 1
    2f7e:	88 e0       	ldi	r24, 0x08	; 8
    2f80:	e2 e4       	ldi	r30, 0x42	; 66
    2f82:	f1 e0       	ldi	r31, 0x01	; 1
    2f84:	01 90       	ld	r0, Z+
    2f86:	0d 92       	st	X+, r0
    2f88:	8a 95       	dec	r24
    2f8a:	e1 f7       	brne	.-8      	; 0x2f84 <main+0x13c2>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    2f8c:	8c e0       	ldi	r24, 0x0C	; 12
    2f8e:	f5 01       	movw	r30, r10
    2f90:	de 01       	movw	r26, r28
    2f92:	55 96       	adiw	r26, 0x15	; 21
    2f94:	01 90       	ld	r0, Z+
    2f96:	0d 92       	st	X+, r0
    2f98:	8a 95       	dec	r24
    2f9a:	e1 f7       	brne	.-8      	; 0x2f94 <main+0x13d2>
	buf[12] = '\0';
    2f9c:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2f9e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2fa0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fa2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fa4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fa6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fa8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2faa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fb0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fb2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fb4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fb6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fb8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fbc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fbe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fc0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fc2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fc4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fc6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fc8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fcc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fd2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2fd4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2fd6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2fd8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fda:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fdc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fde:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fe0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fe2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fe4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fe6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fe8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2fec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2fee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ff0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ff2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ff4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ff6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ff8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ffa:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ffc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ffe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3000:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3002:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3004:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3006:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3008:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    300a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    300c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    300e:	8d 89       	ldd	r24, Y+21	; 0x15
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	88 23       	and	r24, r24
    301e:	09 f4       	brne	.+2      	; 0x3022 <main+0x1460>
    3020:	82 c0       	rjmp	.+260    	; 0x3126 <main+0x1564>
    3022:	de 01       	movw	r26, r28
    3024:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3026:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3028:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    302a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    302c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    302e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3030:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3032:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3034:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3036:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3038:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    303a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    303c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    303e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3040:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3042:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3044:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3046:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3048:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    304a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    304c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    304e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3050:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3052:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3054:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3056:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3058:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    305a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    305c:	44 9a       	sbi	0x08, 4	; 8
    305e:	99 27       	eor	r25, r25
    3060:	87 fd       	sbrc	r24, 7
    3062:	90 95       	com	r25
    3064:	80 97       	sbiw	r24, 0x20	; 32
    3066:	fc 01       	movw	r30, r24
    3068:	ee 0f       	add	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	ee 0f       	add	r30, r30
    306e:	ff 1f       	adc	r31, r31
    3070:	e8 0f       	add	r30, r24
    3072:	f9 1f       	adc	r31, r25
    3074:	e0 5f       	subi	r30, 0xF0	; 240
    3076:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    3078:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    307a:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    307c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    307e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3080:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3082:	82 2f       	mov	r24, r18
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	88 0f       	add	r24, r24
    3088:	89 2f       	mov	r24, r25
    308a:	88 1f       	adc	r24, r24
    308c:	99 0b       	sbc	r25, r25
    308e:	89 2b       	or	r24, r25
    3090:	09 f0       	breq	.+2      	; 0x3094 <main+0x14d2>
    3092:	76 c1       	rjmp	.+748    	; 0x3380 <main+0x17be>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3094:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3096:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3098:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    309a:	26 fd       	sbrc	r18, 6
    309c:	5b c1       	rjmp	.+694    	; 0x3354 <main+0x1792>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    309e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30a2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30a4:	25 fd       	sbrc	r18, 5
    30a6:	5b c1       	rjmp	.+694    	; 0x335e <main+0x179c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30ac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30ae:	24 fd       	sbrc	r18, 4
    30b0:	5b c1       	rjmp	.+694    	; 0x3368 <main+0x17a6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30b6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30b8:	23 fd       	sbrc	r18, 3
    30ba:	5b c1       	rjmp	.+694    	; 0x3372 <main+0x17b0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30c0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30c2:	22 fd       	sbrc	r18, 2
    30c4:	5b c1       	rjmp	.+694    	; 0x337c <main+0x17ba>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30ca:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30cc:	21 fd       	sbrc	r18, 1
    30ce:	40 c1       	rjmp	.+640    	; 0x3350 <main+0x178e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30d4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    30d6:	20 fd       	sbrc	r18, 0
    30d8:	39 c1       	rjmp	.+626    	; 0x334c <main+0x178a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30de:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    30e0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    30e2:	3f 5f       	subi	r19, 0xFF	; 255
    30e4:	35 30       	cpi	r19, 0x05	; 5
    30e6:	49 f6       	brne	.-110    	; 0x307a <main+0x14b8>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    30e8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    30ea:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    30fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    30fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    30fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3100:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3102:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3104:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3106:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3108:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    310a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    310c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    310e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3110:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3112:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3114:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3116:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3118:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    311a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    311c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    311e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3120:	8d 91       	ld	r24, X+
    3122:	81 11       	cpse	r24, r1
    3124:	80 cf       	rjmp	.-256    	; 0x3026 <main+0x1464>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    3126:	e0 91 04 01 	lds	r30, 0x0104
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 91 7a 05 	lds	r24, 0x057A
    3130:	df 01       	movw	r26, r30
    3132:	a8 0f       	add	r26, r24
    3134:	b1 1d       	adc	r27, r1
    3136:	87 fd       	sbrc	r24, 7
    3138:	ba 95       	dec	r27
    313a:	aa 0f       	add	r26, r26
    313c:	bb 1f       	adc	r27, r27
    313e:	aa 0f       	add	r26, r26
    3140:	bb 1f       	adc	r27, r27
    3142:	ae 55       	subi	r26, 0x5E	; 94
    3144:	be 4f       	sbci	r27, 0xFE	; 254
    3146:	4d 90       	ld	r4, X+
    3148:	5d 90       	ld	r5, X+
    314a:	6d 90       	ld	r6, X+
    314c:	7c 90       	ld	r7, X
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    314e:	80 91 63 05 	lds	r24, 0x0563
    3152:	90 91 64 05 	lds	r25, 0x0564
    3156:	e9 0f       	add	r30, r25
    3158:	f1 1d       	adc	r31, r1
    315a:	97 fd       	sbrc	r25, 7
    315c:	fa 95       	dec	r31
    315e:	9c e0       	ldi	r25, 0x0C	; 12
    3160:	89 02       	muls	r24, r25
    3162:	e0 0d       	add	r30, r0
    3164:	f1 1d       	adc	r31, r1
    3166:	11 24       	eor	r1, r1
    3168:	ee 0f       	add	r30, r30
    316a:	ff 1f       	adc	r31, r31
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	ee 55       	subi	r30, 0x5E	; 94
    3172:	fe 4f       	sbci	r31, 0xFE	; 254
    3174:	c0 80       	ld	r12, Z
    3176:	d1 80       	ldd	r13, Z+1	; 0x01
    3178:	e2 80       	ldd	r14, Z+2	; 0x02
    317a:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    317c:	60 91 7b 05 	lds	r22, 0x057B
    3180:	a7 e2       	ldi	r26, 0x27	; 39
    3182:	6a 02       	muls	r22, r26
    3184:	b0 01       	movw	r22, r0
    3186:	11 24       	eor	r1, r1
    3188:	88 27       	eor	r24, r24
    318a:	77 fd       	sbrc	r23, 7
    318c:	80 95       	com	r24
    318e:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3190:	a3 01       	movw	r20, r6
    3192:	92 01       	movw	r18, r4
    3194:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3198:	00 e1       	ldi	r16, 0x10	; 16
    319a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    319e:	21 96       	adiw	r28, 0x01	; 1
    31a0:	2f af       	std	Y+63, r18	; 0x3f
    31a2:	21 97       	sbiw	r28, 0x01	; 1
    31a4:	22 96       	adiw	r28, 0x02	; 2
    31a6:	3f af       	std	Y+63, r19	; 0x3f
    31a8:	22 97       	sbiw	r28, 0x02	; 2
    31aa:	23 96       	adiw	r28, 0x03	; 3
    31ac:	4f af       	std	Y+63, r20	; 0x3f
    31ae:	23 97       	sbiw	r28, 0x03	; 3
    31b0:	24 96       	adiw	r28, 0x04	; 4
    31b2:	5f af       	std	Y+63, r21	; 0x3f
    31b4:	24 97       	sbiw	r28, 0x04	; 4
    31b6:	25 96       	adiw	r28, 0x05	; 5
    31b8:	6f af       	std	Y+63, r22	; 0x3f
    31ba:	25 97       	sbiw	r28, 0x05	; 5
    31bc:	26 96       	adiw	r28, 0x06	; 6
    31be:	7f af       	std	Y+63, r23	; 0x3f
    31c0:	26 97       	sbiw	r28, 0x06	; 6
    31c2:	27 96       	adiw	r28, 0x07	; 7
    31c4:	8f af       	std	Y+63, r24	; 0x3f
    31c6:	27 97       	sbiw	r28, 0x07	; 7
    31c8:	28 96       	adiw	r28, 0x08	; 8
    31ca:	9f af       	std	Y+63, r25	; 0x3f
    31cc:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    31ce:	24 96       	adiw	r28, 0x04	; 4
    31d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    31d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    31d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    31d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    31d8:	24 97       	sbiw	r28, 0x04	; 4
    31da:	84 0d       	add	r24, r4
    31dc:	95 1d       	adc	r25, r5
    31de:	a6 1d       	adc	r26, r6
    31e0:	b7 1d       	adc	r27, r7
    31e2:	24 96       	adiw	r28, 0x04	; 4
    31e4:	8c af       	std	Y+60, r24	; 0x3c
    31e6:	9d af       	std	Y+61, r25	; 0x3d
    31e8:	ae af       	std	Y+62, r26	; 0x3e
    31ea:	bf af       	std	Y+63, r27	; 0x3f
    31ec:	24 97       	sbiw	r28, 0x04	; 4
    31ee:	80 93 84 05 	sts	0x0584, r24
    31f2:	90 93 85 05 	sts	0x0585, r25
    31f6:	a0 93 86 05 	sts	0x0586, r26
    31fa:	b0 93 87 05 	sts	0x0587, r27

	centsConst = 0x27*osc2CentsShift;
    31fe:	20 91 65 05 	lds	r18, 0x0565
    3202:	97 e2       	ldi	r25, 0x27	; 39
    3204:	29 02       	muls	r18, r25
    3206:	90 01       	movw	r18, r0
    3208:	11 24       	eor	r1, r1
    320a:	44 27       	eor	r20, r20
    320c:	37 fd       	sbrc	r19, 7
    320e:	40 95       	com	r20
    3210:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3212:	c7 01       	movw	r24, r14
    3214:	b6 01       	movw	r22, r12
    3216:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    321a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    321e:	29 96       	adiw	r28, 0x09	; 9
    3220:	2f af       	std	Y+63, r18	; 0x3f
    3222:	29 97       	sbiw	r28, 0x09	; 9
    3224:	2a 96       	adiw	r28, 0x0a	; 10
    3226:	3f af       	std	Y+63, r19	; 0x3f
    3228:	2a 97       	sbiw	r28, 0x0a	; 10
    322a:	2b 96       	adiw	r28, 0x0b	; 11
    322c:	4f af       	std	Y+63, r20	; 0x3f
    322e:	2b 97       	sbiw	r28, 0x0b	; 11
    3230:	2c 96       	adiw	r28, 0x0c	; 12
    3232:	5f af       	std	Y+63, r21	; 0x3f
    3234:	2c 97       	sbiw	r28, 0x0c	; 12
    3236:	2d 96       	adiw	r28, 0x0d	; 13
    3238:	6f af       	std	Y+63, r22	; 0x3f
    323a:	2d 97       	sbiw	r28, 0x0d	; 13
    323c:	2e 96       	adiw	r28, 0x0e	; 14
    323e:	7f af       	std	Y+63, r23	; 0x3f
    3240:	2e 97       	sbiw	r28, 0x0e	; 14
    3242:	2f 96       	adiw	r28, 0x0f	; 15
    3244:	8f af       	std	Y+63, r24	; 0x3f
    3246:	2f 97       	sbiw	r28, 0x0f	; 15
    3248:	60 96       	adiw	r28, 0x10	; 16
    324a:	9f af       	std	Y+63, r25	; 0x3f
    324c:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    324e:	2c 96       	adiw	r28, 0x0c	; 12
    3250:	4c ac       	ldd	r4, Y+60	; 0x3c
    3252:	5d ac       	ldd	r5, Y+61	; 0x3d
    3254:	6e ac       	ldd	r6, Y+62	; 0x3e
    3256:	7f ac       	ldd	r7, Y+63	; 0x3f
    3258:	2c 97       	sbiw	r28, 0x0c	; 12
    325a:	4c 0c       	add	r4, r12
    325c:	5d 1c       	adc	r5, r13
    325e:	6e 1c       	adc	r6, r14
    3260:	7f 1c       	adc	r7, r15
    3262:	40 92 6e 05 	sts	0x056E, r4
    3266:	50 92 6f 05 	sts	0x056F, r5
    326a:	60 92 70 05 	sts	0x0570, r6
    326e:	70 92 71 05 	sts	0x0571, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3272:	c0 90 0a 05 	lds	r12, 0x050A
    3276:	d0 90 0b 05 	lds	r13, 0x050B
    327a:	e0 90 0c 05 	lds	r14, 0x050C
    327e:	f0 90 0d 05 	lds	r15, 0x050D
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3282:	24 96       	adiw	r28, 0x04	; 4
    3284:	6c ad       	ldd	r22, Y+60	; 0x3c
    3286:	7d ad       	ldd	r23, Y+61	; 0x3d
    3288:	8e ad       	ldd	r24, Y+62	; 0x3e
    328a:	9f ad       	ldd	r25, Y+63	; 0x3f
    328c:	24 97       	sbiw	r28, 0x04	; 4
    328e:	a7 01       	movw	r20, r14
    3290:	96 01       	movw	r18, r12
    3292:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3296:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    329a:	c9 01       	movw	r24, r18
    329c:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    329e:	80 93 7c 05 	sts	0x057C, r24
    32a2:	90 93 7d 05 	sts	0x057D, r25
    32a6:	a0 93 7e 05 	sts	0x057E, r26
    32aa:	b0 93 7f 05 	sts	0x057F, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    32ae:	c3 01       	movw	r24, r6
    32b0:	b2 01       	movw	r22, r4
    32b2:	a7 01       	movw	r20, r14
    32b4:	96 01       	movw	r18, r12
    32b6:	0e 94 2b 21 	call	0x4256	; 0x4256 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    32ba:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <__lshrdi3>
    32be:	c9 01       	movw	r24, r18
    32c0:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    32c2:	80 93 66 05 	sts	0x0566, r24
    32c6:	90 93 67 05 	sts	0x0567, r25
    32ca:	a0 93 68 05 	sts	0x0568, r26
    32ce:	b0 93 69 05 	sts	0x0569, r27
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
					osc1MenuCentsUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][0] != 0)
    32d2:	80 91 0e 05 	lds	r24, 0x050E
    32d6:	88 23       	and	r24, r24
    32d8:	11 f4       	brne	.+4      	; 0x32de <main+0x171c>
    32da:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
			{
				if(adcValue[0] < 512)
    32de:	80 91 90 05 	lds	r24, 0x0590
    32e2:	90 91 91 05 	lds	r25, 0x0591
    32e6:	81 15       	cp	r24, r1
    32e8:	a2 e0       	ldi	r26, 0x02	; 2
    32ea:	9a 07       	cpc	r25, r26
    32ec:	0c f0       	brlt	.+2      	; 0x32f0 <main+0x172e>
    32ee:	f4 c1       	rjmp	.+1000   	; 0x36d8 <main+0x1b16>
				{
					if(osc1NoteSync != false)
    32f0:	80 91 72 05 	lds	r24, 0x0572
    32f4:	88 23       	and	r24, r24
    32f6:	11 f4       	brne	.+4      	; 0x32fc <main+0x173a>
    32f8:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc1NoteSync = false;
    32fc:	10 92 72 05 	sts	0x0572, r1

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3300:	87 e0       	ldi	r24, 0x07	; 7
    3302:	ef e2       	ldi	r30, 0x2F	; 47
    3304:	f1 e0       	ldi	r31, 0x01	; 1
    3306:	d5 01       	movw	r26, r10
    3308:	01 90       	ld	r0, Z+
    330a:	0d 92       	st	X+, r0
    330c:	8a 95       	dec	r24
    330e:	e1 f7       	brne	.-8      	; 0x3308 <main+0x1746>
	if(osc1NoteSync != false)
    3310:	80 91 72 05 	lds	r24, 0x0572
    3314:	81 11       	cpse	r24, r1
    3316:	4f c4       	rjmp	.+2206   	; 0x3bb6 <main+0x1ff4>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3318:	8f e4       	ldi	r24, 0x4F	; 79
    331a:	96 e4       	ldi	r25, 0x46	; 70
    331c:	a6 e4       	ldi	r26, 0x46	; 70
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	8f 83       	std	Y+7, r24	; 0x07
    3322:	98 87       	std	Y+8, r25	; 0x08
    3324:	a9 87       	std	Y+9, r26	; 0x09
    3326:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    3328:	d5 01       	movw	r26, r10
    332a:	0d 90       	ld	r0, X+
    332c:	00 20       	and	r0, r0
    332e:	e9 f7       	brne	.-6      	; 0x332a <main+0x1768>
    3330:	11 97       	sbiw	r26, 0x01	; 1
    3332:	88 e0       	ldi	r24, 0x08	; 8
    3334:	e2 e4       	ldi	r30, 0x42	; 66
    3336:	f1 e0       	ldi	r31, 0x01	; 1
    3338:	01 90       	ld	r0, Z+
    333a:	0d 92       	st	X+, r0
    333c:	8a 95       	dec	r24
    333e:	e1 f7       	brne	.-8      	; 0x3338 <main+0x1776>
	writeLine(5, buf);
    3340:	b5 01       	movw	r22, r10
    3342:	85 e0       	ldi	r24, 0x05	; 5
    3344:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    3348:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    334c:	5d 9a       	sbi	0x0b, 5	; 11
    334e:	c6 ce       	rjmp	.-628    	; 0x30dc <main+0x151a>
    3350:	5d 9a       	sbi	0x0b, 5	; 11
    3352:	bf ce       	rjmp	.-642    	; 0x30d2 <main+0x1510>
    3354:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3356:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3358:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    335a:	25 ff       	sbrs	r18, 5
    335c:	a5 ce       	rjmp	.-694    	; 0x30a8 <main+0x14e6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    335e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3360:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3362:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3364:	24 ff       	sbrs	r18, 4
    3366:	a5 ce       	rjmp	.-694    	; 0x30b2 <main+0x14f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3368:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    336a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    336c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    336e:	23 ff       	sbrs	r18, 3
    3370:	a5 ce       	rjmp	.-694    	; 0x30bc <main+0x14fa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3372:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3374:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3376:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3378:	22 ff       	sbrs	r18, 2
    337a:	a5 ce       	rjmp	.-694    	; 0x30c6 <main+0x1504>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    337c:	5d 9a       	sbi	0x0b, 5	; 11
    337e:	a4 ce       	rjmp	.-696    	; 0x30c8 <main+0x1506>
    3380:	5d 9a       	sbi	0x0b, 5	; 11
    3382:	89 ce       	rjmp	.-750    	; 0x3096 <main+0x14d4>
			{
				menuChange[MENU_OSC2][3] = 1;
				updateADC[3] = false;
			}
			
		if(menuChange[MENU_OSC2][3] != 0)
    3384:	80 91 15 05 	lds	r24, 0x0515
    3388:	88 23       	and	r24, r24
    338a:	09 f4       	brne	.+2      	; 0x338e <main+0x17cc>
    338c:	1a cb       	rjmp	.-2508   	; 0x29c2 <main+0xe00>
    338e:	80 91 96 05 	lds	r24, 0x0596
    3392:	90 91 97 05 	lds	r25, 0x0597
		{
				if(adcValue[3] < 146)
    3396:	82 39       	cpi	r24, 0x92	; 146
    3398:	91 05       	cpc	r25, r1
    339a:	0c f4       	brge	.+2      	; 0x339e <main+0x17dc>
    339c:	0d cb       	rjmp	.-2534   	; 0x29b8 <main+0xdf6>
						osc2WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC2][3] = 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    339e:	84 32       	cpi	r24, 0x24	; 36
    33a0:	a1 e0       	ldi	r26, 0x01	; 1
    33a2:	9a 07       	cpc	r25, r26
    33a4:	0c f0       	brlt	.+2      	; 0x33a8 <main+0x17e6>
    33a6:	3b c3       	rjmp	.+1654   	; 0x3a1e <main+0x1e5c>
				{
					if(osc2WaveForm != WAVE_TRI)
    33a8:	80 91 02 01 	lds	r24, 0x0102
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <main+0x17f0>
    33b0:	08 cb       	rjmp	.-2544   	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_TRI;
    33b2:	80 92 02 01 	sts	0x0102, r8
						menuKnobPos[MENU_OSC2][3] = 219;
    33b6:	8b ed       	ldi	r24, 0xDB	; 219
    33b8:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc2WaveForm != WAVE_FLAT)
					{
						osc2WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    33ba:	90 93 35 05 	sts	0x0535, r25
    33be:	80 93 34 05 	sts	0x0534, r24

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    33c2:	87 e0       	ldi	r24, 0x07	; 7
    33c4:	e8 e1       	ldi	r30, 0x18	; 24
    33c6:	f1 e0       	ldi	r31, 0x01	; 1
    33c8:	d5 01       	movw	r26, r10
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	8a 95       	dec	r24
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <main+0x1808>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    33d2:	80 91 02 01 	lds	r24, 0x0102
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	84 58       	subi	r24, 0x84	; 132
    33de:	99 4f       	sbci	r25, 0xF9	; 249
    33e0:	fc 01       	movw	r30, r24
    33e2:	65 91       	lpm	r22, Z+
    33e4:	74 91       	lpm	r23, Z
    33e6:	51 01       	movw	r10, r2
    33e8:	81 2f       	mov	r24, r17
    33ea:	99 2d       	mov	r25, r9
    33ec:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "       ");
    33f0:	d1 01       	movw	r26, r2
    33f2:	0d 90       	ld	r0, X+
    33f4:	00 20       	and	r0, r0
    33f6:	e9 f7       	brne	.-6      	; 0x33f2 <main+0x1830>
    33f8:	11 97       	sbiw	r26, 0x01	; 1
    33fa:	88 e0       	ldi	r24, 0x08	; 8
    33fc:	e2 e4       	ldi	r30, 0x42	; 66
    33fe:	f1 e0       	ldi	r31, 0x01	; 1
    3400:	01 90       	ld	r0, Z+
    3402:	0d 92       	st	X+, r0
    3404:	8a 95       	dec	r24
    3406:	e1 f7       	brne	.-8      	; 0x3400 <main+0x183e>
	writeLine(2, buf);	
    3408:	61 2f       	mov	r22, r17
    340a:	79 2d       	mov	r23, r9
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    3412:	d7 ca       	rjmp	.-2642   	; 0x29c2 <main+0xe00>
			{
				menuChange[MENU_OSC1][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
    3414:	80 91 11 05 	lds	r24, 0x0511
    3418:	88 23       	and	r24, r24
    341a:	09 f4       	brne	.+2      	; 0x341e <main+0x185c>
    341c:	45 cc       	rjmp	.-1910   	; 0x2ca8 <main+0x10e6>
    341e:	80 91 96 05 	lds	r24, 0x0596
    3422:	90 91 97 05 	lds	r25, 0x0597
			{
				if(adcValue[3] < 146)
    3426:	82 39       	cpi	r24, 0x92	; 146
    3428:	91 05       	cpc	r25, r1
    342a:	0c f4       	brge	.+2      	; 0x342e <main+0x186c>
    342c:	39 cc       	rjmp	.-1934   	; 0x2ca0 <main+0x10de>
						osc1WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC1][3] = 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    342e:	84 32       	cpi	r24, 0x24	; 36
    3430:	a1 e0       	ldi	r26, 0x01	; 1
    3432:	9a 07       	cpc	r25, r26
    3434:	0c f0       	brlt	.+2      	; 0x3438 <main+0x1876>
    3436:	04 c3       	rjmp	.+1544   	; 0x3a40 <main+0x1e7e>
				{
					if(osc1WaveForm != WAVE_TRI)
    3438:	80 91 03 01 	lds	r24, 0x0103
    343c:	81 30       	cpi	r24, 0x01	; 1
    343e:	09 f4       	brne	.+2      	; 0x3442 <main+0x1880>
    3440:	33 cc       	rjmp	.-1946   	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_TRI;
    3442:	80 92 03 01 	sts	0x0103, r8
						menuKnobPos[MENU_OSC1][3] = 219;
    3446:	8b ed       	ldi	r24, 0xDB	; 219
    3448:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc1WaveForm != WAVE_FLAT)
					{
						osc1WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    344a:	90 93 2d 05 	sts	0x052D, r25
    344e:	80 93 2c 05 	sts	0x052C, r24

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3452:	87 e0       	ldi	r24, 0x07	; 7
    3454:	e8 e1       	ldi	r30, 0x18	; 24
    3456:	f1 e0       	ldi	r31, 0x01	; 1
    3458:	d5 01       	movw	r26, r10
    345a:	01 90       	ld	r0, Z+
    345c:	0d 92       	st	X+, r0
    345e:	8a 95       	dec	r24
    3460:	e1 f7       	brne	.-8      	; 0x345a <main+0x1898>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3462:	80 91 03 01 	lds	r24, 0x0103
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	84 58       	subi	r24, 0x84	; 132
    346e:	99 4f       	sbci	r25, 0xF9	; 249
    3470:	fc 01       	movw	r30, r24
    3472:	65 91       	lpm	r22, Z+
    3474:	74 91       	lpm	r23, Z
    3476:	51 01       	movw	r10, r2
    3478:	81 2f       	mov	r24, r17
    347a:	99 2d       	mov	r25, r9
    347c:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "       ");
    3480:	d1 01       	movw	r26, r2
    3482:	0d 90       	ld	r0, X+
    3484:	00 20       	and	r0, r0
    3486:	e9 f7       	brne	.-6      	; 0x3482 <main+0x18c0>
    3488:	11 97       	sbiw	r26, 0x01	; 1
    348a:	88 e0       	ldi	r24, 0x08	; 8
    348c:	e2 e4       	ldi	r30, 0x42	; 66
    348e:	f1 e0       	ldi	r31, 0x01	; 1
    3490:	01 90       	ld	r0, Z+
    3492:	0d 92       	st	X+, r0
    3494:	8a 95       	dec	r24
    3496:	e1 f7       	brne	.-8      	; 0x3490 <main+0x18ce>
	writeLine(2, buf);	
    3498:	61 2f       	mov	r22, r17
    349a:	79 2d       	mov	r23, r9
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    34a2:	02 cc       	rjmp	.-2044   	; 0x2ca8 <main+0x10e6>
			{
				menuChange[MENU_LFO][3] = 1;
				updateADC[3] = false;
			}
						
			if(menuChange[MENU_LFO][3] != 0)
    34a4:	80 91 19 05 	lds	r24, 0x0519
    34a8:	88 23       	and	r24, r24
    34aa:	11 f4       	brne	.+4      	; 0x34b0 <main+0x18ee>
    34ac:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
    34b0:	80 91 96 05 	lds	r24, 0x0596
    34b4:	90 91 97 05 	lds	r25, 0x0597
			{
				if(adcValue[3] < 171)
    34b8:	8b 3a       	cpi	r24, 0xAB	; 171
    34ba:	91 05       	cpc	r25, r1
    34bc:	14 f4       	brge	.+4      	; 0x34c2 <main+0x1900>
    34be:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <main+0x912>
						lfoWaveForm = WAVE_SINE;
						menuKnobPos[MENU_LFO][0] = 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 341)
    34c2:	85 35       	cpi	r24, 0x55	; 85
    34c4:	a1 e0       	ldi	r26, 0x01	; 1
    34c6:	9a 07       	cpc	r25, r26
    34c8:	0c f0       	brlt	.+2      	; 0x34cc <main+0x190a>
    34ca:	66 c2       	rjmp	.+1228   	; 0x3998 <main+0x1dd6>
				{
					if(lfoWaveForm != WAVE_TRI)
    34cc:	80 91 06 01 	lds	r24, 0x0106
    34d0:	81 30       	cpi	r24, 0x01	; 1
    34d2:	11 f4       	brne	.+4      	; 0x34d8 <main+0x1916>
    34d4:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
					{
						lfoWaveForm = WAVE_TRI;
    34d8:	80 92 06 01 	sts	0x0106, r8
						menuKnobPos[MENU_LFO][0] = 171 + 85;
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	91 e0       	ldi	r25, 0x01	; 1
    34e0:	90 93 37 05 	sts	0x0537, r25
    34e4:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    34e8:	87 e0       	ldi	r24, 0x07	; 7
    34ea:	e8 e1       	ldi	r30, 0x18	; 24
    34ec:	f1 e0       	ldi	r31, 0x01	; 1
    34ee:	d5 01       	movw	r26, r10
    34f0:	01 90       	ld	r0, Z+
    34f2:	0d 92       	st	X+, r0
    34f4:	8a 95       	dec	r24
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <main+0x192e>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    34f8:	ee e7       	ldi	r30, 0x7E	; 126
    34fa:	f6 e0       	ldi	r31, 0x06	; 6
    34fc:	65 91       	lpm	r22, Z+
    34fe:	74 91       	lpm	r23, Z
    3500:	51 01       	movw	r10, r2
    3502:	81 2f       	mov	r24, r17
    3504:	99 2d       	mov	r25, r9
    3506:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    350a:	d1 01       	movw	r26, r2
    350c:	0d 90       	ld	r0, X+
    350e:	00 20       	and	r0, r0
    3510:	e9 f7       	brne	.-6      	; 0x350c <main+0x194a>
    3512:	11 97       	sbiw	r26, 0x01	; 1
    3514:	85 e0       	ldi	r24, 0x05	; 5
    3516:	e5 e4       	ldi	r30, 0x45	; 69
    3518:	f1 e0       	ldi	r31, 0x01	; 1
    351a:	01 90       	ld	r0, Z+
    351c:	0d 92       	st	X+, r0
    351e:	8a 95       	dec	r24
    3520:	e1 f7       	brne	.-8      	; 0x351a <main+0x1958>
	writeLine(2, buf);
    3522:	61 2f       	mov	r22, r17
    3524:	79 2d       	mov	r23, r9
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    352c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
		{
			if(btnPressed[MENU_OSC2])
			btnPressed[MENU_OSC2] = false;
					
			if(!btnCanPress[MENU_OSC2])
			btnLastPressed[MENU_OSC2]++;
    3530:	90 91 f1 04 	lds	r25, 0x04F1
    3534:	9f 5f       	subi	r25, 0xFF	; 255
    3536:	90 93 f1 04 	sts	0x04F1, r25
    353a:	99 c9       	rjmp	.-3278   	; 0x286e <main+0xcac>
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
			{		
				btnLastPressed[MENU_OSC1] = 0;
    353c:	10 92 f0 04 	sts	0x04F0, r1
				
				menuSelect = MENU_OSC1;
    3540:	10 92 56 05 	sts	0x0556, r1

				menuChange[menuSelect][0] = 0;
    3544:	10 92 0e 05 	sts	0x050E, r1
				menuChange[menuSelect][1] = 0;
    3548:	10 92 0f 05 	sts	0x050F, r1
				menuChange[menuSelect][2] = 0;
    354c:	10 92 10 05 	sts	0x0510, r1
				menuChange[menuSelect][3] = 0;
    3550:	10 92 11 05 	sts	0x0511, r1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    3554:	eb e0       	ldi	r30, 0x0B	; 11
    3556:	f1 e0       	ldi	r31, 0x01	; 1
    3558:	61 96       	adiw	r28, 0x11	; 17
    355a:	af ad       	ldd	r26, Y+63	; 0x3f
    355c:	61 97       	sbiw	r28, 0x11	; 17
    355e:	62 96       	adiw	r28, 0x12	; 18
    3560:	bf ad       	ldd	r27, Y+63	; 0x3f
    3562:	62 97       	sbiw	r28, 0x12	; 18
    3564:	87 2d       	mov	r24, r7
    3566:	01 90       	ld	r0, Z+
    3568:	0d 92       	st	X+, r0
    356a:	8a 95       	dec	r24
    356c:	e1 f7       	brne	.-8      	; 0x3566 <main+0x19a4>
	writeLine(0, buf);
    356e:	be 01       	movw	r22, r28
    3570:	6b 5e       	subi	r22, 0xEB	; 235
    3572:	7f 4f       	sbci	r23, 0xFF	; 255
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    357a:	e8 e1       	ldi	r30, 0x18	; 24
    357c:	f1 e0       	ldi	r31, 0x01	; 1
    357e:	d5 01       	movw	r26, r10
    3580:	8f 2d       	mov	r24, r15
    3582:	01 90       	ld	r0, Z+
    3584:	0d 92       	st	X+, r0
    3586:	8a 95       	dec	r24
    3588:	e1 f7       	brne	.-8      	; 0x3582 <main+0x19c0>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    358a:	e0 91 03 01 	lds	r30, 0x0103
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	ee 0f       	add	r30, r30
    3592:	ff 1f       	adc	r31, r31
    3594:	e4 58       	subi	r30, 0x84	; 132
    3596:	f9 4f       	sbci	r31, 0xF9	; 249
    3598:	65 91       	lpm	r22, Z+
    359a:	74 91       	lpm	r23, Z
    359c:	a1 2e       	mov	r10, r17
    359e:	b9 2c       	mov	r11, r9
    35a0:	81 2f       	mov	r24, r17
    35a2:	99 2d       	mov	r25, r9
    35a4:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "       ");
    35a8:	d1 01       	movw	r26, r2
    35aa:	0d 90       	ld	r0, X+
    35ac:	00 20       	and	r0, r0
    35ae:	e9 f7       	brne	.-6      	; 0x35aa <main+0x19e8>
    35b0:	11 97       	sbiw	r26, 0x01	; 1
    35b2:	e2 e4       	ldi	r30, 0x42	; 66
    35b4:	f1 e0       	ldi	r31, 0x01	; 1
    35b6:	80 2f       	mov	r24, r16
    35b8:	01 90       	ld	r0, Z+
    35ba:	0d 92       	st	X+, r0
    35bc:	8a 95       	dec	r24
    35be:	e1 f7       	brne	.-8      	; 0x35b8 <main+0x19f6>
	writeLine(2, buf);	
    35c0:	61 2f       	mov	r22, r17
    35c2:	79 2d       	mov	r23, r9
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    35ca:	ef e1       	ldi	r30, 0x1F	; 31
    35cc:	f1 e0       	ldi	r31, 0x01	; 1
    35ce:	a1 2f       	mov	r26, r17
    35d0:	b9 2d       	mov	r27, r9
    35d2:	80 2f       	mov	r24, r16
    35d4:	01 90       	ld	r0, Z+
    35d6:	0d 92       	st	X+, r0
    35d8:	8a 95       	dec	r24
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <main+0x1a12>
	sprintf(buf + 7, "%d", osc1CentsShift);
    35dc:	20 91 7b 05 	lds	r18, 0x057B
    35e0:	82 2f       	mov	r24, r18
    35e2:	99 27       	eor	r25, r25
    35e4:	87 fd       	sbrc	r24, 7
    35e6:	90 95       	com	r25
    35e8:	9f 93       	push	r25
    35ea:	2f 93       	push	r18
    35ec:	a8 e0       	ldi	r26, 0x08	; 8
    35ee:	b1 e0       	ldi	r27, 0x01	; 1
    35f0:	bf 93       	push	r27
    35f2:	af 93       	push	r26
    35f4:	3b ad       	ldd	r19, Y+59	; 0x3b
    35f6:	3f 93       	push	r19
    35f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    35fa:	8f 93       	push	r24
    35fc:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    3600:	d1 01       	movw	r26, r2
    3602:	0d 90       	ld	r0, X+
    3604:	00 20       	and	r0, r0
    3606:	e9 f7       	brne	.-6      	; 0x3602 <main+0x1a40>
    3608:	11 97       	sbiw	r26, 0x01	; 1
    360a:	e2 e4       	ldi	r30, 0x42	; 66
    360c:	f1 e0       	ldi	r31, 0x01	; 1
    360e:	80 2f       	mov	r24, r16
    3610:	01 90       	ld	r0, Z+
    3612:	0d 92       	st	X+, r0
    3614:	8a 95       	dec	r24
    3616:	e1 f7       	brne	.-8      	; 0x3610 <main+0x1a4e>
	writeLine(4, buf);
    3618:	61 2f       	mov	r22, r17
    361a:	79 2d       	mov	r23, r9
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    3622:	e7 e2       	ldi	r30, 0x27	; 39
    3624:	f1 e0       	ldi	r31, 0x01	; 1
    3626:	a1 2f       	mov	r26, r17
    3628:	b9 2d       	mov	r27, r9
    362a:	80 2f       	mov	r24, r16
    362c:	01 90       	ld	r0, Z+
    362e:	0d 92       	st	X+, r0
    3630:	8a 95       	dec	r24
    3632:	e1 f7       	brne	.-8      	; 0x362c <main+0x1a6a>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3634:	20 91 7a 05 	lds	r18, 0x057A
    3638:	82 2f       	mov	r24, r18
    363a:	99 27       	eor	r25, r25
    363c:	87 fd       	sbrc	r24, 7
    363e:	90 95       	com	r25
    3640:	9f 93       	push	r25
    3642:	2f 93       	push	r18
    3644:	a8 e0       	ldi	r26, 0x08	; 8
    3646:	b1 e0       	ldi	r27, 0x01	; 1
    3648:	bf 93       	push	r27
    364a:	af 93       	push	r26
    364c:	3b ad       	ldd	r19, Y+59	; 0x3b
    364e:	3f 93       	push	r19
    3650:	8a ad       	ldd	r24, Y+58	; 0x3a
    3652:	8f 93       	push	r24
    3654:	0e 94 18 22 	call	0x4430	; 0x4430 <sprintf>
	strcat(buf, "       ");
    3658:	d1 01       	movw	r26, r2
    365a:	0d 90       	ld	r0, X+
    365c:	00 20       	and	r0, r0
    365e:	e9 f7       	brne	.-6      	; 0x365a <main+0x1a98>
    3660:	11 97       	sbiw	r26, 0x01	; 1
    3662:	e2 e4       	ldi	r30, 0x42	; 66
    3664:	f1 e0       	ldi	r31, 0x01	; 1
    3666:	80 2f       	mov	r24, r16
    3668:	01 90       	ld	r0, Z+
    366a:	0d 92       	st	X+, r0
    366c:	8a 95       	dec	r24
    366e:	e1 f7       	brne	.-8      	; 0x3668 <main+0x1aa6>
	writeLine(3, buf);
    3670:	61 2f       	mov	r22, r17
    3672:	79 2d       	mov	r23, r9
    3674:	83 e0       	ldi	r24, 0x03	; 3
    3676:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    367a:	ef e2       	ldi	r30, 0x2F	; 47
    367c:	f1 e0       	ldi	r31, 0x01	; 1
    367e:	a1 2f       	mov	r26, r17
    3680:	b9 2d       	mov	r27, r9
    3682:	8f 2d       	mov	r24, r15
    3684:	01 90       	ld	r0, Z+
    3686:	0d 92       	st	X+, r0
    3688:	8a 95       	dec	r24
    368a:	e1 f7       	brne	.-8      	; 0x3684 <main+0x1ac2>
	if(osc1NoteSync != false)
    368c:	80 91 72 05 	lds	r24, 0x0572
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	81 11       	cpse	r24, r1
    369c:	e9 c1       	rjmp	.+978    	; 0x3a70 <main+0x1eae>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    369e:	8f e4       	ldi	r24, 0x4F	; 79
    36a0:	96 e4       	ldi	r25, 0x46	; 70
    36a2:	a6 e4       	ldi	r26, 0x46	; 70
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	8f 83       	std	Y+7, r24	; 0x07
    36a8:	98 87       	std	Y+8, r25	; 0x08
    36aa:	a9 87       	std	Y+9, r26	; 0x09
    36ac:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    36ae:	d1 01       	movw	r26, r2
    36b0:	0d 90       	ld	r0, X+
    36b2:	00 20       	and	r0, r0
    36b4:	e9 f7       	brne	.-6      	; 0x36b0 <main+0x1aee>
    36b6:	11 97       	sbiw	r26, 0x01	; 1
    36b8:	e2 e4       	ldi	r30, 0x42	; 66
    36ba:	f1 e0       	ldi	r31, 0x01	; 1
    36bc:	80 2f       	mov	r24, r16
    36be:	01 90       	ld	r0, Z+
    36c0:	0d 92       	st	X+, r0
    36c2:	8a 95       	dec	r24
    36c4:	e1 f7       	brne	.-8      	; 0x36be <main+0x1afc>
	writeLine(5, buf);
    36c6:	61 2f       	mov	r22, r17
    36c8:	79 2d       	mov	r23, r9
    36ca:	85 e0       	ldi	r24, 0x05	; 5
    36cc:	0e 94 95 03 	call	0x72a	; 0x72a <_Z9writeLinehPc>
    36d0:	80 91 56 05 	lds	r24, 0x0556
    36d4:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <main+0x19e>
					{
						osc1NoteSync = false;
						osc1MenuSyncUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    36d8:	8f 3f       	cpi	r24, 0xFF	; 255
    36da:	93 40       	sbci	r25, 0x03	; 3
    36dc:	14 f0       	brlt	.+4      	; 0x36e2 <main+0x1b20>
    36de:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
				{
					if(osc1NoteSync != true)
    36e2:	80 91 72 05 	lds	r24, 0x0572
    36e6:	81 11       	cpse	r24, r1
    36e8:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc1NoteSync = true;
    36ec:	80 92 72 05 	sts	0x0572, r8
    36f0:	07 ce       	rjmp	.-1010   	; 0x3300 <main+0x173e>
						osc2OctaveShift = -2;
						menuKnobPos[MENU_OSC2][0] = 102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 410)
    36f2:	8a 39       	cpi	r24, 0x9A	; 154
    36f4:	a1 e0       	ldi	r26, 0x01	; 1
    36f6:	9a 07       	cpc	r25, r26
    36f8:	0c f0       	brlt	.+2      	; 0x36fc <main+0x1b3a>
    36fa:	6d c1       	rjmp	.+730    	; 0x39d6 <main+0x1e14>
				{
					if(osc2OctaveShift != -1)
    36fc:	80 91 63 05 	lds	r24, 0x0563
    3700:	8f 3f       	cpi	r24, 0xFF	; 255
    3702:	11 f4       	brne	.+4      	; 0x3708 <main+0x1b46>
    3704:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc2OctaveShift = -1;
    3708:	2f ef       	ldi	r18, 0xFF	; 255
    370a:	20 93 63 05 	sts	0x0563, r18
						menuKnobPos[MENU_OSC2][0] = 205+102;
    370e:	83 e3       	ldi	r24, 0x33	; 51
    3710:	91 e0       	ldi	r25, 0x01	; 1
    3712:	90 93 2f 05 	sts	0x052F, r25
    3716:	80 93 2e 05 	sts	0x052E, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    371a:	86 e0       	ldi	r24, 0x06	; 6
    371c:	e7 e5       	ldi	r30, 0x57	; 87
    371e:	f1 e0       	ldi	r31, 0x01	; 1
    3720:	d5 01       	movw	r26, r10
    3722:	01 90       	ld	r0, Z+
    3724:	0d 92       	st	X+, r0
    3726:	8a 95       	dec	r24
    3728:	e1 f7       	brne	.-8      	; 0x3722 <main+0x1b60>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    372a:	2f 93       	push	r18
    372c:	0b ca       	rjmp	.-3050   	; 0x2b44 <main+0xf82>
					{
						lfoRoute = ROUTE_OSC1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 186)
    372e:	8a 3b       	cpi	r24, 0xBA	; 186
    3730:	91 05       	cpc	r25, r1
    3732:	fc f4       	brge	.+62     	; 0x3772 <main+0x1bb0>
				{
					if(lfoRoute != ROUTE_OSC2)
    3734:	80 91 59 05 	lds	r24, 0x0559
    3738:	81 30       	cpi	r24, 0x01	; 1
    373a:	11 f4       	brne	.+4      	; 0x3740 <main+0x1b7e>
    373c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_OSC2;
    3740:	80 92 59 05 	sts	0x0559, r8

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3744:	87 e0       	ldi	r24, 0x07	; 7
    3746:	e6 e3       	ldi	r30, 0x36	; 54
    3748:	f1 e0       	ldi	r31, 0x01	; 1
    374a:	d5 01       	movw	r26, r10
    374c:	01 90       	ld	r0, Z+
    374e:	0d 92       	st	X+, r0
    3750:	8a 95       	dec	r24
    3752:	e1 f7       	brne	.-8      	; 0x374c <main+0x1b8a>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3754:	ea e6       	ldi	r30, 0x6A	; 106
    3756:	f6 e0       	ldi	r31, 0x06	; 6
    3758:	2d c8       	rjmp	.-4006   	; 0x27b4 <main+0xbf2>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <main+0x832>
			{
				menuChange[MENU_LFO][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	0c 94 19 12 	jmp	0x2432	; 0x2432 <main+0x870>
			{
				menuChange[MENU_LFO][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	0c 94 38 12 	jmp	0x2470	; 0x2470 <main+0x8ae>
					{
						lfoRoute = ROUTE_OSC2;
						lfoMenuRouteUpdate();
					}					
				}
				else if(adcValue[0] < 279)
    3772:	87 31       	cpi	r24, 0x17	; 23
    3774:	a1 e0       	ldi	r26, 0x01	; 1
    3776:	9a 07       	cpc	r25, r26
    3778:	0c f0       	brlt	.+2      	; 0x377c <main+0x1bba>
    377a:	ce c1       	rjmp	.+924    	; 0x3b18 <main+0x1f56>
				{
					if(lfoRoute != ROUTE_CENTS1)
    377c:	80 91 59 05 	lds	r24, 0x0559
    3780:	82 30       	cpi	r24, 0x02	; 2
    3782:	11 f4       	brne	.+4      	; 0x3788 <main+0x1bc6>
    3784:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_CENTS1;
    3788:	82 e0       	ldi	r24, 0x02	; 2
    378a:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    378e:	87 e0       	ldi	r24, 0x07	; 7
    3790:	e6 e3       	ldi	r30, 0x36	; 54
    3792:	f1 e0       	ldi	r31, 0x01	; 1
    3794:	d5 01       	movw	r26, r10
    3796:	01 90       	ld	r0, Z+
    3798:	0d 92       	st	X+, r0
    379a:	8a 95       	dec	r24
    379c:	e1 f7       	brne	.-8      	; 0x3796 <main+0x1bd4>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    379e:	ec e6       	ldi	r30, 0x6C	; 108
    37a0:	f6 e0       	ldi	r31, 0x06	; 6
    37a2:	65 91       	lpm	r22, Z+
    37a4:	74 91       	lpm	r23, Z
    37a6:	51 01       	movw	r10, r2
    37a8:	81 2f       	mov	r24, r17
    37aa:	99 2d       	mov	r25, r9
    37ac:	0e 94 0d 22 	call	0x441a	; 0x441a <strcat_P>
	strcat(buf, "    ");
    37b0:	d1 01       	movw	r26, r2
    37b2:	0d 90       	ld	r0, X+
    37b4:	00 20       	and	r0, r0
    37b6:	e9 f7       	brne	.-6      	; 0x37b2 <main+0x1bf0>
    37b8:	11 97       	sbiw	r26, 0x01	; 1
    37ba:	85 e0       	ldi	r24, 0x05	; 5
    37bc:	e5 e4       	ldi	r30, 0x45	; 69
    37be:	f1 e0       	ldi	r31, 0x01	; 1
    37c0:	01 90       	ld	r0, Z+
    37c2:	0d 92       	st	X+, r0
    37c4:	8a 95       	dec	r24
    37c6:	e1 f7       	brne	.-8      	; 0x37c0 <main+0x1bfe>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    37c8:	8c e0       	ldi	r24, 0x0C	; 12
    37ca:	e1 2f       	mov	r30, r17
    37cc:	f9 2d       	mov	r31, r9
    37ce:	de 01       	movw	r26, r28
    37d0:	55 96       	adiw	r26, 0x15	; 21
    37d2:	01 90       	ld	r0, Z+
    37d4:	0d 92       	st	X+, r0
    37d6:	8a 95       	dec	r24
    37d8:	e1 f7       	brne	.-8      	; 0x37d2 <main+0x1c10>
	buf[12] = '\0';
    37da:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    37dc:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    37de:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37e0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    37e2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    37e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    37e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    37ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    37ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    37f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    37f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    37f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    37fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    37fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    37fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3800:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3802:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3804:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3806:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3808:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    380a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    380c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    380e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3810:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3812:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    3814:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3816:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3818:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    381a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    381c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    381e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3820:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3822:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3824:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3826:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3828:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    382a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    382c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    382e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3830:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3832:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3834:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3836:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3838:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    383a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    383c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    383e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3840:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3842:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3844:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3846:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3848:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    384a:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    384c:	8d 89       	ldd	r24, Y+21	; 0x15
    384e:	88 23       	and	r24, r24
    3850:	11 f4       	brne	.+4      	; 0x3856 <main+0x1c94>
    3852:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
    3856:	de 01       	movw	r26, r28
    3858:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    385a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    385c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    385e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3860:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3862:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3864:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3866:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3868:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    386a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    386c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    386e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3870:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3872:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3874:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3876:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3878:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    387a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    387c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    387e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3880:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3882:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3884:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3886:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3888:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    388a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    388c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    388e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3890:	44 9a       	sbi	0x08, 4	; 8
    3892:	99 27       	eor	r25, r25
    3894:	87 fd       	sbrc	r24, 7
    3896:	90 95       	com	r25
    3898:	80 97       	sbiw	r24, 0x20	; 32
    389a:	fc 01       	movw	r30, r24
    389c:	ee 0f       	add	r30, r30
    389e:	ff 1f       	adc	r31, r31
    38a0:	ee 0f       	add	r30, r30
    38a2:	ff 1f       	adc	r31, r31
    38a4:	e8 0f       	add	r30, r24
    38a6:	f9 1f       	adc	r31, r25
    38a8:	e0 5f       	subi	r30, 0xF0	; 240
    38aa:	fc 4f       	sbci	r31, 0xFC	; 252
    38ac:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    38ae:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    38b0:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    38b2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38b4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38b6:	82 2f       	mov	r24, r18
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	88 0f       	add	r24, r24
    38bc:	89 2f       	mov	r24, r25
    38be:	88 1f       	adc	r24, r24
    38c0:	99 0b       	sbc	r25, r25
    38c2:	89 2b       	or	r24, r25
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <main+0x1d06>
    38c6:	58 c0       	rjmp	.+176    	; 0x3978 <main+0x1db6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38cc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38ce:	26 fd       	sbrc	r18, 6
    38d0:	51 c0       	rjmp	.+162    	; 0x3974 <main+0x1db2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38d6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38d8:	25 fd       	sbrc	r18, 5
    38da:	4a c0       	rjmp	.+148    	; 0x3970 <main+0x1dae>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38e0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38e2:	24 fd       	sbrc	r18, 4
    38e4:	43 c0       	rjmp	.+134    	; 0x396c <main+0x1daa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38e6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38ea:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38ec:	23 fd       	sbrc	r18, 3
    38ee:	3c c0       	rjmp	.+120    	; 0x3968 <main+0x1da6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38f4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    38f6:	22 fd       	sbrc	r18, 2
    38f8:	35 c0       	rjmp	.+106    	; 0x3964 <main+0x1da2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    38fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    38fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    38fe:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3900:	21 fd       	sbrc	r18, 1
    3902:	2e c0       	rjmp	.+92     	; 0x3960 <main+0x1d9e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3904:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3906:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3908:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    390a:	20 fd       	sbrc	r18, 0
    390c:	27 c0       	rjmp	.+78     	; 0x395c <main+0x1d9a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    390e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3910:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3912:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3914:	44 9a       	sbi	0x08, 4	; 8
    3916:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    3918:	51 f6       	brne	.-108    	; 0x38ae <main+0x1cec>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    391a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    391c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    391e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3920:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3922:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3924:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3926:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3928:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    392a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    392c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    392e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3930:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3932:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3934:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3936:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3938:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    393a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    393c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    393e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3940:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3942:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3944:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3946:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3948:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    394a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    394c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    394e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3950:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3952:	8d 91       	ld	r24, X+
    3954:	81 11       	cpse	r24, r1
    3956:	81 cf       	rjmp	.-254    	; 0x385a <main+0x1c98>
    3958:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    395c:	5d 9a       	sbi	0x0b, 5	; 11
    395e:	d8 cf       	rjmp	.-80     	; 0x3910 <main+0x1d4e>
    3960:	5d 9a       	sbi	0x0b, 5	; 11
    3962:	d1 cf       	rjmp	.-94     	; 0x3906 <main+0x1d44>
    3964:	5d 9a       	sbi	0x0b, 5	; 11
    3966:	ca cf       	rjmp	.-108    	; 0x38fc <main+0x1d3a>
    3968:	5d 9a       	sbi	0x0b, 5	; 11
    396a:	c3 cf       	rjmp	.-122    	; 0x38f2 <main+0x1d30>
    396c:	5d 9a       	sbi	0x0b, 5	; 11
    396e:	bc cf       	rjmp	.-136    	; 0x38e8 <main+0x1d26>
    3970:	5d 9a       	sbi	0x0b, 5	; 11
    3972:	b5 cf       	rjmp	.-150    	; 0x38de <main+0x1d1c>
    3974:	5d 9a       	sbi	0x0b, 5	; 11
    3976:	ae cf       	rjmp	.-164    	; 0x38d4 <main+0x1d12>
    3978:	5d 9a       	sbi	0x0b, 5	; 11
    397a:	a7 cf       	rjmp	.-178    	; 0x38ca <main+0x1d08>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
			{
				menuChange[MENU_LFO][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <main+0x8f6>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	22 c9       	rjmp	.-3516   	; 0x2bce <main+0x100c>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <main+0xd38>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
			{
				menuChange[MENU_OSC1][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	78 c9       	rjmp	.-3344   	; 0x2c88 <main+0x10c6>
						lfoWaveForm = WAVE_TRI;
						menuKnobPos[MENU_LFO][0] = 171 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 511)
    3998:	8f 3f       	cpi	r24, 0xFF	; 255
    399a:	b1 e0       	ldi	r27, 0x01	; 1
    399c:	9b 07       	cpc	r25, r27
    399e:	0c f0       	brlt	.+2      	; 0x39a2 <main+0x1de0>
    39a0:	d5 c0       	rjmp	.+426    	; 0x3b4c <main+0x1f8a>
				{
					if(lfoWaveForm != WAVE_LSAW)
    39a2:	80 91 06 01 	lds	r24, 0x0106
    39a6:	82 30       	cpi	r24, 0x02	; 2
    39a8:	11 f4       	brne	.+4      	; 0x39ae <main+0x1dec>
    39aa:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
					{
						lfoWaveForm = WAVE_LSAW;
    39ae:	82 e0       	ldi	r24, 0x02	; 2
    39b0:	80 93 06 01 	sts	0x0106, r24
						menuKnobPos[MENU_LFO][0] = 341 + 85;
    39b4:	8a ea       	ldi	r24, 0xAA	; 170
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	90 93 37 05 	sts	0x0537, r25
    39bc:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    39c0:	87 e0       	ldi	r24, 0x07	; 7
    39c2:	e8 e1       	ldi	r30, 0x18	; 24
    39c4:	f1 e0       	ldi	r31, 0x01	; 1
    39c6:	d5 01       	movw	r26, r10
    39c8:	01 90       	ld	r0, Z+
    39ca:	0d 92       	st	X+, r0
    39cc:	8a 95       	dec	r24
    39ce:	e1 f7       	brne	.-8      	; 0x39c8 <main+0x1e06>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    39d0:	e0 e8       	ldi	r30, 0x80	; 128
    39d2:	f6 e0       	ldi	r31, 0x06	; 6
    39d4:	93 cd       	rjmp	.-1242   	; 0x34fc <main+0x193a>
						osc2OctaveShift = -1;
						menuKnobPos[MENU_OSC2][0] = 205+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 615)
    39d6:	87 36       	cpi	r24, 0x67	; 103
    39d8:	a2 e0       	ldi	r26, 0x02	; 2
    39da:	9a 07       	cpc	r25, r26
    39dc:	0c f0       	brlt	.+2      	; 0x39e0 <main+0x1e1e>
    39de:	6c c0       	rjmp	.+216    	; 0x3ab8 <main+0x1ef6>
				{
					if(osc2OctaveShift != 0)
    39e0:	80 91 63 05 	lds	r24, 0x0563
    39e4:	88 23       	and	r24, r24
    39e6:	11 f4       	brne	.+4      	; 0x39ec <main+0x1e2a>
    39e8:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc2OctaveShift = 0;
    39ec:	10 92 63 05 	sts	0x0563, r1
						menuKnobPos[MENU_OSC2][0] = 410+102;
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	92 e0       	ldi	r25, 0x02	; 2
    39f4:	90 93 2f 05 	sts	0x052F, r25
    39f8:	80 93 2e 05 	sts	0x052E, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    39fc:	86 e0       	ldi	r24, 0x06	; 6
    39fe:	e7 e5       	ldi	r30, 0x57	; 87
    3a00:	f1 e0       	ldi	r31, 0x01	; 1
    3a02:	d5 01       	movw	r26, r10
    3a04:	01 90       	ld	r0, Z+
    3a06:	0d 92       	st	X+, r0
    3a08:	8a 95       	dec	r24
    3a0a:	e1 f7       	brne	.-8      	; 0x3a04 <main+0x1e42>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3a0c:	1f 92       	push	r1
    3a0e:	1f 92       	push	r1
    3a10:	9a c8       	rjmp	.-3788   	; 0x2b46 <main+0xf84>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
			{
				menuChange[MENU_OSC1][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	f9 c8       	rjmp	.-3598   	; 0x2c0a <main+0x1048>
			{
				menuChange[MENU_OSC1][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	14 c9       	rjmp	.-3544   	; 0x2c46 <main+0x1084>
						osc2WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC2][3] = 219;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3a1e:	86 3b       	cpi	r24, 0xB6	; 182
    3a20:	b1 e0       	ldi	r27, 0x01	; 1
    3a22:	9b 07       	cpc	r25, r27
    3a24:	0c f0       	brlt	.+2      	; 0x3a28 <main+0x1e66>
    3a26:	67 c0       	rjmp	.+206    	; 0x3af6 <main+0x1f34>
				{
					if(osc2WaveForm != WAVE_LSAW)
    3a28:	80 91 02 01 	lds	r24, 0x0102
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	11 f4       	brne	.+4      	; 0x3a34 <main+0x1e72>
    3a30:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_LSAW;
    3a34:	82 e0       	ldi	r24, 0x02	; 2
    3a36:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 365;
    3a3a:	8d e6       	ldi	r24, 0x6D	; 109
    3a3c:	91 e0       	ldi	r25, 0x01	; 1
    3a3e:	bd cc       	rjmp	.-1670   	; 0x33ba <main+0x17f8>
						osc1WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC1][3] = 219;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3a40:	86 3b       	cpi	r24, 0xB6	; 182
    3a42:	b1 e0       	ldi	r27, 0x01	; 1
    3a44:	9b 07       	cpc	r25, r27
    3a46:	0c f0       	brlt	.+2      	; 0x3a4a <main+0x1e88>
    3a48:	a0 c0       	rjmp	.+320    	; 0x3b8a <main+0x1fc8>
				{
					if(osc1WaveForm != WAVE_LSAW)
    3a4a:	80 91 03 01 	lds	r24, 0x0103
    3a4e:	82 30       	cpi	r24, 0x02	; 2
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <main+0x1e92>
    3a52:	2a c9       	rjmp	.-3500   	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_LSAW;
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 365;
    3a5a:	8d e6       	ldi	r24, 0x6D	; 109
    3a5c:	91 e0       	ldi	r25, 0x01	; 1
    3a5e:	f5 cc       	rjmp	.-1558   	; 0x344a <main+0x1888>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    3a60:	8f e4       	ldi	r24, 0x4F	; 79
    3a62:	9e e4       	ldi	r25, 0x4E	; 78
    3a64:	a0 e0       	ldi	r26, 0x00	; 0
    3a66:	89 87       	std	Y+9, r24	; 0x09
    3a68:	9a 87       	std	Y+10, r25	; 0x0a
    3a6a:	ab 87       	std	Y+11, r26	; 0x0b
    3a6c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <main+0x7c2>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    3a70:	8f e4       	ldi	r24, 0x4F	; 79
    3a72:	9e e4       	ldi	r25, 0x4E	; 78
    3a74:	a0 e0       	ldi	r26, 0x00	; 0
    3a76:	8f 83       	std	Y+7, r24	; 0x07
    3a78:	98 87       	std	Y+8, r25	; 0x08
    3a7a:	a9 87       	std	Y+9, r26	; 0x09
    3a7c:	18 ce       	rjmp	.-976    	; 0x36ae <main+0x1aec>
		{
				if(adcValue[3] < 146)
				{
					if(osc2WaveForm != WAVE_SINE)
					{
						osc2WaveForm = WAVE_SINE;
    3a7e:	10 92 02 01 	sts	0x0102, r1
						menuKnobPos[MENU_OSC2][3] = 73;
    3a82:	89 e4       	ldi	r24, 0x49	; 73
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	99 cc       	rjmp	.-1742   	; 0x33ba <main+0x17f8>
			{
				if(adcValue[3] < 146)
				{
					if(osc1WaveForm != WAVE_SINE)
					{
						osc1WaveForm = WAVE_SINE;
    3a88:	10 92 03 01 	sts	0x0103, r1
						menuKnobPos[MENU_OSC1][3] = 73;
    3a8c:	89 e4       	ldi	r24, 0x49	; 73
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	dc cc       	rjmp	.-1608   	; 0x344a <main+0x1888>
			{
				if(adcValue[3] < 171)
				{
					if(lfoWaveForm != WAVE_SINE)
					{
						lfoWaveForm = WAVE_SINE;
    3a92:	10 92 06 01 	sts	0x0106, r1
						menuKnobPos[MENU_LFO][0] = 85;
    3a96:	85 e5       	ldi	r24, 0x55	; 85
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	90 93 37 05 	sts	0x0537, r25
    3a9e:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3aa2:	87 e0       	ldi	r24, 0x07	; 7
    3aa4:	e8 e1       	ldi	r30, 0x18	; 24
    3aa6:	f1 e0       	ldi	r31, 0x01	; 1
    3aa8:	d5 01       	movw	r26, r10
    3aaa:	01 90       	ld	r0, Z+
    3aac:	0d 92       	st	X+, r0
    3aae:	8a 95       	dec	r24
    3ab0:	e1 f7       	brne	.-8      	; 0x3aaa <main+0x1ee8>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3ab2:	ec e7       	ldi	r30, 0x7C	; 124
    3ab4:	f6 e0       	ldi	r31, 0x06	; 6
    3ab6:	22 cd       	rjmp	.-1468   	; 0x34fc <main+0x193a>
						osc2OctaveShift = 0;
						menuKnobPos[MENU_OSC2][0] = 410+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 820)
    3ab8:	84 33       	cpi	r24, 0x34	; 52
    3aba:	a3 e0       	ldi	r26, 0x03	; 3
    3abc:	9a 07       	cpc	r25, r26
    3abe:	0c f0       	brlt	.+2      	; 0x3ac2 <main+0x1f00>
    3ac0:	91 c0       	rjmp	.+290    	; 0x3be4 <main+0x2022>
				{
					if(osc2OctaveShift != 1)
    3ac2:	80 91 63 05 	lds	r24, 0x0563
    3ac6:	81 30       	cpi	r24, 0x01	; 1
    3ac8:	11 f4       	brne	.+4      	; 0x3ace <main+0x1f0c>
    3aca:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc2OctaveShift = 1;
    3ace:	80 92 63 05 	sts	0x0563, r8
						menuKnobPos[MENU_OSC2][0] = 615+102;
    3ad2:	8d ec       	ldi	r24, 0xCD	; 205
    3ad4:	92 e0       	ldi	r25, 0x02	; 2
    3ad6:	90 93 2f 05 	sts	0x052F, r25
    3ada:	80 93 2e 05 	sts	0x052E, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3ade:	86 e0       	ldi	r24, 0x06	; 6
    3ae0:	e7 e5       	ldi	r30, 0x57	; 87
    3ae2:	f1 e0       	ldi	r31, 0x01	; 1
    3ae4:	d5 01       	movw	r26, r10
    3ae6:	01 90       	ld	r0, Z+
    3ae8:	0d 92       	st	X+, r0
    3aea:	8a 95       	dec	r24
    3aec:	e1 f7       	brne	.-8      	; 0x3ae6 <main+0x1f24>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3aee:	1f 92       	push	r1
    3af0:	b1 e0       	ldi	r27, 0x01	; 1
    3af2:	bf 93       	push	r27
    3af4:	28 c8       	rjmp	.-4016   	; 0x2b46 <main+0xf84>
						osc2WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC2][3] = 365;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    3af6:	88 34       	cpi	r24, 0x48	; 72
    3af8:	22 e0       	ldi	r18, 0x02	; 2
    3afa:	92 07       	cpc	r25, r18
    3afc:	0c f0       	brlt	.+2      	; 0x3b00 <main+0x1f3e>
    3afe:	92 c0       	rjmp	.+292    	; 0x3c24 <main+0x2062>
				{
					if(osc2WaveForm != WAVE_RSAW)
    3b00:	80 91 02 01 	lds	r24, 0x0102
    3b04:	83 30       	cpi	r24, 0x03	; 3
    3b06:	11 f4       	brne	.+4      	; 0x3b0c <main+0x1f4a>
    3b08:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_RSAW;
    3b0c:	83 e0       	ldi	r24, 0x03	; 3
    3b0e:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 511;
    3b12:	8f ef       	ldi	r24, 0xFF	; 255
    3b14:	91 e0       	ldi	r25, 0x01	; 1
    3b16:	51 cc       	rjmp	.-1886   	; 0x33ba <main+0x17f8>
					{
						lfoRoute = ROUTE_CENTS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 372)
    3b18:	84 37       	cpi	r24, 0x74	; 116
    3b1a:	b1 e0       	ldi	r27, 0x01	; 1
    3b1c:	9b 07       	cpc	r25, r27
    3b1e:	0c f0       	brlt	.+2      	; 0x3b22 <main+0x1f60>
    3b20:	b1 c0       	rjmp	.+354    	; 0x3c84 <main+0x20c2>
				{
					if(lfoRoute != ROUTE_CENTS2)
    3b22:	80 91 59 05 	lds	r24, 0x0559
    3b26:	83 30       	cpi	r24, 0x03	; 3
    3b28:	11 f4       	brne	.+4      	; 0x3b2e <main+0x1f6c>
    3b2a:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_CENTS2;
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3b34:	87 e0       	ldi	r24, 0x07	; 7
    3b36:	e6 e3       	ldi	r30, 0x36	; 54
    3b38:	f1 e0       	ldi	r31, 0x01	; 1
    3b3a:	d5 01       	movw	r26, r10
    3b3c:	01 90       	ld	r0, Z+
    3b3e:	0d 92       	st	X+, r0
    3b40:	8a 95       	dec	r24
    3b42:	e1 f7       	brne	.-8      	; 0x3b3c <main+0x1f7a>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3b44:	ee e6       	ldi	r30, 0x6E	; 110
    3b46:	f6 e0       	ldi	r31, 0x06	; 6
    3b48:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0xbf2>
						lfoWaveForm = WAVE_LSAW;
						menuKnobPos[MENU_LFO][0] = 341 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 682)
    3b4c:	8a 3a       	cpi	r24, 0xAA	; 170
    3b4e:	22 e0       	ldi	r18, 0x02	; 2
    3b50:	92 07       	cpc	r25, r18
    3b52:	0c f0       	brlt	.+2      	; 0x3b56 <main+0x1f94>
    3b54:	78 c0       	rjmp	.+240    	; 0x3c46 <main+0x2084>
				{
					if(lfoWaveForm != WAVE_RSAW)
    3b56:	80 91 06 01 	lds	r24, 0x0106
    3b5a:	83 30       	cpi	r24, 0x03	; 3
    3b5c:	11 f4       	brne	.+4      	; 0x3b62 <main+0x1fa0>
    3b5e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
					{
						lfoWaveForm = WAVE_RSAW;
    3b62:	83 e0       	ldi	r24, 0x03	; 3
    3b64:	80 93 06 01 	sts	0x0106, r24
						menuKnobPos[MENU_LFO][0] = 511 + 85;
    3b68:	84 e5       	ldi	r24, 0x54	; 84
    3b6a:	92 e0       	ldi	r25, 0x02	; 2
    3b6c:	90 93 37 05 	sts	0x0537, r25
    3b70:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3b74:	87 e0       	ldi	r24, 0x07	; 7
    3b76:	e8 e1       	ldi	r30, 0x18	; 24
    3b78:	f1 e0       	ldi	r31, 0x01	; 1
    3b7a:	d5 01       	movw	r26, r10
    3b7c:	01 90       	ld	r0, Z+
    3b7e:	0d 92       	st	X+, r0
    3b80:	8a 95       	dec	r24
    3b82:	e1 f7       	brne	.-8      	; 0x3b7c <main+0x1fba>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3b84:	e2 e8       	ldi	r30, 0x82	; 130
    3b86:	f6 e0       	ldi	r31, 0x06	; 6
    3b88:	b9 cc       	rjmp	.-1678   	; 0x34fc <main+0x193a>
						osc1WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC1][3] = 365;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    3b8a:	88 34       	cpi	r24, 0x48	; 72
    3b8c:	22 e0       	ldi	r18, 0x02	; 2
    3b8e:	92 07       	cpc	r25, r18
    3b90:	cc f4       	brge	.+50     	; 0x3bc4 <main+0x2002>
				{
					if(osc1WaveForm != WAVE_RSAW)
    3b92:	80 91 03 01 	lds	r24, 0x0103
    3b96:	83 30       	cpi	r24, 0x03	; 3
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <main+0x1fda>
    3b9a:	86 c8       	rjmp	.-3828   	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_RSAW;
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 511;
    3ba2:	8f ef       	ldi	r24, 0xFF	; 255
    3ba4:	91 e0       	ldi	r25, 0x01	; 1
    3ba6:	51 cc       	rjmp	.-1886   	; 0x344a <main+0x1888>
		{
			if(btnPressed[MENU_OSC1])
			btnPressed[MENU_OSC1] = false;
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
    3ba8:	80 91 f0 04 	lds	r24, 0x04F0
    3bac:	8f 5f       	subi	r24, 0xFF	; 255
    3bae:	80 93 f0 04 	sts	0x04F0, r24
    3bb2:	0c 94 23 14 	jmp	0x2846	; 0x2846 <main+0xc84>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    3bb6:	8f e4       	ldi	r24, 0x4F	; 79
    3bb8:	9e e4       	ldi	r25, 0x4E	; 78
    3bba:	a0 e0       	ldi	r26, 0x00	; 0
    3bbc:	8f 83       	std	Y+7, r24	; 0x07
    3bbe:	98 87       	std	Y+8, r25	; 0x08
    3bc0:	a9 87       	std	Y+9, r26	; 0x09
    3bc2:	b2 cb       	rjmp	.-2204   	; 0x3328 <main+0x1766>
						osc1WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC1][3] = 511;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    3bc4:	8a 3d       	cpi	r24, 0xDA	; 218
    3bc6:	32 e0       	ldi	r19, 0x02	; 2
    3bc8:	93 07       	cpc	r25, r19
    3bca:	0c f0       	brlt	.+2      	; 0x3bce <main+0x200c>
    3bcc:	c8 c0       	rjmp	.+400    	; 0x3d5e <main+0x219c>
				{
					if(osc1WaveForm != WAVE_SQU)
    3bce:	80 91 03 01 	lds	r24, 0x0103
    3bd2:	84 30       	cpi	r24, 0x04	; 4
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <main+0x2016>
    3bd6:	68 c8       	rjmp	.-3888   	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_SQU;
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
    3bde:	81 e9       	ldi	r24, 0x91	; 145
    3be0:	92 e0       	ldi	r25, 0x02	; 2
    3be2:	33 cc       	rjmp	.-1946   	; 0x344a <main+0x1888>
						osc2OctaveShift = 1;
						menuKnobPos[MENU_OSC2][0] = 615+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    3be4:	8f 3f       	cpi	r24, 0xFF	; 255
    3be6:	93 40       	sbci	r25, 0x03	; 3
    3be8:	14 f0       	brlt	.+4      	; 0x3bee <main+0x202c>
    3bea:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
				{
					if(osc2OctaveShift != 2)
    3bee:	80 91 63 05 	lds	r24, 0x0563
    3bf2:	82 30       	cpi	r24, 0x02	; 2
    3bf4:	11 f4       	brne	.+4      	; 0x3bfa <main+0x2038>
    3bf6:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						osc2OctaveShift = 2;
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	80 93 63 05 	sts	0x0563, r24
						menuKnobPos[MENU_OSC2][0] = 820+102;
    3c00:	2a e9       	ldi	r18, 0x9A	; 154
    3c02:	33 e0       	ldi	r19, 0x03	; 3
    3c04:	30 93 2f 05 	sts	0x052F, r19
    3c08:	20 93 2e 05 	sts	0x052E, r18

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3c0c:	96 e0       	ldi	r25, 0x06	; 6
    3c0e:	e7 e5       	ldi	r30, 0x57	; 87
    3c10:	f1 e0       	ldi	r31, 0x01	; 1
    3c12:	d5 01       	movw	r26, r10
    3c14:	01 90       	ld	r0, Z+
    3c16:	0d 92       	st	X+, r0
    3c18:	9a 95       	dec	r25
    3c1a:	e1 f7       	brne	.-8      	; 0x3c14 <main+0x2052>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3c1c:	1f 92       	push	r1
    3c1e:	8f 93       	push	r24
    3c20:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <main+0xf84>
						osc2WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC2][3] = 511;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    3c24:	8a 3d       	cpi	r24, 0xDA	; 218
    3c26:	32 e0       	ldi	r19, 0x02	; 2
    3c28:	93 07       	cpc	r25, r19
    3c2a:	0c f0       	brlt	.+2      	; 0x3c2e <main+0x206c>
    3c2c:	44 c0       	rjmp	.+136    	; 0x3cb6 <main+0x20f4>
				{
					if(osc2WaveForm != WAVE_SQU)
    3c2e:	80 91 02 01 	lds	r24, 0x0102
    3c32:	84 30       	cpi	r24, 0x04	; 4
    3c34:	11 f4       	brne	.+4      	; 0x3c3a <main+0x2078>
    3c36:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_SQU;
    3c3a:	84 e0       	ldi	r24, 0x04	; 4
    3c3c:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
    3c40:	81 e9       	ldi	r24, 0x91	; 145
    3c42:	92 e0       	ldi	r25, 0x02	; 2
    3c44:	ba cb       	rjmp	.-2188   	; 0x33ba <main+0x17f8>
						lfoWaveForm = WAVE_RSAW;
						menuKnobPos[MENU_LFO][0] = 511 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 852)
    3c46:	84 35       	cpi	r24, 0x54	; 84
    3c48:	33 e0       	ldi	r19, 0x03	; 3
    3c4a:	93 07       	cpc	r25, r19
    3c4c:	0c f0       	brlt	.+2      	; 0x3c50 <main+0x208e>
    3c4e:	97 c0       	rjmp	.+302    	; 0x3d7e <main+0x21bc>
				{
					if(lfoWaveForm != WAVE_SQU)
    3c50:	80 91 06 01 	lds	r24, 0x0106
    3c54:	84 30       	cpi	r24, 0x04	; 4
    3c56:	11 f4       	brne	.+4      	; 0x3c5c <main+0x209a>
    3c58:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
					{
						lfoWaveForm = WAVE_SQU;
    3c5c:	84 e0       	ldi	r24, 0x04	; 4
    3c5e:	80 93 06 01 	sts	0x0106, r24
						menuKnobPos[MENU_LFO][0] = 682 + 85;
    3c62:	8f ef       	ldi	r24, 0xFF	; 255
    3c64:	92 e0       	ldi	r25, 0x02	; 2
    3c66:	90 93 37 05 	sts	0x0537, r25
    3c6a:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3c6e:	87 e0       	ldi	r24, 0x07	; 7
    3c70:	e8 e1       	ldi	r30, 0x18	; 24
    3c72:	f1 e0       	ldi	r31, 0x01	; 1
    3c74:	d5 01       	movw	r26, r10
    3c76:	01 90       	ld	r0, Z+
    3c78:	0d 92       	st	X+, r0
    3c7a:	8a 95       	dec	r24
    3c7c:	e1 f7       	brne	.-8      	; 0x3c76 <main+0x20b4>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3c7e:	e4 e8       	ldi	r30, 0x84	; 132
    3c80:	f6 e0       	ldi	r31, 0x06	; 6
    3c82:	3c cc       	rjmp	.-1928   	; 0x34fc <main+0x193a>
					{
						lfoRoute = ROUTE_CENTS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 465)
    3c84:	81 3d       	cpi	r24, 0xD1	; 209
    3c86:	21 e0       	ldi	r18, 0x01	; 1
    3c88:	92 07       	cpc	r25, r18
    3c8a:	2c f5       	brge	.+74     	; 0x3cd6 <main+0x2114>
				{
					if(lfoRoute != ROUTE_SEMIS1)
    3c8c:	80 91 59 05 	lds	r24, 0x0559
    3c90:	84 30       	cpi	r24, 0x04	; 4
    3c92:	11 f4       	brne	.+4      	; 0x3c98 <main+0x20d6>
    3c94:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS1;
    3c98:	84 e0       	ldi	r24, 0x04	; 4
    3c9a:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3c9e:	87 e0       	ldi	r24, 0x07	; 7
    3ca0:	e6 e3       	ldi	r30, 0x36	; 54
    3ca2:	f1 e0       	ldi	r31, 0x01	; 1
    3ca4:	d5 01       	movw	r26, r10
    3ca6:	01 90       	ld	r0, Z+
    3ca8:	0d 92       	st	X+, r0
    3caa:	8a 95       	dec	r24
    3cac:	e1 f7       	brne	.-8      	; 0x3ca6 <main+0x20e4>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3cae:	e0 e7       	ldi	r30, 0x70	; 112
    3cb0:	f6 e0       	ldi	r31, 0x06	; 6
    3cb2:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0xbf2>
						osc2WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    3cb6:	8c 36       	cpi	r24, 0x6C	; 108
    3cb8:	a3 e0       	ldi	r26, 0x03	; 3
    3cba:	9a 07       	cpc	r25, r26
    3cbc:	2c f5       	brge	.+74     	; 0x3d08 <main+0x2146>
				{
					if(osc2WaveForm != WAVE_NOISE)
    3cbe:	80 91 02 01 	lds	r24, 0x0102
    3cc2:	85 30       	cpi	r24, 0x05	; 5
    3cc4:	11 f4       	brne	.+4      	; 0x3cca <main+0x2108>
    3cc6:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_NOISE;
    3cca:	85 e0       	ldi	r24, 0x05	; 5
    3ccc:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
    3cd0:	83 e2       	ldi	r24, 0x23	; 35
    3cd2:	93 e0       	ldi	r25, 0x03	; 3
    3cd4:	72 cb       	rjmp	.-2332   	; 0x33ba <main+0x17f8>
					{
						lfoRoute = ROUTE_SEMIS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 558)
    3cd6:	8e 32       	cpi	r24, 0x2E	; 46
    3cd8:	32 e0       	ldi	r19, 0x02	; 2
    3cda:	93 07       	cpc	r25, r19
    3cdc:	34 f5       	brge	.+76     	; 0x3d2a <main+0x2168>
				{
					if(lfoRoute != ROUTE_SEMIS2)
    3cde:	80 91 59 05 	lds	r24, 0x0559
    3ce2:	85 30       	cpi	r24, 0x05	; 5
    3ce4:	11 f4       	brne	.+4      	; 0x3cea <main+0x2128>
    3ce6:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS2;
    3cea:	85 e0       	ldi	r24, 0x05	; 5
    3cec:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3cf0:	87 e0       	ldi	r24, 0x07	; 7
    3cf2:	e6 e3       	ldi	r30, 0x36	; 54
    3cf4:	f1 e0       	ldi	r31, 0x01	; 1
    3cf6:	d5 01       	movw	r26, r10
    3cf8:	01 90       	ld	r0, Z+
    3cfa:	0d 92       	st	X+, r0
    3cfc:	8a 95       	dec	r24
    3cfe:	e1 f7       	brne	.-8      	; 0x3cf8 <main+0x2136>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3d00:	e2 e7       	ldi	r30, 0x72	; 114
    3d02:	f6 e0       	ldi	r31, 0x06	; 6
    3d04:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0xbf2>
						osc2WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    3d08:	8f 3f       	cpi	r24, 0xFF	; 255
    3d0a:	93 40       	sbci	r25, 0x03	; 3
    3d0c:	14 f0       	brlt	.+4      	; 0x3d12 <main+0x2150>
    3d0e:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
				{
					if(osc2WaveForm != WAVE_FLAT)
    3d12:	80 91 02 01 	lds	r24, 0x0102
    3d16:	86 30       	cpi	r24, 0x06	; 6
    3d18:	11 f4       	brne	.+4      	; 0x3d1e <main+0x215c>
    3d1a:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <main+0xe00>
					{
						osc2WaveForm = WAVE_FLAT;
    3d1e:	86 e0       	ldi	r24, 0x06	; 6
    3d20:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    3d24:	85 eb       	ldi	r24, 0xB5	; 181
    3d26:	93 e0       	ldi	r25, 0x03	; 3
    3d28:	48 cb       	rjmp	.-2416   	; 0x33ba <main+0x17f8>
					{
						lfoRoute = ROUTE_SEMIS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 651)
    3d2a:	8b 38       	cpi	r24, 0x8B	; 139
    3d2c:	a2 e0       	ldi	r26, 0x02	; 2
    3d2e:	9a 07       	cpc	r25, r26
    3d30:	0c f0       	brlt	.+2      	; 0x3d34 <main+0x2172>
    3d32:	55 c0       	rjmp	.+170    	; 0x3dde <main+0x221c>
				{
					if(lfoRoute != ROUTE_PHASE1)
    3d34:	80 91 59 05 	lds	r24, 0x0559
    3d38:	86 30       	cpi	r24, 0x06	; 6
    3d3a:	11 f4       	brne	.+4      	; 0x3d40 <main+0x217e>
    3d3c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_PHASE1;
    3d40:	86 e0       	ldi	r24, 0x06	; 6
    3d42:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3d46:	87 e0       	ldi	r24, 0x07	; 7
    3d48:	e6 e3       	ldi	r30, 0x36	; 54
    3d4a:	f1 e0       	ldi	r31, 0x01	; 1
    3d4c:	d5 01       	movw	r26, r10
    3d4e:	01 90       	ld	r0, Z+
    3d50:	0d 92       	st	X+, r0
    3d52:	8a 95       	dec	r24
    3d54:	e1 f7       	brne	.-8      	; 0x3d4e <main+0x218c>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3d56:	e4 e7       	ldi	r30, 0x74	; 116
    3d58:	f6 e0       	ldi	r31, 0x06	; 6
    3d5a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0xbf2>
						osc1WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    3d5e:	8c 36       	cpi	r24, 0x6C	; 108
    3d60:	a3 e0       	ldi	r26, 0x03	; 3
    3d62:	9a 07       	cpc	r25, r26
    3d64:	5c f5       	brge	.+86     	; 0x3dbc <main+0x21fa>
				{
					if(osc1WaveForm != WAVE_NOISE)
    3d66:	80 91 03 01 	lds	r24, 0x0103
    3d6a:	85 30       	cpi	r24, 0x05	; 5
    3d6c:	11 f4       	brne	.+4      	; 0x3d72 <main+0x21b0>
    3d6e:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_NOISE;
    3d72:	85 e0       	ldi	r24, 0x05	; 5
    3d74:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
    3d78:	83 e2       	ldi	r24, 0x23	; 35
    3d7a:	93 e0       	ldi	r25, 0x03	; 3
    3d7c:	66 cb       	rjmp	.-2356   	; 0x344a <main+0x1888>
						lfoWaveForm = WAVE_SQU;
						menuKnobPos[MENU_LFO][0] = 682 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    3d7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d80:	93 40       	sbci	r25, 0x03	; 3
    3d82:	14 f0       	brlt	.+4      	; 0x3d88 <main+0x21c6>
    3d84:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
				{
					if(lfoWaveForm != WAVE_FLAT)
    3d88:	80 91 06 01 	lds	r24, 0x0106
    3d8c:	86 30       	cpi	r24, 0x06	; 6
    3d8e:	11 f4       	brne	.+4      	; 0x3d94 <main+0x21d2>
    3d90:	0c 94 6f 12 	jmp	0x24de	; 0x24de <main+0x91c>
					{
						lfoWaveForm = WAVE_FLAT;
    3d94:	86 e0       	ldi	r24, 0x06	; 6
    3d96:	80 93 06 01 	sts	0x0106, r24
						menuKnobPos[MENU_LFO][0] = 852 + 85;
    3d9a:	89 ea       	ldi	r24, 0xA9	; 169
    3d9c:	93 e0       	ldi	r25, 0x03	; 3
    3d9e:	90 93 37 05 	sts	0x0537, r25
    3da2:	80 93 36 05 	sts	0x0536, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3da6:	87 e0       	ldi	r24, 0x07	; 7
    3da8:	e8 e1       	ldi	r30, 0x18	; 24
    3daa:	f1 e0       	ldi	r31, 0x01	; 1
    3dac:	d5 01       	movw	r26, r10
    3dae:	01 90       	ld	r0, Z+
    3db0:	0d 92       	st	X+, r0
    3db2:	8a 95       	dec	r24
    3db4:	e1 f7       	brne	.-8      	; 0x3dae <main+0x21ec>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3db6:	e8 e8       	ldi	r30, 0x88	; 136
    3db8:	f6 e0       	ldi	r31, 0x06	; 6
    3dba:	a0 cb       	rjmp	.-2240   	; 0x34fc <main+0x193a>
						osc1WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    3dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    3dbe:	93 40       	sbci	r25, 0x03	; 3
    3dc0:	14 f0       	brlt	.+4      	; 0x3dc6 <main+0x2204>
    3dc2:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x10e6>
				{
					if(osc1WaveForm != WAVE_FLAT)
    3dc6:	80 91 03 01 	lds	r24, 0x0103
    3dca:	86 30       	cpi	r24, 0x06	; 6
    3dcc:	11 f4       	brne	.+4      	; 0x3dd2 <main+0x2210>
    3dce:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x10e6>
					{
						osc1WaveForm = WAVE_FLAT;
    3dd2:	86 e0       	ldi	r24, 0x06	; 6
    3dd4:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    3dd8:	85 eb       	ldi	r24, 0xB5	; 181
    3dda:	93 e0       	ldi	r25, 0x03	; 3
    3ddc:	36 cb       	rjmp	.-2452   	; 0x344a <main+0x1888>
					{
						lfoRoute = ROUTE_PHASE1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 744)
    3dde:	88 3e       	cpi	r24, 0xE8	; 232
    3de0:	b2 e0       	ldi	r27, 0x02	; 2
    3de2:	9b 07       	cpc	r25, r27
    3de4:	a4 f4       	brge	.+40     	; 0x3e0e <main+0x224c>
				{
					if(lfoRoute != ROUTE_PHASE2)
    3de6:	80 91 59 05 	lds	r24, 0x0559
    3dea:	87 30       	cpi	r24, 0x07	; 7
    3dec:	11 f4       	brne	.+4      	; 0x3df2 <main+0x2230>
    3dee:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_PHASE2;
    3df2:	87 e0       	ldi	r24, 0x07	; 7
    3df4:	80 93 59 05 	sts	0x0559, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3df8:	e6 e3       	ldi	r30, 0x36	; 54
    3dfa:	f1 e0       	ldi	r31, 0x01	; 1
    3dfc:	d5 01       	movw	r26, r10
    3dfe:	01 90       	ld	r0, Z+
    3e00:	0d 92       	st	X+, r0
    3e02:	8a 95       	dec	r24
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <main+0x223c>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3e06:	e6 e7       	ldi	r30, 0x76	; 118
    3e08:	f6 e0       	ldi	r31, 0x06	; 6
    3e0a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0xbf2>
					{
						lfoRoute = ROUTE_PHASE2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 837)
    3e0e:	85 34       	cpi	r24, 0x45	; 69
    3e10:	23 e0       	ldi	r18, 0x03	; 3
    3e12:	92 07       	cpc	r25, r18
    3e14:	6c f4       	brge	.+26     	; 0x3e30 <main+0x226e>
				{
					if(lfoRoute != ROUTE_WAVE1)
    3e16:	80 91 59 05 	lds	r24, 0x0559
    3e1a:	88 30       	cpi	r24, 0x08	; 8
    3e1c:	11 f4       	brne	.+4      	; 0x3e22 <main+0x2260>
    3e1e:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_WAVE1;
    3e22:	88 e0       	ldi	r24, 0x08	; 8
    3e24:	80 93 59 05 	sts	0x0559, r24
						lfoMenuRouteUpdate();
    3e28:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z18lfoMenuRouteUpdatev>
    3e2c:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					}
				}
				else if(adcValue[0] < 930)
    3e30:	82 3a       	cpi	r24, 0xA2	; 162
    3e32:	33 e0       	ldi	r19, 0x03	; 3
    3e34:	93 07       	cpc	r25, r19
    3e36:	6c f4       	brge	.+26     	; 0x3e52 <main+0x2290>
				{
					if(lfoRoute != ROUTE_WAVE2)
    3e38:	80 91 59 05 	lds	r24, 0x0559
    3e3c:	89 30       	cpi	r24, 0x09	; 9
    3e3e:	11 f4       	brne	.+4      	; 0x3e44 <main+0x2282>
    3e40:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_WAVE2;
    3e44:	89 e0       	ldi	r24, 0x09	; 9
    3e46:	80 93 59 05 	sts	0x0559, r24
						lfoMenuRouteUpdate();
    3e4a:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z18lfoMenuRouteUpdatev>
    3e4e:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					}
				}
				else if(adcValue[0] < 1023)
    3e52:	8f 3f       	cpi	r24, 0xFF	; 255
    3e54:	93 40       	sbci	r25, 0x03	; 3
    3e56:	14 f0       	brlt	.+4      	; 0x3e5c <main+0x229a>
    3e58:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
				{
					if(lfoRoute != ROUTE_OSC1)
    3e5c:	80 91 59 05 	lds	r24, 0x0559
    3e60:	88 23       	and	r24, r24
    3e62:	11 f4       	brne	.+4      	; 0x3e68 <main+0x22a6>
    3e64:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>
					{
						lfoRoute = ROUTE_OSC1;
    3e68:	10 92 59 05 	sts	0x0559, r1
						lfoMenuRouteUpdate();
    3e6c:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z18lfoMenuRouteUpdatev>
    3e70:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x158>

00003e74 <__vector_18>:
		lfsrState ^= 0xB400;
	}
}

ISR(USART_RX_vect)
{
    3e74:	1f 92       	push	r1
    3e76:	0f 92       	push	r0
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	0f 92       	push	r0
    3e7c:	11 24       	eor	r1, r1
    3e7e:	8f 93       	push	r24
    3e80:	9f 93       	push	r25
    3e82:	ef 93       	push	r30
    3e84:	ff 93       	push	r31
	unsigned char msg = UDR0;
    3e86:	80 91 c6 00 	lds	r24, 0x00C6
	
	if(msg & 0x80) //New command
    3e8a:	87 fd       	sbrc	r24, 7
    3e8c:	21 c0       	rjmp	.+66     	; 0x3ed0 <__vector_18+0x5c>
		
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
    3e8e:	90 91 88 05 	lds	r25, 0x0588
    3e92:	e9 2f       	mov	r30, r25
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	e7 57       	subi	r30, 0x77	; 119
    3e98:	fa 4f       	sbci	r31, 0xFA	; 250
    3e9a:	80 83       	st	Z, r24
		commandCount++;
    3e9c:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(commandCount == 3)
    3e9e:	93 30       	cpi	r25, 0x03	; 3
    3ea0:	59 f0       	breq	.+22     	; 0x3eb8 <__vector_18+0x44>
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
		commandCount++;
    3ea2:	90 93 88 05 	sts	0x0588, r25
				notePlaying = false;
				break;
			}
		}
	}
}
    3ea6:	ff 91       	pop	r31
    3ea8:	ef 91       	pop	r30
    3eaa:	9f 91       	pop	r25
    3eac:	8f 91       	pop	r24
    3eae:	0f 90       	pop	r0
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	0f 90       	pop	r0
    3eb4:	1f 90       	pop	r1
    3eb6:	18 95       	reti
		commandBytes[commandCount] = msg;
		commandCount++;
		
		if(commandCount == 3)
		{
			commandCount = 1;
    3eb8:	91 e0       	ldi	r25, 0x01	; 1
    3eba:	90 93 88 05 	sts	0x0588, r25
			
			switch(commandBytes[0])
    3ebe:	80 91 89 05 	lds	r24, 0x0589
    3ec2:	80 38       	cpi	r24, 0x80	; 128
    3ec4:	61 f0       	breq	.+24     	; 0x3ede <__vector_18+0x6a>
    3ec6:	80 39       	cpi	r24, 0x90	; 144
    3ec8:	71 f7       	brne	.-36     	; 0x3ea6 <__vector_18+0x32>
			{
				case NOTE_ON:
				notePlaying = true;
    3eca:	90 93 05 01 	sts	0x0105, r25
				break;
    3ece:	eb cf       	rjmp	.-42     	; 0x3ea6 <__vector_18+0x32>
{
	unsigned char msg = UDR0;
	
	if(msg & 0x80) //New command
	{
		commandBytes[0] = msg & 0xF0;
    3ed0:	80 7f       	andi	r24, 0xF0	; 240
    3ed2:	80 93 89 05 	sts	0x0589, r24
		
		commandCount = 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 88 05 	sts	0x0588, r24
    3edc:	e4 cf       	rjmp	.-56     	; 0x3ea6 <__vector_18+0x32>
				case NOTE_ON:
				notePlaying = true;
				break;
				
				case NOTE_OFF:
				notePlaying = false;
    3ede:	10 92 05 01 	sts	0x0105, r1
				break;
    3ee2:	e1 cf       	rjmp	.-62     	; 0x3ea6 <__vector_18+0x32>

00003ee4 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
    3ee4:	1f 92       	push	r1
    3ee6:	0f 92       	push	r0
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	0f 92       	push	r0
    3eec:	11 24       	eor	r1, r1
    3eee:	2f 93       	push	r18
    3ef0:	3f 93       	push	r19
    3ef2:	4f 93       	push	r20
    3ef4:	8f 93       	push	r24
    3ef6:	9f 93       	push	r25
    3ef8:	ef 93       	push	r30
    3efa:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
    3efc:	40 91 98 05 	lds	r20, 0x0598
    3f00:	84 2f       	mov	r24, r20
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	20 91 78 00 	lds	r18, 0x0078
    3f08:	30 91 79 00 	lds	r19, 0x0079
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	e0 57       	subi	r30, 0x70	; 112
    3f14:	fa 4f       	sbci	r31, 0xFA	; 250
    3f16:	31 83       	std	Z+1, r19	; 0x01
    3f18:	20 83       	st	Z, r18
	updateADC[adcSelect] = true;
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	e4 57       	subi	r30, 0x74	; 116
    3f1e:	fa 4f       	sbci	r31, 0xFA	; 250
    3f20:	21 e0       	ldi	r18, 0x01	; 1
    3f22:	20 83       	st	Z, r18

	adcSelect++;
    3f24:	4f 5f       	subi	r20, 0xFF	; 255
	
	if(adcSelect > 3)
    3f26:	44 30       	cpi	r20, 0x04	; 4
    3f28:	88 f0       	brcs	.+34     	; 0x3f4c <__vector_21+0x68>
	adcSelect = 0;
    3f2a:	10 92 98 05 	sts	0x0598, r1
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
	
	ADMUX = adcSelect;
    3f30:	40 93 7c 00 	sts	0x007C, r20
}
    3f34:	ff 91       	pop	r31
    3f36:	ef 91       	pop	r30
    3f38:	9f 91       	pop	r25
    3f3a:	8f 91       	pop	r24
    3f3c:	4f 91       	pop	r20
    3f3e:	3f 91       	pop	r19
    3f40:	2f 91       	pop	r18
    3f42:	0f 90       	pop	r0
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	0f 90       	pop	r0
    3f48:	1f 90       	pop	r1
    3f4a:	18 95       	reti
ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;
	updateADC[adcSelect] = true;

	adcSelect++;
    3f4c:	40 93 98 05 	sts	0x0598, r20
    3f50:	ef cf       	rjmp	.-34     	; 0x3f30 <__vector_21+0x4c>

00003f52 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
    3f52:	1f 92       	push	r1
    3f54:	0f 92       	push	r0
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	0f 92       	push	r0
    3f5a:	11 24       	eor	r1, r1
    3f5c:	2f 93       	push	r18
    3f5e:	3f 93       	push	r19
    3f60:	4f 93       	push	r20
    3f62:	5f 93       	push	r21
    3f64:	6f 93       	push	r22
    3f66:	7f 93       	push	r23
    3f68:	8f 93       	push	r24
    3f6a:	9f 93       	push	r25
    3f6c:	af 93       	push	r26
    3f6e:	bf 93       	push	r27
    3f70:	ef 93       	push	r30
    3f72:	ff 93       	push	r31
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <__vector_9+0x28>
    3f7a:	00 d0       	rcall	.+0      	; 0x3f7c <__vector_9+0x2a>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
	osc1Phaccu += osc1TWord;
    3f80:	40 91 7c 05 	lds	r20, 0x057C
    3f84:	50 91 7d 05 	lds	r21, 0x057D
    3f88:	60 91 7e 05 	lds	r22, 0x057E
    3f8c:	70 91 7f 05 	lds	r23, 0x057F
    3f90:	80 91 80 05 	lds	r24, 0x0580
    3f94:	90 91 81 05 	lds	r25, 0x0581
    3f98:	a0 91 82 05 	lds	r26, 0x0582
    3f9c:	b0 91 83 05 	lds	r27, 0x0583
    3fa0:	84 0f       	add	r24, r20
    3fa2:	95 1f       	adc	r25, r21
    3fa4:	a6 1f       	adc	r26, r22
    3fa6:	b7 1f       	adc	r27, r23
    3fa8:	80 93 80 05 	sts	0x0580, r24
    3fac:	90 93 81 05 	sts	0x0581, r25
    3fb0:	a0 93 82 05 	sts	0x0582, r26
    3fb4:	b0 93 83 05 	sts	0x0583, r27
	osc2Phaccu += osc2TWord;
    3fb8:	40 91 66 05 	lds	r20, 0x0566
    3fbc:	50 91 67 05 	lds	r21, 0x0567
    3fc0:	60 91 68 05 	lds	r22, 0x0568
    3fc4:	70 91 69 05 	lds	r23, 0x0569
    3fc8:	80 91 6a 05 	lds	r24, 0x056A
    3fcc:	90 91 6b 05 	lds	r25, 0x056B
    3fd0:	a0 91 6c 05 	lds	r26, 0x056C
    3fd4:	b0 91 6d 05 	lds	r27, 0x056D
    3fd8:	84 0f       	add	r24, r20
    3fda:	95 1f       	adc	r25, r21
    3fdc:	a6 1f       	adc	r26, r22
    3fde:	b7 1f       	adc	r27, r23
    3fe0:	80 93 6a 05 	sts	0x056A, r24
    3fe4:	90 93 6b 05 	sts	0x056B, r25
    3fe8:	a0 93 6c 05 	sts	0x056C, r26
    3fec:	b0 93 6d 05 	sts	0x056D, r27
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
    3ff0:	80 91 00 01 	lds	r24, 0x0100
    3ff4:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
    3ff8:	9c 01       	movw	r18, r24
    3ffa:	36 95       	lsr	r19
    3ffc:	27 95       	ror	r18
	
	if(lsb == 1)
    3ffe:	80 fd       	sbrc	r24, 0
    4000:	c4 c0       	rjmp	.+392    	; 0x418a <__vector_9+0x238>
	{
		lfsrState ^= 0xB400;
    4002:	30 93 01 01 	sts	0x0101, r19
    4006:	20 93 00 01 	sts	0x0100, r18
	osc1Phaccu += osc1TWord;
	osc2Phaccu += osc2TWord;
	
	lfsrUpdate();

	if(notePlaying)
    400a:	80 91 05 01 	lds	r24, 0x0105
    400e:	88 23       	and	r24, r24
    4010:	09 f4       	brne	.+2      	; 0x4014 <__vector_9+0xc2>
    4012:	83 c0       	rjmp	.+262    	; 0x411a <__vector_9+0x1c8>
	{
		unsigned short fraction = 0;
		unsigned short whole = 0;

		osc1Out[0] = osc1Out[1];
    4014:	80 91 75 05 	lds	r24, 0x0575
    4018:	90 91 76 05 	lds	r25, 0x0576
    401c:	90 93 74 05 	sts	0x0574, r25
    4020:	80 93 73 05 	sts	0x0573, r24
		osc1Out[1] = osc1Out[2];
    4024:	80 91 77 05 	lds	r24, 0x0577
    4028:	90 91 78 05 	lds	r25, 0x0578
    402c:	90 93 76 05 	sts	0x0576, r25
    4030:	80 93 75 05 	sts	0x0575, r24
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu) + 2) + osc1PhaseShift));
    4034:	e0 91 03 01 	lds	r30, 0x0103
    4038:	80 91 79 05 	lds	r24, 0x0579
    403c:	90 91 82 05 	lds	r25, 0x0582
    4040:	89 0f       	add	r24, r25
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	ee 5f       	subi	r30, 0xFE	; 254
    404a:	fc 4f       	sbci	r31, 0xFC	; 252
    404c:	01 90       	ld	r0, Z+
    404e:	f0 81       	ld	r31, Z
    4050:	e0 2d       	mov	r30, r0
    4052:	e8 0f       	add	r30, r24
    4054:	f1 1d       	adc	r31, r1
    4056:	e8 59       	subi	r30, 0x98	; 152
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	e4 91       	lpm	r30, Z
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	f0 93 78 05 	sts	0x0578, r31
    4062:	e0 93 77 05 	sts	0x0577, r30
		
		if(osc1WaveForm == WAVE_NOISE)
    4066:	80 91 03 01 	lds	r24, 0x0103
    406a:	85 30       	cpi	r24, 0x05	; 5
    406c:	09 f4       	brne	.+2      	; 0x4070 <__vector_9+0x11e>
    406e:	90 c0       	rjmp	.+288    	; 0x4190 <__vector_9+0x23e>
			osc1Out[2] = lfsrState;

		if(osc2Sync && (osc1Out[1] < osc1Out[0] && osc1Out[1] < osc1Out[2]))
    4070:	80 91 5a 05 	lds	r24, 0x055A
    4074:	81 11       	cpse	r24, r1
    4076:	68 c0       	rjmp	.+208    	; 0x4148 <__vector_9+0x1f6>
		{
			osc2Phaccu = 0;
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + pgm_read_word(waveformOffset + osc2WaveForm) + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
    4078:	e0 91 02 01 	lds	r30, 0x0102
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	ee 0f       	add	r30, r30
    4080:	ff 1f       	adc	r31, r31
    4082:	ee 5f       	subi	r30, 0xFE	; 254
    4084:	fc 4f       	sbci	r31, 0xFC	; 252
    4086:	85 91       	lpm	r24, Z+
    4088:	94 91       	lpm	r25, Z
    408a:	40 91 62 05 	lds	r20, 0x0562
    408e:	50 91 6c 05 	lds	r21, 0x056C
    4092:	45 0f       	add	r20, r21
    4094:	fc 01       	movw	r30, r24
    4096:	e4 0f       	add	r30, r20
    4098:	f1 1d       	adc	r31, r1
    409a:	e8 59       	subi	r30, 0x98	; 152
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	e4 91       	lpm	r30, Z
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	f0 93 60 05 	sts	0x0560, r31
    40a6:	e0 93 5f 05 	sts	0x055F, r30
		
		if(osc2WaveForm = WAVE_NOISE)
    40aa:	85 e0       	ldi	r24, 0x05	; 5
    40ac:	80 93 02 01 	sts	0x0102, r24
			osc2Out[2] = lfsrState;
    40b0:	30 93 60 05 	sts	0x0560, r19
    40b4:	20 93 5f 05 	sts	0x055F, r18

		unsigned long temp = 0;

		osc1Out[2] *= osc1Weight;
    40b8:	20 91 77 05 	lds	r18, 0x0577
    40bc:	30 91 78 05 	lds	r19, 0x0578
    40c0:	40 91 07 01 	lds	r20, 0x0107
    40c4:	42 9f       	mul	r20, r18
    40c6:	c0 01       	movw	r24, r0
    40c8:	43 9f       	mul	r20, r19
    40ca:	90 0d       	add	r25, r0
    40cc:	11 24       	eor	r1, r1
    40ce:	90 93 78 05 	sts	0x0578, r25
    40d2:	80 93 77 05 	sts	0x0577, r24
		osc2Out[2] *= osc2Weight;
    40d6:	20 91 5f 05 	lds	r18, 0x055F
    40da:	30 91 60 05 	lds	r19, 0x0560
    40de:	40 91 61 05 	lds	r20, 0x0561
    40e2:	42 9f       	mul	r20, r18
    40e4:	c0 01       	movw	r24, r0
    40e6:	43 9f       	mul	r20, r19
    40e8:	90 0d       	add	r25, r0
    40ea:	11 24       	eor	r1, r1
    40ec:	90 93 60 05 	sts	0x0560, r25
    40f0:	80 93 5f 05 	sts	0x055F, r24

		temp = osc1Out[2] + osc2Out[2];
    40f4:	20 91 77 05 	lds	r18, 0x0577
    40f8:	30 91 78 05 	lds	r19, 0x0578
    40fc:	80 91 5f 05 	lds	r24, 0x055F
    4100:	90 91 60 05 	lds	r25, 0x0560
    4104:	82 0f       	add	r24, r18
    4106:	93 1f       	adc	r25, r19
    4108:	a0 e0       	ldi	r26, 0x00	; 0
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	89 83       	std	Y+1, r24	; 0x01
    410e:	9a 83       	std	Y+2, r25	; 0x02
    4110:	ab 83       	std	Y+3, r26	; 0x03
    4112:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	ff 91       	pop	r31
    4128:	ef 91       	pop	r30
    412a:	bf 91       	pop	r27
    412c:	af 91       	pop	r26
    412e:	9f 91       	pop	r25
    4130:	8f 91       	pop	r24
    4132:	7f 91       	pop	r23
    4134:	6f 91       	pop	r22
    4136:	5f 91       	pop	r21
    4138:	4f 91       	pop	r20
    413a:	3f 91       	pop	r19
    413c:	2f 91       	pop	r18
    413e:	0f 90       	pop	r0
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	0f 90       	pop	r0
    4144:	1f 90       	pop	r1
    4146:	18 95       	reti
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;

		if(osc2Sync && (osc1Out[1] < osc1Out[0] && osc1Out[1] < osc1Out[2]))
    4148:	40 91 75 05 	lds	r20, 0x0575
    414c:	50 91 76 05 	lds	r21, 0x0576
    4150:	80 91 73 05 	lds	r24, 0x0573
    4154:	90 91 74 05 	lds	r25, 0x0574
    4158:	48 17       	cp	r20, r24
    415a:	59 07       	cpc	r21, r25
    415c:	08 f0       	brcs	.+2      	; 0x4160 <__vector_9+0x20e>
    415e:	8c cf       	rjmp	.-232    	; 0x4078 <__vector_9+0x126>
    4160:	40 91 75 05 	lds	r20, 0x0575
    4164:	50 91 76 05 	lds	r21, 0x0576
    4168:	80 91 77 05 	lds	r24, 0x0577
    416c:	90 91 78 05 	lds	r25, 0x0578
    4170:	48 17       	cp	r20, r24
    4172:	59 07       	cpc	r21, r25
    4174:	08 f0       	brcs	.+2      	; 0x4178 <__vector_9+0x226>
    4176:	80 cf       	rjmp	.-256    	; 0x4078 <__vector_9+0x126>
		{
			osc2Phaccu = 0;
    4178:	10 92 6a 05 	sts	0x056A, r1
    417c:	10 92 6b 05 	sts	0x056B, r1
    4180:	10 92 6c 05 	sts	0x056C, r1
    4184:	10 92 6d 05 	sts	0x056D, r1
    4188:	77 cf       	rjmp	.-274    	; 0x4078 <__vector_9+0x126>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    418a:	84 eb       	ldi	r24, 0xB4	; 180
    418c:	38 27       	eor	r19, r24
    418e:	39 cf       	rjmp	.-398    	; 0x4002 <__vector_9+0xb0>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    4190:	30 93 78 05 	sts	0x0578, r19
    4194:	20 93 77 05 	sts	0x0577, r18

		if(osc2Sync && (osc1Out[1] < osc1Out[0] && osc1Out[1] < osc1Out[2]))
    4198:	80 91 5a 05 	lds	r24, 0x055A
    419c:	88 23       	and	r24, r24
    419e:	09 f4       	brne	.+2      	; 0x41a2 <__vector_9+0x250>
    41a0:	6b cf       	rjmp	.-298    	; 0x4078 <__vector_9+0x126>
    41a2:	d2 cf       	rjmp	.-92     	; 0x4148 <__vector_9+0x1f6>

000041a4 <__muldi3>:
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	1f 93       	push	r17
    41aa:	0f 93       	push	r16
    41ac:	9a 9d       	mul	r25, r10
    41ae:	f0 2d       	mov	r31, r0
    41b0:	21 9f       	mul	r18, r17
    41b2:	f0 0d       	add	r31, r0
    41b4:	8b 9d       	mul	r24, r11
    41b6:	f0 0d       	add	r31, r0
    41b8:	8a 9d       	mul	r24, r10
    41ba:	e0 2d       	mov	r30, r0
    41bc:	f1 0d       	add	r31, r1
    41be:	03 9f       	mul	r16, r19
    41c0:	f0 0d       	add	r31, r0
    41c2:	02 9f       	mul	r16, r18
    41c4:	e0 0d       	add	r30, r0
    41c6:	f1 1d       	adc	r31, r1
    41c8:	4e 9d       	mul	r20, r14
    41ca:	e0 0d       	add	r30, r0
    41cc:	f1 1d       	adc	r31, r1
    41ce:	5e 9d       	mul	r21, r14
    41d0:	f0 0d       	add	r31, r0
    41d2:	4f 9d       	mul	r20, r15
    41d4:	f0 0d       	add	r31, r0
    41d6:	7f 93       	push	r23
    41d8:	6f 93       	push	r22
    41da:	bf 92       	push	r11
    41dc:	af 92       	push	r10
    41de:	5f 93       	push	r21
    41e0:	4f 93       	push	r20
    41e2:	d5 01       	movw	r26, r10
    41e4:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    41e8:	8b 01       	movw	r16, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	d7 01       	movw	r26, r14
    41ee:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    41f2:	eb 01       	movw	r28, r22
    41f4:	e8 0f       	add	r30, r24
    41f6:	f9 1f       	adc	r31, r25
    41f8:	d6 01       	movw	r26, r12
    41fa:	0e 94 22 21 	call	0x4244	; 0x4244 <__muldi3_6>
    41fe:	2f 91       	pop	r18
    4200:	3f 91       	pop	r19
    4202:	d6 01       	movw	r26, r12
    4204:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    4208:	c6 0f       	add	r28, r22
    420a:	d7 1f       	adc	r29, r23
    420c:	e8 1f       	adc	r30, r24
    420e:	f9 1f       	adc	r31, r25
    4210:	af 91       	pop	r26
    4212:	bf 91       	pop	r27
    4214:	0e 94 22 21 	call	0x4244	; 0x4244 <__muldi3_6>
    4218:	2f 91       	pop	r18
    421a:	3f 91       	pop	r19
    421c:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    4220:	c6 0f       	add	r28, r22
    4222:	d7 1f       	adc	r29, r23
    4224:	e8 1f       	adc	r30, r24
    4226:	f9 1f       	adc	r31, r25
    4228:	d6 01       	movw	r26, r12
    422a:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    422e:	e6 0f       	add	r30, r22
    4230:	f7 1f       	adc	r31, r23
    4232:	98 01       	movw	r18, r16
    4234:	be 01       	movw	r22, r28
    4236:	cf 01       	movw	r24, r30
    4238:	11 24       	eor	r1, r1
    423a:	0f 91       	pop	r16
    423c:	1f 91       	pop	r17
    423e:	cf 91       	pop	r28
    4240:	df 91       	pop	r29
    4242:	08 95       	ret

00004244 <__muldi3_6>:
    4244:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    4248:	46 0f       	add	r20, r22
    424a:	57 1f       	adc	r21, r23
    424c:	c8 1f       	adc	r28, r24
    424e:	d9 1f       	adc	r29, r25
    4250:	08 f4       	brcc	.+2      	; 0x4254 <__muldi3_6+0x10>
    4252:	31 96       	adiw	r30, 0x01	; 1
    4254:	08 95       	ret

00004256 <__umulsidi3>:
    4256:	e8 94       	clt

00004258 <__umulsidi3_helper>:
    4258:	df 93       	push	r29
    425a:	cf 93       	push	r28
    425c:	fc 01       	movw	r30, r24
    425e:	db 01       	movw	r26, r22
    4260:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    4264:	7f 93       	push	r23
    4266:	6f 93       	push	r22
    4268:	e9 01       	movw	r28, r18
    426a:	9a 01       	movw	r18, r20
    426c:	ac 01       	movw	r20, r24
    426e:	bf 93       	push	r27
    4270:	af 93       	push	r26
    4272:	3f 93       	push	r19
    4274:	2f 93       	push	r18
    4276:	df 01       	movw	r26, r30
    4278:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__umulhisi3>
    427c:	26 f4       	brtc	.+8      	; 0x4286 <__umulsidi3_helper+0x2e>
    427e:	6c 1b       	sub	r22, r28
    4280:	7d 0b       	sbc	r23, r29
    4282:	82 0b       	sbc	r24, r18
    4284:	93 0b       	sbc	r25, r19
    4286:	9e 01       	movw	r18, r28
    4288:	eb 01       	movw	r28, r22
    428a:	fc 01       	movw	r30, r24
    428c:	0e 94 22 21 	call	0x4244	; 0x4244 <__muldi3_6>
    4290:	af 91       	pop	r26
    4292:	bf 91       	pop	r27
    4294:	2f 91       	pop	r18
    4296:	3f 91       	pop	r19
    4298:	0e 94 22 21 	call	0x4244	; 0x4244 <__muldi3_6>
    429c:	be 01       	movw	r22, r28
    429e:	cf 01       	movw	r24, r30
    42a0:	f9 01       	movw	r30, r18
    42a2:	2f 91       	pop	r18
    42a4:	3f 91       	pop	r19
    42a6:	cf 91       	pop	r28
    42a8:	df 91       	pop	r29
    42aa:	08 95       	ret

000042ac <__umoddi3>:
    42ac:	68 94       	set
    42ae:	01 c0       	rjmp	.+2      	; 0x42b2 <__udivdi3_umoddi3>

000042b0 <__udivdi3>:
    42b0:	e8 94       	clt

000042b2 <__udivdi3_umoddi3>:
    42b2:	8f 92       	push	r8
    42b4:	9f 92       	push	r9
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	0e 94 64 21 	call	0x42c8	; 0x42c8 <__udivmod64>
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	9f 90       	pop	r9
    42c4:	8f 90       	pop	r8
    42c6:	08 95       	ret

000042c8 <__udivmod64>:
    42c8:	88 24       	eor	r8, r8
    42ca:	99 24       	eor	r9, r9
    42cc:	f4 01       	movw	r30, r8
    42ce:	e4 01       	movw	r28, r8
    42d0:	b0 e4       	ldi	r27, 0x40	; 64
    42d2:	9f 93       	push	r25
    42d4:	aa 27       	eor	r26, r26
    42d6:	9a 15       	cp	r25, r10
    42d8:	8b 04       	cpc	r8, r11
    42da:	9c 04       	cpc	r9, r12
    42dc:	ed 05       	cpc	r30, r13
    42de:	fe 05       	cpc	r31, r14
    42e0:	cf 05       	cpc	r28, r15
    42e2:	d0 07       	cpc	r29, r16
    42e4:	a1 07       	cpc	r26, r17
    42e6:	98 f4       	brcc	.+38     	; 0x430e <__udivmod64+0x46>
    42e8:	ad 2f       	mov	r26, r29
    42ea:	dc 2f       	mov	r29, r28
    42ec:	cf 2f       	mov	r28, r31
    42ee:	fe 2f       	mov	r31, r30
    42f0:	e9 2d       	mov	r30, r9
    42f2:	98 2c       	mov	r9, r8
    42f4:	89 2e       	mov	r8, r25
    42f6:	98 2f       	mov	r25, r24
    42f8:	87 2f       	mov	r24, r23
    42fa:	76 2f       	mov	r23, r22
    42fc:	65 2f       	mov	r22, r21
    42fe:	54 2f       	mov	r21, r20
    4300:	43 2f       	mov	r20, r19
    4302:	32 2f       	mov	r19, r18
    4304:	22 27       	eor	r18, r18
    4306:	b8 50       	subi	r27, 0x08	; 8
    4308:	31 f7       	brne	.-52     	; 0x42d6 <__udivmod64+0xe>
    430a:	bf 91       	pop	r27
    430c:	27 c0       	rjmp	.+78     	; 0x435c <__udivmod64+0x94>
    430e:	1b 2e       	mov	r1, r27
    4310:	bf 91       	pop	r27
    4312:	bb 27       	eor	r27, r27
    4314:	22 0f       	add	r18, r18
    4316:	33 1f       	adc	r19, r19
    4318:	44 1f       	adc	r20, r20
    431a:	55 1f       	adc	r21, r21
    431c:	66 1f       	adc	r22, r22
    431e:	77 1f       	adc	r23, r23
    4320:	88 1f       	adc	r24, r24
    4322:	99 1f       	adc	r25, r25
    4324:	88 1c       	adc	r8, r8
    4326:	99 1c       	adc	r9, r9
    4328:	ee 1f       	adc	r30, r30
    432a:	ff 1f       	adc	r31, r31
    432c:	cc 1f       	adc	r28, r28
    432e:	dd 1f       	adc	r29, r29
    4330:	aa 1f       	adc	r26, r26
    4332:	bb 1f       	adc	r27, r27
    4334:	8a 14       	cp	r8, r10
    4336:	9b 04       	cpc	r9, r11
    4338:	ec 05       	cpc	r30, r12
    433a:	fd 05       	cpc	r31, r13
    433c:	ce 05       	cpc	r28, r14
    433e:	df 05       	cpc	r29, r15
    4340:	a0 07       	cpc	r26, r16
    4342:	b1 07       	cpc	r27, r17
    4344:	48 f0       	brcs	.+18     	; 0x4358 <__udivmod64+0x90>
    4346:	8a 18       	sub	r8, r10
    4348:	9b 08       	sbc	r9, r11
    434a:	ec 09       	sbc	r30, r12
    434c:	fd 09       	sbc	r31, r13
    434e:	ce 09       	sbc	r28, r14
    4350:	df 09       	sbc	r29, r15
    4352:	a0 0b       	sbc	r26, r16
    4354:	b1 0b       	sbc	r27, r17
    4356:	21 60       	ori	r18, 0x01	; 1
    4358:	1a 94       	dec	r1
    435a:	e1 f6       	brne	.-72     	; 0x4314 <__udivmod64+0x4c>
    435c:	2e f4       	brtc	.+10     	; 0x4368 <__udivmod64+0xa0>
    435e:	94 01       	movw	r18, r8
    4360:	af 01       	movw	r20, r30
    4362:	be 01       	movw	r22, r28
    4364:	cd 01       	movw	r24, r26
    4366:	00 0c       	add	r0, r0
    4368:	08 95       	ret

0000436a <__ashldi3>:
    436a:	0f 93       	push	r16
    436c:	08 30       	cpi	r16, 0x08	; 8
    436e:	90 f0       	brcs	.+36     	; 0x4394 <__ashldi3+0x2a>
    4370:	98 2f       	mov	r25, r24
    4372:	87 2f       	mov	r24, r23
    4374:	76 2f       	mov	r23, r22
    4376:	65 2f       	mov	r22, r21
    4378:	54 2f       	mov	r21, r20
    437a:	43 2f       	mov	r20, r19
    437c:	32 2f       	mov	r19, r18
    437e:	22 27       	eor	r18, r18
    4380:	08 50       	subi	r16, 0x08	; 8
    4382:	f4 cf       	rjmp	.-24     	; 0x436c <__ashldi3+0x2>
    4384:	22 0f       	add	r18, r18
    4386:	33 1f       	adc	r19, r19
    4388:	44 1f       	adc	r20, r20
    438a:	55 1f       	adc	r21, r21
    438c:	66 1f       	adc	r22, r22
    438e:	77 1f       	adc	r23, r23
    4390:	88 1f       	adc	r24, r24
    4392:	99 1f       	adc	r25, r25
    4394:	0a 95       	dec	r16
    4396:	b2 f7       	brpl	.-20     	; 0x4384 <__ashldi3+0x1a>
    4398:	0f 91       	pop	r16
    439a:	08 95       	ret

0000439c <__ashrdi3>:
    439c:	97 fb       	bst	r25, 7
    439e:	10 f8       	bld	r1, 0

000043a0 <__lshrdi3>:
    43a0:	16 94       	lsr	r1
    43a2:	00 08       	sbc	r0, r0
    43a4:	0f 93       	push	r16
    43a6:	08 30       	cpi	r16, 0x08	; 8
    43a8:	98 f0       	brcs	.+38     	; 0x43d0 <__lshrdi3+0x30>
    43aa:	08 50       	subi	r16, 0x08	; 8
    43ac:	23 2f       	mov	r18, r19
    43ae:	34 2f       	mov	r19, r20
    43b0:	45 2f       	mov	r20, r21
    43b2:	56 2f       	mov	r21, r22
    43b4:	67 2f       	mov	r22, r23
    43b6:	78 2f       	mov	r23, r24
    43b8:	89 2f       	mov	r24, r25
    43ba:	90 2d       	mov	r25, r0
    43bc:	f4 cf       	rjmp	.-24     	; 0x43a6 <__lshrdi3+0x6>
    43be:	05 94       	asr	r0
    43c0:	97 95       	ror	r25
    43c2:	87 95       	ror	r24
    43c4:	77 95       	ror	r23
    43c6:	67 95       	ror	r22
    43c8:	57 95       	ror	r21
    43ca:	47 95       	ror	r20
    43cc:	37 95       	ror	r19
    43ce:	27 95       	ror	r18
    43d0:	0a 95       	dec	r16
    43d2:	aa f7       	brpl	.-22     	; 0x43be <__lshrdi3+0x1e>
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <__adddi3>:
    43d8:	2a 0d       	add	r18, r10
    43da:	3b 1d       	adc	r19, r11
    43dc:	4c 1d       	adc	r20, r12
    43de:	5d 1d       	adc	r21, r13
    43e0:	6e 1d       	adc	r22, r14
    43e2:	7f 1d       	adc	r23, r15
    43e4:	80 1f       	adc	r24, r16
    43e6:	91 1f       	adc	r25, r17
    43e8:	08 95       	ret

000043ea <__subdi3>:
    43ea:	2a 19       	sub	r18, r10
    43ec:	3b 09       	sbc	r19, r11
    43ee:	4c 09       	sbc	r20, r12
    43f0:	5d 09       	sbc	r21, r13
    43f2:	6e 09       	sbc	r22, r14
    43f4:	7f 09       	sbc	r23, r15
    43f6:	80 0b       	sbc	r24, r16
    43f8:	91 0b       	sbc	r25, r17
    43fa:	08 95       	ret

000043fc <__umulhisi3>:
    43fc:	a2 9f       	mul	r26, r18
    43fe:	b0 01       	movw	r22, r0
    4400:	b3 9f       	mul	r27, r19
    4402:	c0 01       	movw	r24, r0
    4404:	a3 9f       	mul	r26, r19
    4406:	70 0d       	add	r23, r0
    4408:	81 1d       	adc	r24, r1
    440a:	11 24       	eor	r1, r1
    440c:	91 1d       	adc	r25, r1
    440e:	b2 9f       	mul	r27, r18
    4410:	70 0d       	add	r23, r0
    4412:	81 1d       	adc	r24, r1
    4414:	11 24       	eor	r1, r1
    4416:	91 1d       	adc	r25, r1
    4418:	08 95       	ret

0000441a <strcat_P>:
    441a:	fb 01       	movw	r30, r22
    441c:	dc 01       	movw	r26, r24
    441e:	0d 90       	ld	r0, X+
    4420:	00 20       	and	r0, r0
    4422:	e9 f7       	brne	.-6      	; 0x441e <strcat_P+0x4>
    4424:	11 97       	sbiw	r26, 0x01	; 1
    4426:	05 90       	lpm	r0, Z+
    4428:	0d 92       	st	X+, r0
    442a:	00 20       	and	r0, r0
    442c:	e1 f7       	brne	.-8      	; 0x4426 <strcat_P+0xc>
    442e:	08 95       	ret

00004430 <sprintf>:
    4430:	ae e0       	ldi	r26, 0x0E	; 14
    4432:	b0 e0       	ldi	r27, 0x00	; 0
    4434:	ee e1       	ldi	r30, 0x1E	; 30
    4436:	f2 e2       	ldi	r31, 0x22	; 34
    4438:	0c 94 c0 24 	jmp	0x4980	; 0x4980 <__prologue_saves__+0x1c>
    443c:	0d 89       	ldd	r16, Y+21	; 0x15
    443e:	1e 89       	ldd	r17, Y+22	; 0x16
    4440:	86 e0       	ldi	r24, 0x06	; 6
    4442:	8c 83       	std	Y+4, r24	; 0x04
    4444:	1a 83       	std	Y+2, r17	; 0x02
    4446:	09 83       	std	Y+1, r16	; 0x01
    4448:	8f ef       	ldi	r24, 0xFF	; 255
    444a:	9f e7       	ldi	r25, 0x7F	; 127
    444c:	9e 83       	std	Y+6, r25	; 0x06
    444e:	8d 83       	std	Y+5, r24	; 0x05
    4450:	ae 01       	movw	r20, r28
    4452:	47 5e       	subi	r20, 0xE7	; 231
    4454:	5f 4f       	sbci	r21, 0xFF	; 255
    4456:	6f 89       	ldd	r22, Y+23	; 0x17
    4458:	78 8d       	ldd	r23, Y+24	; 0x18
    445a:	ce 01       	movw	r24, r28
    445c:	01 96       	adiw	r24, 0x01	; 1
    445e:	0e 94 3a 22 	call	0x4474	; 0x4474 <vfprintf>
    4462:	ef 81       	ldd	r30, Y+7	; 0x07
    4464:	f8 85       	ldd	r31, Y+8	; 0x08
    4466:	e0 0f       	add	r30, r16
    4468:	f1 1f       	adc	r31, r17
    446a:	10 82       	st	Z, r1
    446c:	2e 96       	adiw	r28, 0x0e	; 14
    446e:	e4 e0       	ldi	r30, 0x04	; 4
    4470:	0c 94 dc 24 	jmp	0x49b8	; 0x49b8 <__epilogue_restores__+0x1c>

00004474 <vfprintf>:
    4474:	ac e0       	ldi	r26, 0x0C	; 12
    4476:	b0 e0       	ldi	r27, 0x00	; 0
    4478:	e0 e4       	ldi	r30, 0x40	; 64
    447a:	f2 e2       	ldi	r31, 0x22	; 34
    447c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__>
    4480:	7c 01       	movw	r14, r24
    4482:	6b 01       	movw	r12, r22
    4484:	8a 01       	movw	r16, r20
    4486:	fc 01       	movw	r30, r24
    4488:	17 82       	std	Z+7, r1	; 0x07
    448a:	16 82       	std	Z+6, r1	; 0x06
    448c:	83 81       	ldd	r24, Z+3	; 0x03
    448e:	81 ff       	sbrs	r24, 1
    4490:	bd c1       	rjmp	.+890    	; 0x480c <vfprintf+0x398>
    4492:	ce 01       	movw	r24, r28
    4494:	01 96       	adiw	r24, 0x01	; 1
    4496:	4c 01       	movw	r8, r24
    4498:	f7 01       	movw	r30, r14
    449a:	93 81       	ldd	r25, Z+3	; 0x03
    449c:	f6 01       	movw	r30, r12
    449e:	93 fd       	sbrc	r25, 3
    44a0:	85 91       	lpm	r24, Z+
    44a2:	93 ff       	sbrs	r25, 3
    44a4:	81 91       	ld	r24, Z+
    44a6:	6f 01       	movw	r12, r30
    44a8:	88 23       	and	r24, r24
    44aa:	09 f4       	brne	.+2      	; 0x44ae <vfprintf+0x3a>
    44ac:	ab c1       	rjmp	.+854    	; 0x4804 <vfprintf+0x390>
    44ae:	85 32       	cpi	r24, 0x25	; 37
    44b0:	39 f4       	brne	.+14     	; 0x44c0 <vfprintf+0x4c>
    44b2:	93 fd       	sbrc	r25, 3
    44b4:	85 91       	lpm	r24, Z+
    44b6:	93 ff       	sbrs	r25, 3
    44b8:	81 91       	ld	r24, Z+
    44ba:	6f 01       	movw	r12, r30
    44bc:	85 32       	cpi	r24, 0x25	; 37
    44be:	29 f4       	brne	.+10     	; 0x44ca <vfprintf+0x56>
    44c0:	b7 01       	movw	r22, r14
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    44c8:	e7 cf       	rjmp	.-50     	; 0x4498 <vfprintf+0x24>
    44ca:	51 2c       	mov	r5, r1
    44cc:	31 2c       	mov	r3, r1
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	20 32       	cpi	r18, 0x20	; 32
    44d2:	a0 f4       	brcc	.+40     	; 0x44fc <vfprintf+0x88>
    44d4:	8b 32       	cpi	r24, 0x2B	; 43
    44d6:	69 f0       	breq	.+26     	; 0x44f2 <vfprintf+0x7e>
    44d8:	30 f4       	brcc	.+12     	; 0x44e6 <vfprintf+0x72>
    44da:	80 32       	cpi	r24, 0x20	; 32
    44dc:	59 f0       	breq	.+22     	; 0x44f4 <vfprintf+0x80>
    44de:	83 32       	cpi	r24, 0x23	; 35
    44e0:	69 f4       	brne	.+26     	; 0x44fc <vfprintf+0x88>
    44e2:	20 61       	ori	r18, 0x10	; 16
    44e4:	2c c0       	rjmp	.+88     	; 0x453e <vfprintf+0xca>
    44e6:	8d 32       	cpi	r24, 0x2D	; 45
    44e8:	39 f0       	breq	.+14     	; 0x44f8 <vfprintf+0x84>
    44ea:	80 33       	cpi	r24, 0x30	; 48
    44ec:	39 f4       	brne	.+14     	; 0x44fc <vfprintf+0x88>
    44ee:	21 60       	ori	r18, 0x01	; 1
    44f0:	26 c0       	rjmp	.+76     	; 0x453e <vfprintf+0xca>
    44f2:	22 60       	ori	r18, 0x02	; 2
    44f4:	24 60       	ori	r18, 0x04	; 4
    44f6:	23 c0       	rjmp	.+70     	; 0x453e <vfprintf+0xca>
    44f8:	28 60       	ori	r18, 0x08	; 8
    44fa:	21 c0       	rjmp	.+66     	; 0x453e <vfprintf+0xca>
    44fc:	27 fd       	sbrc	r18, 7
    44fe:	27 c0       	rjmp	.+78     	; 0x454e <vfprintf+0xda>
    4500:	30 ed       	ldi	r19, 0xD0	; 208
    4502:	38 0f       	add	r19, r24
    4504:	3a 30       	cpi	r19, 0x0A	; 10
    4506:	78 f4       	brcc	.+30     	; 0x4526 <vfprintf+0xb2>
    4508:	26 ff       	sbrs	r18, 6
    450a:	06 c0       	rjmp	.+12     	; 0x4518 <vfprintf+0xa4>
    450c:	fa e0       	ldi	r31, 0x0A	; 10
    450e:	5f 9e       	mul	r5, r31
    4510:	30 0d       	add	r19, r0
    4512:	11 24       	eor	r1, r1
    4514:	53 2e       	mov	r5, r19
    4516:	13 c0       	rjmp	.+38     	; 0x453e <vfprintf+0xca>
    4518:	8a e0       	ldi	r24, 0x0A	; 10
    451a:	38 9e       	mul	r3, r24
    451c:	30 0d       	add	r19, r0
    451e:	11 24       	eor	r1, r1
    4520:	33 2e       	mov	r3, r19
    4522:	20 62       	ori	r18, 0x20	; 32
    4524:	0c c0       	rjmp	.+24     	; 0x453e <vfprintf+0xca>
    4526:	8e 32       	cpi	r24, 0x2E	; 46
    4528:	21 f4       	brne	.+8      	; 0x4532 <vfprintf+0xbe>
    452a:	26 fd       	sbrc	r18, 6
    452c:	6b c1       	rjmp	.+726    	; 0x4804 <vfprintf+0x390>
    452e:	20 64       	ori	r18, 0x40	; 64
    4530:	06 c0       	rjmp	.+12     	; 0x453e <vfprintf+0xca>
    4532:	8c 36       	cpi	r24, 0x6C	; 108
    4534:	11 f4       	brne	.+4      	; 0x453a <vfprintf+0xc6>
    4536:	20 68       	ori	r18, 0x80	; 128
    4538:	02 c0       	rjmp	.+4      	; 0x453e <vfprintf+0xca>
    453a:	88 36       	cpi	r24, 0x68	; 104
    453c:	41 f4       	brne	.+16     	; 0x454e <vfprintf+0xda>
    453e:	f6 01       	movw	r30, r12
    4540:	93 fd       	sbrc	r25, 3
    4542:	85 91       	lpm	r24, Z+
    4544:	93 ff       	sbrs	r25, 3
    4546:	81 91       	ld	r24, Z+
    4548:	6f 01       	movw	r12, r30
    454a:	81 11       	cpse	r24, r1
    454c:	c1 cf       	rjmp	.-126    	; 0x44d0 <vfprintf+0x5c>
    454e:	98 2f       	mov	r25, r24
    4550:	9f 7d       	andi	r25, 0xDF	; 223
    4552:	95 54       	subi	r25, 0x45	; 69
    4554:	93 30       	cpi	r25, 0x03	; 3
    4556:	28 f4       	brcc	.+10     	; 0x4562 <vfprintf+0xee>
    4558:	0c 5f       	subi	r16, 0xFC	; 252
    455a:	1f 4f       	sbci	r17, 0xFF	; 255
    455c:	ff e3       	ldi	r31, 0x3F	; 63
    455e:	f9 83       	std	Y+1, r31	; 0x01
    4560:	0d c0       	rjmp	.+26     	; 0x457c <vfprintf+0x108>
    4562:	83 36       	cpi	r24, 0x63	; 99
    4564:	31 f0       	breq	.+12     	; 0x4572 <vfprintf+0xfe>
    4566:	83 37       	cpi	r24, 0x73	; 115
    4568:	71 f0       	breq	.+28     	; 0x4586 <vfprintf+0x112>
    456a:	83 35       	cpi	r24, 0x53	; 83
    456c:	09 f0       	breq	.+2      	; 0x4570 <vfprintf+0xfc>
    456e:	5b c0       	rjmp	.+182    	; 0x4626 <vfprintf+0x1b2>
    4570:	22 c0       	rjmp	.+68     	; 0x45b6 <vfprintf+0x142>
    4572:	f8 01       	movw	r30, r16
    4574:	80 81       	ld	r24, Z
    4576:	89 83       	std	Y+1, r24	; 0x01
    4578:	0e 5f       	subi	r16, 0xFE	; 254
    457a:	1f 4f       	sbci	r17, 0xFF	; 255
    457c:	44 24       	eor	r4, r4
    457e:	43 94       	inc	r4
    4580:	51 2c       	mov	r5, r1
    4582:	54 01       	movw	r10, r8
    4584:	15 c0       	rjmp	.+42     	; 0x45b0 <vfprintf+0x13c>
    4586:	38 01       	movw	r6, r16
    4588:	f2 e0       	ldi	r31, 0x02	; 2
    458a:	6f 0e       	add	r6, r31
    458c:	71 1c       	adc	r7, r1
    458e:	f8 01       	movw	r30, r16
    4590:	a0 80       	ld	r10, Z
    4592:	b1 80       	ldd	r11, Z+1	; 0x01
    4594:	26 ff       	sbrs	r18, 6
    4596:	03 c0       	rjmp	.+6      	; 0x459e <vfprintf+0x12a>
    4598:	65 2d       	mov	r22, r5
    459a:	70 e0       	ldi	r23, 0x00	; 0
    459c:	02 c0       	rjmp	.+4      	; 0x45a2 <vfprintf+0x12e>
    459e:	6f ef       	ldi	r22, 0xFF	; 255
    45a0:	7f ef       	ldi	r23, 0xFF	; 255
    45a2:	c5 01       	movw	r24, r10
    45a4:	2c 87       	std	Y+12, r18	; 0x0c
    45a6:	0e 94 17 24 	call	0x482e	; 0x482e <strnlen>
    45aa:	2c 01       	movw	r4, r24
    45ac:	83 01       	movw	r16, r6
    45ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    45b0:	2f 77       	andi	r18, 0x7F	; 127
    45b2:	22 2e       	mov	r2, r18
    45b4:	17 c0       	rjmp	.+46     	; 0x45e4 <vfprintf+0x170>
    45b6:	38 01       	movw	r6, r16
    45b8:	f2 e0       	ldi	r31, 0x02	; 2
    45ba:	6f 0e       	add	r6, r31
    45bc:	71 1c       	adc	r7, r1
    45be:	f8 01       	movw	r30, r16
    45c0:	a0 80       	ld	r10, Z
    45c2:	b1 80       	ldd	r11, Z+1	; 0x01
    45c4:	26 ff       	sbrs	r18, 6
    45c6:	03 c0       	rjmp	.+6      	; 0x45ce <vfprintf+0x15a>
    45c8:	65 2d       	mov	r22, r5
    45ca:	70 e0       	ldi	r23, 0x00	; 0
    45cc:	02 c0       	rjmp	.+4      	; 0x45d2 <vfprintf+0x15e>
    45ce:	6f ef       	ldi	r22, 0xFF	; 255
    45d0:	7f ef       	ldi	r23, 0xFF	; 255
    45d2:	c5 01       	movw	r24, r10
    45d4:	2c 87       	std	Y+12, r18	; 0x0c
    45d6:	0e 94 0c 24 	call	0x4818	; 0x4818 <strnlen_P>
    45da:	2c 01       	movw	r4, r24
    45dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    45de:	20 68       	ori	r18, 0x80	; 128
    45e0:	22 2e       	mov	r2, r18
    45e2:	83 01       	movw	r16, r6
    45e4:	23 fc       	sbrc	r2, 3
    45e6:	1b c0       	rjmp	.+54     	; 0x461e <vfprintf+0x1aa>
    45e8:	83 2d       	mov	r24, r3
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	48 16       	cp	r4, r24
    45ee:	59 06       	cpc	r5, r25
    45f0:	b0 f4       	brcc	.+44     	; 0x461e <vfprintf+0x1aa>
    45f2:	b7 01       	movw	r22, r14
    45f4:	80 e2       	ldi	r24, 0x20	; 32
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    45fc:	3a 94       	dec	r3
    45fe:	f4 cf       	rjmp	.-24     	; 0x45e8 <vfprintf+0x174>
    4600:	f5 01       	movw	r30, r10
    4602:	27 fc       	sbrc	r2, 7
    4604:	85 91       	lpm	r24, Z+
    4606:	27 fe       	sbrs	r2, 7
    4608:	81 91       	ld	r24, Z+
    460a:	5f 01       	movw	r10, r30
    460c:	b7 01       	movw	r22, r14
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    4614:	31 10       	cpse	r3, r1
    4616:	3a 94       	dec	r3
    4618:	f1 e0       	ldi	r31, 0x01	; 1
    461a:	4f 1a       	sub	r4, r31
    461c:	51 08       	sbc	r5, r1
    461e:	41 14       	cp	r4, r1
    4620:	51 04       	cpc	r5, r1
    4622:	71 f7       	brne	.-36     	; 0x4600 <vfprintf+0x18c>
    4624:	e5 c0       	rjmp	.+458    	; 0x47f0 <vfprintf+0x37c>
    4626:	84 36       	cpi	r24, 0x64	; 100
    4628:	11 f0       	breq	.+4      	; 0x462e <vfprintf+0x1ba>
    462a:	89 36       	cpi	r24, 0x69	; 105
    462c:	39 f5       	brne	.+78     	; 0x467c <vfprintf+0x208>
    462e:	f8 01       	movw	r30, r16
    4630:	27 ff       	sbrs	r18, 7
    4632:	07 c0       	rjmp	.+14     	; 0x4642 <vfprintf+0x1ce>
    4634:	60 81       	ld	r22, Z
    4636:	71 81       	ldd	r23, Z+1	; 0x01
    4638:	82 81       	ldd	r24, Z+2	; 0x02
    463a:	93 81       	ldd	r25, Z+3	; 0x03
    463c:	0c 5f       	subi	r16, 0xFC	; 252
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	08 c0       	rjmp	.+16     	; 0x4652 <vfprintf+0x1de>
    4642:	60 81       	ld	r22, Z
    4644:	71 81       	ldd	r23, Z+1	; 0x01
    4646:	88 27       	eor	r24, r24
    4648:	77 fd       	sbrc	r23, 7
    464a:	80 95       	com	r24
    464c:	98 2f       	mov	r25, r24
    464e:	0e 5f       	subi	r16, 0xFE	; 254
    4650:	1f 4f       	sbci	r17, 0xFF	; 255
    4652:	2f 76       	andi	r18, 0x6F	; 111
    4654:	b2 2e       	mov	r11, r18
    4656:	97 ff       	sbrs	r25, 7
    4658:	09 c0       	rjmp	.+18     	; 0x466c <vfprintf+0x1f8>
    465a:	90 95       	com	r25
    465c:	80 95       	com	r24
    465e:	70 95       	com	r23
    4660:	61 95       	neg	r22
    4662:	7f 4f       	sbci	r23, 0xFF	; 255
    4664:	8f 4f       	sbci	r24, 0xFF	; 255
    4666:	9f 4f       	sbci	r25, 0xFF	; 255
    4668:	20 68       	ori	r18, 0x80	; 128
    466a:	b2 2e       	mov	r11, r18
    466c:	2a e0       	ldi	r18, 0x0A	; 10
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	a4 01       	movw	r20, r8
    4672:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__ultoa_invert>
    4676:	a8 2e       	mov	r10, r24
    4678:	a8 18       	sub	r10, r8
    467a:	44 c0       	rjmp	.+136    	; 0x4704 <vfprintf+0x290>
    467c:	85 37       	cpi	r24, 0x75	; 117
    467e:	29 f4       	brne	.+10     	; 0x468a <vfprintf+0x216>
    4680:	2f 7e       	andi	r18, 0xEF	; 239
    4682:	b2 2e       	mov	r11, r18
    4684:	2a e0       	ldi	r18, 0x0A	; 10
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	25 c0       	rjmp	.+74     	; 0x46d4 <vfprintf+0x260>
    468a:	f2 2f       	mov	r31, r18
    468c:	f9 7f       	andi	r31, 0xF9	; 249
    468e:	bf 2e       	mov	r11, r31
    4690:	8f 36       	cpi	r24, 0x6F	; 111
    4692:	c1 f0       	breq	.+48     	; 0x46c4 <vfprintf+0x250>
    4694:	18 f4       	brcc	.+6      	; 0x469c <vfprintf+0x228>
    4696:	88 35       	cpi	r24, 0x58	; 88
    4698:	79 f0       	breq	.+30     	; 0x46b8 <vfprintf+0x244>
    469a:	b4 c0       	rjmp	.+360    	; 0x4804 <vfprintf+0x390>
    469c:	80 37       	cpi	r24, 0x70	; 112
    469e:	19 f0       	breq	.+6      	; 0x46a6 <vfprintf+0x232>
    46a0:	88 37       	cpi	r24, 0x78	; 120
    46a2:	21 f0       	breq	.+8      	; 0x46ac <vfprintf+0x238>
    46a4:	af c0       	rjmp	.+350    	; 0x4804 <vfprintf+0x390>
    46a6:	2f 2f       	mov	r18, r31
    46a8:	20 61       	ori	r18, 0x10	; 16
    46aa:	b2 2e       	mov	r11, r18
    46ac:	b4 fe       	sbrs	r11, 4
    46ae:	0d c0       	rjmp	.+26     	; 0x46ca <vfprintf+0x256>
    46b0:	8b 2d       	mov	r24, r11
    46b2:	84 60       	ori	r24, 0x04	; 4
    46b4:	b8 2e       	mov	r11, r24
    46b6:	09 c0       	rjmp	.+18     	; 0x46ca <vfprintf+0x256>
    46b8:	24 ff       	sbrs	r18, 4
    46ba:	0a c0       	rjmp	.+20     	; 0x46d0 <vfprintf+0x25c>
    46bc:	9f 2f       	mov	r25, r31
    46be:	96 60       	ori	r25, 0x06	; 6
    46c0:	b9 2e       	mov	r11, r25
    46c2:	06 c0       	rjmp	.+12     	; 0x46d0 <vfprintf+0x25c>
    46c4:	28 e0       	ldi	r18, 0x08	; 8
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	05 c0       	rjmp	.+10     	; 0x46d4 <vfprintf+0x260>
    46ca:	20 e1       	ldi	r18, 0x10	; 16
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	02 c0       	rjmp	.+4      	; 0x46d4 <vfprintf+0x260>
    46d0:	20 e1       	ldi	r18, 0x10	; 16
    46d2:	32 e0       	ldi	r19, 0x02	; 2
    46d4:	f8 01       	movw	r30, r16
    46d6:	b7 fe       	sbrs	r11, 7
    46d8:	07 c0       	rjmp	.+14     	; 0x46e8 <vfprintf+0x274>
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	0c 5f       	subi	r16, 0xFC	; 252
    46e4:	1f 4f       	sbci	r17, 0xFF	; 255
    46e6:	06 c0       	rjmp	.+12     	; 0x46f4 <vfprintf+0x280>
    46e8:	60 81       	ld	r22, Z
    46ea:	71 81       	ldd	r23, Z+1	; 0x01
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 5f       	subi	r16, 0xFE	; 254
    46f2:	1f 4f       	sbci	r17, 0xFF	; 255
    46f4:	a4 01       	movw	r20, r8
    46f6:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__ultoa_invert>
    46fa:	a8 2e       	mov	r10, r24
    46fc:	a8 18       	sub	r10, r8
    46fe:	fb 2d       	mov	r31, r11
    4700:	ff 77       	andi	r31, 0x7F	; 127
    4702:	bf 2e       	mov	r11, r31
    4704:	b6 fe       	sbrs	r11, 6
    4706:	0b c0       	rjmp	.+22     	; 0x471e <vfprintf+0x2aa>
    4708:	2b 2d       	mov	r18, r11
    470a:	2e 7f       	andi	r18, 0xFE	; 254
    470c:	a5 14       	cp	r10, r5
    470e:	50 f4       	brcc	.+20     	; 0x4724 <vfprintf+0x2b0>
    4710:	b4 fe       	sbrs	r11, 4
    4712:	0a c0       	rjmp	.+20     	; 0x4728 <vfprintf+0x2b4>
    4714:	b2 fc       	sbrc	r11, 2
    4716:	08 c0       	rjmp	.+16     	; 0x4728 <vfprintf+0x2b4>
    4718:	2b 2d       	mov	r18, r11
    471a:	2e 7e       	andi	r18, 0xEE	; 238
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <vfprintf+0x2b4>
    471e:	7a 2c       	mov	r7, r10
    4720:	2b 2d       	mov	r18, r11
    4722:	03 c0       	rjmp	.+6      	; 0x472a <vfprintf+0x2b6>
    4724:	7a 2c       	mov	r7, r10
    4726:	01 c0       	rjmp	.+2      	; 0x472a <vfprintf+0x2b6>
    4728:	75 2c       	mov	r7, r5
    472a:	24 ff       	sbrs	r18, 4
    472c:	0d c0       	rjmp	.+26     	; 0x4748 <vfprintf+0x2d4>
    472e:	fe 01       	movw	r30, r28
    4730:	ea 0d       	add	r30, r10
    4732:	f1 1d       	adc	r31, r1
    4734:	80 81       	ld	r24, Z
    4736:	80 33       	cpi	r24, 0x30	; 48
    4738:	11 f4       	brne	.+4      	; 0x473e <vfprintf+0x2ca>
    473a:	29 7e       	andi	r18, 0xE9	; 233
    473c:	09 c0       	rjmp	.+18     	; 0x4750 <vfprintf+0x2dc>
    473e:	22 ff       	sbrs	r18, 2
    4740:	06 c0       	rjmp	.+12     	; 0x474e <vfprintf+0x2da>
    4742:	73 94       	inc	r7
    4744:	73 94       	inc	r7
    4746:	04 c0       	rjmp	.+8      	; 0x4750 <vfprintf+0x2dc>
    4748:	82 2f       	mov	r24, r18
    474a:	86 78       	andi	r24, 0x86	; 134
    474c:	09 f0       	breq	.+2      	; 0x4750 <vfprintf+0x2dc>
    474e:	73 94       	inc	r7
    4750:	23 fd       	sbrc	r18, 3
    4752:	13 c0       	rjmp	.+38     	; 0x477a <vfprintf+0x306>
    4754:	20 ff       	sbrs	r18, 0
    4756:	06 c0       	rjmp	.+12     	; 0x4764 <vfprintf+0x2f0>
    4758:	5a 2c       	mov	r5, r10
    475a:	73 14       	cp	r7, r3
    475c:	18 f4       	brcc	.+6      	; 0x4764 <vfprintf+0x2f0>
    475e:	53 0c       	add	r5, r3
    4760:	57 18       	sub	r5, r7
    4762:	73 2c       	mov	r7, r3
    4764:	73 14       	cp	r7, r3
    4766:	68 f4       	brcc	.+26     	; 0x4782 <vfprintf+0x30e>
    4768:	b7 01       	movw	r22, r14
    476a:	80 e2       	ldi	r24, 0x20	; 32
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	2c 87       	std	Y+12, r18	; 0x0c
    4770:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    4774:	73 94       	inc	r7
    4776:	2c 85       	ldd	r18, Y+12	; 0x0c
    4778:	f5 cf       	rjmp	.-22     	; 0x4764 <vfprintf+0x2f0>
    477a:	73 14       	cp	r7, r3
    477c:	10 f4       	brcc	.+4      	; 0x4782 <vfprintf+0x30e>
    477e:	37 18       	sub	r3, r7
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <vfprintf+0x310>
    4782:	31 2c       	mov	r3, r1
    4784:	24 ff       	sbrs	r18, 4
    4786:	12 c0       	rjmp	.+36     	; 0x47ac <vfprintf+0x338>
    4788:	b7 01       	movw	r22, r14
    478a:	80 e3       	ldi	r24, 0x30	; 48
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	2c 87       	std	Y+12, r18	; 0x0c
    4790:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    4794:	2c 85       	ldd	r18, Y+12	; 0x0c
    4796:	22 ff       	sbrs	r18, 2
    4798:	17 c0       	rjmp	.+46     	; 0x47c8 <vfprintf+0x354>
    479a:	21 ff       	sbrs	r18, 1
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <vfprintf+0x330>
    479e:	88 e5       	ldi	r24, 0x58	; 88
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	02 c0       	rjmp	.+4      	; 0x47a8 <vfprintf+0x334>
    47a4:	88 e7       	ldi	r24, 0x78	; 120
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	b7 01       	movw	r22, r14
    47aa:	0c c0       	rjmp	.+24     	; 0x47c4 <vfprintf+0x350>
    47ac:	82 2f       	mov	r24, r18
    47ae:	86 78       	andi	r24, 0x86	; 134
    47b0:	59 f0       	breq	.+22     	; 0x47c8 <vfprintf+0x354>
    47b2:	21 fd       	sbrc	r18, 1
    47b4:	02 c0       	rjmp	.+4      	; 0x47ba <vfprintf+0x346>
    47b6:	80 e2       	ldi	r24, 0x20	; 32
    47b8:	01 c0       	rjmp	.+2      	; 0x47bc <vfprintf+0x348>
    47ba:	8b e2       	ldi	r24, 0x2B	; 43
    47bc:	27 fd       	sbrc	r18, 7
    47be:	8d e2       	ldi	r24, 0x2D	; 45
    47c0:	b7 01       	movw	r22, r14
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    47c8:	a5 14       	cp	r10, r5
    47ca:	38 f4       	brcc	.+14     	; 0x47da <vfprintf+0x366>
    47cc:	b7 01       	movw	r22, r14
    47ce:	80 e3       	ldi	r24, 0x30	; 48
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    47d6:	5a 94       	dec	r5
    47d8:	f7 cf       	rjmp	.-18     	; 0x47c8 <vfprintf+0x354>
    47da:	aa 94       	dec	r10
    47dc:	f4 01       	movw	r30, r8
    47de:	ea 0d       	add	r30, r10
    47e0:	f1 1d       	adc	r31, r1
    47e2:	80 81       	ld	r24, Z
    47e4:	b7 01       	movw	r22, r14
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    47ec:	a1 10       	cpse	r10, r1
    47ee:	f5 cf       	rjmp	.-22     	; 0x47da <vfprintf+0x366>
    47f0:	33 20       	and	r3, r3
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <vfprintf+0x382>
    47f4:	51 ce       	rjmp	.-862    	; 0x4498 <vfprintf+0x24>
    47f6:	b7 01       	movw	r22, r14
    47f8:	80 e2       	ldi	r24, 0x20	; 32
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 94 22 24 	call	0x4844	; 0x4844 <fputc>
    4800:	3a 94       	dec	r3
    4802:	f6 cf       	rjmp	.-20     	; 0x47f0 <vfprintf+0x37c>
    4804:	f7 01       	movw	r30, r14
    4806:	86 81       	ldd	r24, Z+6	; 0x06
    4808:	97 81       	ldd	r25, Z+7	; 0x07
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <vfprintf+0x39c>
    480c:	8f ef       	ldi	r24, 0xFF	; 255
    480e:	9f ef       	ldi	r25, 0xFF	; 255
    4810:	2c 96       	adiw	r28, 0x0c	; 12
    4812:	e2 e1       	ldi	r30, 0x12	; 18
    4814:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__>

00004818 <strnlen_P>:
    4818:	fc 01       	movw	r30, r24
    481a:	05 90       	lpm	r0, Z+
    481c:	61 50       	subi	r22, 0x01	; 1
    481e:	70 40       	sbci	r23, 0x00	; 0
    4820:	01 10       	cpse	r0, r1
    4822:	d8 f7       	brcc	.-10     	; 0x481a <strnlen_P+0x2>
    4824:	80 95       	com	r24
    4826:	90 95       	com	r25
    4828:	8e 0f       	add	r24, r30
    482a:	9f 1f       	adc	r25, r31
    482c:	08 95       	ret

0000482e <strnlen>:
    482e:	fc 01       	movw	r30, r24
    4830:	61 50       	subi	r22, 0x01	; 1
    4832:	70 40       	sbci	r23, 0x00	; 0
    4834:	01 90       	ld	r0, Z+
    4836:	01 10       	cpse	r0, r1
    4838:	d8 f7       	brcc	.-10     	; 0x4830 <strnlen+0x2>
    483a:	80 95       	com	r24
    483c:	90 95       	com	r25
    483e:	8e 0f       	add	r24, r30
    4840:	9f 1f       	adc	r25, r31
    4842:	08 95       	ret

00004844 <fputc>:
    4844:	0f 93       	push	r16
    4846:	1f 93       	push	r17
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	18 2f       	mov	r17, r24
    484e:	09 2f       	mov	r16, r25
    4850:	eb 01       	movw	r28, r22
    4852:	8b 81       	ldd	r24, Y+3	; 0x03
    4854:	81 fd       	sbrc	r24, 1
    4856:	03 c0       	rjmp	.+6      	; 0x485e <fputc+0x1a>
    4858:	8f ef       	ldi	r24, 0xFF	; 255
    485a:	9f ef       	ldi	r25, 0xFF	; 255
    485c:	20 c0       	rjmp	.+64     	; 0x489e <fputc+0x5a>
    485e:	82 ff       	sbrs	r24, 2
    4860:	10 c0       	rjmp	.+32     	; 0x4882 <fputc+0x3e>
    4862:	4e 81       	ldd	r20, Y+6	; 0x06
    4864:	5f 81       	ldd	r21, Y+7	; 0x07
    4866:	2c 81       	ldd	r18, Y+4	; 0x04
    4868:	3d 81       	ldd	r19, Y+5	; 0x05
    486a:	42 17       	cp	r20, r18
    486c:	53 07       	cpc	r21, r19
    486e:	7c f4       	brge	.+30     	; 0x488e <fputc+0x4a>
    4870:	e8 81       	ld	r30, Y
    4872:	f9 81       	ldd	r31, Y+1	; 0x01
    4874:	9f 01       	movw	r18, r30
    4876:	2f 5f       	subi	r18, 0xFF	; 255
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	39 83       	std	Y+1, r19	; 0x01
    487c:	28 83       	st	Y, r18
    487e:	10 83       	st	Z, r17
    4880:	06 c0       	rjmp	.+12     	; 0x488e <fputc+0x4a>
    4882:	e8 85       	ldd	r30, Y+8	; 0x08
    4884:	f9 85       	ldd	r31, Y+9	; 0x09
    4886:	81 2f       	mov	r24, r17
    4888:	09 95       	icall
    488a:	89 2b       	or	r24, r25
    488c:	29 f7       	brne	.-54     	; 0x4858 <fputc+0x14>
    488e:	2e 81       	ldd	r18, Y+6	; 0x06
    4890:	3f 81       	ldd	r19, Y+7	; 0x07
    4892:	2f 5f       	subi	r18, 0xFF	; 255
    4894:	3f 4f       	sbci	r19, 0xFF	; 255
    4896:	3f 83       	std	Y+7, r19	; 0x07
    4898:	2e 83       	std	Y+6, r18	; 0x06
    489a:	81 2f       	mov	r24, r17
    489c:	90 2f       	mov	r25, r16
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	1f 91       	pop	r17
    48a4:	0f 91       	pop	r16
    48a6:	08 95       	ret

000048a8 <__ultoa_invert>:
    48a8:	fa 01       	movw	r30, r20
    48aa:	aa 27       	eor	r26, r26
    48ac:	28 30       	cpi	r18, 0x08	; 8
    48ae:	51 f1       	breq	.+84     	; 0x4904 <__ultoa_invert+0x5c>
    48b0:	20 31       	cpi	r18, 0x10	; 16
    48b2:	81 f1       	breq	.+96     	; 0x4914 <__ultoa_invert+0x6c>
    48b4:	e8 94       	clt
    48b6:	6f 93       	push	r22
    48b8:	6e 7f       	andi	r22, 0xFE	; 254
    48ba:	6e 5f       	subi	r22, 0xFE	; 254
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	8f 4f       	sbci	r24, 0xFF	; 255
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	af 4f       	sbci	r26, 0xFF	; 255
    48c4:	b1 e0       	ldi	r27, 0x01	; 1
    48c6:	3e d0       	rcall	.+124    	; 0x4944 <__ultoa_invert+0x9c>
    48c8:	b4 e0       	ldi	r27, 0x04	; 4
    48ca:	3c d0       	rcall	.+120    	; 0x4944 <__ultoa_invert+0x9c>
    48cc:	67 0f       	add	r22, r23
    48ce:	78 1f       	adc	r23, r24
    48d0:	89 1f       	adc	r24, r25
    48d2:	9a 1f       	adc	r25, r26
    48d4:	a1 1d       	adc	r26, r1
    48d6:	68 0f       	add	r22, r24
    48d8:	79 1f       	adc	r23, r25
    48da:	8a 1f       	adc	r24, r26
    48dc:	91 1d       	adc	r25, r1
    48de:	a1 1d       	adc	r26, r1
    48e0:	6a 0f       	add	r22, r26
    48e2:	71 1d       	adc	r23, r1
    48e4:	81 1d       	adc	r24, r1
    48e6:	91 1d       	adc	r25, r1
    48e8:	a1 1d       	adc	r26, r1
    48ea:	20 d0       	rcall	.+64     	; 0x492c <__ultoa_invert+0x84>
    48ec:	09 f4       	brne	.+2      	; 0x48f0 <__ultoa_invert+0x48>
    48ee:	68 94       	set
    48f0:	3f 91       	pop	r19
    48f2:	2a e0       	ldi	r18, 0x0A	; 10
    48f4:	26 9f       	mul	r18, r22
    48f6:	11 24       	eor	r1, r1
    48f8:	30 19       	sub	r19, r0
    48fa:	30 5d       	subi	r19, 0xD0	; 208
    48fc:	31 93       	st	Z+, r19
    48fe:	de f6       	brtc	.-74     	; 0x48b6 <__ultoa_invert+0xe>
    4900:	cf 01       	movw	r24, r30
    4902:	08 95       	ret
    4904:	46 2f       	mov	r20, r22
    4906:	47 70       	andi	r20, 0x07	; 7
    4908:	40 5d       	subi	r20, 0xD0	; 208
    490a:	41 93       	st	Z+, r20
    490c:	b3 e0       	ldi	r27, 0x03	; 3
    490e:	0f d0       	rcall	.+30     	; 0x492e <__ultoa_invert+0x86>
    4910:	c9 f7       	brne	.-14     	; 0x4904 <__ultoa_invert+0x5c>
    4912:	f6 cf       	rjmp	.-20     	; 0x4900 <__ultoa_invert+0x58>
    4914:	46 2f       	mov	r20, r22
    4916:	4f 70       	andi	r20, 0x0F	; 15
    4918:	40 5d       	subi	r20, 0xD0	; 208
    491a:	4a 33       	cpi	r20, 0x3A	; 58
    491c:	18 f0       	brcs	.+6      	; 0x4924 <__ultoa_invert+0x7c>
    491e:	49 5d       	subi	r20, 0xD9	; 217
    4920:	31 fd       	sbrc	r19, 1
    4922:	40 52       	subi	r20, 0x20	; 32
    4924:	41 93       	st	Z+, r20
    4926:	02 d0       	rcall	.+4      	; 0x492c <__ultoa_invert+0x84>
    4928:	a9 f7       	brne	.-22     	; 0x4914 <__ultoa_invert+0x6c>
    492a:	ea cf       	rjmp	.-44     	; 0x4900 <__ultoa_invert+0x58>
    492c:	b4 e0       	ldi	r27, 0x04	; 4
    492e:	a6 95       	lsr	r26
    4930:	97 95       	ror	r25
    4932:	87 95       	ror	r24
    4934:	77 95       	ror	r23
    4936:	67 95       	ror	r22
    4938:	ba 95       	dec	r27
    493a:	c9 f7       	brne	.-14     	; 0x492e <__ultoa_invert+0x86>
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	61 05       	cpc	r22, r1
    4940:	71 05       	cpc	r23, r1
    4942:	08 95       	ret
    4944:	9b 01       	movw	r18, r22
    4946:	ac 01       	movw	r20, r24
    4948:	0a 2e       	mov	r0, r26
    494a:	06 94       	lsr	r0
    494c:	57 95       	ror	r21
    494e:	47 95       	ror	r20
    4950:	37 95       	ror	r19
    4952:	27 95       	ror	r18
    4954:	ba 95       	dec	r27
    4956:	c9 f7       	brne	.-14     	; 0x494a <__ultoa_invert+0xa2>
    4958:	62 0f       	add	r22, r18
    495a:	73 1f       	adc	r23, r19
    495c:	84 1f       	adc	r24, r20
    495e:	95 1f       	adc	r25, r21
    4960:	a0 1d       	adc	r26, r0
    4962:	08 95       	ret

00004964 <__prologue_saves__>:
    4964:	2f 92       	push	r2
    4966:	3f 92       	push	r3
    4968:	4f 92       	push	r4
    496a:	5f 92       	push	r5
    496c:	6f 92       	push	r6
    496e:	7f 92       	push	r7
    4970:	8f 92       	push	r8
    4972:	9f 92       	push	r9
    4974:	af 92       	push	r10
    4976:	bf 92       	push	r11
    4978:	cf 92       	push	r12
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	ca 1b       	sub	r28, r26
    498e:	db 0b       	sbc	r29, r27
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	09 94       	ijmp

0000499c <__epilogue_restores__>:
    499c:	2a 88       	ldd	r2, Y+18	; 0x12
    499e:	39 88       	ldd	r3, Y+17	; 0x11
    49a0:	48 88       	ldd	r4, Y+16	; 0x10
    49a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    49a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    49a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    49a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    49aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    49ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    49ae:	b9 84       	ldd	r11, Y+9	; 0x09
    49b0:	c8 84       	ldd	r12, Y+8	; 0x08
    49b2:	df 80       	ldd	r13, Y+7	; 0x07
    49b4:	ee 80       	ldd	r14, Y+6	; 0x06
    49b6:	fd 80       	ldd	r15, Y+5	; 0x05
    49b8:	0c 81       	ldd	r16, Y+4	; 0x04
    49ba:	1b 81       	ldd	r17, Y+3	; 0x03
    49bc:	aa 81       	ldd	r26, Y+2	; 0x02
    49be:	b9 81       	ldd	r27, Y+1	; 0x01
    49c0:	ce 0f       	add	r28, r30
    49c2:	d1 1d       	adc	r29, r1
    49c4:	0f b6       	in	r0, 0x3f	; 63
    49c6:	f8 94       	cli
    49c8:	de bf       	out	0x3e, r29	; 62
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	cd bf       	out	0x3d, r28	; 61
    49ce:	ed 01       	movw	r28, r26
    49d0:	08 95       	ret

000049d2 <_exit>:
    49d2:	f8 94       	cli

000049d4 <__stop_program>:
    49d4:	ff cf       	rjmp	.-2      	; 0x49d4 <__stop_program>
