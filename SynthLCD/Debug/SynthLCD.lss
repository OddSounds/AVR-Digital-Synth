
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f0  00800100  00004f44  00004fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  008004f0  008004f0  000053c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00005424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004226  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000343  00000000  00000000  000096d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013c5  00000000  00000000  00009a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000328  00000000  00000000  0000addc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b01  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000053b6  00000000  00000000  0000bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d8  00000000  00000000  00010fbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 03 	jmp	0x700	; 0x700 <__ctors_end>
       4:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       8:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      10:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      14:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      18:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      1c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      20:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      24:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__vector_9>
      28:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      2c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      30:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      34:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      38:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      3c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      40:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      48:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__vector_18>
      4c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      50:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      54:	0c 94 17 22 	jmp	0x442e	; 0x442e <__vector_21>
      58:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      5c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      60:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      64:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z9writeLinehPc+0x102>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <_Z14osc1MenuUpdatev+0x708>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <_Z14osc1MenuUpdatev+0x754>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <_ZL15phase1RouteName+0x4>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z9writeLinehPc+0x160>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <_Z14osc1MenuUpdatev+0x3a8>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <_Z14osc1MenuUpdatev+0x3ce>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <_Z14osc1MenuUpdatev+0x204>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <_Z14osc1MenuUpdatev+0x7f0>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <_Z14osc1MenuUpdatev+0x1ea>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z9writeLinehPc+0x118>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <_ZL15phase2RouteName+0x5>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <_ZL13waveNameTable+0xc>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__ctors_end>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <_Z14osc1MenuUpdatev+0x1ac>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <_Z14osc1MenuUpdatev+0x7b0>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <_Z14osc1MenuUpdatev+0x1d2>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <_Z14osc1MenuUpdatev+0x7dc>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <_Z14osc1MenuUpdatev+0x69e>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <_ZL19filterModeRouteName+0x6>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <_ZL14routeNameTable>:
     668:	d8 06 d3 06 cc 06 c5 06 be 06 b7 06 b0 06 a9 06     ................
     678:	a3 06 9d 06 96 06 8e 06                             ........

00000680 <_ZL13waveNameTable>:
     680:	fa 06 f6 06 f1 06 ec 06 e8 06 e2 06 dd 06           ..............

0000068e <_ZL19filterModeRouteName>:
     68e:	46 2e 20 4d 4f 44 45 00                             F. MODE.

00000696 <_ZL15cutoffRouteName>:
     696:	43 55 54 4f 46 46 00                                CUTOFF.

0000069d <_ZL17osc2WaveRouteName>:
     69d:	57 41 56 45 32 00                                   WAVE2.

000006a3 <_ZL17osc1WaveRouteName>:
     6a3:	57 41 56 45 31 00                                   WAVE1.

000006a9 <_ZL15phase2RouteName>:
     6a9:	50 48 41 53 45 32 00                                PHASE2.

000006b0 <_ZL15phase1RouteName>:
     6b0:	50 48 41 53 45 31 00                                PHASE1.

000006b7 <_ZL15semis2RouteName>:
     6b7:	53 45 4d 49 53 32 00                                SEMIS2.

000006be <_ZL15semis1RouteName>:
     6be:	53 45 4d 49 53 31 00                                SEMIS1.

000006c5 <_ZL15cents2RouteName>:
     6c5:	43 45 4e 54 53 32 00                                CENTS2.

000006cc <_ZL15cents1RouteName>:
     6cc:	43 45 4e 54 53 31 00                                CENTS1.

000006d3 <_ZL13osc2RouteName>:
     6d3:	4f 53 43 32 00                                      OSC2.

000006d8 <_ZL13osc1RouteName>:
     6d8:	4f 53 43 31 00                                      OSC1.

000006dd <_ZL12flatWaveName>:
     6dd:	46 4c 41 54 00                                      FLAT.

000006e2 <_ZL13noiseWaveName>:
     6e2:	4e 4f 49 53 45 00                                   NOISE.

000006e8 <_ZL10sqWaveName>:
     6e8:	53 51 55 00                                         SQU.

000006ec <_ZL12rsawWaveName>:
     6ec:	52 53 41 57 00                                      RSAW.

000006f1 <_ZL12lsawWaveName>:
     6f1:	4c 53 41 57 00                                      LSAW.

000006f6 <_ZL11triWaveName>:
     6f6:	54 52 49 00                                         TRI.

000006fa <_ZL12sineWaveName>:
     6fa:	53 49 4e 45 00 00                                   SINE..

00000700 <__ctors_end>:
     700:	11 24       	eor	r1, r1
     702:	1f be       	out	0x3f, r1	; 63
     704:	cf ef       	ldi	r28, 0xFF	; 255
     706:	d8 e0       	ldi	r29, 0x08	; 8
     708:	de bf       	out	0x3e, r29	; 62
     70a:	cd bf       	out	0x3d, r28	; 61

0000070c <__do_copy_data>:
     70c:	14 e0       	ldi	r17, 0x04	; 4
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b1 e0       	ldi	r27, 0x01	; 1
     712:	e4 e4       	ldi	r30, 0x44	; 68
     714:	ff e4       	ldi	r31, 0x4F	; 79
     716:	02 c0       	rjmp	.+4      	; 0x71c <__do_copy_data+0x10>
     718:	05 90       	lpm	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	a0 3f       	cpi	r26, 0xF0	; 240
     71e:	b1 07       	cpc	r27, r17
     720:	d9 f7       	brne	.-10     	; 0x718 <__do_copy_data+0xc>

00000722 <__do_clear_bss>:
     722:	25 e0       	ldi	r18, 0x05	; 5
     724:	a0 ef       	ldi	r26, 0xF0	; 240
     726:	b4 e0       	ldi	r27, 0x04	; 4
     728:	01 c0       	rjmp	.+2      	; 0x72c <.do_clear_bss_start>

0000072a <.do_clear_bss_loop>:
     72a:	1d 92       	st	X+, r1

0000072c <.do_clear_bss_start>:
     72c:	a2 3a       	cpi	r26, 0xA2	; 162
     72e:	b2 07       	cpc	r27, r18
     730:	e1 f7       	brne	.-8      	; 0x72a <.do_clear_bss_loop>
     732:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <main>
     736:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <_exit>

0000073a <__bad_interrupt>:
     73a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073e <_Z9writeLinehPc>:
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
}

inline void writeLine(unsigned char line, char* str)
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2d 97       	sbiw	r28, 0x0d	; 13
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
	char buf[13];
	memcpy(buf, str, 12);
     752:	9c e0       	ldi	r25, 0x0C	; 12
     754:	fb 01       	movw	r30, r22
     756:	de 01       	movw	r26, r28
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	9a 95       	dec	r25
     760:	e1 f7       	brne	.-8      	; 0x75a <_Z9writeLinehPc+0x1c>
	buf[12] = '\0';
     762:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     764:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     766:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     768:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     76a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     76c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     76e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     770:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     772:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     774:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     776:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     778:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     77a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     77c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     77e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     780:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     782:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     784:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     786:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     788:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     78a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     78c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     78e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     790:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     792:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     794:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     796:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     798:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     79a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     79c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     79e:	44 98       	cbi	0x08, 4	; 8
}

inline void gotoXY(char x, char y)
{
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
     7a0:	80 64       	ori	r24, 0x40	; 64

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7a2:	5c 98       	cbi	0x0b, 4	; 11
     7a4:	28 2f       	mov	r18, r24
     7a6:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7a8:	a9 01       	movw	r20, r18
     7aa:	44 0f       	add	r20, r20
     7ac:	45 2f       	mov	r20, r21
     7ae:	44 1f       	adc	r20, r20
     7b0:	55 0b       	sbc	r21, r21
     7b2:	45 2b       	or	r20, r21
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <_Z9writeLinehPc+0x7a>
     7b6:	d6 c0       	rjmp	.+428    	; 0x964 <__stack+0x65>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7bc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7be:	26 fd       	sbrc	r18, 6
     7c0:	cf c0       	rjmp	.+414    	; 0x960 <__stack+0x61>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7c6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7c8:	25 fd       	sbrc	r18, 5
     7ca:	c8 c0       	rjmp	.+400    	; 0x95c <__stack+0x5d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7d2:	24 fd       	sbrc	r18, 4
     7d4:	c1 c0       	rjmp	.+386    	; 0x958 <__stack+0x59>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7da:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7dc:	23 fd       	sbrc	r18, 3
     7de:	ba c0       	rjmp	.+372    	; 0x954 <__stack+0x55>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7e4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7e6:	22 fd       	sbrc	r18, 2
     7e8:	b3 c0       	rjmp	.+358    	; 0x950 <__stack+0x51>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7ee:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7f0:	21 fd       	sbrc	r18, 1
     7f2:	ac c0       	rjmp	.+344    	; 0x94c <__stack+0x4d>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     7f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     7f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     7f8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	a5 c0       	rjmp	.+330    	; 0x948 <__stack+0x49>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     7fe:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     800:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     802:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     804:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z9writeLinehPc+0xd0>
     80c:	81 c0       	rjmp	.+258    	; 0x910 <__stack+0x11>
     80e:	de 01       	movw	r26, r28
     810:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     812:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     814:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     816:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     818:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     81a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     81c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     81e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     820:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     822:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     824:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     826:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     828:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     82a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     82c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     82e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     830:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     832:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     834:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     836:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     838:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     83a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     83c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     83e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     840:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     842:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     844:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     846:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     848:	44 9a       	sbi	0x08, 4	; 8
     84a:	99 27       	eor	r25, r25
     84c:	87 fd       	sbrc	r24, 7
     84e:	90 95       	com	r25
     850:	80 97       	sbiw	r24, 0x20	; 32
     852:	fc 01       	movw	r30, r24
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	e0 5f       	subi	r30, 0xF0	; 240
     862:	fc 4f       	sbci	r31, 0xFC	; 252
     864:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     866:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     868:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     86a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     86c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     86e:	82 2f       	mov	r24, r18
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	88 0f       	add	r24, r24
     874:	89 2f       	mov	r24, r25
     876:	88 1f       	adc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	89 2b       	or	r24, r25
     87c:	09 f0       	breq	.+2      	; 0x880 <_Z9writeLinehPc+0x142>
     87e:	5d c0       	rjmp	.+186    	; 0x93a <__stack+0x3b>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     880:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     882:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     884:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     886:	26 fd       	sbrc	r18, 6
     888:	5d c0       	rjmp	.+186    	; 0x944 <__stack+0x45>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     88a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     88c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     88e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     890:	25 fd       	sbrc	r18, 5
     892:	51 c0       	rjmp	.+162    	; 0x936 <__stack+0x37>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     894:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     896:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     898:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     89a:	24 fd       	sbrc	r18, 4
     89c:	4a c0       	rjmp	.+148    	; 0x932 <__stack+0x33>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     89e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8a2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8a4:	23 fd       	sbrc	r18, 3
     8a6:	43 c0       	rjmp	.+134    	; 0x92e <__stack+0x2f>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8ae:	22 fd       	sbrc	r18, 2
     8b0:	3c c0       	rjmp	.+120    	; 0x92a <__stack+0x2b>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8b2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8b6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8b8:	21 fd       	sbrc	r18, 1
     8ba:	35 c0       	rjmp	.+106    	; 0x926 <__stack+0x27>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     8c2:	20 fd       	sbrc	r18, 0
     8c4:	2e c0       	rjmp	.+92     	; 0x922 <__stack+0x23>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     8cc:	44 9a       	sbi	0x08, 4	; 8
     8ce:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     8d0:	51 f6       	brne	.-108    	; 0x866 <_Z9writeLinehPc+0x128>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     8d2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     8d4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8e8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8ea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8ee:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     8fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     8fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     8fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     900:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     902:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     904:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     906:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     908:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     90a:	8d 91       	ld	r24, X+
     90c:	81 11       	cpse	r24, r1
     90e:	81 cf       	rjmp	.-254    	; 0x812 <_Z9writeLinehPc+0xd4>
	memcpy(buf, str, 12);
	buf[12] = '\0';
	
	gotoXY(0, line);
	lcdString(buf);
}
     910:	2d 96       	adiw	r28, 0x0d	; 13
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     922:	5d 9a       	sbi	0x0b, 5	; 11
     924:	d1 cf       	rjmp	.-94     	; 0x8c8 <_Z9writeLinehPc+0x18a>
     926:	5d 9a       	sbi	0x0b, 5	; 11
     928:	ca cf       	rjmp	.-108    	; 0x8be <_Z9writeLinehPc+0x180>
     92a:	5d 9a       	sbi	0x0b, 5	; 11
     92c:	c3 cf       	rjmp	.-122    	; 0x8b4 <_Z9writeLinehPc+0x176>
     92e:	5d 9a       	sbi	0x0b, 5	; 11
     930:	bc cf       	rjmp	.-136    	; 0x8aa <_Z9writeLinehPc+0x16c>
     932:	5d 9a       	sbi	0x0b, 5	; 11
     934:	b5 cf       	rjmp	.-150    	; 0x8a0 <_Z9writeLinehPc+0x162>
     936:	5d 9a       	sbi	0x0b, 5	; 11
     938:	ae cf       	rjmp	.-164    	; 0x896 <_Z9writeLinehPc+0x158>
     93a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     93c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     93e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     940:	26 ff       	sbrs	r18, 6
     942:	a3 cf       	rjmp	.-186    	; 0x88a <_Z9writeLinehPc+0x14c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     944:	5d 9a       	sbi	0x0b, 5	; 11
     946:	a2 cf       	rjmp	.-188    	; 0x88c <_Z9writeLinehPc+0x14e>
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     948:	5d 98       	cbi	0x0b, 5	; 11
     94a:	5a cf       	rjmp	.-332    	; 0x800 <_Z9writeLinehPc+0xc2>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     94c:	5d 9a       	sbi	0x0b, 5	; 11
     94e:	53 cf       	rjmp	.-346    	; 0x7f6 <_Z9writeLinehPc+0xb8>
     950:	5d 9a       	sbi	0x0b, 5	; 11
     952:	4c cf       	rjmp	.-360    	; 0x7ec <_Z9writeLinehPc+0xae>
     954:	5d 9a       	sbi	0x0b, 5	; 11
     956:	45 cf       	rjmp	.-374    	; 0x7e2 <_Z9writeLinehPc+0xa4>
     958:	5d 9a       	sbi	0x0b, 5	; 11
     95a:	3e cf       	rjmp	.-388    	; 0x7d8 <_Z9writeLinehPc+0x9a>
     95c:	5d 9a       	sbi	0x0b, 5	; 11
     95e:	37 cf       	rjmp	.-402    	; 0x7ce <_Z9writeLinehPc+0x90>
     960:	5d 9a       	sbi	0x0b, 5	; 11
     962:	30 cf       	rjmp	.-416    	; 0x7c4 <_Z9writeLinehPc+0x86>
     964:	5d 9a       	sbi	0x0b, 5	; 11
     966:	29 cf       	rjmp	.-430    	; 0x7ba <_Z9writeLinehPc+0x7c>

00000968 <_Z14osc1MenuUpdatev>:
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
}

inline void osc1MenuUpdate()
{
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	e5 97       	sbiw	r28, 0x35	; 53
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
     984:	8d e0       	ldi	r24, 0x0D	; 13
     986:	eb e0       	ldi	r30, 0x0B	; 11
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	de 01       	movw	r26, r28
     98c:	55 96       	adiw	r26, 0x15	; 21
     98e:	01 90       	ld	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	8a 95       	dec	r24
     994:	e1 f7       	brne	.-8      	; 0x98e <_Z14osc1MenuUpdatev+0x26>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     996:	8c e0       	ldi	r24, 0x0C	; 12
     998:	fe 01       	movw	r30, r28
     99a:	75 96       	adiw	r30, 0x15	; 21
     99c:	8e 01       	movw	r16, r28
     99e:	0f 5f       	subi	r16, 0xFF	; 255
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	d8 01       	movw	r26, r16
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_Z14osc1MenuUpdatev+0x3c>
	buf[12] = '\0';
     9ac:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     9ae:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9b0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9b4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9dc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9de:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9e2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     9e4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     9e6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9e8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a1c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <_Z14osc1MenuUpdatev+0xbe>
     a24:	82 c0       	rjmp	.+260    	; 0xb2a <_Z14osc1MenuUpdatev+0x1c2>
     a26:	de 01       	movw	r26, r28
     a28:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a2a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a2c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a2e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a30:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a32:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a34:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a36:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a38:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a3c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a3e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a40:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a42:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a44:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a46:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a48:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a4a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a4c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a4e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a50:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a52:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a58:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a5a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a5c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a5e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a60:	44 9a       	sbi	0x08, 4	; 8
     a62:	99 27       	eor	r25, r25
     a64:	87 fd       	sbrc	r24, 7
     a66:	90 95       	com	r25
     a68:	80 97       	sbiw	r24, 0x20	; 32
     a6a:	fc 01       	movw	r30, r24
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	e0 5f       	subi	r30, 0xF0	; 240
     a7a:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     a7c:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     a7e:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a80:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a82:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a84:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a86:	82 2f       	mov	r24, r18
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	88 0f       	add	r24, r24
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 1f       	adc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	89 2b       	or	r24, r25
     a94:	09 f0       	breq	.+2      	; 0xa98 <_Z14osc1MenuUpdatev+0x130>
     a96:	60 c4       	rjmp	.+2240   	; 0x1358 <_Z14osc1MenuUpdatev+0x9f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a98:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a9e:	26 fd       	sbrc	r18, 6
     aa0:	60 c4       	rjmp	.+2240   	; 0x1362 <_Z14osc1MenuUpdatev+0x9fa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aa2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     aa8:	25 fd       	sbrc	r18, 5
     aaa:	54 c4       	rjmp	.+2216   	; 0x1354 <_Z14osc1MenuUpdatev+0x9ec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     aae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ab2:	24 fd       	sbrc	r18, 4
     ab4:	4d c4       	rjmp	.+2202   	; 0x1350 <_Z14osc1MenuUpdatev+0x9e8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ab6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aba:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     abc:	23 fd       	sbrc	r18, 3
     abe:	46 c4       	rjmp	.+2188   	; 0x134c <_Z14osc1MenuUpdatev+0x9e4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ac0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ac6:	22 fd       	sbrc	r18, 2
     ac8:	3f c4       	rjmp	.+2174   	; 0x1348 <_Z14osc1MenuUpdatev+0x9e0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     acc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ace:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ad0:	21 fd       	sbrc	r18, 1
     ad2:	38 c4       	rjmp	.+2160   	; 0x1344 <_Z14osc1MenuUpdatev+0x9dc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ad4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ada:	20 fd       	sbrc	r18, 0
     adc:	2f c4       	rjmp	.+2142   	; 0x133c <_Z14osc1MenuUpdatev+0x9d4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ade:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ae2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ae4:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ae6:	3f 5f       	subi	r19, 0xFF	; 255
     ae8:	35 30       	cpi	r19, 0x05	; 5
     aea:	49 f6       	brne	.-110    	; 0xa7e <_Z14osc1MenuUpdatev+0x116>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     aec:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     aee:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     af0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     af4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     af6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     af8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     afa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     afc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     afe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b20:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     b22:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     b24:	8d 91       	ld	r24, X+
     b26:	81 11       	cpse	r24, r1
     b28:	80 cf       	rjmp	.-256    	; 0xa2a <_Z14osc1MenuUpdatev+0xc2>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	e8 e1       	ldi	r30, 0x18	; 24
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	d8 01       	movw	r26, r16
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	8a 95       	dec	r24
     b38:	e1 f7       	brne	.-8      	; 0xb32 <_Z14osc1MenuUpdatev+0x1ca>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
     b3a:	e0 91 03 01 	lds	r30, 0x0103
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e0 58       	subi	r30, 0x80	; 128
     b46:	f9 4f       	sbci	r31, 0xF9	; 249
     b48:	65 91       	lpm	r22, Z+
     b4a:	74 91       	lpm	r23, Z
     b4c:	8e 01       	movw	r16, r28
     b4e:	0f 5f       	subi	r16, 0xFF	; 255
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "       ");
     b58:	d8 01       	movw	r26, r16
     b5a:	0d 90       	ld	r0, X+
     b5c:	00 20       	and	r0, r0
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <_Z14osc1MenuUpdatev+0x1f2>
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	e2 e4       	ldi	r30, 0x42	; 66
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	01 90       	ld	r0, Z+
     b6a:	0d 92       	st	X+, r0
     b6c:	8a 95       	dec	r24
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <_Z14osc1MenuUpdatev+0x200>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	f8 01       	movw	r30, r16
     b74:	de 01       	movw	r26, r28
     b76:	99 96       	adiw	r26, 0x29	; 41
     b78:	01 90       	ld	r0, Z+
     b7a:	0d 92       	st	X+, r0
     b7c:	8a 95       	dec	r24
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <_Z14osc1MenuUpdatev+0x210>
	buf[12] = '\0';
     b80:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     b82:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     b84:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b86:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b88:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b8e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b92:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b98:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     baa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bb8:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     bba:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     bbc:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bcc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bdc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bde:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     be2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     be4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     be8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bea:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bec:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bee:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bf0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     bf2:	89 a5       	ldd	r24, Y+41	; 0x29
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <_Z14osc1MenuUpdatev+0x292>
     bf8:	81 c0       	rjmp	.+258    	; 0xcfc <_Z14osc1MenuUpdatev+0x394>
     bfa:	de 01       	movw	r26, r28
     bfc:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     bfe:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c00:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c20:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c22:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c24:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c26:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c28:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c2e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c30:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c32:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     c34:	44 9a       	sbi	0x08, 4	; 8
     c36:	99 27       	eor	r25, r25
     c38:	87 fd       	sbrc	r24, 7
     c3a:	90 95       	com	r25
     c3c:	80 97       	sbiw	r24, 0x20	; 32
     c3e:	fc 01       	movw	r30, r24
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	e8 0f       	add	r30, r24
     c4a:	f9 1f       	adc	r31, r25
     c4c:	e0 5f       	subi	r30, 0xF0	; 240
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252
     c50:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     c52:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     c54:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c56:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c58:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c5a:	82 2f       	mov	r24, r18
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	88 0f       	add	r24, r24
     c60:	89 2f       	mov	r24, r25
     c62:	88 1f       	adc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	89 2b       	or	r24, r25
     c68:	09 f0       	breq	.+2      	; 0xc6c <_Z14osc1MenuUpdatev+0x304>
     c6a:	6a c3       	rjmp	.+1748   	; 0x1340 <_Z14osc1MenuUpdatev+0x9d8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c6c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c6e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c70:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c72:	26 fd       	sbrc	r18, 6
     c74:	61 c3       	rjmp	.+1730   	; 0x1338 <_Z14osc1MenuUpdatev+0x9d0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c7a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c7c:	25 fd       	sbrc	r18, 5
     c7e:	5a c3       	rjmp	.+1716   	; 0x1334 <_Z14osc1MenuUpdatev+0x9cc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c84:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c86:	24 fd       	sbrc	r18, 4
     c88:	53 c3       	rjmp	.+1702   	; 0x1330 <_Z14osc1MenuUpdatev+0x9c8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c90:	23 fd       	sbrc	r18, 3
     c92:	4c c3       	rjmp	.+1688   	; 0x132c <_Z14osc1MenuUpdatev+0x9c4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c98:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c9a:	22 fd       	sbrc	r18, 2
     c9c:	45 c3       	rjmp	.+1674   	; 0x1328 <_Z14osc1MenuUpdatev+0x9c0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ca4:	21 fd       	sbrc	r18, 1
     ca6:	3e c3       	rjmp	.+1660   	; 0x1324 <_Z14osc1MenuUpdatev+0x9bc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ca8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     caa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     cae:	20 fd       	sbrc	r18, 0
     cb0:	37 c3       	rjmp	.+1646   	; 0x1320 <_Z14osc1MenuUpdatev+0x9b8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cb8:	44 9a       	sbi	0x08, 4	; 8
     cba:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     cbc:	51 f6       	brne	.-108    	; 0xc52 <_Z14osc1MenuUpdatev+0x2ea>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     cbe:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     cc0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cc4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ccc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cce:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cda:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cdc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cde:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cf4:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     cf6:	8d 91       	ld	r24, X+
     cf8:	81 11       	cpse	r24, r1
     cfa:	81 cf       	rjmp	.-254    	; 0xbfe <_Z14osc1MenuUpdatev+0x296>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	ef e1       	ldi	r30, 0x1F	; 31
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	d8 01       	movw	r26, r16
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	8a 95       	dec	r24
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <_Z14osc1MenuUpdatev+0x39c>
	sprintf(buf + 7, "%d", osc1CentsShift);
     d0c:	20 91 7c 05 	lds	r18, 0x057C
     d10:	82 2f       	mov	r24, r18
     d12:	99 27       	eor	r25, r25
     d14:	87 fd       	sbrc	r24, 7
     d16:	90 95       	com	r25
     d18:	9f 93       	push	r25
     d1a:	2f 93       	push	r18
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	7e 01       	movw	r14, r28
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	e8 0e       	add	r14, r24
     d2a:	f1 1c       	adc	r15, r1
     d2c:	ff 92       	push	r15
     d2e:	ef 92       	push	r14
     d30:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
     d34:	d8 01       	movw	r26, r16
     d36:	0d 90       	ld	r0, X+
     d38:	00 20       	and	r0, r0
     d3a:	e9 f7       	brne	.-6      	; 0xd36 <_Z14osc1MenuUpdatev+0x3ce>
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	e2 e4       	ldi	r30, 0x42	; 66
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <_Z14osc1MenuUpdatev+0x3dc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     d4c:	8c e0       	ldi	r24, 0x0C	; 12
     d4e:	f8 01       	movw	r30, r16
     d50:	de 01       	movw	r26, r28
     d52:	99 96       	adiw	r26, 0x29	; 41
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	8a 95       	dec	r24
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <_Z14osc1MenuUpdatev+0x3ec>
	buf[12] = '\0';
     d5c:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d5e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d60:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d62:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d64:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d70:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d74:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d80:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d82:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d84:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d86:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d8e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d90:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d92:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     d94:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d96:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d98:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     da2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     da4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     da8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     daa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     db4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     dba:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dc6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     dcc:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     dce:	89 a5       	ldd	r24, Y+41	; 0x29
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <_Z14osc1MenuUpdatev+0x47a>
     de0:	82 c0       	rjmp	.+260    	; 0xee6 <_Z14osc1MenuUpdatev+0x57e>
     de2:	de 01       	movw	r26, r28
     de4:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     de6:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     de8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     df4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dfe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e1a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e1c:	44 9a       	sbi	0x08, 4	; 8
     e1e:	99 27       	eor	r25, r25
     e20:	87 fd       	sbrc	r24, 7
     e22:	90 95       	com	r25
     e24:	80 97       	sbiw	r24, 0x20	; 32
     e26:	fc 01       	movw	r30, r24
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e8 0f       	add	r30, r24
     e32:	f9 1f       	adc	r31, r25
     e34:	e0 5f       	subi	r30, 0xF0	; 240
     e36:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     e38:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     e3a:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e3c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e3e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e40:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e42:	82 2f       	mov	r24, r18
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	89 2f       	mov	r24, r25
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	89 2b       	or	r24, r25
     e50:	09 f0       	breq	.+2      	; 0xe54 <_Z14osc1MenuUpdatev+0x4ec>
     e52:	5a c2       	rjmp	.+1204   	; 0x1308 <_Z14osc1MenuUpdatev+0x9a0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e58:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e5a:	26 fd       	sbrc	r18, 6
     e5c:	5a c2       	rjmp	.+1204   	; 0x1312 <_Z14osc1MenuUpdatev+0x9aa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e62:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e64:	25 fd       	sbrc	r18, 5
     e66:	5a c2       	rjmp	.+1204   	; 0x131c <_Z14osc1MenuUpdatev+0x9b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e6e:	24 fd       	sbrc	r18, 4
     e70:	49 c2       	rjmp	.+1170   	; 0x1304 <_Z14osc1MenuUpdatev+0x99c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e72:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e74:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e76:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e78:	23 fd       	sbrc	r18, 3
     e7a:	42 c2       	rjmp	.+1156   	; 0x1300 <_Z14osc1MenuUpdatev+0x998>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e80:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e82:	22 fd       	sbrc	r18, 2
     e84:	3b c2       	rjmp	.+1142   	; 0x12fc <_Z14osc1MenuUpdatev+0x994>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e8a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e8c:	21 fd       	sbrc	r18, 1
     e8e:	34 c2       	rjmp	.+1128   	; 0x12f8 <_Z14osc1MenuUpdatev+0x990>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e90:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e94:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e96:	20 fd       	sbrc	r18, 0
     e98:	29 c2       	rjmp	.+1106   	; 0x12ec <_Z14osc1MenuUpdatev+0x984>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ea0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     ea2:	3f 5f       	subi	r19, 0xFF	; 255
     ea4:	35 30       	cpi	r19, 0x05	; 5
     ea6:	49 f6       	brne	.-110    	; 0xe3a <_Z14osc1MenuUpdatev+0x4d2>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     ea8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     eaa:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ecc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ece:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ed2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ed6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ed8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eda:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     edc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ede:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ee0:	8d 91       	ld	r24, X+
     ee2:	81 11       	cpse	r24, r1
     ee4:	80 cf       	rjmp	.-256    	; 0xde6 <_Z14osc1MenuUpdatev+0x47e>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	d8 01       	movw	r26, r16
     eee:	01 90       	ld	r0, Z+
     ef0:	0d 92       	st	X+, r0
     ef2:	8a 95       	dec	r24
     ef4:	e1 f7       	brne	.-8      	; 0xeee <_Z14osc1MenuUpdatev+0x586>
	sprintf(buf + 7, "%d", osc1SemisShift);
     ef6:	20 91 7b 05 	lds	r18, 0x057B
     efa:	82 2f       	mov	r24, r18
     efc:	99 27       	eor	r25, r25
     efe:	87 fd       	sbrc	r24, 7
     f00:	90 95       	com	r25
     f02:	9f 93       	push	r25
     f04:	2f 93       	push	r18
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	ff 92       	push	r15
     f10:	ef 92       	push	r14
     f12:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
     f16:	d8 01       	movw	r26, r16
     f18:	0d 90       	ld	r0, X+
     f1a:	00 20       	and	r0, r0
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <_Z14osc1MenuUpdatev+0x5b0>
     f1e:	11 97       	sbiw	r26, 0x01	; 1
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	e2 e4       	ldi	r30, 0x42	; 66
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <_Z14osc1MenuUpdatev+0x5be>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     f2e:	8c e0       	ldi	r24, 0x0C	; 12
     f30:	f8 01       	movw	r30, r16
     f32:	de 01       	movw	r26, r28
     f34:	99 96       	adiw	r26, 0x29	; 41
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <_Z14osc1MenuUpdatev+0x5ce>
	buf[12] = '\0';
     f3e:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f40:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f42:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f44:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f46:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f4c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f50:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f52:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f54:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f56:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f58:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f62:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f64:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f6e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f70:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f74:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     f76:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f78:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f7a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f7e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f80:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f82:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f84:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f86:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f88:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f90:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f94:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     fa2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     fa8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     faa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     fae:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     fb0:	89 a5       	ldd	r24, Y+41	; 0x29
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_Z14osc1MenuUpdatev+0x65c>
     fc2:	82 c0       	rjmp	.+260    	; 0x10c8 <_Z14osc1MenuUpdatev+0x760>
     fc4:	de 01       	movw	r26, r28
     fc6:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     fc8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     fca:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fcc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ff2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ff8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ffa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ffc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ffe:	44 9a       	sbi	0x08, 4	; 8
    1000:	99 27       	eor	r25, r25
    1002:	87 fd       	sbrc	r24, 7
    1004:	90 95       	com	r25
    1006:	80 97       	sbiw	r24, 0x20	; 32
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e8 0f       	add	r30, r24
    1014:	f9 1f       	adc	r31, r25
    1016:	e0 5f       	subi	r30, 0xF0	; 240
    1018:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    101a:	90 e0       	ldi	r25, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    101c:	81 91       	ld	r24, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    101e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1020:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1022:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	22 0f       	add	r18, r18
    102a:	23 2f       	mov	r18, r19
    102c:	22 1f       	adc	r18, r18
    102e:	33 0b       	sbc	r19, r19
    1030:	23 2b       	or	r18, r19
    1032:	09 f0       	breq	.+2      	; 0x1036 <_Z14osc1MenuUpdatev+0x6ce>
    1034:	5f c1       	rjmp	.+702    	; 0x12f4 <_Z14osc1MenuUpdatev+0x98c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1036:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1038:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    103a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    103c:	86 fd       	sbrc	r24, 6
    103e:	58 c1       	rjmp	.+688    	; 0x12f0 <_Z14osc1MenuUpdatev+0x988>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1040:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1042:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1044:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1046:	85 fd       	sbrc	r24, 5
    1048:	4f c1       	rjmp	.+670    	; 0x12e8 <_Z14osc1MenuUpdatev+0x980>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    104a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    104c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    104e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1050:	84 fd       	sbrc	r24, 4
    1052:	48 c1       	rjmp	.+656    	; 0x12e4 <_Z14osc1MenuUpdatev+0x97c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1054:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1056:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1058:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    105a:	83 fd       	sbrc	r24, 3
    105c:	41 c1       	rjmp	.+642    	; 0x12e0 <_Z14osc1MenuUpdatev+0x978>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    105e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1060:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1062:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1064:	82 fd       	sbrc	r24, 2
    1066:	3a c1       	rjmp	.+628    	; 0x12dc <_Z14osc1MenuUpdatev+0x974>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1068:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    106a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    106c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    106e:	81 fd       	sbrc	r24, 1
    1070:	33 c1       	rjmp	.+614    	; 0x12d8 <_Z14osc1MenuUpdatev+0x970>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1072:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1074:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1076:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1078:	80 fd       	sbrc	r24, 0
    107a:	2c c1       	rjmp	.+600    	; 0x12d4 <_Z14osc1MenuUpdatev+0x96c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    107c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    107e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1080:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1082:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	95 30       	cpi	r25, 0x05	; 5
    1088:	49 f6       	brne	.-110    	; 0x101c <_Z14osc1MenuUpdatev+0x6b4>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    108a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    108c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    108e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1090:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1092:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1094:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1096:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1098:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    109a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    109c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    109e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10be:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    10c0:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    10c2:	8d 91       	ld	r24, X+
    10c4:	81 11       	cpse	r24, r1
    10c6:	80 cf       	rjmp	.-256    	; 0xfc8 <_Z14osc1MenuUpdatev+0x660>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    10c8:	87 e0       	ldi	r24, 0x07	; 7
    10ca:	ef e2       	ldi	r30, 0x2F	; 47
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	d8 01       	movw	r26, r16
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	8a 95       	dec	r24
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <_Z14osc1MenuUpdatev+0x768>
	if(osc1NoteSync != false)
    10d8:	80 91 73 05 	lds	r24, 0x0573
    10dc:	81 11       	cpse	r24, r1
    10de:	43 c1       	rjmp	.+646    	; 0x1366 <_Z14osc1MenuUpdatev+0x9fe>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    10e0:	4f e4       	ldi	r20, 0x4F	; 79
    10e2:	56 e4       	ldi	r21, 0x46	; 70
    10e4:	66 e4       	ldi	r22, 0x46	; 70
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	4f 83       	std	Y+7, r20	; 0x07
    10ea:	58 87       	std	Y+8, r21	; 0x08
    10ec:	69 87       	std	Y+9, r22	; 0x09
    10ee:	7a 87       	std	Y+10, r23	; 0x0a
	}
	strcat(buf, "       ");
    10f0:	d8 01       	movw	r26, r16
    10f2:	0d 90       	ld	r0, X+
    10f4:	00 20       	and	r0, r0
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_Z14osc1MenuUpdatev+0x78a>
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	e2 e4       	ldi	r30, 0x42	; 66
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <_Z14osc1MenuUpdatev+0x798>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1108:	8c e0       	ldi	r24, 0x0C	; 12
    110a:	f8 01       	movw	r30, r16
    110c:	de 01       	movw	r26, r28
    110e:	99 96       	adiw	r26, 0x29	; 41
    1110:	01 90       	ld	r0, Z+
    1112:	0d 92       	st	X+, r0
    1114:	8a 95       	dec	r24
    1116:	e1 f7       	brne	.-8      	; 0x1110 <_Z14osc1MenuUpdatev+0x7a8>
	buf[12] = '\0';
    1118:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    111a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    111c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    111e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1120:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1122:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1124:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1126:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1128:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    112a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    112c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    112e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1130:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1132:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1134:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1136:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1138:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    113a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    113c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    113e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1140:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1142:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1144:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1146:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1148:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    114a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    114c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    114e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1150:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1152:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1154:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1156:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1158:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    115a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    115c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    115e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1160:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1162:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1164:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1166:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1168:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    116a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    116c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    116e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1170:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1172:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1174:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1176:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1178:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    117a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    117c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    117e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1180:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1182:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1184:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1186:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1188:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    118a:	89 a5       	ldd	r24, Y+41	; 0x29
    118c:	88 23       	and	r24, r24
    118e:	09 f4       	brne	.+2      	; 0x1192 <_Z14osc1MenuUpdatev+0x82a>
    1190:	81 c0       	rjmp	.+258    	; 0x1294 <_Z14osc1MenuUpdatev+0x92c>
    1192:	de 01       	movw	r26, r28
    1194:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1196:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1198:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    119a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    119c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    119e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ca:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    11cc:	44 9a       	sbi	0x08, 4	; 8
    11ce:	99 27       	eor	r25, r25
    11d0:	87 fd       	sbrc	r24, 7
    11d2:	90 95       	com	r25
    11d4:	80 97       	sbiw	r24, 0x20	; 32
    11d6:	fc 01       	movw	r30, r24
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	e8 0f       	add	r30, r24
    11e2:	f9 1f       	adc	r31, r25
    11e4:	e0 5f       	subi	r30, 0xF0	; 240
    11e6:	fc 4f       	sbci	r31, 0xFC	; 252
    11e8:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    11ea:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    11ec:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    11ee:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11f0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    11f2:	82 2f       	mov	r24, r18
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	88 0f       	add	r24, r24
    11f8:	89 2f       	mov	r24, r25
    11fa:	88 1f       	adc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	89 2b       	or	r24, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <_Z14osc1MenuUpdatev+0x89c>
    1202:	61 c0       	rjmp	.+194    	; 0x12c6 <_Z14osc1MenuUpdatev+0x95e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1204:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1206:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1208:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    120a:	26 fd       	sbrc	r18, 6
    120c:	61 c0       	rjmp	.+194    	; 0x12d0 <_Z14osc1MenuUpdatev+0x968>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    120e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1210:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1212:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1214:	25 fd       	sbrc	r18, 5
    1216:	55 c0       	rjmp	.+170    	; 0x12c2 <_Z14osc1MenuUpdatev+0x95a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1218:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    121a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    121c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    121e:	24 fd       	sbrc	r18, 4
    1220:	4e c0       	rjmp	.+156    	; 0x12be <_Z14osc1MenuUpdatev+0x956>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1222:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1224:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1226:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1228:	23 fd       	sbrc	r18, 3
    122a:	47 c0       	rjmp	.+142    	; 0x12ba <_Z14osc1MenuUpdatev+0x952>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    122c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    122e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1230:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1232:	22 fd       	sbrc	r18, 2
    1234:	40 c0       	rjmp	.+128    	; 0x12b6 <_Z14osc1MenuUpdatev+0x94e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1236:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1238:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    123a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    123c:	21 fd       	sbrc	r18, 1
    123e:	39 c0       	rjmp	.+114    	; 0x12b2 <_Z14osc1MenuUpdatev+0x94a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1240:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1242:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1244:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1246:	20 fd       	sbrc	r18, 0
    1248:	32 c0       	rjmp	.+100    	; 0x12ae <_Z14osc1MenuUpdatev+0x946>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    124a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    124c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    124e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1250:	44 9a       	sbi	0x08, 4	; 8
    1252:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1254:	51 f6       	brne	.-108    	; 0x11ea <_Z14osc1MenuUpdatev+0x882>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1256:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1258:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    125a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    125c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    125e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1260:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1262:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1264:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1266:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1268:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    126a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    126c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    126e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1270:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1272:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1274:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1276:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1278:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    127a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    127c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    127e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1280:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1282:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1284:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1286:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1288:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    128a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    128c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    128e:	8d 91       	ld	r24, X+
    1290:	81 11       	cpse	r24, r1
    1292:	81 cf       	rjmp	.-254    	; 0x1196 <_Z14osc1MenuUpdatev+0x82e>
	
	osc1MenuWaveformUpdate();
	osc1MenuCentsUpdate();
	osc1MenuSemisUpdate();
	osc1MenuSyncUpdate();
}
    1294:	e5 96       	adiw	r28, 0x35	; 53
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12ae:	5d 9a       	sbi	0x0b, 5	; 11
    12b0:	cd cf       	rjmp	.-102    	; 0x124c <_Z14osc1MenuUpdatev+0x8e4>
    12b2:	5d 9a       	sbi	0x0b, 5	; 11
    12b4:	c6 cf       	rjmp	.-116    	; 0x1242 <_Z14osc1MenuUpdatev+0x8da>
    12b6:	5d 9a       	sbi	0x0b, 5	; 11
    12b8:	bf cf       	rjmp	.-130    	; 0x1238 <_Z14osc1MenuUpdatev+0x8d0>
    12ba:	5d 9a       	sbi	0x0b, 5	; 11
    12bc:	b8 cf       	rjmp	.-144    	; 0x122e <_Z14osc1MenuUpdatev+0x8c6>
    12be:	5d 9a       	sbi	0x0b, 5	; 11
    12c0:	b1 cf       	rjmp	.-158    	; 0x1224 <_Z14osc1MenuUpdatev+0x8bc>
    12c2:	5d 9a       	sbi	0x0b, 5	; 11
    12c4:	aa cf       	rjmp	.-172    	; 0x121a <_Z14osc1MenuUpdatev+0x8b2>
    12c6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12ca:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    12cc:	26 ff       	sbrs	r18, 6
    12ce:	9f cf       	rjmp	.-194    	; 0x120e <_Z14osc1MenuUpdatev+0x8a6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12d0:	5d 9a       	sbi	0x0b, 5	; 11
    12d2:	9e cf       	rjmp	.-196    	; 0x1210 <_Z14osc1MenuUpdatev+0x8a8>
    12d4:	5d 9a       	sbi	0x0b, 5	; 11
    12d6:	d3 ce       	rjmp	.-602    	; 0x107e <_Z14osc1MenuUpdatev+0x716>
    12d8:	5d 9a       	sbi	0x0b, 5	; 11
    12da:	cc ce       	rjmp	.-616    	; 0x1074 <_Z14osc1MenuUpdatev+0x70c>
    12dc:	5d 9a       	sbi	0x0b, 5	; 11
    12de:	c5 ce       	rjmp	.-630    	; 0x106a <_Z14osc1MenuUpdatev+0x702>
    12e0:	5d 9a       	sbi	0x0b, 5	; 11
    12e2:	be ce       	rjmp	.-644    	; 0x1060 <_Z14osc1MenuUpdatev+0x6f8>
    12e4:	5d 9a       	sbi	0x0b, 5	; 11
    12e6:	b7 ce       	rjmp	.-658    	; 0x1056 <_Z14osc1MenuUpdatev+0x6ee>
    12e8:	5d 9a       	sbi	0x0b, 5	; 11
    12ea:	b0 ce       	rjmp	.-672    	; 0x104c <_Z14osc1MenuUpdatev+0x6e4>
    12ec:	5d 9a       	sbi	0x0b, 5	; 11
    12ee:	d6 cd       	rjmp	.-1108   	; 0xe9c <_Z14osc1MenuUpdatev+0x534>
    12f0:	5d 9a       	sbi	0x0b, 5	; 11
    12f2:	a7 ce       	rjmp	.-690    	; 0x1042 <_Z14osc1MenuUpdatev+0x6da>
    12f4:	5d 9a       	sbi	0x0b, 5	; 11
    12f6:	a0 ce       	rjmp	.-704    	; 0x1038 <_Z14osc1MenuUpdatev+0x6d0>
    12f8:	5d 9a       	sbi	0x0b, 5	; 11
    12fa:	cb cd       	rjmp	.-1130   	; 0xe92 <_Z14osc1MenuUpdatev+0x52a>
    12fc:	5d 9a       	sbi	0x0b, 5	; 11
    12fe:	c4 cd       	rjmp	.-1144   	; 0xe88 <_Z14osc1MenuUpdatev+0x520>
    1300:	5d 9a       	sbi	0x0b, 5	; 11
    1302:	bd cd       	rjmp	.-1158   	; 0xe7e <_Z14osc1MenuUpdatev+0x516>
    1304:	5d 9a       	sbi	0x0b, 5	; 11
    1306:	b6 cd       	rjmp	.-1172   	; 0xe74 <_Z14osc1MenuUpdatev+0x50c>
    1308:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    130a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    130c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    130e:	26 ff       	sbrs	r18, 6
    1310:	a6 cd       	rjmp	.-1204   	; 0xe5e <_Z14osc1MenuUpdatev+0x4f6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1312:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1314:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1316:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1318:	25 ff       	sbrs	r18, 5
    131a:	a6 cd       	rjmp	.-1204   	; 0xe68 <_Z14osc1MenuUpdatev+0x500>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    131c:	5d 9a       	sbi	0x0b, 5	; 11
    131e:	a5 cd       	rjmp	.-1206   	; 0xe6a <_Z14osc1MenuUpdatev+0x502>
    1320:	5d 9a       	sbi	0x0b, 5	; 11
    1322:	c8 cc       	rjmp	.-1648   	; 0xcb4 <_Z14osc1MenuUpdatev+0x34c>
    1324:	5d 9a       	sbi	0x0b, 5	; 11
    1326:	c1 cc       	rjmp	.-1662   	; 0xcaa <_Z14osc1MenuUpdatev+0x342>
    1328:	5d 9a       	sbi	0x0b, 5	; 11
    132a:	ba cc       	rjmp	.-1676   	; 0xca0 <_Z14osc1MenuUpdatev+0x338>
    132c:	5d 9a       	sbi	0x0b, 5	; 11
    132e:	b3 cc       	rjmp	.-1690   	; 0xc96 <_Z14osc1MenuUpdatev+0x32e>
    1330:	5d 9a       	sbi	0x0b, 5	; 11
    1332:	ac cc       	rjmp	.-1704   	; 0xc8c <_Z14osc1MenuUpdatev+0x324>
    1334:	5d 9a       	sbi	0x0b, 5	; 11
    1336:	a5 cc       	rjmp	.-1718   	; 0xc82 <_Z14osc1MenuUpdatev+0x31a>
    1338:	5d 9a       	sbi	0x0b, 5	; 11
    133a:	9e cc       	rjmp	.-1732   	; 0xc78 <_Z14osc1MenuUpdatev+0x310>
    133c:	5d 9a       	sbi	0x0b, 5	; 11
    133e:	d0 cb       	rjmp	.-2144   	; 0xae0 <_Z14osc1MenuUpdatev+0x178>
    1340:	5d 9a       	sbi	0x0b, 5	; 11
    1342:	95 cc       	rjmp	.-1750   	; 0xc6e <_Z14osc1MenuUpdatev+0x306>
    1344:	5d 9a       	sbi	0x0b, 5	; 11
    1346:	c7 cb       	rjmp	.-2162   	; 0xad6 <_Z14osc1MenuUpdatev+0x16e>
    1348:	5d 9a       	sbi	0x0b, 5	; 11
    134a:	c0 cb       	rjmp	.-2176   	; 0xacc <_Z14osc1MenuUpdatev+0x164>
    134c:	5d 9a       	sbi	0x0b, 5	; 11
    134e:	b9 cb       	rjmp	.-2190   	; 0xac2 <_Z14osc1MenuUpdatev+0x15a>
    1350:	5d 9a       	sbi	0x0b, 5	; 11
    1352:	b2 cb       	rjmp	.-2204   	; 0xab8 <_Z14osc1MenuUpdatev+0x150>
    1354:	5d 9a       	sbi	0x0b, 5	; 11
    1356:	ab cb       	rjmp	.-2218   	; 0xaae <_Z14osc1MenuUpdatev+0x146>
    1358:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    135a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    135c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    135e:	26 ff       	sbrs	r18, 6
    1360:	a0 cb       	rjmp	.-2240   	; 0xaa2 <_Z14osc1MenuUpdatev+0x13a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1362:	5d 9a       	sbi	0x0b, 5	; 11
    1364:	9f cb       	rjmp	.-2242   	; 0xaa4 <_Z14osc1MenuUpdatev+0x13c>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    1366:	2f e4       	ldi	r18, 0x4F	; 79
    1368:	3e e4       	ldi	r19, 0x4E	; 78
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	2f 83       	std	Y+7, r18	; 0x07
    136e:	38 87       	std	Y+8, r19	; 0x08
    1370:	49 87       	std	Y+9, r20	; 0x09
    1372:	be ce       	rjmp	.-644    	; 0x10f0 <_Z14osc1MenuUpdatev+0x788>

00001374 <_Z18lfoMenuRouteUpdatev>:
	strcat(buf, "    ");
	writeLine(4, buf);
}

inline void lfoMenuRouteUpdate()
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	a1 97       	sbiw	r28, 0x21	; 33
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    138c:	87 e0       	ldi	r24, 0x07	; 7
    138e:	e6 e3       	ldi	r30, 0x36	; 54
    1390:	f1 e0       	ldi	r31, 0x01	; 1
    1392:	de 01       	movw	r26, r28
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	01 90       	ld	r0, Z+
    1398:	0d 92       	st	X+, r0
    139a:	8a 95       	dec	r24
    139c:	e1 f7       	brne	.-8      	; 0x1396 <_Z18lfoMenuRouteUpdatev+0x22>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    139e:	e0 91 5b 05 	lds	r30, 0x055B
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e8 59       	subi	r30, 0x98	; 152
    13aa:	f9 4f       	sbci	r31, 0xF9	; 249
    13ac:	65 91       	lpm	r22, Z+
    13ae:	74 91       	lpm	r23, Z
    13b0:	8e 01       	movw	r16, r28
    13b2:	0f 5f       	subi	r16, 0xFF	; 255
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	c8 01       	movw	r24, r16
    13b8:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "    ");
    13bc:	d8 01       	movw	r26, r16
    13be:	0d 90       	ld	r0, X+
    13c0:	00 20       	and	r0, r0
    13c2:	e9 f7       	brne	.-6      	; 0x13be <_Z18lfoMenuRouteUpdatev+0x4a>
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	85 e0       	ldi	r24, 0x05	; 5
    13c8:	e5 e4       	ldi	r30, 0x45	; 69
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	01 90       	ld	r0, Z+
    13ce:	0d 92       	st	X+, r0
    13d0:	8a 95       	dec	r24
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <_Z18lfoMenuRouteUpdatev+0x58>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    13d4:	8c e0       	ldi	r24, 0x0C	; 12
    13d6:	f8 01       	movw	r30, r16
    13d8:	de 01       	movw	r26, r28
    13da:	55 96       	adiw	r26, 0x15	; 21
    13dc:	01 90       	ld	r0, Z+
    13de:	0d 92       	st	X+, r0
    13e0:	8a 95       	dec	r24
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <_Z18lfoMenuRouteUpdatev+0x68>
	buf[12] = '\0';
    13e4:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    13e6:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    13e8:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ea:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    13ec:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1400:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1402:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1404:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1406:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1408:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    140a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    140c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    140e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1410:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1412:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1414:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1416:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1418:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    141a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    141c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    141e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1420:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1422:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1424:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1426:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1428:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    142a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    142c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    142e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1430:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1432:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1434:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1436:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1438:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    143a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    143c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    143e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1440:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1442:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1444:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1446:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1448:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    144a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    144c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    144e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1450:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1452:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1454:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1456:	8d 89       	ldd	r24, Y+21	; 0x15
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <_Z18lfoMenuRouteUpdatev+0xea>
    145c:	81 c0       	rjmp	.+258    	; 0x1560 <_Z18lfoMenuRouteUpdatev+0x1ec>
    145e:	de 01       	movw	r26, r28
    1460:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1462:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1464:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1466:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1468:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    146a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    146c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    146e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1470:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1472:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1474:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1476:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1478:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    147a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    147c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    147e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1480:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1482:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1484:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1486:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1488:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    148a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    148c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    148e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1490:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1492:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1494:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1496:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1498:	44 9a       	sbi	0x08, 4	; 8
    149a:	99 27       	eor	r25, r25
    149c:	87 fd       	sbrc	r24, 7
    149e:	90 95       	com	r25
    14a0:	80 97       	sbiw	r24, 0x20	; 32
    14a2:	fc 01       	movw	r30, r24
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	e0 5f       	subi	r30, 0xF0	; 240
    14b2:	fc 4f       	sbci	r31, 0xFC	; 252
    14b4:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    14b6:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    14b8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    14ba:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14bc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14be:	82 2f       	mov	r24, r18
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 0f       	add	r24, r24
    14c4:	89 2f       	mov	r24, r25
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 0b       	sbc	r25, r25
    14ca:	89 2b       	or	r24, r25
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <_Z18lfoMenuRouteUpdatev+0x15c>
    14ce:	5f c0       	rjmp	.+190    	; 0x158e <_Z18lfoMenuRouteUpdatev+0x21a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14d0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14d4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14d6:	26 fd       	sbrc	r18, 6
    14d8:	5f c0       	rjmp	.+190    	; 0x1598 <_Z18lfoMenuRouteUpdatev+0x224>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14de:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14e0:	25 fd       	sbrc	r18, 5
    14e2:	53 c0       	rjmp	.+166    	; 0x158a <_Z18lfoMenuRouteUpdatev+0x216>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14ea:	24 fd       	sbrc	r18, 4
    14ec:	4c c0       	rjmp	.+152    	; 0x1586 <_Z18lfoMenuRouteUpdatev+0x212>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14f2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14f4:	23 fd       	sbrc	r18, 3
    14f6:	45 c0       	rjmp	.+138    	; 0x1582 <_Z18lfoMenuRouteUpdatev+0x20e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    14f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14fc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14fe:	22 fd       	sbrc	r18, 2
    1500:	3e c0       	rjmp	.+124    	; 0x157e <_Z18lfoMenuRouteUpdatev+0x20a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1502:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1504:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1506:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1508:	21 fd       	sbrc	r18, 1
    150a:	37 c0       	rjmp	.+110    	; 0x157a <_Z18lfoMenuRouteUpdatev+0x206>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    150c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    150e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1510:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1512:	20 fd       	sbrc	r18, 0
    1514:	30 c0       	rjmp	.+96     	; 0x1576 <_Z18lfoMenuRouteUpdatev+0x202>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1516:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1518:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    151a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    151c:	44 9a       	sbi	0x08, 4	; 8
    151e:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1520:	51 f6       	brne	.-108    	; 0x14b6 <_Z18lfoMenuRouteUpdatev+0x142>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1522:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1524:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1526:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1528:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    152a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    152c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    152e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1530:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1532:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1534:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1536:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1538:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    153a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    153c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    153e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1540:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1542:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1544:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1546:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1548:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    154a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    154c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    154e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1550:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1552:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1554:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1556:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1558:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    155a:	8d 91       	ld	r24, X+
    155c:	81 11       	cpse	r24, r1
    155e:	81 cf       	rjmp	.-254    	; 0x1462 <_Z18lfoMenuRouteUpdatev+0xee>
	
	sprintf(buf, "%s", routeLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
	strcat(buf, "    ");
	writeLine(5, buf);
}
    1560:	a1 96       	adiw	r28, 0x21	; 33
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1576:	5d 9a       	sbi	0x0b, 5	; 11
    1578:	cf cf       	rjmp	.-98     	; 0x1518 <_Z18lfoMenuRouteUpdatev+0x1a4>
    157a:	5d 9a       	sbi	0x0b, 5	; 11
    157c:	c8 cf       	rjmp	.-112    	; 0x150e <_Z18lfoMenuRouteUpdatev+0x19a>
    157e:	5d 9a       	sbi	0x0b, 5	; 11
    1580:	c1 cf       	rjmp	.-126    	; 0x1504 <_Z18lfoMenuRouteUpdatev+0x190>
    1582:	5d 9a       	sbi	0x0b, 5	; 11
    1584:	ba cf       	rjmp	.-140    	; 0x14fa <_Z18lfoMenuRouteUpdatev+0x186>
    1586:	5d 9a       	sbi	0x0b, 5	; 11
    1588:	b3 cf       	rjmp	.-154    	; 0x14f0 <_Z18lfoMenuRouteUpdatev+0x17c>
    158a:	5d 9a       	sbi	0x0b, 5	; 11
    158c:	ac cf       	rjmp	.-168    	; 0x14e6 <_Z18lfoMenuRouteUpdatev+0x172>
    158e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1590:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1592:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1594:	26 ff       	sbrs	r18, 6
    1596:	a1 cf       	rjmp	.-190    	; 0x14da <_Z18lfoMenuRouteUpdatev+0x166>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1598:	5d 9a       	sbi	0x0b, 5	; 11
    159a:	a0 cf       	rjmp	.-192    	; 0x14dc <_Z18lfoMenuRouteUpdatev+0x168>

0000159c <_Z7initLCDv>:
	writeLine(5, buf);
}

void initLCD()
{
	sbi(LCD_SCE_DIR, LCD_SCE_PIN);
    159c:	3c 9a       	sbi	0x07, 4	; 7
	sbi(LCD_RST_DIR, LCD_RST_PIN);
    159e:	3d 9a       	sbi	0x07, 5	; 7
	sbi(LCD_DC_DIR, LCD_DC_PIN);
    15a0:	25 9a       	sbi	0x04, 5	; 4
	sbi(LCD_DATA_DIR, LCD_DATA_PIN);
    15a2:	55 9a       	sbi	0x0a, 5	; 10
	sbi(LCD_CLK_DIR, LCD_CLK_PIN);
    15a4:	54 9a       	sbi	0x0a, 4	; 10
	
	cbi(LCD_RST_WR, LCD_RST_PIN);
    15a6:	45 98       	cbi	0x08, 5	; 8
	sbi(LCD_RST_WR, LCD_RST_PIN);
    15a8:	45 9a       	sbi	0x08, 5	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15aa:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15ac:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ba:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15da:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15de:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    15e0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15e2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15e4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15f4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15fa:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1600:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1602:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1604:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1606:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1608:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    160a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    160c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    160e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1610:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1612:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1614:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1616:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1618:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    161a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    161c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    161e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1620:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1622:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1624:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1626:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1628:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    162a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    162c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    162e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1630:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1632:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1634:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1636:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1638:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    163a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    163c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    163e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1640:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1642:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1644:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1646:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1648:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    164a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    164c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    164e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1650:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1652:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1654:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1656:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1658:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    165a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    165c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    165e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1660:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1662:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1664:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1666:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1668:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    166a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    166c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    166e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1670:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1672:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1674:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1676:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1678:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    167a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    167c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    167e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1680:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1682:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1684:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1686:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1688:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    168a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    168c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    168e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1690:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1692:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1694:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1696:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1698:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    169a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    169c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    169e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16be:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16c0:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    16c2:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    16c4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16de:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16e0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    16e6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16f2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16f8:	44 9a       	sbi	0x08, 4	; 8
    16fa:	08 95       	ret

000016fc <_Z5setupv>:
		}
	}
}

void setup()
{
    16fc:	2f 92       	push	r2
    16fe:	3f 92       	push	r3
    1700:	4f 92       	push	r4
    1702:	5f 92       	push	r5
    1704:	6f 92       	push	r6
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2f 97       	sbiw	r28, 0x0f	; 15
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e8       	ldi	r25, 0x80	; 128
    1734:	ac e8       	ldi	r26, 0x8C	; 140
    1736:	ba e7       	ldi	r27, 0x7A	; 122
    1738:	80 93 08 05 	sts	0x0508, r24
    173c:	90 93 09 05 	sts	0x0509, r25
    1740:	a0 93 0a 05 	sts	0x050A, r26
    1744:	b0 93 0b 05 	sts	0x050B, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1754:	89 80       	ldd	r8, Y+1	; 0x01
    1756:	9a 80       	ldd	r9, Y+2	; 0x02
    1758:	ab 80       	ldd	r10, Y+3	; 0x03
    175a:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    175c:	94 01       	movw	r18, r8
    175e:	a5 01       	movw	r20, r10
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	00 e1       	ldi	r16, 0x10	; 16
    176a:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    176e:	a1 2c       	mov	r10, r1
    1770:	e0 e8       	ldi	r30, 0x80	; 128
    1772:	be 2e       	mov	r11, r30
    1774:	fc e8       	ldi	r31, 0x8C	; 140
    1776:	cf 2e       	mov	r12, r31
    1778:	aa e7       	ldi	r26, 0x7A	; 122
    177a:	da 2e       	mov	r13, r26
    177c:	e1 2c       	mov	r14, r1
    177e:	f1 2c       	mov	r15, r1
    1780:	00 e0       	ldi	r16, 0x00	; 0
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	0e 94 0f 24 	call	0x481e	; 0x481e <__udivdi3>
    1788:	20 93 04 05 	sts	0x0504, r18
    178c:	30 93 05 05 	sts	0x0505, r19
    1790:	40 93 06 05 	sts	0x0506, r20
    1794:	50 93 07 05 	sts	0x0507, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    17a0:	89 80       	ldd	r8, Y+1	; 0x01
    17a2:	9a 80       	ldd	r9, Y+2	; 0x02
    17a4:	ab 80       	ldd	r10, Y+3	; 0x03
    17a6:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    17a8:	94 01       	movw	r18, r8
    17aa:	a5 01       	movw	r20, r10
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	00 e1       	ldi	r16, 0x10	; 16
    17b6:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    17ba:	a1 2c       	mov	r10, r1
    17bc:	b0 e8       	ldi	r27, 0x80	; 128
    17be:	bb 2e       	mov	r11, r27
    17c0:	0c e8       	ldi	r16, 0x8C	; 140
    17c2:	c0 2e       	mov	r12, r16
    17c4:	ea e7       	ldi	r30, 0x7A	; 122
    17c6:	de 2e       	mov	r13, r30
    17c8:	e1 2c       	mov	r14, r1
    17ca:	f1 2c       	mov	r15, r1
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	0e 94 0f 24 	call	0x481e	; 0x481e <__udivdi3>
    17d2:	39 01       	movw	r6, r18
    17d4:	4a 01       	movw	r8, r20
    17d6:	1b 01       	movw	r2, r22
    17d8:	2c 01       	movw	r4, r24
    17da:	32 2f       	mov	r19, r18
    17dc:	30 93 0c 05 	sts	0x050C, r19
    17e0:	70 92 0d 05 	sts	0x050D, r7
    17e4:	80 92 0e 05 	sts	0x050E, r8
    17e8:	90 92 0f 05 	sts	0x050F, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    17ec:	88 eb       	ldi	r24, 0xB8	; 184
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	90 93 90 05 	sts	0x0590, r25
    17f4:	80 93 8f 05 	sts	0x058F, r24
	*((unsigned short*)&(b)) = 0;
    17f8:	10 92 8e 05 	sts	0x058E, r1
    17fc:	10 92 8d 05 	sts	0x058D, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1800:	00 91 8d 05 	lds	r16, 0x058D
    1804:	10 91 8e 05 	lds	r17, 0x058E
    1808:	20 91 8f 05 	lds	r18, 0x058F
    180c:	30 91 90 05 	lds	r19, 0x0590
	temp *= rhs;
    1810:	58 01       	movw	r10, r16
    1812:	69 01       	movw	r12, r18
    1814:	00 e0       	ldi	r16, 0x00	; 0
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	93 01       	movw	r18, r6
    181a:	a4 01       	movw	r20, r8
    181c:	b1 01       	movw	r22, r2
    181e:	c2 01       	movw	r24, r4
    1820:	0e 94 89 23 	call	0x4712	; 0x4712 <__muldi3>
	
	return (unsigned long)(temp >> 16);
    1824:	00 e1       	ldi	r16, 0x10	; 16
    1826:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    182a:	c9 01       	movw	r24, r18
    182c:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    182e:	80 93 7d 05 	sts	0x057D, r24
    1832:	90 93 7e 05 	sts	0x057E, r25
    1836:	a0 93 7f 05 	sts	0x057F, r26
    183a:	b0 93 80 05 	sts	0x0580, r27
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e8       	ldi	r25, 0x80	; 128
    1842:	a8 eb       	ldi	r26, 0xB8	; 184
    1844:	b1 e0       	ldi	r27, 0x01	; 1
    1846:	80 93 6f 05 	sts	0x056F, r24
    184a:	90 93 70 05 	sts	0x0570, r25
    184e:	a0 93 71 05 	sts	0x0571, r26
    1852:	b0 93 72 05 	sts	0x0572, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1856:	93 01       	movw	r18, r6
    1858:	a4 01       	movw	r20, r8
    185a:	b1 01       	movw	r22, r2
    185c:	c2 01       	movw	r24, r4
    185e:	03 e0       	ldi	r16, 0x03	; 3
    1860:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    1864:	53 01       	movw	r10, r6
    1866:	64 01       	movw	r12, r8
    1868:	71 01       	movw	r14, r2
    186a:	82 01       	movw	r16, r4
    186c:	0e 94 ac 24 	call	0x4958	; 0x4958 <__subdi3>
    1870:	07 e0       	ldi	r16, 0x07	; 7
    1872:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    1876:	04 2d       	mov	r16, r4
    1878:	0e 94 ac 24 	call	0x4958	; 0x4958 <__subdi3>
    187c:	06 e0       	ldi	r16, 0x06	; 6
    187e:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    1882:	04 2d       	mov	r16, r4
    1884:	0e 94 ac 24 	call	0x4958	; 0x4958 <__subdi3>
    1888:	59 01       	movw	r10, r18
    188a:	6a 01       	movw	r12, r20
    188c:	7b 01       	movw	r14, r22
    188e:	e8 2f       	mov	r30, r24
    1890:	19 2f       	mov	r17, r25
    1892:	03 e0       	ldi	r16, 0x03	; 3
    1894:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    1898:	0e 2f       	mov	r16, r30
    189a:	0e 94 ac 24 	call	0x4958	; 0x4958 <__subdi3>
    189e:	03 e0       	ldi	r16, 0x03	; 3
    18a0:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    18a4:	53 01       	movw	r10, r6
    18a6:	64 01       	movw	r12, r8
    18a8:	71 01       	movw	r14, r2
    18aa:	82 01       	movw	r16, r4
    18ac:	0e 94 ac 24 	call	0x4958	; 0x4958 <__subdi3>
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	3d 87       	std	Y+13, r19	; 0x0d
    18b4:	4e 87       	std	Y+14, r20	; 0x0e
    18b6:	5f 87       	std	Y+15, r21	; 0x0f
    18b8:	b6 2f       	mov	r27, r22
    18ba:	a7 2f       	mov	r26, r23
    18bc:	f8 2f       	mov	r31, r24
    18be:	e9 2f       	mov	r30, r25
    18c0:	7a 2f       	mov	r23, r26
    18c2:	8f 2f       	mov	r24, r31
    18c4:	9e 2f       	mov	r25, r30
    18c6:	03 e0       	ldi	r16, 0x03	; 3
    18c8:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__ashldi3>
    18cc:	59 01       	movw	r10, r18
    18ce:	6a 01       	movw	r12, r20
    18d0:	7b 01       	movw	r14, r22
    18d2:	8c 01       	movw	r16, r24
    18d4:	2d 81       	ldd	r18, Y+5	; 0x05
    18d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    18da:	5f 85       	ldd	r21, Y+15	; 0x0f
    18dc:	6b 2f       	mov	r22, r27
    18de:	7a 2f       	mov	r23, r26
    18e0:	8f 2f       	mov	r24, r31
    18e2:	9e 2f       	mov	r25, r30
    18e4:	0e 94 a3 24 	call	0x4946	; 0x4946 <__adddi3>
    18e8:	53 01       	movw	r10, r6
    18ea:	64 01       	movw	r12, r8
    18ec:	71 01       	movw	r14, r2
    18ee:	82 01       	movw	r16, r4
    18f0:	0e 94 a3 24 	call	0x4946	; 0x4946 <__adddi3>
	
	return (unsigned long)(temp >> 16);
    18f4:	00 e1       	ldi	r16, 0x10	; 16
    18f6:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    18fa:	c9 01       	movw	r24, r18
    18fc:	da 01       	movw	r26, r20

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);

	toFixed(440.5, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    18fe:	80 93 67 05 	sts	0x0567, r24
    1902:	90 93 68 05 	sts	0x0568, r25
    1906:	a0 93 69 05 	sts	0x0569, r26
    190a:	b0 93 6a 05 	sts	0x056A, r27
	
	initLCD();
    190e:	0e 94 ce 0a 	call	0x159c	; 0x159c <_Z7initLCDv>
    1912:	88 ef       	ldi	r24, 0xF8	; 248
    1914:	91 e0       	ldi	r25, 0x01	; 1
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1916:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1918:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    191a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    191c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    191e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1920:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1922:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1924:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1926:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1928:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    192a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    192c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    192e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1930:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1932:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1934:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1936:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1938:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    193a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    193c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    193e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1940:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1942:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1944:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1946:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1948:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    194a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    194c:	44 9a       	sbi	0x08, 4	; 8
    194e:	01 97       	sbiw	r24, 0x01	; 1
		lcdCharacter(*str++);
}

inline void lcdClear()
{
	for(int index = 0; index < (LCD_X*LCD_Y)/8; index++)
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	09 f7       	brne	.-62     	; 0x1916 <_Z5setupv+0x21a>

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1954:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1956:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1958:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    195a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    195c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    195e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1960:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1962:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1964:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1966:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1968:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    196a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    196c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    196e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1970:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1972:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1974:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1976:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1978:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    197a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    197c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    197e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1980:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1982:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1984:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1986:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1988:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    198a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    198c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    198e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1990:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1992:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1994:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1996:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1998:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    199a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    199c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    199e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19ba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    19bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    19be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    19c0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    19c2:	44 9a       	sbi	0x08, 4	; 8
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
    19c4:	8f e0       	ldi	r24, 0x0F	; 15
    19c6:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1);
    19ca:	8a e8       	ldi	r24, 0x8A	; 138
    19cc:	80 93 7a 00 	sts	0x007A, r24
	gotoXY(0,0);
}

void uartInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    19d0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    19d4:	8f e1       	ldi	r24, 0x1F	; 31
    19d6:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    19da:	88 e9       	ldi	r24, 0x98	; 152
    19dc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	80 93 c2 00 	sts	0x00C2, r24
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
    19e6:	80 91 b1 00 	lds	r24, 0x00B1
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
    19f0:	80 91 b1 00 	lds	r24, 0x00B1
    19f4:	8d 7f       	andi	r24, 0xFD	; 253
    19f6:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
    19fa:	80 91 b1 00 	lds	r24, 0x00B1
    19fe:	8b 7f       	andi	r24, 0xFB	; 251
    1a00:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
    1a04:	80 91 b0 00 	lds	r24, 0x00B0
    1a08:	8f 7b       	andi	r24, 0xBF	; 191
    1a0a:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
    1a0e:	80 91 b0 00 	lds	r24, 0x00B0
    1a12:	80 68       	ori	r24, 0x80	; 128
    1a14:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
    1a18:	80 91 b0 00 	lds	r24, 0x00B0
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
    1a22:	80 91 b0 00 	lds	r24, 0x00B0
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
    1a2c:	80 91 b1 00 	lds	r24, 0x00B1
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	80 93 b1 00 	sts	0x00B1, r24
	noteUpdate();
}

void btnInit()
{
	cbi(OSC1_BTN_DIR, OSC1_BTN_PIN);
    1a36:	56 98       	cbi	0x0a, 6	; 10
	sbi(OSC1_BTN_WR, OSC1_BTN_PIN);
    1a38:	5e 9a       	sbi	0x0b, 6	; 11
	
	cbi(OSC2_BTN_DIR, OSC2_BTN_PIN); //Set OSC2_BTN as an input
    1a3a:	57 98       	cbi	0x0a, 7	; 10
	sbi(OSC2_BTN_WR, OSC2_BTN_PIN); //Set the internal pull-up
    1a3c:	5f 9a       	sbi	0x0b, 7	; 11
	
	cbi(SAVE_BTN_DIR, SAVE_BTN_PIN); //Set SAVE_BTN as an input
    1a3e:	20 98       	cbi	0x04, 0	; 4
	sbi(SAVE_BTN_WR, SAVE_BTN_PIN);	//Set the internal pull-up
    1a40:	28 9a       	sbi	0x05, 0	; 5
	
	cbi(BANK_BTN_DIR, BANK_BTN_PIN);
    1a42:	24 98       	cbi	0x04, 4	; 4
	sbi(BANK_BTN_WR, BANK_BTN_PIN);
    1a44:	2c 9a       	sbi	0x05, 4	; 5
	
	cbi(LOCK_BTN_DIR, LOCK_BTN_PIN);
    1a46:	22 98       	cbi	0x04, 2	; 4
	sbi(LOCK_BTN_WR, LOCK_BTN_PIN);
    1a48:	2a 9a       	sbi	0x05, 2	; 5
	
	cbi(EXTRA_BTN_DIR, EXTRA_BTN_PIN);
    1a4a:	21 98       	cbi	0x04, 1	; 4
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
    1a4c:	29 9a       	sbi	0x05, 1	; 5
	adcInit();
	uartInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
    1a4e:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
    1a50:	80 91 70 00 	lds	r24, 0x0070
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	80 93 70 00 	sts	0x0070, r24
	sei();
    1a5a:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    1a5c:	80 91 04 01 	lds	r24, 0x0104
    1a60:	e0 91 7b 05 	lds	r30, 0x057B
    1a64:	ff 27       	eor	r31, r31
    1a66:	e7 fd       	sbrc	r30, 7
    1a68:	f0 95       	com	r31
    1a6a:	e8 0f       	add	r30, r24
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	ee 55       	subi	r30, 0x5E	; 94
    1a78:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7a:	c0 80       	ld	r12, Z
    1a7c:	d1 80       	ldd	r13, Z+1	; 0x01
    1a7e:	e2 80       	ldd	r14, Z+2	; 0x02
    1a80:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    1a82:	90 91 04 01 	lds	r25, 0x0104
    1a86:	80 91 64 05 	lds	r24, 0x0564
    1a8a:	e0 91 65 05 	lds	r30, 0x0565
    1a8e:	ff 27       	eor	r31, r31
    1a90:	e7 fd       	sbrc	r30, 7
    1a92:	f0 95       	com	r31
    1a94:	e9 0f       	add	r30, r25
    1a96:	f1 1d       	adc	r31, r1
    1a98:	9c e0       	ldi	r25, 0x0C	; 12
    1a9a:	89 02       	muls	r24, r25
    1a9c:	e0 0d       	add	r30, r0
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	11 24       	eor	r1, r1
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	ee 55       	subi	r30, 0x5E	; 94
    1aac:	fe 4f       	sbci	r31, 0xFE	; 254
    1aae:	80 80       	ld	r8, Z
    1ab0:	91 80       	ldd	r9, Z+1	; 0x01
    1ab2:	a2 80       	ldd	r10, Z+2	; 0x02
    1ab4:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    1ab6:	60 91 7c 05 	lds	r22, 0x057C
    1aba:	a7 e2       	ldi	r26, 0x27	; 39
    1abc:	6a 02       	muls	r22, r26
    1abe:	b0 01       	movw	r22, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	88 27       	eor	r24, r24
    1ac4:	77 fd       	sbrc	r23, 7
    1ac6:	80 95       	com	r24
    1ac8:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1aca:	a7 01       	movw	r20, r14
    1acc:	96 01       	movw	r18, r12
    1ace:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1ad2:	00 e1       	ldi	r16, 0x10	; 16
    1ad4:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    1ad8:	2d 83       	std	Y+5, r18	; 0x05
    1ada:	3e 83       	std	Y+6, r19	; 0x06
    1adc:	4f 83       	std	Y+7, r20	; 0x07
    1ade:	58 87       	std	Y+8, r21	; 0x08
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	af 81       	ldd	r26, Y+7	; 0x07
    1ae6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae8:	c8 0e       	add	r12, r24
    1aea:	d9 1e       	adc	r13, r25
    1aec:	ea 1e       	adc	r14, r26
    1aee:	fb 1e       	adc	r15, r27
    1af0:	c0 92 8d 05 	sts	0x058D, r12
    1af4:	d0 92 8e 05 	sts	0x058E, r13
    1af8:	e0 92 8f 05 	sts	0x058F, r14
    1afc:	f0 92 90 05 	sts	0x0590, r15

	centsConst = 0x27*osc2CentsShift;
    1b00:	20 91 66 05 	lds	r18, 0x0566
    1b04:	97 e2       	ldi	r25, 0x27	; 39
    1b06:	29 02       	muls	r18, r25
    1b08:	90 01       	movw	r18, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	44 27       	eor	r20, r20
    1b0e:	37 fd       	sbrc	r19, 7
    1b10:	40 95       	com	r20
    1b12:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b14:	c5 01       	movw	r24, r10
    1b16:	b4 01       	movw	r22, r8
    1b18:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b1c:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    1b20:	2d 83       	std	Y+5, r18	; 0x05
    1b22:	3e 83       	std	Y+6, r19	; 0x06
    1b24:	4f 83       	std	Y+7, r20	; 0x07
    1b26:	58 87       	std	Y+8, r21	; 0x08
    1b28:	69 87       	std	Y+9, r22	; 0x09
    1b2a:	7a 87       	std	Y+10, r23	; 0x0a
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	af 81       	ldd	r26, Y+7	; 0x07
    1b36:	b8 85       	ldd	r27, Y+8	; 0x08
    1b38:	88 0e       	add	r8, r24
    1b3a:	99 1e       	adc	r9, r25
    1b3c:	aa 1e       	adc	r10, r26
    1b3e:	bb 1e       	adc	r11, r27
    1b40:	80 92 6f 05 	sts	0x056F, r8
    1b44:	90 92 70 05 	sts	0x0570, r9
    1b48:	a0 92 71 05 	sts	0x0571, r10
    1b4c:	b0 92 72 05 	sts	0x0572, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b50:	40 90 0c 05 	lds	r4, 0x050C
    1b54:	50 90 0d 05 	lds	r5, 0x050D
    1b58:	60 90 0e 05 	lds	r6, 0x050E
    1b5c:	70 90 0f 05 	lds	r7, 0x050F
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b60:	c7 01       	movw	r24, r14
    1b62:	b6 01       	movw	r22, r12
    1b64:	a3 01       	movw	r20, r6
    1b66:	92 01       	movw	r18, r4
    1b68:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b6c:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    1b70:	c9 01       	movw	r24, r18
    1b72:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1b74:	80 93 7d 05 	sts	0x057D, r24
    1b78:	90 93 7e 05 	sts	0x057E, r25
    1b7c:	a0 93 7f 05 	sts	0x057F, r26
    1b80:	b0 93 80 05 	sts	0x0580, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1b84:	c5 01       	movw	r24, r10
    1b86:	b4 01       	movw	r22, r8
    1b88:	a3 01       	movw	r20, r6
    1b8a:	92 01       	movw	r18, r4
    1b8c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1b90:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    1b94:	c9 01       	movw	r24, r18
    1b96:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    1b98:	80 93 67 05 	sts	0x0567, r24
    1b9c:	90 93 68 05 	sts	0x0568, r25
    1ba0:	a0 93 69 05 	sts	0x0569, r26
    1ba4:	b0 93 6a 05 	sts	0x056A, r27
	
	sbi (TIMSK2,TOIE2);
	sei();

	noteUpdate();
}
    1ba8:	2f 96       	adiw	r28, 0x0f	; 15
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	af 90       	pop	r10
    1bc8:	9f 90       	pop	r9
    1bca:	8f 90       	pop	r8
    1bcc:	7f 90       	pop	r7
    1bce:	6f 90       	pop	r6
    1bd0:	5f 90       	pop	r5
    1bd2:	4f 90       	pop	r4
    1bd4:	3f 90       	pop	r3
    1bd6:	2f 90       	pop	r2
    1bd8:	08 95       	ret

00001bda <main>:
void setup(void);

void noteUpdate(void);

int main(void)
{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	c3 55       	subi	r28, 0x53	; 83
    1be4:	d1 09       	sbc	r29, r1
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
	setup();
    1bf0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_Z5setupv>
	
	osc1MenuUpdate();
    1bf4:	0e 94 b4 04 	call	0x968	; 0x968 <_Z14osc1MenuUpdatev>
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	90 93 29 05 	sts	0x0529, r25
    1c00:	80 93 28 05 	sts	0x0528, r24
		menuKnobPos[i][1] = 512;
    1c04:	90 93 2b 05 	sts	0x052B, r25
    1c08:	80 93 2a 05 	sts	0x052A, r24
		menuKnobPos[i][2] = 512;
    1c0c:	90 93 2d 05 	sts	0x052D, r25
    1c10:	80 93 2c 05 	sts	0x052C, r24
		menuKnobPos[i][3] = 512;
    1c14:	90 93 2f 05 	sts	0x052F, r25
    1c18:	80 93 2e 05 	sts	0x052E, r24
		
		menuChange[i][0] = 0;
    1c1c:	10 92 10 05 	sts	0x0510, r1
		menuChange[i][1] = 0;
    1c20:	10 92 11 05 	sts	0x0511, r1
		menuChange[i][2] = 0;
    1c24:	10 92 12 05 	sts	0x0512, r1
		menuChange[i][3] = 0;
    1c28:	10 92 13 05 	sts	0x0513, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c2c:	90 93 31 05 	sts	0x0531, r25
    1c30:	80 93 30 05 	sts	0x0530, r24
		menuKnobPos[i][1] = 512;
    1c34:	90 93 33 05 	sts	0x0533, r25
    1c38:	80 93 32 05 	sts	0x0532, r24
		menuKnobPos[i][2] = 512;
    1c3c:	90 93 35 05 	sts	0x0535, r25
    1c40:	80 93 34 05 	sts	0x0534, r24
		menuKnobPos[i][3] = 512;
    1c44:	90 93 37 05 	sts	0x0537, r25
    1c48:	80 93 36 05 	sts	0x0536, r24
		
		menuChange[i][0] = 0;
    1c4c:	10 92 14 05 	sts	0x0514, r1
		menuChange[i][1] = 0;
    1c50:	10 92 15 05 	sts	0x0515, r1
		menuChange[i][2] = 0;
    1c54:	10 92 16 05 	sts	0x0516, r1
		menuChange[i][3] = 0;
    1c58:	10 92 17 05 	sts	0x0517, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c5c:	90 93 39 05 	sts	0x0539, r25
    1c60:	80 93 38 05 	sts	0x0538, r24
		menuKnobPos[i][1] = 512;
    1c64:	90 93 3b 05 	sts	0x053B, r25
    1c68:	80 93 3a 05 	sts	0x053A, r24
		menuKnobPos[i][2] = 512;
    1c6c:	90 93 3d 05 	sts	0x053D, r25
    1c70:	80 93 3c 05 	sts	0x053C, r24
		menuKnobPos[i][3] = 512;
    1c74:	90 93 3f 05 	sts	0x053F, r25
    1c78:	80 93 3e 05 	sts	0x053E, r24
		
		menuChange[i][0] = 0;
    1c7c:	10 92 18 05 	sts	0x0518, r1
		menuChange[i][1] = 0;
    1c80:	10 92 19 05 	sts	0x0519, r1
		menuChange[i][2] = 0;
    1c84:	10 92 1a 05 	sts	0x051A, r1
		menuChange[i][3] = 0;
    1c88:	10 92 1b 05 	sts	0x051B, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1c8c:	90 93 41 05 	sts	0x0541, r25
    1c90:	80 93 40 05 	sts	0x0540, r24
		menuKnobPos[i][1] = 512;
    1c94:	90 93 43 05 	sts	0x0543, r25
    1c98:	80 93 42 05 	sts	0x0542, r24
		menuKnobPos[i][2] = 512;
    1c9c:	90 93 45 05 	sts	0x0545, r25
    1ca0:	80 93 44 05 	sts	0x0544, r24
		menuKnobPos[i][3] = 512;
    1ca4:	90 93 47 05 	sts	0x0547, r25
    1ca8:	80 93 46 05 	sts	0x0546, r24
		
		menuChange[i][0] = 0;
    1cac:	10 92 1c 05 	sts	0x051C, r1
		menuChange[i][1] = 0;
    1cb0:	10 92 1d 05 	sts	0x051D, r1
		menuChange[i][2] = 0;
    1cb4:	10 92 1e 05 	sts	0x051E, r1
		menuChange[i][3] = 0;
    1cb8:	10 92 1f 05 	sts	0x051F, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1cbc:	90 93 49 05 	sts	0x0549, r25
    1cc0:	80 93 48 05 	sts	0x0548, r24
		menuKnobPos[i][1] = 512;
    1cc4:	90 93 4b 05 	sts	0x054B, r25
    1cc8:	80 93 4a 05 	sts	0x054A, r24
		menuKnobPos[i][2] = 512;
    1ccc:	90 93 4d 05 	sts	0x054D, r25
    1cd0:	80 93 4c 05 	sts	0x054C, r24
		menuKnobPos[i][3] = 512;
    1cd4:	90 93 4f 05 	sts	0x054F, r25
    1cd8:	80 93 4e 05 	sts	0x054E, r24
		
		menuChange[i][0] = 0;
    1cdc:	10 92 20 05 	sts	0x0520, r1
		menuChange[i][1] = 0;
    1ce0:	10 92 21 05 	sts	0x0521, r1
		menuChange[i][2] = 0;
    1ce4:	10 92 22 05 	sts	0x0522, r1
		menuChange[i][3] = 0;
    1ce8:	10 92 23 05 	sts	0x0523, r1
    1cec:	ae 01       	movw	r20, r28
    1cee:	4b 5e       	subi	r20, 0xEB	; 235
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	5f af       	std	Y+63, r21	; 0x3f
    1cf4:	4e af       	std	Y+62, r20	; 0x3e
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	5c 01       	movw	r10, r24
    1cfc:	de 01       	movw	r26, r28
    1cfe:	18 96       	adiw	r26, 0x08	; 8
    1d00:	bb af       	std	Y+59, r27	; 0x3b
    1d02:	aa af       	std	Y+58, r26	; 0x3a
    1d04:	4f 50       	subi	r20, 0x0F	; 15
    1d06:	51 09       	sbc	r21, r1
    1d08:	5f ab       	std	Y+55, r21	; 0x37
    1d0a:	4e ab       	std	Y+54, r20	; 0x36
    1d0c:	06 96       	adiw	r24, 0x06	; 6
    1d0e:	99 af       	std	Y+57, r25	; 0x39
    1d10:	88 af       	std	Y+56, r24	; 0x38
    1d12:	12 96       	adiw	r26, 0x02	; 2
    1d14:	bd af       	std	Y+61, r27	; 0x3d
    1d16:	ac af       	std	Y+60, r26	; 0x3c

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d18:	be ad       	ldd	r27, Y+62	; 0x3e
    1d1a:	61 96       	adiw	r28, 0x11	; 17
    1d1c:	bf af       	std	Y+63, r27	; 0x3f
    1d1e:	61 97       	sbiw	r28, 0x11	; 17
    1d20:	2f ad       	ldd	r18, Y+63	; 0x3f
    1d22:	62 96       	adiw	r28, 0x12	; 18
    1d24:	2f af       	std	Y+63, r18	; 0x3f
    1d26:	62 97       	sbiw	r28, 0x12	; 18
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1d28:	a5 e0       	ldi	r26, 0x05	; 5
    1d2a:	2a 2e       	mov	r2, r26
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1d2c:	45 01       	movw	r8, r10
    1d2e:	1a 2d       	mov	r17, r10
    1d30:	3b 2c       	mov	r3, r11
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
    1d32:	01 e0       	ldi	r16, 0x01	; 1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1d34:	2d e0       	ldi	r18, 0x0D	; 13
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1d36:	3c e0       	ldi	r19, 0x0C	; 12

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1d38:	f7 e0       	ldi	r31, 0x07	; 7
    1d3a:	ff 2e       	mov	r15, r31
		menuChange[i][3] = 0;
	}
	
	while(1)
	{
		adcUpdate++;
    1d3c:	80 91 f0 04 	lds	r24, 0x04F0
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 93 f0 04 	sts	0x04F0, r24
		//Refresh analog conversion
		if(adcUpdate > 10)
    1d46:	8b 30       	cpi	r24, 0x0B	; 11
    1d48:	38 f0       	brcs	.+14     	; 0x1d58 <main+0x17e>
		{
			sbi(ADCSRA, ADSC);
    1d4a:	80 91 7a 00 	lds	r24, 0x007A
    1d4e:	80 64       	ori	r24, 0x40	; 64
    1d50:	80 93 7a 00 	sts	0x007A, r24
			adcUpdate = 0;
    1d54:	10 92 f0 04 	sts	0x04F0, r1
		}
		
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
    1d58:	99 b1       	in	r25, 0x09	; 9
    1d5a:	89 2f       	mov	r24, r25
    1d5c:	80 74       	andi	r24, 0x40	; 64
    1d5e:	96 fd       	sbrc	r25, 6
    1d60:	b4 c5       	rjmp	.+2920   	; 0x28ca <main+0xcf0>
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
    1d62:	90 91 fd 04 	lds	r25, 0x04FD
    1d66:	91 11       	cpse	r25, r1
    1d68:	c0 c5       	rjmp	.+2944   	; 0x28ea <main+0xd10>
    1d6a:	90 91 f7 04 	lds	r25, 0x04F7
    1d6e:	99 23       	and	r25, r25
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <main+0x19a>
    1d72:	bb c5       	rjmp	.+2934   	; 0x28ea <main+0xd10>
    1d74:	90 91 58 05 	lds	r25, 0x0558
    1d78:	91 11       	cpse	r25, r1
    1d7a:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <main+0x1d5a>
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    1d7e:	4f 99       	sbic	0x09, 7	; 9
    1d80:	b8 c5       	rjmp	.+2928   	; 0x28f2 <main+0xd18>
		{
			if(!btnPressed[MENU_OSC2] && btnCanPress[MENU_OSC2] && menuSelect != MENU_OSC2)
    1d82:	90 91 fe 04 	lds	r25, 0x04FE
    1d86:	91 11       	cpse	r25, r1
    1d88:	bb c1       	rjmp	.+886    	; 0x2100 <main+0x526>
    1d8a:	90 91 f8 04 	lds	r25, 0x04F8
    1d8e:	99 23       	and	r25, r25
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <main+0x1ba>
    1d92:	b6 c1       	rjmp	.+876    	; 0x2100 <main+0x526>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <main+0x1c0>
    1d98:	b3 c1       	rjmp	.+870    	; 0x2100 <main+0x526>
			{
				btnLastPressed[MENU_OSC2] = 0;			
    1d9a:	10 92 f2 04 	sts	0x04F2, r1
				
				menuSelect = MENU_OSC2;				
    1d9e:	00 93 58 05 	sts	0x0558, r16
				
				menuChange[menuSelect][0] = 0;
    1da2:	10 92 14 05 	sts	0x0514, r1
				menuChange[menuSelect][1] = 0;
    1da6:	10 92 15 05 	sts	0x0515, r1
				menuChange[menuSelect][2] = 0;
    1daa:	10 92 16 05 	sts	0x0516, r1
				menuChange[menuSelect][3] = 0;	
    1dae:	10 92 17 05 	sts	0x0517, r1

inline void osc2MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2MenuTitle);
    1db2:	ea e4       	ldi	r30, 0x4A	; 74
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	61 96       	adiw	r28, 0x11	; 17
    1db8:	af ad       	ldd	r26, Y+63	; 0x3f
    1dba:	61 97       	sbiw	r28, 0x11	; 17
    1dbc:	62 96       	adiw	r28, 0x12	; 18
    1dbe:	bf ad       	ldd	r27, Y+63	; 0x3f
    1dc0:	62 97       	sbiw	r28, 0x12	; 18
    1dc2:	82 2f       	mov	r24, r18
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	0d 92       	st	X+, r0
    1dc8:	8a 95       	dec	r24
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <main+0x1ea>
	writeLine(0, buf);
    1dcc:	be 01       	movw	r22, r28
    1dce:	6b 5e       	subi	r22, 0xEB	; 235
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	63 96       	adiw	r28, 0x13	; 19
    1dd6:	2f af       	std	Y+63, r18	; 0x3f
    1dd8:	63 97       	sbiw	r28, 0x13	; 19
    1dda:	64 96       	adiw	r28, 0x14	; 20
    1ddc:	3f af       	std	Y+63, r19	; 0x3f
    1dde:	64 97       	sbiw	r28, 0x14	; 20
    1de0:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1de4:	e8 e1       	ldi	r30, 0x18	; 24
    1de6:	f1 e0       	ldi	r31, 0x01	; 1
    1de8:	d5 01       	movw	r26, r10
    1dea:	8f 2d       	mov	r24, r15
    1dec:	01 90       	ld	r0, Z+
    1dee:	0d 92       	st	X+, r0
    1df0:	8a 95       	dec	r24
    1df2:	e1 f7       	brne	.-8      	; 0x1dec <main+0x212>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    1df4:	e0 91 02 01 	lds	r30, 0x0102
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	e0 58       	subi	r30, 0x80	; 128
    1e00:	f9 4f       	sbci	r31, 0xF9	; 249
    1e02:	65 91       	lpm	r22, Z+
    1e04:	74 91       	lpm	r23, Z
    1e06:	a1 2e       	mov	r10, r17
    1e08:	b3 2c       	mov	r11, r3
    1e0a:	81 2f       	mov	r24, r17
    1e0c:	93 2d       	mov	r25, r3
    1e0e:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "       ");
    1e12:	d4 01       	movw	r26, r8
    1e14:	0d 90       	ld	r0, X+
    1e16:	00 20       	and	r0, r0
    1e18:	e9 f7       	brne	.-6      	; 0x1e14 <main+0x23a>
    1e1a:	11 97       	sbiw	r26, 0x01	; 1
    1e1c:	88 e0       	ldi	r24, 0x08	; 8
    1e1e:	e2 e4       	ldi	r30, 0x42	; 66
    1e20:	f1 e0       	ldi	r31, 0x01	; 1
    1e22:	01 90       	ld	r0, Z+
    1e24:	0d 92       	st	X+, r0
    1e26:	8a 95       	dec	r24
    1e28:	e1 f7       	brne	.-8      	; 0x1e22 <main+0x248>
	writeLine(2, buf);	
    1e2a:	61 2f       	mov	r22, r17
    1e2c:	73 2d       	mov	r23, r3
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f1 e0       	ldi	r31, 0x01	; 1
    1e3a:	a1 2f       	mov	r26, r17
    1e3c:	b3 2d       	mov	r27, r3
    1e3e:	01 90       	ld	r0, Z+
    1e40:	0d 92       	st	X+, r0
    1e42:	8a 95       	dec	r24
    1e44:	e1 f7       	brne	.-8      	; 0x1e3e <main+0x264>
	sprintf(buf + 7, "%d", osc2SemisShift);
    1e46:	40 91 65 05 	lds	r20, 0x0565
    1e4a:	84 2f       	mov	r24, r20
    1e4c:	99 27       	eor	r25, r25
    1e4e:	87 fd       	sbrc	r24, 7
    1e50:	90 95       	com	r25
    1e52:	9f 93       	push	r25
    1e54:	4f 93       	push	r20
    1e56:	a8 e0       	ldi	r26, 0x08	; 8
    1e58:	b1 e0       	ldi	r27, 0x01	; 1
    1e5a:	bf 93       	push	r27
    1e5c:	af 93       	push	r26
    1e5e:	5b ad       	ldd	r21, Y+59	; 0x3b
    1e60:	5f 93       	push	r21
    1e62:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e64:	8f 93       	push	r24
    1e66:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    1e6a:	d4 01       	movw	r26, r8
    1e6c:	0d 90       	ld	r0, X+
    1e6e:	00 20       	and	r0, r0
    1e70:	e9 f7       	brne	.-6      	; 0x1e6c <main+0x292>
    1e72:	11 97       	sbiw	r26, 0x01	; 1
    1e74:	88 e0       	ldi	r24, 0x08	; 8
    1e76:	e2 e4       	ldi	r30, 0x42	; 66
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	0d 92       	st	X+, r0
    1e7e:	8a 95       	dec	r24
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <main+0x2a0>
	writeLine(3, buf);
    1e82:	61 2f       	mov	r22, r17
    1e84:	73 2d       	mov	r23, r3
    1e86:	83 e0       	ldi	r24, 0x03	; 3
    1e88:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    1e8c:	88 e0       	ldi	r24, 0x08	; 8
    1e8e:	ef e1       	ldi	r30, 0x1F	; 31
    1e90:	f1 e0       	ldi	r31, 0x01	; 1
    1e92:	a1 2f       	mov	r26, r17
    1e94:	b3 2d       	mov	r27, r3
    1e96:	01 90       	ld	r0, Z+
    1e98:	0d 92       	st	X+, r0
    1e9a:	8a 95       	dec	r24
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <main+0x2bc>
	sprintf(buf + 7, "%d", osc2CentsShift);
    1e9e:	40 91 66 05 	lds	r20, 0x0566
    1ea2:	84 2f       	mov	r24, r20
    1ea4:	99 27       	eor	r25, r25
    1ea6:	87 fd       	sbrc	r24, 7
    1ea8:	90 95       	com	r25
    1eaa:	9f 93       	push	r25
    1eac:	4f 93       	push	r20
    1eae:	a8 e0       	ldi	r26, 0x08	; 8
    1eb0:	b1 e0       	ldi	r27, 0x01	; 1
    1eb2:	bf 93       	push	r27
    1eb4:	af 93       	push	r26
    1eb6:	5b ad       	ldd	r21, Y+59	; 0x3b
    1eb8:	5f 93       	push	r21
    1eba:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ebc:	8f 93       	push	r24
    1ebe:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    1ec2:	d4 01       	movw	r26, r8
    1ec4:	0d 90       	ld	r0, X+
    1ec6:	00 20       	and	r0, r0
    1ec8:	e9 f7       	brne	.-6      	; 0x1ec4 <main+0x2ea>
    1eca:	11 97       	sbiw	r26, 0x01	; 1
    1ecc:	88 e0       	ldi	r24, 0x08	; 8
    1ece:	e2 e4       	ldi	r30, 0x42	; 66
    1ed0:	f1 e0       	ldi	r31, 0x01	; 1
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	0d 92       	st	X+, r0
    1ed6:	8a 95       	dec	r24
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <main+0x2f8>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1eda:	e1 2f       	mov	r30, r17
    1edc:	f3 2d       	mov	r31, r3
    1ede:	de 01       	movw	r26, r28
    1ee0:	99 96       	adiw	r26, 0x29	; 41
    1ee2:	64 96       	adiw	r28, 0x14	; 20
    1ee4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ee6:	64 97       	sbiw	r28, 0x14	; 20
    1ee8:	83 2f       	mov	r24, r19
    1eea:	01 90       	ld	r0, Z+
    1eec:	0d 92       	st	X+, r0
    1eee:	8a 95       	dec	r24
    1ef0:	e1 f7       	brne	.-8      	; 0x1eea <main+0x310>
	buf[12] = '\0';
    1ef2:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1ef4:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1ef6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1ef8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1efa:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1efc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1efe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f00:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f02:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f04:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f10:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f12:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f14:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f16:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f18:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f1a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f1c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f1e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f20:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f22:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f24:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f26:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f28:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1f2a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1f2c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1f2e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f30:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f32:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f34:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f36:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f38:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f3a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f3c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f3e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f40:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f42:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f44:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f46:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f48:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f4a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f4c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f4e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f50:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f52:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f54:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f56:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f58:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f5a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f5c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f5e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f60:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1f62:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1f64:	49 a5       	ldd	r20, Y+41	; 0x29
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	63 96       	adiw	r28, 0x13	; 19
    1f72:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f74:	63 97       	sbiw	r28, 0x13	; 19
    1f76:	44 23       	and	r20, r20
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <main+0x3a2>
    1f7a:	82 c0       	rjmp	.+260    	; 0x2080 <main+0x4a6>
    1f7c:	de 01       	movw	r26, r28
    1f7e:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1f80:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1f82:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f84:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f8a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f8c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f8e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f90:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f92:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f94:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f96:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f98:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f9a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1f9c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1f9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fa0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fa2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1fa4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fa6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fa8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1faa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1fb0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fb2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fb4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1fb6:	44 9a       	sbi	0x08, 4	; 8
    1fb8:	84 2f       	mov	r24, r20
    1fba:	99 27       	eor	r25, r25
    1fbc:	87 fd       	sbrc	r24, 7
    1fbe:	90 95       	com	r25
    1fc0:	80 97       	sbiw	r24, 0x20	; 32
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	e8 0f       	add	r30, r24
    1fce:	f9 1f       	adc	r31, r25
    1fd0:	e0 5f       	subi	r30, 0xF0	; 240
    1fd2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fd4:	55 e0       	ldi	r21, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    1fd6:	41 91       	ld	r20, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1fd8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1fda:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1fdc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1fde:	84 2f       	mov	r24, r20
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	88 0f       	add	r24, r24
    1fe4:	89 2f       	mov	r24, r25
    1fe6:	88 1f       	adc	r24, r24
    1fe8:	99 0b       	sbc	r25, r25
    1fea:	89 2b       	or	r24, r25
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <main+0x416>
    1fee:	46 c4       	rjmp	.+2188   	; 0x287c <main+0xca2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1ff0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1ff2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1ff4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1ff6:	46 fd       	sbrc	r20, 6
    1ff8:	2b c4       	rjmp	.+2134   	; 0x2850 <main+0xc76>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1ffa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1ffc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1ffe:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2000:	45 fd       	sbrc	r20, 5
    2002:	2b c4       	rjmp	.+2134   	; 0x285a <main+0xc80>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2004:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2006:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2008:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    200a:	44 fd       	sbrc	r20, 4
    200c:	2b c4       	rjmp	.+2134   	; 0x2864 <main+0xc8a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    200e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2010:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2012:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2014:	43 fd       	sbrc	r20, 3
    2016:	2b c4       	rjmp	.+2134   	; 0x286e <main+0xc94>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2018:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    201a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    201c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    201e:	42 fd       	sbrc	r20, 2
    2020:	2b c4       	rjmp	.+2134   	; 0x2878 <main+0xc9e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2022:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2024:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2026:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2028:	41 fd       	sbrc	r20, 1
    202a:	10 c4       	rjmp	.+2080   	; 0x284c <main+0xc72>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    202c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    202e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2030:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2032:	40 fd       	sbrc	r20, 0
    2034:	09 c4       	rjmp	.+2066   	; 0x2848 <main+0xc6e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2036:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2038:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    203a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    203c:	44 9a       	sbi	0x08, 4	; 8
    203e:	51 50       	subi	r21, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2040:	51 f6       	brne	.-108    	; 0x1fd6 <main+0x3fc>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2042:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2044:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2046:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2048:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    204a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    204c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    204e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2050:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2052:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2054:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2056:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2058:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    205a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    205c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    205e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2060:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2062:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2064:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2066:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2068:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    206a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    206c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    206e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2070:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2072:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2074:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2076:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2078:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    207a:	4d 91       	ld	r20, X+
    207c:	41 11       	cpse	r20, r1
    207e:	80 cf       	rjmp	.-256    	; 0x1f80 <main+0x3a6>

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    2080:	86 e0       	ldi	r24, 0x06	; 6
    2082:	e7 e5       	ldi	r30, 0x57	; 87
    2084:	f1 e0       	ldi	r31, 0x01	; 1
    2086:	a1 2f       	mov	r26, r17
    2088:	b3 2d       	mov	r27, r3
    208a:	01 90       	ld	r0, Z+
    208c:	0d 92       	st	X+, r0
    208e:	8a 95       	dec	r24
    2090:	e1 f7       	brne	.-8      	; 0x208a <main+0x4b0>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    2092:	40 91 64 05 	lds	r20, 0x0564
    2096:	84 2f       	mov	r24, r20
    2098:	99 27       	eor	r25, r25
    209a:	87 fd       	sbrc	r24, 7
    209c:	90 95       	com	r25
    209e:	9f 93       	push	r25
    20a0:	4f 93       	push	r20
    20a2:	a8 e0       	ldi	r26, 0x08	; 8
    20a4:	b1 e0       	ldi	r27, 0x01	; 1
    20a6:	bf 93       	push	r27
    20a8:	af 93       	push	r26
    20aa:	5f a9       	ldd	r21, Y+55	; 0x37
    20ac:	5f 93       	push	r21
    20ae:	8e a9       	ldd	r24, Y+54	; 0x36
    20b0:	8f 93       	push	r24
    20b2:	63 96       	adiw	r28, 0x13	; 19
    20b4:	2f af       	std	Y+63, r18	; 0x3f
    20b6:	63 97       	sbiw	r28, 0x13	; 19
    20b8:	64 96       	adiw	r28, 0x14	; 20
    20ba:	3f af       	std	Y+63, r19	; 0x3f
    20bc:	64 97       	sbiw	r28, 0x14	; 20
    20be:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "        ");
    20c2:	d4 01       	movw	r26, r8
    20c4:	0d 90       	ld	r0, X+
    20c6:	00 20       	and	r0, r0
    20c8:	e9 f7       	brne	.-6      	; 0x20c4 <main+0x4ea>
    20ca:	11 97       	sbiw	r26, 0x01	; 1
    20cc:	89 e0       	ldi	r24, 0x09	; 9
    20ce:	e1 e4       	ldi	r30, 0x41	; 65
    20d0:	f1 e0       	ldi	r31, 0x01	; 1
    20d2:	01 90       	ld	r0, Z+
    20d4:	0d 92       	st	X+, r0
    20d6:	8a 95       	dec	r24
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <main+0x4f8>
	writeLine(5, buf);
    20da:	61 2f       	mov	r22, r17
    20dc:	73 2d       	mov	r23, r3
    20de:	85 e0       	ldi	r24, 0x05	; 5
    20e0:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    20e4:	80 91 58 05 	lds	r24, 0x0558
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	63 96       	adiw	r28, 0x13	; 19
    20f6:	2f ad       	ldd	r18, Y+63	; 0x3f
    20f8:	63 97       	sbiw	r28, 0x13	; 19
    20fa:	64 96       	adiw	r28, 0x14	; 20
    20fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    20fe:	64 97       	sbiw	r28, 0x14	; 20
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC2] = true;
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    2100:	18 99       	sbic	0x03, 0	; 3
    2102:	0a c4       	rjmp	.+2068   	; 0x2918 <main+0xd3e>
		{
			if(!btnPressed[MENU_LFO] && btnCanPress[MENU_LFO] && menuSelect != MENU_LFO)
    2104:	90 91 ff 04 	lds	r25, 0x04FF
    2108:	91 11       	cpse	r25, r1
    210a:	dc c0       	rjmp	.+440    	; 0x22c4 <main+0x6ea>
    210c:	90 91 f9 04 	lds	r25, 0x04F9
    2110:	99 23       	and	r25, r25
    2112:	09 f4       	brne	.+2      	; 0x2116 <main+0x53c>
    2114:	d7 c0       	rjmp	.+430    	; 0x22c4 <main+0x6ea>
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	09 f4       	brne	.+2      	; 0x211c <main+0x542>
    211a:	d4 c0       	rjmp	.+424    	; 0x22c4 <main+0x6ea>
			{
				btnLastPressed[MENU_LFO] = 0;
    211c:	10 92 f3 04 	sts	0x04F3, r1
				
				menuSelect = MENU_LFO;
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	80 93 58 05 	sts	0x0558, r24
				
				menuChange[menuSelect][0] = 0;
    2126:	10 92 18 05 	sts	0x0518, r1
				menuChange[menuSelect][1] = 0;
    212a:	10 92 19 05 	sts	0x0519, r1
				menuChange[menuSelect][2] = 0;
    212e:	10 92 1a 05 	sts	0x051A, r1
				menuChange[menuSelect][3] = 0;
    2132:	10 92 1b 05 	sts	0x051B, r1

inline void lfoMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", lfoMenuTitle);
    2136:	ed e5       	ldi	r30, 0x5D	; 93
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	61 96       	adiw	r28, 0x11	; 17
    213c:	af ad       	ldd	r26, Y+63	; 0x3f
    213e:	61 97       	sbiw	r28, 0x11	; 17
    2140:	62 96       	adiw	r28, 0x12	; 18
    2142:	bf ad       	ldd	r27, Y+63	; 0x3f
    2144:	62 97       	sbiw	r28, 0x12	; 18
    2146:	82 2f       	mov	r24, r18
    2148:	01 90       	ld	r0, Z+
    214a:	0d 92       	st	X+, r0
    214c:	8a 95       	dec	r24
    214e:	e1 f7       	brne	.-8      	; 0x2148 <main+0x56e>
	writeLine(0, buf);
    2150:	be 01       	movw	r22, r28
    2152:	6b 5e       	subi	r22, 0xEB	; 235
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	63 96       	adiw	r28, 0x13	; 19
    215a:	2f af       	std	Y+63, r18	; 0x3f
    215c:	63 97       	sbiw	r28, 0x13	; 19
    215e:	64 96       	adiw	r28, 0x14	; 20
    2160:	3f af       	std	Y+63, r19	; 0x3f
    2162:	64 97       	sbiw	r28, 0x14	; 20
    2164:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    2168:	e8 e1       	ldi	r30, 0x18	; 24
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	d5 01       	movw	r26, r10
    216e:	8f 2d       	mov	r24, r15
    2170:	01 90       	ld	r0, Z+
    2172:	0d 92       	st	X+, r0
    2174:	8a 95       	dec	r24
    2176:	e1 f7       	brne	.-8      	; 0x2170 <main+0x596>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    2178:	80 91 05 01 	lds	r24, 0x0105
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	80 58       	subi	r24, 0x80	; 128
    2184:	99 4f       	sbci	r25, 0xF9	; 249
    2186:	fc 01       	movw	r30, r24
    2188:	65 91       	lpm	r22, Z+
    218a:	74 91       	lpm	r23, Z
    218c:	81 2f       	mov	r24, r17
    218e:	93 2d       	mov	r25, r3
    2190:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "    ");
    2194:	d4 01       	movw	r26, r8
    2196:	0d 90       	ld	r0, X+
    2198:	00 20       	and	r0, r0
    219a:	e9 f7       	brne	.-6      	; 0x2196 <main+0x5bc>
    219c:	11 97       	sbiw	r26, 0x01	; 1
    219e:	e5 e4       	ldi	r30, 0x45	; 69
    21a0:	f1 e0       	ldi	r31, 0x01	; 1
    21a2:	82 2d       	mov	r24, r2
    21a4:	01 90       	ld	r0, Z+
    21a6:	0d 92       	st	X+, r0
    21a8:	8a 95       	dec	r24
    21aa:	e1 f7       	brne	.-8      	; 0x21a4 <main+0x5ca>
	writeLine(2, buf);
    21ac:	61 2f       	mov	r22, r17
    21ae:	73 2d       	mov	r23, r3
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    21b6:	ea e6       	ldi	r30, 0x6A	; 106
    21b8:	f1 e0       	ldi	r31, 0x01	; 1
    21ba:	a1 2f       	mov	r26, r17
    21bc:	b3 2d       	mov	r27, r3
    21be:	8f 2d       	mov	r24, r15
    21c0:	01 90       	ld	r0, Z+
    21c2:	0d 92       	st	X+, r0
    21c4:	8a 95       	dec	r24
    21c6:	e1 f7       	brne	.-8      	; 0x21c0 <main+0x5e6>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    21c8:	80 91 5a 05 	lds	r24, 0x055A
    21cc:	1f 92       	push	r1
    21ce:	8f 93       	push	r24
    21d0:	a8 e0       	ldi	r26, 0x08	; 8
    21d2:	b1 e0       	ldi	r27, 0x01	; 1
    21d4:	bf 93       	push	r27
    21d6:	af 93       	push	r26
    21d8:	59 ad       	ldd	r21, Y+57	; 0x39
    21da:	5f 93       	push	r21
    21dc:	88 ad       	ldd	r24, Y+56	; 0x38
    21de:	8f 93       	push	r24
    21e0:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    21e4:	d4 01       	movw	r26, r8
    21e6:	0d 90       	ld	r0, X+
    21e8:	00 20       	and	r0, r0
    21ea:	e9 f7       	brne	.-6      	; 0x21e6 <main+0x60c>
    21ec:	11 97       	sbiw	r26, 0x01	; 1
    21ee:	e5 e4       	ldi	r30, 0x45	; 69
    21f0:	f1 e0       	ldi	r31, 0x01	; 1
    21f2:	82 2d       	mov	r24, r2
    21f4:	01 90       	ld	r0, Z+
    21f6:	0d 92       	st	X+, r0
    21f8:	8a 95       	dec	r24
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <main+0x61a>
	writeLine(3, buf);
    21fc:	61 2f       	mov	r22, r17
    21fe:	73 2d       	mov	r23, r3
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    2206:	e1 e7       	ldi	r30, 0x71	; 113
    2208:	f1 e0       	ldi	r31, 0x01	; 1
    220a:	a1 2f       	mov	r26, r17
    220c:	b3 2d       	mov	r27, r3
    220e:	8f 2d       	mov	r24, r15
    2210:	01 90       	ld	r0, Z+
    2212:	0d 92       	st	X+, r0
    2214:	8a 95       	dec	r24
    2216:	e1 f7       	brne	.-8      	; 0x2210 <main+0x636>
	sprintf(buf + 6, "%d", lfoDepth);
    2218:	80 91 59 05 	lds	r24, 0x0559
    221c:	1f 92       	push	r1
    221e:	8f 93       	push	r24
    2220:	a8 e0       	ldi	r26, 0x08	; 8
    2222:	b1 e0       	ldi	r27, 0x01	; 1
    2224:	bf 93       	push	r27
    2226:	af 93       	push	r26
    2228:	59 ad       	ldd	r21, Y+57	; 0x39
    222a:	5f 93       	push	r21
    222c:	88 ad       	ldd	r24, Y+56	; 0x38
    222e:	8f 93       	push	r24
    2230:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    2234:	d4 01       	movw	r26, r8
    2236:	0d 90       	ld	r0, X+
    2238:	00 20       	and	r0, r0
    223a:	e9 f7       	brne	.-6      	; 0x2236 <main+0x65c>
    223c:	11 97       	sbiw	r26, 0x01	; 1
    223e:	e5 e4       	ldi	r30, 0x45	; 69
    2240:	f1 e0       	ldi	r31, 0x01	; 1
    2242:	82 2d       	mov	r24, r2
    2244:	01 90       	ld	r0, Z+
    2246:	0d 92       	st	X+, r0
    2248:	8a 95       	dec	r24
    224a:	e1 f7       	brne	.-8      	; 0x2244 <main+0x66a>
	writeLine(4, buf);
    224c:	61 2f       	mov	r22, r17
    224e:	73 2d       	mov	r23, r3
    2250:	84 e0       	ldi	r24, 0x04	; 4
    2252:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    2256:	e6 e3       	ldi	r30, 0x36	; 54
    2258:	f1 e0       	ldi	r31, 0x01	; 1
    225a:	a1 2f       	mov	r26, r17
    225c:	b3 2d       	mov	r27, r3
    225e:	8f 2d       	mov	r24, r15
    2260:	01 90       	ld	r0, Z+
    2262:	0d 92       	st	X+, r0
    2264:	8a 95       	dec	r24
    2266:	e1 f7       	brne	.-8      	; 0x2260 <main+0x686>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    2268:	80 91 5b 05 	lds	r24, 0x055B
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	88 59       	subi	r24, 0x98	; 152
    2274:	99 4f       	sbci	r25, 0xF9	; 249
    2276:	fc 01       	movw	r30, r24
    2278:	65 91       	lpm	r22, Z+
    227a:	74 91       	lpm	r23, Z
    227c:	a1 2e       	mov	r10, r17
    227e:	b3 2c       	mov	r11, r3
    2280:	81 2f       	mov	r24, r17
    2282:	93 2d       	mov	r25, r3
    2284:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "    ");
    2288:	d4 01       	movw	r26, r8
    228a:	0d 90       	ld	r0, X+
    228c:	00 20       	and	r0, r0
    228e:	e9 f7       	brne	.-6      	; 0x228a <main+0x6b0>
    2290:	11 97       	sbiw	r26, 0x01	; 1
    2292:	e5 e4       	ldi	r30, 0x45	; 69
    2294:	f1 e0       	ldi	r31, 0x01	; 1
    2296:	82 2d       	mov	r24, r2
    2298:	01 90       	ld	r0, Z+
    229a:	0d 92       	st	X+, r0
    229c:	8a 95       	dec	r24
    229e:	e1 f7       	brne	.-8      	; 0x2298 <main+0x6be>
	writeLine(5, buf);
    22a0:	61 2f       	mov	r22, r17
    22a2:	73 2d       	mov	r23, r3
    22a4:	85 e0       	ldi	r24, 0x05	; 5
    22a6:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    22aa:	80 91 58 05 	lds	r24, 0x0558
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	63 96       	adiw	r28, 0x13	; 19
    22ba:	2f ad       	ldd	r18, Y+63	; 0x3f
    22bc:	63 97       	sbiw	r28, 0x13	; 19
    22be:	64 96       	adiw	r28, 0x14	; 20
    22c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    22c2:	64 97       	sbiw	r28, 0x14	; 20
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
			btnCanPress[MENU_LFO] = true;
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    22c4:	1c 99       	sbic	0x03, 4	; 3
    22c6:	3b c3       	rjmp	.+1654   	; 0x293e <main+0xd64>
		{
			if(!btnPressed[MENU_MIX] && btnCanPress[MENU_MIX] && menuSelect != MENU_MIX)
    22c8:	90 91 00 05 	lds	r25, 0x0500
    22cc:	91 11       	cpse	r25, r1
    22ce:	bd c0       	rjmp	.+378    	; 0x244a <main+0x870>
    22d0:	90 91 fa 04 	lds	r25, 0x04FA
    22d4:	99 23       	and	r25, r25
    22d6:	09 f4       	brne	.+2      	; 0x22da <main+0x700>
    22d8:	b8 c0       	rjmp	.+368    	; 0x244a <main+0x870>
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <main+0x706>
    22de:	c1 c0       	rjmp	.+386    	; 0x2462 <main+0x888>
			{
				btnLastPressed[MENU_MIX] = 0;
    22e0:	10 92 f4 04 	sts	0x04F4, r1
				
				menuSelect = MENU_MIX;
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	80 93 58 05 	sts	0x0558, r24
				
				menuChange[menuSelect][0] = 0;
    22ea:	10 92 1c 05 	sts	0x051C, r1
				menuChange[menuSelect][1] = 0;
    22ee:	10 92 1d 05 	sts	0x051D, r1
				menuChange[menuSelect][2] = 0;
    22f2:	10 92 1e 05 	sts	0x051E, r1
				menuChange[menuSelect][3] = 0;
    22f6:	10 92 1f 05 	sts	0x051F, r1

inline void mixerMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", mixingMenuTitle);
    22fa:	e8 e7       	ldi	r30, 0x78	; 120
    22fc:	f1 e0       	ldi	r31, 0x01	; 1
    22fe:	61 96       	adiw	r28, 0x11	; 17
    2300:	af ad       	ldd	r26, Y+63	; 0x3f
    2302:	61 97       	sbiw	r28, 0x11	; 17
    2304:	62 96       	adiw	r28, 0x12	; 18
    2306:	bf ad       	ldd	r27, Y+63	; 0x3f
    2308:	62 97       	sbiw	r28, 0x12	; 18
    230a:	82 2f       	mov	r24, r18
    230c:	01 90       	ld	r0, Z+
    230e:	0d 92       	st	X+, r0
    2310:	8a 95       	dec	r24
    2312:	e1 f7       	brne	.-8      	; 0x230c <main+0x732>
	writeLine(0, buf);
    2314:	be 01       	movw	r22, r28
    2316:	6b 5e       	subi	r22, 0xEB	; 235
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	63 96       	adiw	r28, 0x13	; 19
    231e:	2f af       	std	Y+63, r18	; 0x3f
    2320:	63 97       	sbiw	r28, 0x13	; 19
    2322:	64 96       	adiw	r28, 0x14	; 20
    2324:	3f af       	std	Y+63, r19	; 0x3f
    2326:	64 97       	sbiw	r28, 0x14	; 20
    2328:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    232c:	8a e0       	ldi	r24, 0x0A	; 10
    232e:	e5 e8       	ldi	r30, 0x85	; 133
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	d5 01       	movw	r26, r10
    2334:	01 90       	ld	r0, Z+
    2336:	0d 92       	st	X+, r0
    2338:	8a 95       	dec	r24
    233a:	e1 f7       	brne	.-8      	; 0x2334 <main+0x75a>
	sprintf(buf + 9, "%d", osc1Weight);
    233c:	80 91 07 01 	lds	r24, 0x0107
    2340:	1f 92       	push	r1
    2342:	8f 93       	push	r24
    2344:	a8 e0       	ldi	r26, 0x08	; 8
    2346:	b1 e0       	ldi	r27, 0x01	; 1
    2348:	bf 93       	push	r27
    234a:	af 93       	push	r26
    234c:	5d ad       	ldd	r21, Y+61	; 0x3d
    234e:	5f 93       	push	r21
    2350:	8c ad       	ldd	r24, Y+60	; 0x3c
    2352:	8f 93       	push	r24
    2354:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    2358:	d5 01       	movw	r26, r10
    235a:	0d 90       	ld	r0, X+
    235c:	00 20       	and	r0, r0
    235e:	e9 f7       	brne	.-6      	; 0x235a <main+0x780>
    2360:	11 97       	sbiw	r26, 0x01	; 1
    2362:	e5 e4       	ldi	r30, 0x45	; 69
    2364:	f1 e0       	ldi	r31, 0x01	; 1
    2366:	82 2d       	mov	r24, r2
    2368:	01 90       	ld	r0, Z+
    236a:	0d 92       	st	X+, r0
    236c:	8a 95       	dec	r24
    236e:	e1 f7       	brne	.-8      	; 0x2368 <main+0x78e>
	writeLine(2, buf);
    2370:	b5 01       	movw	r22, r10
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	ef e8       	ldi	r30, 0x8F	; 143
    237c:	f1 e0       	ldi	r31, 0x01	; 1
    237e:	d5 01       	movw	r26, r10
    2380:	01 90       	ld	r0, Z+
    2382:	0d 92       	st	X+, r0
    2384:	8a 95       	dec	r24
    2386:	e1 f7       	brne	.-8      	; 0x2380 <main+0x7a6>
	sprintf(buf + 9, "%d", osc2Weight);
    2388:	80 91 62 05 	lds	r24, 0x0562
    238c:	1f 92       	push	r1
    238e:	8f 93       	push	r24
    2390:	a8 e0       	ldi	r26, 0x08	; 8
    2392:	b1 e0       	ldi	r27, 0x01	; 1
    2394:	bf 93       	push	r27
    2396:	af 93       	push	r26
    2398:	5d ad       	ldd	r21, Y+61	; 0x3d
    239a:	5f 93       	push	r21
    239c:	8c ad       	ldd	r24, Y+60	; 0x3c
    239e:	8f 93       	push	r24
    23a0:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    23a4:	d5 01       	movw	r26, r10
    23a6:	0d 90       	ld	r0, X+
    23a8:	00 20       	and	r0, r0
    23aa:	e9 f7       	brne	.-6      	; 0x23a6 <main+0x7cc>
    23ac:	11 97       	sbiw	r26, 0x01	; 1
    23ae:	e5 e4       	ldi	r30, 0x45	; 69
    23b0:	f1 e0       	ldi	r31, 0x01	; 1
    23b2:	82 2d       	mov	r24, r2
    23b4:	01 90       	ld	r0, Z+
    23b6:	0d 92       	st	X+, r0
    23b8:	8a 95       	dec	r24
    23ba:	e1 f7       	brne	.-8      	; 0x23b4 <main+0x7da>
	writeLine(3, buf);
    23bc:	b5 01       	movw	r22, r10
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    23c4:	89 e0       	ldi	r24, 0x09	; 9
    23c6:	e9 e9       	ldi	r30, 0x99	; 153
    23c8:	f1 e0       	ldi	r31, 0x01	; 1
    23ca:	d5 01       	movw	r26, r10
    23cc:	01 90       	ld	r0, Z+
    23ce:	0d 92       	st	X+, r0
    23d0:	8a 95       	dec	r24
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <main+0x7f2>
	if(osc2Sync != false)
    23d4:	80 91 06 01 	lds	r24, 0x0106
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	63 96       	adiw	r28, 0x13	; 19
    23e4:	2f ad       	ldd	r18, Y+63	; 0x3f
    23e6:	63 97       	sbiw	r28, 0x13	; 19
    23e8:	64 96       	adiw	r28, 0x14	; 20
    23ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    23ec:	64 97       	sbiw	r28, 0x14	; 20
    23ee:	81 11       	cpse	r24, r1
    23f0:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <main+0x20dc>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    23f4:	8f e4       	ldi	r24, 0x4F	; 79
    23f6:	96 e4       	ldi	r25, 0x46	; 70
    23f8:	a6 e4       	ldi	r26, 0x46	; 70
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	89 87       	std	Y+9, r24	; 0x09
    23fe:	9a 87       	std	Y+10, r25	; 0x0a
    2400:	ab 87       	std	Y+11, r26	; 0x0b
    2402:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    2404:	d5 01       	movw	r26, r10
    2406:	0d 90       	ld	r0, X+
    2408:	00 20       	and	r0, r0
    240a:	e9 f7       	brne	.-6      	; 0x2406 <main+0x82c>
    240c:	11 97       	sbiw	r26, 0x01	; 1
    240e:	e5 e4       	ldi	r30, 0x45	; 69
    2410:	f1 e0       	ldi	r31, 0x01	; 1
    2412:	82 2d       	mov	r24, r2
    2414:	01 90       	ld	r0, Z+
    2416:	0d 92       	st	X+, r0
    2418:	8a 95       	dec	r24
    241a:	e1 f7       	brne	.-8      	; 0x2414 <main+0x83a>
	writeLine(4, buf);
    241c:	b5 01       	movw	r22, r10
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	63 96       	adiw	r28, 0x13	; 19
    2422:	2f af       	std	Y+63, r18	; 0x3f
    2424:	63 97       	sbiw	r28, 0x13	; 19
    2426:	64 96       	adiw	r28, 0x14	; 20
    2428:	3f af       	std	Y+63, r19	; 0x3f
    242a:	64 97       	sbiw	r28, 0x14	; 20
    242c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
}

inline void mixerMenuEmptyLine()
{
	writeLine(5, "            ");
    2430:	6d e3       	ldi	r22, 0x3D	; 61
    2432:	71 e0       	ldi	r23, 0x01	; 1
    2434:	85 e0       	ldi	r24, 0x05	; 5
    2436:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    243a:	80 91 58 05 	lds	r24, 0x0558
    243e:	63 96       	adiw	r28, 0x13	; 19
    2440:	2f ad       	ldd	r18, Y+63	; 0x3f
    2442:	63 97       	sbiw	r28, 0x13	; 19
    2444:	64 96       	adiw	r28, 0x14	; 20
    2446:	3f ad       	ldd	r19, Y+63	; 0x3f
    2448:	64 97       	sbiw	r28, 0x14	; 20
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
			btnCanPress[MENU_MIX] = true;
		}

		//Menu Updates
		switch(menuSelect)
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	09 f4       	brne	.+2      	; 0x2450 <main+0x876>
    244e:	8b c2       	rjmp	.+1302   	; 0x2966 <main+0xd8c>
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	08 f4       	brcc	.+2      	; 0x2456 <main+0x87c>
    2454:	22 c6       	rjmp	.+3140   	; 0x309a <main+0x14c0>
    2456:	82 30       	cpi	r24, 0x02	; 2
    2458:	09 f4       	brne	.+2      	; 0x245c <main+0x882>
    245a:	d3 c4       	rjmp	.+2470   	; 0x2e02 <main+0x1228>
    245c:	83 30       	cpi	r24, 0x03	; 3
    245e:	09 f0       	breq	.+2      	; 0x2462 <main+0x888>
    2460:	6d cc       	rjmp	.-1830   	; 0x1d3c <main+0x162>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    2462:	80 91 95 05 	lds	r24, 0x0595
    2466:	88 23       	and	r24, r24
    2468:	e1 f0       	breq	.+56     	; 0x24a2 <main+0x8c8>
    246a:	80 91 40 05 	lds	r24, 0x0540
    246e:	90 91 41 05 	lds	r25, 0x0541
    2472:	20 91 99 05 	lds	r18, 0x0599
    2476:	30 91 9a 05 	lds	r19, 0x059A
    247a:	ac 01       	movw	r20, r24
    247c:	47 5f       	subi	r20, 0xF7	; 247
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	42 17       	cp	r20, r18
    2482:	53 07       	cpc	r21, r19
    2484:	74 f0       	brlt	.+28     	; 0x24a2 <main+0x8c8>
    2486:	8b 30       	cpi	r24, 0x0B	; 11
    2488:	91 05       	cpc	r25, r1
    248a:	14 f4       	brge	.+4      	; 0x2490 <main+0x8b6>
    248c:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <main+0x2148>
    2490:	0a 97       	sbiw	r24, 0x0a	; 10
    2492:	82 17       	cp	r24, r18
    2494:	93 07       	cpc	r25, r19
    2496:	2c f4       	brge	.+10     	; 0x24a2 <main+0x8c8>
			{
				menuChange[MENU_MIX][0] = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	80 93 1c 05 	sts	0x051C, r24
				updateADC[0] = false;
    249e:	10 92 95 05 	sts	0x0595, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    24a2:	80 91 96 05 	lds	r24, 0x0596
    24a6:	88 23       	and	r24, r24
    24a8:	e1 f0       	breq	.+56     	; 0x24e2 <main+0x908>
    24aa:	80 91 42 05 	lds	r24, 0x0542
    24ae:	90 91 43 05 	lds	r25, 0x0543
    24b2:	20 91 9b 05 	lds	r18, 0x059B
    24b6:	30 91 9c 05 	lds	r19, 0x059C
    24ba:	ac 01       	movw	r20, r24
    24bc:	47 5f       	subi	r20, 0xF7	; 247
    24be:	5f 4f       	sbci	r21, 0xFF	; 255
    24c0:	42 17       	cp	r20, r18
    24c2:	53 07       	cpc	r21, r19
    24c4:	74 f0       	brlt	.+28     	; 0x24e2 <main+0x908>
    24c6:	8b 30       	cpi	r24, 0x0B	; 11
    24c8:	91 05       	cpc	r25, r1
    24ca:	14 f4       	brge	.+4      	; 0x24d0 <main+0x8f6>
    24cc:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <main+0x2150>
    24d0:	0a 97       	sbiw	r24, 0x0a	; 10
    24d2:	82 17       	cp	r24, r18
    24d4:	93 07       	cpc	r25, r19
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <main+0x908>
			{
				menuChange[MENU_MIX][1] = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	80 93 1d 05 	sts	0x051D, r24
				updateADC[1] = false;
    24de:	10 92 96 05 	sts	0x0596, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    24e2:	80 91 97 05 	lds	r24, 0x0597
    24e6:	88 23       	and	r24, r24
    24e8:	e1 f0       	breq	.+56     	; 0x2522 <main+0x948>
    24ea:	80 91 44 05 	lds	r24, 0x0544
    24ee:	90 91 45 05 	lds	r25, 0x0545
    24f2:	20 91 9d 05 	lds	r18, 0x059D
    24f6:	30 91 9e 05 	lds	r19, 0x059E
    24fa:	ac 01       	movw	r20, r24
    24fc:	47 5f       	subi	r20, 0xF7	; 247
    24fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2500:	42 17       	cp	r20, r18
    2502:	53 07       	cpc	r21, r19
    2504:	74 f0       	brlt	.+28     	; 0x2522 <main+0x948>
    2506:	8b 30       	cpi	r24, 0x0B	; 11
    2508:	91 05       	cpc	r25, r1
    250a:	14 f4       	brge	.+4      	; 0x2510 <main+0x936>
    250c:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <main+0x2140>
    2510:	0a 97       	sbiw	r24, 0x0a	; 10
    2512:	82 17       	cp	r24, r18
    2514:	93 07       	cpc	r25, r19
    2516:	2c f4       	brge	.+10     	; 0x2522 <main+0x948>
			{
				menuChange[MENU_MIX][2] = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	80 93 1e 05 	sts	0x051E, r24
				updateADC[2] = false;
    251e:	10 92 97 05 	sts	0x0597, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    2522:	80 91 98 05 	lds	r24, 0x0598
    2526:	88 23       	and	r24, r24
    2528:	11 f4       	brne	.+4      	; 0x252e <main+0x954>
    252a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <main+0x1c90>
    252e:	20 91 46 05 	lds	r18, 0x0546
    2532:	30 91 47 05 	lds	r19, 0x0547
    2536:	80 91 9f 05 	lds	r24, 0x059F
    253a:	90 91 a0 05 	lds	r25, 0x05A0
    253e:	a9 01       	movw	r20, r18
    2540:	47 5f       	subi	r20, 0xF7	; 247
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	48 17       	cp	r20, r24
    2546:	59 07       	cpc	r21, r25
    2548:	14 f4       	brge	.+4      	; 0x254e <main+0x974>
    254a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <main+0x1c90>
    254e:	2b 30       	cpi	r18, 0x0B	; 11
    2550:	31 05       	cpc	r19, r1
    2552:	14 f4       	brge	.+4      	; 0x2558 <main+0x97e>
    2554:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <main+0x20ce>
    2558:	2a 50       	subi	r18, 0x0A	; 10
    255a:	31 09       	sbc	r19, r1
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	14 f0       	brlt	.+4      	; 0x2566 <main+0x98c>
    2562:	0c 94 35 1c 	jmp	0x386a	; 0x386a <main+0x1c90>
			{
				menuChange[MENU_MIX][3] = 1;
    2566:	21 e0       	ldi	r18, 0x01	; 1
    2568:	20 93 1f 05 	sts	0x051F, r18
				updateADC[3] = false;
    256c:	10 92 98 05 	sts	0x0598, r1
			}

			if(menuChange[MENU_MIX][3] != 0)
			{
				if((adcValue[3] >> 2) != osc1Weight)
    2570:	9c 01       	movw	r18, r24
    2572:	35 95       	asr	r19
    2574:	27 95       	ror	r18
    2576:	35 95       	asr	r19
    2578:	27 95       	ror	r18
    257a:	40 91 07 01 	lds	r20, 0x0107
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	24 17       	cp	r18, r20
    2582:	35 07       	cpc	r19, r21
    2584:	09 f4       	brne	.+2      	; 0x2588 <main+0x9ae>
    2586:	24 c1       	rjmp	.+584    	; 0x27d0 <main+0xbf6>
				{
					osc1Weight = adcValue[3] >> 2;
    2588:	20 93 07 01 	sts	0x0107, r18
					osc2Weight = ~osc1Weight;
    258c:	42 2f       	mov	r20, r18
    258e:	40 95       	com	r20
    2590:	40 93 62 05 	sts	0x0562, r20

					menuKnobPos[MENU_MIX][3] = adcValue[3];
    2594:	90 93 47 05 	sts	0x0547, r25
    2598:	80 93 46 05 	sts	0x0546, r24

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    259c:	8a e0       	ldi	r24, 0x0A	; 10
    259e:	e5 e8       	ldi	r30, 0x85	; 133
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	d5 01       	movw	r26, r10
    25a4:	01 90       	ld	r0, Z+
    25a6:	0d 92       	st	X+, r0
    25a8:	8a 95       	dec	r24
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <main+0x9ca>
	sprintf(buf + 9, "%d", osc1Weight);
    25ac:	33 27       	eor	r19, r19
    25ae:	3f 93       	push	r19
    25b0:	2f 93       	push	r18
    25b2:	a8 e0       	ldi	r26, 0x08	; 8
    25b4:	b1 e0       	ldi	r27, 0x01	; 1
    25b6:	bf 93       	push	r27
    25b8:	af 93       	push	r26
    25ba:	4d ad       	ldd	r20, Y+61	; 0x3d
    25bc:	4f 93       	push	r20
    25be:	5c ad       	ldd	r21, Y+60	; 0x3c
    25c0:	5f 93       	push	r21
    25c2:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    25c6:	d5 01       	movw	r26, r10
    25c8:	0d 90       	ld	r0, X+
    25ca:	00 20       	and	r0, r0
    25cc:	e9 f7       	brne	.-6      	; 0x25c8 <main+0x9ee>
    25ce:	11 97       	sbiw	r26, 0x01	; 1
    25d0:	e5 e4       	ldi	r30, 0x45	; 69
    25d2:	f1 e0       	ldi	r31, 0x01	; 1
    25d4:	82 2d       	mov	r24, r2
    25d6:	01 90       	ld	r0, Z+
    25d8:	0d 92       	st	X+, r0
    25da:	8a 95       	dec	r24
    25dc:	e1 f7       	brne	.-8      	; 0x25d6 <main+0x9fc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    25de:	8c e0       	ldi	r24, 0x0C	; 12
    25e0:	f5 01       	movw	r30, r10
    25e2:	de 01       	movw	r26, r28
    25e4:	55 96       	adiw	r26, 0x15	; 21
    25e6:	01 90       	ld	r0, Z+
    25e8:	0d 92       	st	X+, r0
    25ea:	8a 95       	dec	r24
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <main+0xa0c>
	buf[12] = '\0';
    25ee:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    25f0:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    25f2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25f4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    25f6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    25fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    25fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    25fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2600:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2602:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2604:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2606:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2608:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    260a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    260c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    260e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2610:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2612:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2614:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2616:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2618:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    261a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    261c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    261e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2620:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2622:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2624:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2626:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2628:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    262a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    262c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    262e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2630:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2632:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2634:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2636:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2638:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    263a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    263c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    263e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2640:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2642:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2644:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2646:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2648:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    264a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    264c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    264e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2650:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2652:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2654:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2656:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2658:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    265a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    265c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    265e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    2660:	8d 89       	ldd	r24, Y+21	; 0x15
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	88 23       	and	r24, r24
    2670:	09 f4       	brne	.+2      	; 0x2674 <main+0xa9a>
    2672:	82 c0       	rjmp	.+260    	; 0x2778 <main+0xb9e>
    2674:	de 01       	movw	r26, r28
    2676:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2678:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    267a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    267c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    267e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2680:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2682:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2684:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2686:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2688:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    268a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    268c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    268e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2690:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2692:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2694:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2696:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2698:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    269a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    269c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    269e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26ac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    26ae:	44 9a       	sbi	0x08, 4	; 8
    26b0:	99 27       	eor	r25, r25
    26b2:	87 fd       	sbrc	r24, 7
    26b4:	90 95       	com	r25
    26b6:	80 97       	sbiw	r24, 0x20	; 32
    26b8:	fc 01       	movw	r30, r24
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	e8 0f       	add	r30, r24
    26c4:	f9 1f       	adc	r31, r25
    26c6:	e0 5f       	subi	r30, 0xF0	; 240
    26c8:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    26ca:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    26cc:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    26ce:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    26d0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26d2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    26d4:	82 2f       	mov	r24, r18
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	88 0f       	add	r24, r24
    26da:	89 2f       	mov	r24, r25
    26dc:	88 1f       	adc	r24, r24
    26de:	99 0b       	sbc	r25, r25
    26e0:	89 2b       	or	r24, r25
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <main+0xb0c>
    26e4:	cd c0       	rjmp	.+410    	; 0x2880 <main+0xca6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26e6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26ea:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    26ec:	26 fd       	sbrc	r18, 6
    26ee:	cd c0       	rjmp	.+410    	; 0x288a <main+0xcb0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26f0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26f2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26f4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    26f6:	25 fd       	sbrc	r18, 5
    26f8:	cd c0       	rjmp	.+410    	; 0x2894 <main+0xcba>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    26fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    26fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    26fe:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2700:	24 fd       	sbrc	r18, 4
    2702:	cd c0       	rjmp	.+410    	; 0x289e <main+0xcc4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2704:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2706:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2708:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    270a:	23 fd       	sbrc	r18, 3
    270c:	cd c0       	rjmp	.+410    	; 0x28a8 <main+0xcce>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    270e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2710:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2712:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2714:	22 fd       	sbrc	r18, 2
    2716:	cd c0       	rjmp	.+410    	; 0x28b2 <main+0xcd8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2718:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    271a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    271c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    271e:	21 fd       	sbrc	r18, 1
    2720:	cd c0       	rjmp	.+410    	; 0x28bc <main+0xce2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2722:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2724:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2726:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2728:	20 fd       	sbrc	r18, 0
    272a:	cd c0       	rjmp	.+410    	; 0x28c6 <main+0xcec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    272c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    272e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2730:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2732:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2734:	3f 5f       	subi	r19, 0xFF	; 255
    2736:	35 30       	cpi	r19, 0x05	; 5
    2738:	49 f6       	brne	.-110    	; 0x26cc <main+0xaf2>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    273a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    273c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    273e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2740:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2742:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2744:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2746:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2748:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    274a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    274c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    274e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2750:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2752:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2754:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2756:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2758:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    275a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    275c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    275e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2760:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2762:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2764:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2766:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2768:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    276a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    276c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    276e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2770:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    2772:	8d 91       	ld	r24, X+
    2774:	81 11       	cpse	r24, r1
    2776:	80 cf       	rjmp	.-256    	; 0x2678 <main+0xa9e>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    2778:	8a e0       	ldi	r24, 0x0A	; 10
    277a:	ef e8       	ldi	r30, 0x8F	; 143
    277c:	f1 e0       	ldi	r31, 0x01	; 1
    277e:	d5 01       	movw	r26, r10
    2780:	01 90       	ld	r0, Z+
    2782:	0d 92       	st	X+, r0
    2784:	8a 95       	dec	r24
    2786:	e1 f7       	brne	.-8      	; 0x2780 <main+0xba6>
	sprintf(buf + 9, "%d", osc2Weight);
    2788:	80 91 62 05 	lds	r24, 0x0562
    278c:	1f 92       	push	r1
    278e:	8f 93       	push	r24
    2790:	a8 e0       	ldi	r26, 0x08	; 8
    2792:	b1 e0       	ldi	r27, 0x01	; 1
    2794:	bf 93       	push	r27
    2796:	af 93       	push	r26
    2798:	4d ad       	ldd	r20, Y+61	; 0x3d
    279a:	4f 93       	push	r20
    279c:	5c ad       	ldd	r21, Y+60	; 0x3c
    279e:	5f 93       	push	r21
    27a0:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    27a4:	d5 01       	movw	r26, r10
    27a6:	0d 90       	ld	r0, X+
    27a8:	00 20       	and	r0, r0
    27aa:	e9 f7       	brne	.-6      	; 0x27a6 <main+0xbcc>
    27ac:	11 97       	sbiw	r26, 0x01	; 1
    27ae:	e5 e4       	ldi	r30, 0x45	; 69
    27b0:	f1 e0       	ldi	r31, 0x01	; 1
    27b2:	82 2d       	mov	r24, r2
    27b4:	01 90       	ld	r0, Z+
    27b6:	0d 92       	st	X+, r0
    27b8:	8a 95       	dec	r24
    27ba:	e1 f7       	brne	.-8      	; 0x27b4 <main+0xbda>
	writeLine(3, buf);
    27bc:	b5 01       	movw	r22, r10
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
					mixerMenuOsc1WeightUpdate();
					mixerMenuOsc2WeightUpdate();
				}
			}

			if(menuChange[MENU_MIX][1] != 0)
    27d0:	80 91 1d 05 	lds	r24, 0x051D
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <main+0xc00>
    27d8:	ac ca       	rjmp	.-2728   	; 0x1d32 <main+0x158>
			{
				if(adcValue[1] > 512 && osc2Sync != true)
    27da:	80 91 9b 05 	lds	r24, 0x059B
    27de:	90 91 9c 05 	lds	r25, 0x059C
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	a2 e0       	ldi	r26, 0x02	; 2
    27e6:	9a 07       	cpc	r25, r26
    27e8:	14 f4       	brge	.+4      	; 0x27ee <main+0xc14>
    27ea:	0c 94 47 1c 	jmp	0x388e	; 0x388e <main+0x1cb4>
    27ee:	80 91 06 01 	lds	r24, 0x0106
    27f2:	81 11       	cpse	r24, r1
    27f4:	9e ca       	rjmp	.-2756   	; 0x1d32 <main+0x158>
				{
					osc2Sync = true;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	80 93 06 01 	sts	0x0106, r24

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    27fc:	89 e0       	ldi	r24, 0x09	; 9
    27fe:	e9 e9       	ldi	r30, 0x99	; 153
    2800:	f1 e0       	ldi	r31, 0x01	; 1
    2802:	d5 01       	movw	r26, r10
    2804:	01 90       	ld	r0, Z+
    2806:	0d 92       	st	X+, r0
    2808:	8a 95       	dec	r24
    280a:	e1 f7       	brne	.-8      	; 0x2804 <main+0xc2a>
	if(osc2Sync != false)
    280c:	80 91 06 01 	lds	r24, 0x0106
    2810:	81 11       	cpse	r24, r1
    2812:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <main+0x2224>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    2816:	8f e4       	ldi	r24, 0x4F	; 79
    2818:	96 e4       	ldi	r25, 0x46	; 70
    281a:	a6 e4       	ldi	r26, 0x46	; 70
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	89 87       	std	Y+9, r24	; 0x09
    2820:	9a 87       	std	Y+10, r25	; 0x0a
    2822:	ab 87       	std	Y+11, r26	; 0x0b
    2824:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    2826:	d5 01       	movw	r26, r10
    2828:	0d 90       	ld	r0, X+
    282a:	00 20       	and	r0, r0
    282c:	e9 f7       	brne	.-6      	; 0x2828 <main+0xc4e>
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	e5 e4       	ldi	r30, 0x45	; 69
    2832:	f1 e0       	ldi	r31, 0x01	; 1
    2834:	82 2d       	mov	r24, r2
    2836:	01 90       	ld	r0, Z+
    2838:	0d 92       	st	X+, r0
    283a:	8a 95       	dec	r24
    283c:	e1 f7       	brne	.-8      	; 0x2836 <main+0xc5c>
	writeLine(4, buf);
    283e:	b5 01       	movw	r22, r10
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2846:	75 ca       	rjmp	.-2838   	; 0x1d32 <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2848:	5d 9a       	sbi	0x0b, 5	; 11
    284a:	f6 cb       	rjmp	.-2068   	; 0x2038 <main+0x45e>
    284c:	5d 9a       	sbi	0x0b, 5	; 11
    284e:	ef cb       	rjmp	.-2082   	; 0x202e <main+0x454>
    2850:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2852:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2854:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2856:	45 ff       	sbrs	r20, 5
    2858:	d5 cb       	rjmp	.-2134   	; 0x2004 <main+0x42a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    285a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    285c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    285e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2860:	44 ff       	sbrs	r20, 4
    2862:	d5 cb       	rjmp	.-2134   	; 0x200e <main+0x434>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2864:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2866:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2868:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    286a:	43 ff       	sbrs	r20, 3
    286c:	d5 cb       	rjmp	.-2134   	; 0x2018 <main+0x43e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    286e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2870:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2872:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2874:	42 ff       	sbrs	r20, 2
    2876:	d5 cb       	rjmp	.-2134   	; 0x2022 <main+0x448>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2878:	5d 9a       	sbi	0x0b, 5	; 11
    287a:	d4 cb       	rjmp	.-2136   	; 0x2024 <main+0x44a>
    287c:	5d 9a       	sbi	0x0b, 5	; 11
    287e:	b9 cb       	rjmp	.-2190   	; 0x1ff2 <main+0x418>
    2880:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2882:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2884:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2886:	26 ff       	sbrs	r18, 6
    2888:	33 cf       	rjmp	.-410    	; 0x26f0 <main+0xb16>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    288a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    288c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    288e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2890:	25 ff       	sbrs	r18, 5
    2892:	33 cf       	rjmp	.-410    	; 0x26fa <main+0xb20>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2894:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2896:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2898:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    289a:	24 ff       	sbrs	r18, 4
    289c:	33 cf       	rjmp	.-410    	; 0x2704 <main+0xb2a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    289e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28a2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28a4:	23 ff       	sbrs	r18, 3
    28a6:	33 cf       	rjmp	.-410    	; 0x270e <main+0xb34>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28a8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28ac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28ae:	22 ff       	sbrs	r18, 2
    28b0:	33 cf       	rjmp	.-410    	; 0x2718 <main+0xb3e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28b2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28b6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28b8:	21 ff       	sbrs	r18, 1
    28ba:	33 cf       	rjmp	.-410    	; 0x2722 <main+0xb48>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    28be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    28c0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    28c2:	20 ff       	sbrs	r18, 0
    28c4:	33 cf       	rjmp	.-410    	; 0x272c <main+0xb52>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    28c6:	5d 9a       	sbi	0x0b, 5	; 11
    28c8:	32 cf       	rjmp	.-412    	; 0x272e <main+0xb54>
				osc1MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC1])
    28ca:	80 91 fd 04 	lds	r24, 0x04FD
    28ce:	81 11       	cpse	r24, r1
			btnPressed[MENU_OSC1] = false;
    28d0:	10 92 fd 04 	sts	0x04FD, r1
			
			if(!btnCanPress[MENU_OSC1])
    28d4:	80 91 f7 04 	lds	r24, 0x04F7
    28d8:	88 23       	and	r24, r24
    28da:	09 f4       	brne	.+2      	; 0x28de <main+0xd04>
    28dc:	86 c2       	rjmp	.+1292   	; 0x2dea <main+0x1210>
    28de:	80 91 f1 04 	lds	r24, 0x04F1
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
    28e2:	85 36       	cpi	r24, 0x65	; 101
    28e4:	10 f0       	brcs	.+4      	; 0x28ea <main+0xd10>
			btnCanPress[MENU_OSC1] = true;
    28e6:	00 93 f7 04 	sts	0x04F7, r16
    28ea:	80 91 58 05 	lds	r24, 0x0558
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    28ee:	4f 9b       	sbis	0x09, 7	; 9
    28f0:	48 ca       	rjmp	.-2928   	; 0x1d82 <main+0x1a8>
				osc2MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC2])
    28f2:	90 91 fe 04 	lds	r25, 0x04FE
    28f6:	91 11       	cpse	r25, r1
			btnPressed[MENU_OSC2] = false;
    28f8:	10 92 fe 04 	sts	0x04FE, r1
					
			if(!btnCanPress[MENU_OSC2])
    28fc:	90 91 f8 04 	lds	r25, 0x04F8
    2900:	99 23       	and	r25, r25
    2902:	09 f4       	brne	.+2      	; 0x2906 <main+0xd2c>
    2904:	be c7       	rjmp	.+3964   	; 0x3882 <main+0x1ca8>
    2906:	90 91 f2 04 	lds	r25, 0x04F2
			btnLastPressed[MENU_OSC2]++;
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
    290a:	95 36       	cpi	r25, 0x65	; 101
    290c:	08 f4       	brcc	.+2      	; 0x2910 <main+0xd36>
    290e:	f8 cb       	rjmp	.-2064   	; 0x2100 <main+0x526>
			btnCanPress[MENU_OSC2] = true;
    2910:	00 93 f8 04 	sts	0x04F8, r16
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    2914:	18 9b       	sbis	0x03, 0	; 3
    2916:	f6 cb       	rjmp	.-2068   	; 0x2104 <main+0x52a>
				lfoMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_LFO])
    2918:	90 91 ff 04 	lds	r25, 0x04FF
    291c:	91 11       	cpse	r25, r1
			btnPressed[MENU_LFO] = false;
    291e:	10 92 ff 04 	sts	0x04FF, r1
			
			if(!btnCanPress[MENU_LFO])
    2922:	90 91 f9 04 	lds	r25, 0x04F9
    2926:	99 23       	and	r25, r25
    2928:	09 f4       	brne	.+2      	; 0x292c <main+0xd52>
    292a:	59 c2       	rjmp	.+1202   	; 0x2dde <main+0x1204>
    292c:	90 91 f3 04 	lds	r25, 0x04F3
			btnLastPressed[MENU_LFO]++;
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
    2930:	95 36       	cpi	r25, 0x65	; 101
    2932:	08 f4       	brcc	.+2      	; 0x2936 <main+0xd5c>
    2934:	c7 cc       	rjmp	.-1650   	; 0x22c4 <main+0x6ea>
			btnCanPress[MENU_LFO] = true;
    2936:	00 93 f9 04 	sts	0x04F9, r16
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    293a:	1c 9b       	sbis	0x03, 4	; 3
    293c:	c5 cc       	rjmp	.-1654   	; 0x22c8 <main+0x6ee>
				mixerMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_MIX])
    293e:	90 91 00 05 	lds	r25, 0x0500
    2942:	91 11       	cpse	r25, r1
			btnPressed[MENU_MIX] = false;
    2944:	10 92 00 05 	sts	0x0500, r1
			
			if(!btnCanPress[MENU_MIX])
    2948:	90 91 fa 04 	lds	r25, 0x04FA
    294c:	99 23       	and	r25, r25
    294e:	09 f4       	brne	.+2      	; 0x2952 <main+0xd78>
    2950:	52 c2       	rjmp	.+1188   	; 0x2df6 <main+0x121c>
    2952:	90 91 f4 04 	lds	r25, 0x04F4
			btnLastPressed[MENU_MIX]++;
			
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
    2956:	95 36       	cpi	r25, 0x65	; 101
    2958:	08 f4       	brcc	.+2      	; 0x295c <main+0xd82>
    295a:	77 cd       	rjmp	.-1298   	; 0x244a <main+0x870>
			btnCanPress[MENU_MIX] = true;
    295c:	00 93 fa 04 	sts	0x04FA, r16
		}

		//Menu Updates
		switch(menuSelect)
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	09 f0       	breq	.+2      	; 0x2966 <main+0xd8c>
    2964:	75 cd       	rjmp	.-1302   	; 0x2450 <main+0x876>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    2966:	80 91 95 05 	lds	r24, 0x0595
    296a:	88 23       	and	r24, r24
    296c:	e1 f0       	breq	.+56     	; 0x29a6 <main+0xdcc>
    296e:	80 91 30 05 	lds	r24, 0x0530
    2972:	90 91 31 05 	lds	r25, 0x0531
    2976:	20 91 99 05 	lds	r18, 0x0599
    297a:	30 91 9a 05 	lds	r19, 0x059A
    297e:	ac 01       	movw	r20, r24
    2980:	47 5f       	subi	r20, 0xF7	; 247
    2982:	5f 4f       	sbci	r21, 0xFF	; 255
    2984:	42 17       	cp	r20, r18
    2986:	53 07       	cpc	r21, r19
    2988:	74 f0       	brlt	.+28     	; 0x29a6 <main+0xdcc>
    298a:	8b 30       	cpi	r24, 0x0B	; 11
    298c:	91 05       	cpc	r25, r1
    298e:	14 f4       	brge	.+4      	; 0x2994 <main+0xdba>
    2990:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <main+0x21e4>
    2994:	0a 97       	sbiw	r24, 0x0a	; 10
    2996:	82 17       	cp	r24, r18
    2998:	93 07       	cpc	r25, r19
    299a:	2c f4       	brge	.+10     	; 0x29a6 <main+0xdcc>
			{
				menuChange[MENU_OSC2][0] = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	80 93 14 05 	sts	0x0514, r24
				updateADC[0] = false;
    29a2:	10 92 95 05 	sts	0x0595, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC2][1] + 10 && adcValue[1] > menuKnobPos[MENU_OSC2][1] - 10)
    29a6:	80 91 96 05 	lds	r24, 0x0596
    29aa:	88 23       	and	r24, r24
    29ac:	c1 f0       	breq	.+48     	; 0x29de <main+0xe04>
    29ae:	20 91 32 05 	lds	r18, 0x0532
    29b2:	30 91 33 05 	lds	r19, 0x0533
    29b6:	80 91 9b 05 	lds	r24, 0x059B
    29ba:	90 91 9c 05 	lds	r25, 0x059C
    29be:	a9 01       	movw	r20, r18
    29c0:	47 5f       	subi	r20, 0xF7	; 247
    29c2:	5f 4f       	sbci	r21, 0xFF	; 255
    29c4:	48 17       	cp	r20, r24
    29c6:	59 07       	cpc	r21, r25
    29c8:	54 f0       	brlt	.+20     	; 0x29de <main+0xe04>
    29ca:	29 50       	subi	r18, 0x09	; 9
    29cc:	31 09       	sbc	r19, r1
    29ce:	82 17       	cp	r24, r18
    29d0:	93 07       	cpc	r25, r19
    29d2:	2c f0       	brlt	.+10     	; 0x29de <main+0xe04>
			{
				menuChange[MENU_OSC2][1] = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	80 93 15 05 	sts	0x0515, r24
				updateADC[1] = false;
    29da:	10 92 96 05 	sts	0x0596, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC2][2] + 10 && adcValue[2] > menuKnobPos[MENU_OSC2][2] - 10)
    29de:	80 91 97 05 	lds	r24, 0x0597
    29e2:	88 23       	and	r24, r24
    29e4:	c1 f0       	breq	.+48     	; 0x2a16 <main+0xe3c>
    29e6:	20 91 34 05 	lds	r18, 0x0534
    29ea:	30 91 35 05 	lds	r19, 0x0535
    29ee:	80 91 9d 05 	lds	r24, 0x059D
    29f2:	90 91 9e 05 	lds	r25, 0x059E
    29f6:	a9 01       	movw	r20, r18
    29f8:	47 5f       	subi	r20, 0xF7	; 247
    29fa:	5f 4f       	sbci	r21, 0xFF	; 255
    29fc:	48 17       	cp	r20, r24
    29fe:	59 07       	cpc	r21, r25
    2a00:	54 f0       	brlt	.+20     	; 0x2a16 <main+0xe3c>
    2a02:	29 50       	subi	r18, 0x09	; 9
    2a04:	31 09       	sbc	r19, r1
    2a06:	82 17       	cp	r24, r18
    2a08:	93 07       	cpc	r25, r19
    2a0a:	2c f0       	brlt	.+10     	; 0x2a16 <main+0xe3c>
			{
				menuChange[MENU_OSC2][2] = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	80 93 16 05 	sts	0x0516, r24
				updateADC[2] = false;
    2a12:	10 92 97 05 	sts	0x0597, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC2][3] + 10 && adcValue[3] > menuKnobPos[MENU_OSC2][3] - 10)
    2a16:	80 91 98 05 	lds	r24, 0x0598
    2a1a:	88 23       	and	r24, r24
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <main+0xe46>
    2a1e:	50 c6       	rjmp	.+3232   	; 0x36c0 <main+0x1ae6>
    2a20:	20 91 36 05 	lds	r18, 0x0536
    2a24:	30 91 37 05 	lds	r19, 0x0537
    2a28:	80 91 9f 05 	lds	r24, 0x059F
    2a2c:	90 91 a0 05 	lds	r25, 0x05A0
    2a30:	a9 01       	movw	r20, r18
    2a32:	47 5f       	subi	r20, 0xF7	; 247
    2a34:	5f 4f       	sbci	r21, 0xFF	; 255
    2a36:	48 17       	cp	r20, r24
    2a38:	59 07       	cpc	r21, r25
    2a3a:	0c f4       	brge	.+2      	; 0x2a3e <main+0xe64>
    2a3c:	41 c6       	rjmp	.+3202   	; 0x36c0 <main+0x1ae6>
    2a3e:	29 50       	subi	r18, 0x09	; 9
    2a40:	31 09       	sbc	r19, r1
    2a42:	82 17       	cp	r24, r18
    2a44:	93 07       	cpc	r25, r19
    2a46:	0c f4       	brge	.+2      	; 0x2a4a <main+0xe70>
    2a48:	3b c6       	rjmp	.+3190   	; 0x36c0 <main+0x1ae6>
			{
				menuChange[MENU_OSC2][3] = 1;
    2a4a:	21 e0       	ldi	r18, 0x01	; 1
    2a4c:	20 93 17 05 	sts	0x0517, r18
				updateADC[3] = false;
    2a50:	10 92 98 05 	sts	0x0598, r1
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
			{
				if(adcValue[3] < 146)
    2a54:	82 39       	cpi	r24, 0x92	; 146
    2a56:	91 05       	cpc	r25, r1
    2a58:	0c f0       	brlt	.+2      	; 0x2a5c <main+0xe82>
    2a5a:	3f c6       	rjmp	.+3198   	; 0x36da <main+0x1b00>
				{
					if(osc2WaveForm != WAVE_SINE)
    2a5c:	80 91 02 01 	lds	r24, 0x0102
    2a60:	81 11       	cpse	r24, r1
    2a62:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <main+0x22d0>
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
						osc2MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC2][2] != 0)
    2a66:	80 91 16 05 	lds	r24, 0x0516
    2a6a:	88 23       	and	r24, r24
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <main+0xe96>
    2a6e:	26 c1       	rjmp	.+588    	; 0x2cbc <main+0x10e2>
			{
				if(osc2SemisShift != (adcValue[2] >> 4) - 32)
    2a70:	80 91 9d 05 	lds	r24, 0x059D
    2a74:	90 91 9e 05 	lds	r25, 0x059E
    2a78:	9c 01       	movw	r18, r24
    2a7a:	35 95       	asr	r19
    2a7c:	27 95       	ror	r18
    2a7e:	35 95       	asr	r19
    2a80:	27 95       	ror	r18
    2a82:	35 95       	asr	r19
    2a84:	27 95       	ror	r18
    2a86:	35 95       	asr	r19
    2a88:	27 95       	ror	r18
    2a8a:	60 91 65 05 	lds	r22, 0x0565
    2a8e:	77 27       	eor	r23, r23
    2a90:	67 fd       	sbrc	r22, 7
    2a92:	70 95       	com	r23
    2a94:	a9 01       	movw	r20, r18
    2a96:	40 52       	subi	r20, 0x20	; 32
    2a98:	51 09       	sbc	r21, r1
    2a9a:	64 17       	cp	r22, r20
    2a9c:	75 07       	cpc	r23, r21
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <main+0xec8>
    2aa0:	0d c1       	rjmp	.+538    	; 0x2cbc <main+0x10e2>
				{
					osc2SemisShift = (adcValue[2] >> 4) - 32;
    2aa2:	20 52       	subi	r18, 0x20	; 32
    2aa4:	20 93 65 05 	sts	0x0565, r18
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
    2aa8:	90 93 35 05 	sts	0x0535, r25
    2aac:	80 93 34 05 	sts	0x0534, r24

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2ab0:	88 e0       	ldi	r24, 0x08	; 8
    2ab2:	e7 e2       	ldi	r30, 0x27	; 39
    2ab4:	f1 e0       	ldi	r31, 0x01	; 1
    2ab6:	d5 01       	movw	r26, r10
    2ab8:	01 90       	ld	r0, Z+
    2aba:	0d 92       	st	X+, r0
    2abc:	8a 95       	dec	r24
    2abe:	e1 f7       	brne	.-8      	; 0x2ab8 <main+0xede>
	sprintf(buf + 7, "%d", osc2SemisShift);
    2ac0:	82 2f       	mov	r24, r18
    2ac2:	99 27       	eor	r25, r25
    2ac4:	87 fd       	sbrc	r24, 7
    2ac6:	90 95       	com	r25
    2ac8:	9f 93       	push	r25
    2aca:	2f 93       	push	r18
    2acc:	a8 e0       	ldi	r26, 0x08	; 8
    2ace:	b1 e0       	ldi	r27, 0x01	; 1
    2ad0:	bf 93       	push	r27
    2ad2:	af 93       	push	r26
    2ad4:	4b ad       	ldd	r20, Y+59	; 0x3b
    2ad6:	4f 93       	push	r20
    2ad8:	5a ad       	ldd	r21, Y+58	; 0x3a
    2ada:	5f 93       	push	r21
    2adc:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    2ae0:	d5 01       	movw	r26, r10
    2ae2:	0d 90       	ld	r0, X+
    2ae4:	00 20       	and	r0, r0
    2ae6:	e9 f7       	brne	.-6      	; 0x2ae2 <main+0xf08>
    2ae8:	11 97       	sbiw	r26, 0x01	; 1
    2aea:	88 e0       	ldi	r24, 0x08	; 8
    2aec:	e2 e4       	ldi	r30, 0x42	; 66
    2aee:	f1 e0       	ldi	r31, 0x01	; 1
    2af0:	01 90       	ld	r0, Z+
    2af2:	0d 92       	st	X+, r0
    2af4:	8a 95       	dec	r24
    2af6:	e1 f7       	brne	.-8      	; 0x2af0 <main+0xf16>
	writeLine(3, buf);
    2af8:	b5 01       	movw	r22, r10
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    2b00:	80 91 04 01 	lds	r24, 0x0104
    2b04:	e0 91 7b 05 	lds	r30, 0x057B
    2b08:	ff 27       	eor	r31, r31
    2b0a:	e7 fd       	sbrc	r30, 7
    2b0c:	f0 95       	com	r31
    2b0e:	e8 0f       	add	r30, r24
    2b10:	f1 1d       	adc	r31, r1
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	ee 55       	subi	r30, 0x5E	; 94
    2b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1e:	40 80       	ld	r4, Z
    2b20:	51 80       	ldd	r5, Z+1	; 0x01
    2b22:	62 80       	ldd	r6, Z+2	; 0x02
    2b24:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    2b26:	90 91 04 01 	lds	r25, 0x0104
    2b2a:	80 91 64 05 	lds	r24, 0x0564
    2b2e:	e0 91 65 05 	lds	r30, 0x0565
    2b32:	ff 27       	eor	r31, r31
    2b34:	e7 fd       	sbrc	r30, 7
    2b36:	f0 95       	com	r31
    2b38:	e9 0f       	add	r30, r25
    2b3a:	f1 1d       	adc	r31, r1
    2b3c:	9c e0       	ldi	r25, 0x0C	; 12
    2b3e:	89 02       	muls	r24, r25
    2b40:	e0 0d       	add	r30, r0
    2b42:	f1 1d       	adc	r31, r1
    2b44:	11 24       	eor	r1, r1
    2b46:	ee 0f       	add	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	ee 0f       	add	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	ee 55       	subi	r30, 0x5E	; 94
    2b50:	fe 4f       	sbci	r31, 0xFE	; 254
    2b52:	c0 80       	ld	r12, Z
    2b54:	d1 80       	ldd	r13, Z+1	; 0x01
    2b56:	e2 80       	ldd	r14, Z+2	; 0x02
    2b58:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    2b5a:	60 91 7c 05 	lds	r22, 0x057C
    2b5e:	a7 e2       	ldi	r26, 0x27	; 39
    2b60:	6a 02       	muls	r22, r26
    2b62:	b0 01       	movw	r22, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	88 27       	eor	r24, r24
    2b68:	77 fd       	sbrc	r23, 7
    2b6a:	80 95       	com	r24
    2b6c:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2b6e:	a3 01       	movw	r20, r6
    2b70:	92 01       	movw	r18, r4
    2b72:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2b76:	00 e1       	ldi	r16, 0x10	; 16
    2b78:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    2b7c:	21 96       	adiw	r28, 0x01	; 1
    2b7e:	2f af       	std	Y+63, r18	; 0x3f
    2b80:	21 97       	sbiw	r28, 0x01	; 1
    2b82:	22 96       	adiw	r28, 0x02	; 2
    2b84:	3f af       	std	Y+63, r19	; 0x3f
    2b86:	22 97       	sbiw	r28, 0x02	; 2
    2b88:	23 96       	adiw	r28, 0x03	; 3
    2b8a:	4f af       	std	Y+63, r20	; 0x3f
    2b8c:	23 97       	sbiw	r28, 0x03	; 3
    2b8e:	24 96       	adiw	r28, 0x04	; 4
    2b90:	5f af       	std	Y+63, r21	; 0x3f
    2b92:	24 97       	sbiw	r28, 0x04	; 4
    2b94:	25 96       	adiw	r28, 0x05	; 5
    2b96:	6f af       	std	Y+63, r22	; 0x3f
    2b98:	25 97       	sbiw	r28, 0x05	; 5
    2b9a:	26 96       	adiw	r28, 0x06	; 6
    2b9c:	7f af       	std	Y+63, r23	; 0x3f
    2b9e:	26 97       	sbiw	r28, 0x06	; 6
    2ba0:	27 96       	adiw	r28, 0x07	; 7
    2ba2:	8f af       	std	Y+63, r24	; 0x3f
    2ba4:	27 97       	sbiw	r28, 0x07	; 7
    2ba6:	28 96       	adiw	r28, 0x08	; 8
    2ba8:	9f af       	std	Y+63, r25	; 0x3f
    2baa:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    2bac:	24 96       	adiw	r28, 0x04	; 4
    2bae:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bb0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bb2:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bb4:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bb6:	24 97       	sbiw	r28, 0x04	; 4
    2bb8:	84 0d       	add	r24, r4
    2bba:	95 1d       	adc	r25, r5
    2bbc:	a6 1d       	adc	r26, r6
    2bbe:	b7 1d       	adc	r27, r7
    2bc0:	24 96       	adiw	r28, 0x04	; 4
    2bc2:	8c af       	std	Y+60, r24	; 0x3c
    2bc4:	9d af       	std	Y+61, r25	; 0x3d
    2bc6:	ae af       	std	Y+62, r26	; 0x3e
    2bc8:	bf af       	std	Y+63, r27	; 0x3f
    2bca:	24 97       	sbiw	r28, 0x04	; 4
    2bcc:	80 93 8d 05 	sts	0x058D, r24
    2bd0:	90 93 8e 05 	sts	0x058E, r25
    2bd4:	a0 93 8f 05 	sts	0x058F, r26
    2bd8:	b0 93 90 05 	sts	0x0590, r27

	centsConst = 0x27*osc2CentsShift;
    2bdc:	20 91 66 05 	lds	r18, 0x0566
    2be0:	97 e2       	ldi	r25, 0x27	; 39
    2be2:	29 02       	muls	r18, r25
    2be4:	90 01       	movw	r18, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	44 27       	eor	r20, r20
    2bea:	37 fd       	sbrc	r19, 7
    2bec:	40 95       	com	r20
    2bee:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2bf0:	c7 01       	movw	r24, r14
    2bf2:	b6 01       	movw	r22, r12
    2bf4:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2bf8:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    2bfc:	29 96       	adiw	r28, 0x09	; 9
    2bfe:	2f af       	std	Y+63, r18	; 0x3f
    2c00:	29 97       	sbiw	r28, 0x09	; 9
    2c02:	2a 96       	adiw	r28, 0x0a	; 10
    2c04:	3f af       	std	Y+63, r19	; 0x3f
    2c06:	2a 97       	sbiw	r28, 0x0a	; 10
    2c08:	2b 96       	adiw	r28, 0x0b	; 11
    2c0a:	4f af       	std	Y+63, r20	; 0x3f
    2c0c:	2b 97       	sbiw	r28, 0x0b	; 11
    2c0e:	2c 96       	adiw	r28, 0x0c	; 12
    2c10:	5f af       	std	Y+63, r21	; 0x3f
    2c12:	2c 97       	sbiw	r28, 0x0c	; 12
    2c14:	2d 96       	adiw	r28, 0x0d	; 13
    2c16:	6f af       	std	Y+63, r22	; 0x3f
    2c18:	2d 97       	sbiw	r28, 0x0d	; 13
    2c1a:	2e 96       	adiw	r28, 0x0e	; 14
    2c1c:	7f af       	std	Y+63, r23	; 0x3f
    2c1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2c20:	2f 96       	adiw	r28, 0x0f	; 15
    2c22:	8f af       	std	Y+63, r24	; 0x3f
    2c24:	2f 97       	sbiw	r28, 0x0f	; 15
    2c26:	60 96       	adiw	r28, 0x10	; 16
    2c28:	9f af       	std	Y+63, r25	; 0x3f
    2c2a:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    2c2c:	2c 96       	adiw	r28, 0x0c	; 12
    2c2e:	4c ac       	ldd	r4, Y+60	; 0x3c
    2c30:	5d ac       	ldd	r5, Y+61	; 0x3d
    2c32:	6e ac       	ldd	r6, Y+62	; 0x3e
    2c34:	7f ac       	ldd	r7, Y+63	; 0x3f
    2c36:	2c 97       	sbiw	r28, 0x0c	; 12
    2c38:	4c 0c       	add	r4, r12
    2c3a:	5d 1c       	adc	r5, r13
    2c3c:	6e 1c       	adc	r6, r14
    2c3e:	7f 1c       	adc	r7, r15
    2c40:	40 92 6f 05 	sts	0x056F, r4
    2c44:	50 92 70 05 	sts	0x0570, r5
    2c48:	60 92 71 05 	sts	0x0571, r6
    2c4c:	70 92 72 05 	sts	0x0572, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2c50:	c0 90 0c 05 	lds	r12, 0x050C
    2c54:	d0 90 0d 05 	lds	r13, 0x050D
    2c58:	e0 90 0e 05 	lds	r14, 0x050E
    2c5c:	f0 90 0f 05 	lds	r15, 0x050F
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2c60:	24 96       	adiw	r28, 0x04	; 4
    2c62:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c64:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c66:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c68:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c6a:	24 97       	sbiw	r28, 0x04	; 4
    2c6c:	a7 01       	movw	r20, r14
    2c6e:	96 01       	movw	r18, r12
    2c70:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2c74:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    2c78:	c9 01       	movw	r24, r18
    2c7a:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2c7c:	80 93 7d 05 	sts	0x057D, r24
    2c80:	90 93 7e 05 	sts	0x057E, r25
    2c84:	a0 93 7f 05 	sts	0x057F, r26
    2c88:	b0 93 80 05 	sts	0x0580, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2c8c:	c3 01       	movw	r24, r6
    2c8e:	b2 01       	movw	r22, r4
    2c90:	a7 01       	movw	r20, r14
    2c92:	96 01       	movw	r18, r12
    2c94:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2c98:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    2c9c:	c9 01       	movw	r24, r18
    2c9e:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    2ca0:	80 93 67 05 	sts	0x0567, r24
    2ca4:	90 93 68 05 	sts	0x0568, r25
    2ca8:	a0 93 69 05 	sts	0x0569, r26
    2cac:	b0 93 6a 05 	sts	0x056A, r27
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
					osc2MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC2][1] != 0)
    2cbc:	80 91 15 05 	lds	r24, 0x0515
    2cc0:	88 23       	and	r24, r24
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <main+0x10ec>
    2cc4:	42 c0       	rjmp	.+132    	; 0x2d4a <main+0x1170>
			{
				if(osc2CentsShift != (adcValue[1] >> 2) - 128)
    2cc6:	60 91 66 05 	lds	r22, 0x0566
    2cca:	86 2f       	mov	r24, r22
    2ccc:	99 27       	eor	r25, r25
    2cce:	87 fd       	sbrc	r24, 7
    2cd0:	90 95       	com	r25
    2cd2:	20 91 9b 05 	lds	r18, 0x059B
    2cd6:	30 91 9c 05 	lds	r19, 0x059C
    2cda:	a9 01       	movw	r20, r18
    2cdc:	55 95       	asr	r21
    2cde:	47 95       	ror	r20
    2ce0:	55 95       	asr	r21
    2ce2:	47 95       	ror	r20
    2ce4:	40 58       	subi	r20, 0x80	; 128
    2ce6:	51 09       	sbc	r21, r1
    2ce8:	84 17       	cp	r24, r20
    2cea:	95 07       	cpc	r25, r21
    2cec:	71 f1       	breq	.+92     	; 0x2d4a <main+0x1170>
				{
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
    2cee:	30 93 33 05 	sts	0x0533, r19
    2cf2:	20 93 32 05 	sts	0x0532, r18

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2cf6:	88 e0       	ldi	r24, 0x08	; 8
    2cf8:	ef e1       	ldi	r30, 0x1F	; 31
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	d5 01       	movw	r26, r10
    2cfe:	01 90       	ld	r0, Z+
    2d00:	0d 92       	st	X+, r0
    2d02:	8a 95       	dec	r24
    2d04:	e1 f7       	brne	.-8      	; 0x2cfe <main+0x1124>
	sprintf(buf + 7, "%d", osc2CentsShift);
    2d06:	9f 93       	push	r25
    2d08:	6f 93       	push	r22
    2d0a:	a8 e0       	ldi	r26, 0x08	; 8
    2d0c:	b1 e0       	ldi	r27, 0x01	; 1
    2d0e:	bf 93       	push	r27
    2d10:	af 93       	push	r26
    2d12:	4b ad       	ldd	r20, Y+59	; 0x3b
    2d14:	4f 93       	push	r20
    2d16:	5a ad       	ldd	r21, Y+58	; 0x3a
    2d18:	5f 93       	push	r21
    2d1a:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    2d1e:	d5 01       	movw	r26, r10
    2d20:	0d 90       	ld	r0, X+
    2d22:	00 20       	and	r0, r0
    2d24:	e9 f7       	brne	.-6      	; 0x2d20 <main+0x1146>
    2d26:	11 97       	sbiw	r26, 0x01	; 1
    2d28:	88 e0       	ldi	r24, 0x08	; 8
    2d2a:	e2 e4       	ldi	r30, 0x42	; 66
    2d2c:	f1 e0       	ldi	r31, 0x01	; 1
    2d2e:	01 90       	ld	r0, Z+
    2d30:	0d 92       	st	X+, r0
    2d32:	8a 95       	dec	r24
    2d34:	e1 f7       	brne	.-8      	; 0x2d2e <main+0x1154>
	writeLine(4, buf);
    2d36:	b5 01       	movw	r22, r10
    2d38:	84 e0       	ldi	r24, 0x04	; 4
    2d3a:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
					osc2MenuCentsUpdate();
				}
			}
			if(menuChange[MENU_OSC2][0] != 0)
    2d4a:	80 91 14 05 	lds	r24, 0x0514
    2d4e:	88 23       	and	r24, r24
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <main+0x117c>
    2d52:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
			{
				if(adcValue[0] < 205)
    2d56:	80 91 99 05 	lds	r24, 0x0599
    2d5a:	90 91 9a 05 	lds	r25, 0x059A
    2d5e:	8d 3c       	cpi	r24, 0xCD	; 205
    2d60:	91 05       	cpc	r25, r1
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <main+0x118c>
    2d64:	a3 c5       	rjmp	.+2886   	; 0x38ac <main+0x1cd2>
				{
					if(osc2OctaveShift != -2)
    2d66:	80 91 64 05 	lds	r24, 0x0564
    2d6a:	8e 3f       	cpi	r24, 0xFE	; 254
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <main+0x1198>
    2d6e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc2OctaveShift = -2;
    2d72:	2e ef       	ldi	r18, 0xFE	; 254
    2d74:	20 93 64 05 	sts	0x0564, r18
						menuKnobPos[MENU_OSC2][0] = 102;
    2d78:	86 e6       	ldi	r24, 0x66	; 102
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	90 93 31 05 	sts	0x0531, r25
    2d80:	80 93 30 05 	sts	0x0530, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    2d84:	86 e0       	ldi	r24, 0x06	; 6
    2d86:	e7 e5       	ldi	r30, 0x57	; 87
    2d88:	f1 e0       	ldi	r31, 0x01	; 1
    2d8a:	d5 01       	movw	r26, r10
    2d8c:	01 90       	ld	r0, Z+
    2d8e:	0d 92       	st	X+, r0
    2d90:	8a 95       	dec	r24
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <main+0x11b2>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	8f 93       	push	r24
    2d98:	2f 93       	push	r18
    2d9a:	a8 e0       	ldi	r26, 0x08	; 8
    2d9c:	b1 e0       	ldi	r27, 0x01	; 1
    2d9e:	bf 93       	push	r27
    2da0:	af 93       	push	r26
    2da2:	4f a9       	ldd	r20, Y+55	; 0x37
    2da4:	4f 93       	push	r20
    2da6:	5e a9       	ldd	r21, Y+54	; 0x36
    2da8:	5f 93       	push	r21
    2daa:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "        ");
    2dae:	d5 01       	movw	r26, r10
    2db0:	0d 90       	ld	r0, X+
    2db2:	00 20       	and	r0, r0
    2db4:	e9 f7       	brne	.-6      	; 0x2db0 <main+0x11d6>
    2db6:	11 97       	sbiw	r26, 0x01	; 1
    2db8:	89 e0       	ldi	r24, 0x09	; 9
    2dba:	e1 e4       	ldi	r30, 0x41	; 65
    2dbc:	f1 e0       	ldi	r31, 0x01	; 1
    2dbe:	01 90       	ld	r0, Z+
    2dc0:	0d 92       	st	X+, r0
    2dc2:	8a 95       	dec	r24
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <main+0x11e4>
	writeLine(5, buf);
    2dc6:	b5 01       	movw	r22, r10
    2dc8:	85 e0       	ldi	r24, 0x05	; 5
    2dca:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
		{
			if(btnPressed[MENU_LFO])
			btnPressed[MENU_LFO] = false;
			
			if(!btnCanPress[MENU_LFO])
			btnLastPressed[MENU_LFO]++;
    2dde:	90 91 f3 04 	lds	r25, 0x04F3
    2de2:	9f 5f       	subi	r25, 0xFF	; 255
    2de4:	90 93 f3 04 	sts	0x04F3, r25
    2de8:	a3 cd       	rjmp	.-1210   	; 0x2930 <main+0xd56>
		{
			if(btnPressed[MENU_OSC1])
			btnPressed[MENU_OSC1] = false;
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
    2dea:	80 91 f1 04 	lds	r24, 0x04F1
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	80 93 f1 04 	sts	0x04F1, r24
    2df4:	76 cd       	rjmp	.-1300   	; 0x28e2 <main+0xd08>
		{
			if(btnPressed[MENU_MIX])
			btnPressed[MENU_MIX] = false;
			
			if(!btnCanPress[MENU_MIX])
			btnLastPressed[MENU_MIX]++;
    2df6:	90 91 f4 04 	lds	r25, 0x04F4
    2dfa:	9f 5f       	subi	r25, 0xFF	; 255
    2dfc:	90 93 f4 04 	sts	0x04F4, r25
    2e00:	aa cd       	rjmp	.-1196   	; 0x2956 <main+0xd7c>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    2e02:	80 91 95 05 	lds	r24, 0x0595
    2e06:	88 23       	and	r24, r24
    2e08:	d9 f0       	breq	.+54     	; 0x2e40 <main+0x1266>
    2e0a:	80 91 38 05 	lds	r24, 0x0538
    2e0e:	90 91 39 05 	lds	r25, 0x0539
    2e12:	20 91 99 05 	lds	r18, 0x0599
    2e16:	30 91 9a 05 	lds	r19, 0x059A
    2e1a:	ac 01       	movw	r20, r24
    2e1c:	47 5f       	subi	r20, 0xF7	; 247
    2e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e20:	42 17       	cp	r20, r18
    2e22:	53 07       	cpc	r21, r19
    2e24:	6c f0       	brlt	.+26     	; 0x2e40 <main+0x1266>
    2e26:	8b 30       	cpi	r24, 0x0B	; 11
    2e28:	91 05       	cpc	r25, r1
    2e2a:	0c f4       	brge	.+2      	; 0x2e2e <main+0x1254>
    2e2c:	82 c7       	rjmp	.+3844   	; 0x3d32 <main+0x2158>
    2e2e:	0a 97       	sbiw	r24, 0x0a	; 10
    2e30:	82 17       	cp	r24, r18
    2e32:	93 07       	cpc	r25, r19
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <main+0x1266>
			{
				menuChange[MENU_LFO][0] = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	80 93 18 05 	sts	0x0518, r24
				updateADC[0] = false;
    2e3c:	10 92 95 05 	sts	0x0595, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    2e40:	80 91 96 05 	lds	r24, 0x0596
    2e44:	88 23       	and	r24, r24
    2e46:	d9 f0       	breq	.+54     	; 0x2e7e <main+0x12a4>
    2e48:	80 91 3a 05 	lds	r24, 0x053A
    2e4c:	90 91 3b 05 	lds	r25, 0x053B
    2e50:	20 91 9b 05 	lds	r18, 0x059B
    2e54:	30 91 9c 05 	lds	r19, 0x059C
    2e58:	ac 01       	movw	r20, r24
    2e5a:	47 5f       	subi	r20, 0xF7	; 247
    2e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5e:	42 17       	cp	r20, r18
    2e60:	53 07       	cpc	r21, r19
    2e62:	6c f0       	brlt	.+26     	; 0x2e7e <main+0x12a4>
    2e64:	8b 30       	cpi	r24, 0x0B	; 11
    2e66:	91 05       	cpc	r25, r1
    2e68:	0c f4       	brge	.+2      	; 0x2e6c <main+0x1292>
    2e6a:	66 c7       	rjmp	.+3788   	; 0x3d38 <main+0x215e>
    2e6c:	0a 97       	sbiw	r24, 0x0a	; 10
    2e6e:	82 17       	cp	r24, r18
    2e70:	93 07       	cpc	r25, r19
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <main+0x12a4>
			{
				menuChange[MENU_LFO][1] = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	80 93 19 05 	sts	0x0519, r24
				updateADC[1] = false;
    2e7a:	10 92 96 05 	sts	0x0596, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    2e7e:	80 91 97 05 	lds	r24, 0x0597
    2e82:	88 23       	and	r24, r24
    2e84:	d9 f0       	breq	.+54     	; 0x2ebc <main+0x12e2>
    2e86:	80 91 3c 05 	lds	r24, 0x053C
    2e8a:	90 91 3d 05 	lds	r25, 0x053D
    2e8e:	20 91 9d 05 	lds	r18, 0x059D
    2e92:	30 91 9e 05 	lds	r19, 0x059E
    2e96:	ac 01       	movw	r20, r24
    2e98:	47 5f       	subi	r20, 0xF7	; 247
    2e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9c:	42 17       	cp	r20, r18
    2e9e:	53 07       	cpc	r21, r19
    2ea0:	6c f0       	brlt	.+26     	; 0x2ebc <main+0x12e2>
    2ea2:	8b 30       	cpi	r24, 0x0B	; 11
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	0c f4       	brge	.+2      	; 0x2eaa <main+0x12d0>
    2ea8:	35 c7       	rjmp	.+3690   	; 0x3d14 <main+0x213a>
    2eaa:	0a 97       	sbiw	r24, 0x0a	; 10
    2eac:	82 17       	cp	r24, r18
    2eae:	93 07       	cpc	r25, r19
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <main+0x12e2>
			{
				menuChange[MENU_LFO][2] = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	80 93 1a 05 	sts	0x051A, r24
				updateADC[2] = false;
    2eb8:	10 92 97 05 	sts	0x0597, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    2ebc:	80 91 98 05 	lds	r24, 0x0598
    2ec0:	88 23       	and	r24, r24
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <main+0x12ec>
    2ec4:	8f c4       	rjmp	.+2334   	; 0x37e4 <main+0x1c0a>
    2ec6:	20 91 3e 05 	lds	r18, 0x053E
    2eca:	30 91 3f 05 	lds	r19, 0x053F
    2ece:	80 91 9f 05 	lds	r24, 0x059F
    2ed2:	90 91 a0 05 	lds	r25, 0x05A0
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	47 5f       	subi	r20, 0xF7	; 247
    2eda:	5f 4f       	sbci	r21, 0xFF	; 255
    2edc:	48 17       	cp	r20, r24
    2ede:	59 07       	cpc	r21, r25
    2ee0:	0c f4       	brge	.+2      	; 0x2ee4 <main+0x130a>
    2ee2:	80 c4       	rjmp	.+2304   	; 0x37e4 <main+0x1c0a>
    2ee4:	2b 30       	cpi	r18, 0x0B	; 11
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	0c f4       	brge	.+2      	; 0x2eec <main+0x1312>
    2eea:	86 c7       	rjmp	.+3852   	; 0x3df8 <main+0x221e>
    2eec:	2a 50       	subi	r18, 0x0A	; 10
    2eee:	31 09       	sbc	r19, r1
    2ef0:	28 17       	cp	r18, r24
    2ef2:	39 07       	cpc	r19, r25
    2ef4:	0c f0       	brlt	.+2      	; 0x2ef8 <main+0x131e>
    2ef6:	76 c4       	rjmp	.+2284   	; 0x37e4 <main+0x1c0a>
			{
				menuChange[MENU_LFO][3] = 1;
    2ef8:	21 e0       	ldi	r18, 0x01	; 1
    2efa:	20 93 1b 05 	sts	0x051B, r18
				updateADC[3] = false;
    2efe:	10 92 98 05 	sts	0x0598, r1
			}
						
			if(menuChange[MENU_LFO][3] != 0)
			{
				if(adcValue[3] < 171)
    2f02:	8b 3a       	cpi	r24, 0xAB	; 171
    2f04:	91 05       	cpc	r25, r1
    2f06:	0c f0       	brlt	.+2      	; 0x2f0a <main+0x1330>
    2f08:	7a c4       	rjmp	.+2292   	; 0x37fe <main+0x1c24>
				{
					if(lfoWaveForm != WAVE_SINE)
    2f0a:	80 91 05 01 	lds	r24, 0x0105
    2f0e:	81 11       	cpse	r24, r1
    2f10:	b2 c7       	rjmp	.+3940   	; 0x3e76 <main+0x229c>
						menuKnobPos[MENU_LFO][3] = 852 + 85;
						lfoMenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_LFO][2] != 0)
    2f12:	80 91 1a 05 	lds	r24, 0x051A
    2f16:	88 23       	and	r24, r24
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <main+0x1342>
    2f1a:	40 c0       	rjmp	.+128    	; 0x2f9c <main+0x13c2>
			{
				if((adcValue[2] >> 2) != lfoPrintFreq)
    2f1c:	20 91 9d 05 	lds	r18, 0x059D
    2f20:	30 91 9e 05 	lds	r19, 0x059E
    2f24:	c9 01       	movw	r24, r18
    2f26:	95 95       	asr	r25
    2f28:	87 95       	ror	r24
    2f2a:	95 95       	asr	r25
    2f2c:	87 95       	ror	r24
    2f2e:	40 91 5a 05 	lds	r20, 0x055A
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	84 17       	cp	r24, r20
    2f36:	95 07       	cpc	r25, r21
    2f38:	89 f1       	breq	.+98     	; 0x2f9c <main+0x13c2>
				{
					lfoPrintFreq = adcValue[2] >> 2;
    2f3a:	80 93 5a 05 	sts	0x055A, r24
					menuKnobPos[MENU_LFO][2] = adcValue[2];
    2f3e:	30 93 3d 05 	sts	0x053D, r19
    2f42:	20 93 3c 05 	sts	0x053C, r18

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    2f46:	27 e0       	ldi	r18, 0x07	; 7
    2f48:	ea e6       	ldi	r30, 0x6A	; 106
    2f4a:	f1 e0       	ldi	r31, 0x01	; 1
    2f4c:	d5 01       	movw	r26, r10
    2f4e:	01 90       	ld	r0, Z+
    2f50:	0d 92       	st	X+, r0
    2f52:	2a 95       	dec	r18
    2f54:	e1 f7       	brne	.-8      	; 0x2f4e <main+0x1374>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    2f56:	99 27       	eor	r25, r25
    2f58:	9f 93       	push	r25
    2f5a:	8f 93       	push	r24
    2f5c:	a8 e0       	ldi	r26, 0x08	; 8
    2f5e:	b1 e0       	ldi	r27, 0x01	; 1
    2f60:	bf 93       	push	r27
    2f62:	af 93       	push	r26
    2f64:	49 ad       	ldd	r20, Y+57	; 0x39
    2f66:	4f 93       	push	r20
    2f68:	58 ad       	ldd	r21, Y+56	; 0x38
    2f6a:	5f 93       	push	r21
    2f6c:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    2f70:	d5 01       	movw	r26, r10
    2f72:	0d 90       	ld	r0, X+
    2f74:	00 20       	and	r0, r0
    2f76:	e9 f7       	brne	.-6      	; 0x2f72 <main+0x1398>
    2f78:	11 97       	sbiw	r26, 0x01	; 1
    2f7a:	e5 e4       	ldi	r30, 0x45	; 69
    2f7c:	f1 e0       	ldi	r31, 0x01	; 1
    2f7e:	82 2d       	mov	r24, r2
    2f80:	01 90       	ld	r0, Z+
    2f82:	0d 92       	st	X+, r0
    2f84:	8a 95       	dec	r24
    2f86:	e1 f7       	brne	.-8      	; 0x2f80 <main+0x13a6>
	writeLine(3, buf);
    2f88:	b5 01       	movw	r22, r10
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
    2f8c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
					lfoPrintFreq = adcValue[2] >> 2;
					menuKnobPos[MENU_LFO][2] = adcValue[2];
					lfoMenuFrequencyUpdate();
				}
			}
			if(menuChange[MENU_LFO][1] != 0)
    2f9c:	80 91 19 05 	lds	r24, 0x0519
    2fa0:	88 23       	and	r24, r24
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <main+0x13cc>
    2fa4:	40 c0       	rjmp	.+128    	; 0x3026 <main+0x144c>
			{
				if((adcValue[1] >> 2) != lfoDepth)
    2fa6:	20 91 9b 05 	lds	r18, 0x059B
    2faa:	30 91 9c 05 	lds	r19, 0x059C
    2fae:	c9 01       	movw	r24, r18
    2fb0:	95 95       	asr	r25
    2fb2:	87 95       	ror	r24
    2fb4:	95 95       	asr	r25
    2fb6:	87 95       	ror	r24
    2fb8:	40 91 59 05 	lds	r20, 0x0559
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	84 17       	cp	r24, r20
    2fc0:	95 07       	cpc	r25, r21
    2fc2:	89 f1       	breq	.+98     	; 0x3026 <main+0x144c>
				{
					lfoDepth = adcValue[1] >> 2;
    2fc4:	80 93 59 05 	sts	0x0559, r24
					menuKnobPos[MENU_LFO][1] = adcValue[1];
    2fc8:	30 93 3b 05 	sts	0x053B, r19
    2fcc:	20 93 3a 05 	sts	0x053A, r18

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    2fd0:	27 e0       	ldi	r18, 0x07	; 7
    2fd2:	e1 e7       	ldi	r30, 0x71	; 113
    2fd4:	f1 e0       	ldi	r31, 0x01	; 1
    2fd6:	d5 01       	movw	r26, r10
    2fd8:	01 90       	ld	r0, Z+
    2fda:	0d 92       	st	X+, r0
    2fdc:	2a 95       	dec	r18
    2fde:	e1 f7       	brne	.-8      	; 0x2fd8 <main+0x13fe>
	sprintf(buf + 6, "%d", lfoDepth);
    2fe0:	99 27       	eor	r25, r25
    2fe2:	9f 93       	push	r25
    2fe4:	8f 93       	push	r24
    2fe6:	a8 e0       	ldi	r26, 0x08	; 8
    2fe8:	b1 e0       	ldi	r27, 0x01	; 1
    2fea:	bf 93       	push	r27
    2fec:	af 93       	push	r26
    2fee:	49 ad       	ldd	r20, Y+57	; 0x39
    2ff0:	4f 93       	push	r20
    2ff2:	58 ad       	ldd	r21, Y+56	; 0x38
    2ff4:	5f 93       	push	r21
    2ff6:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "    ");
    2ffa:	d5 01       	movw	r26, r10
    2ffc:	0d 90       	ld	r0, X+
    2ffe:	00 20       	and	r0, r0
    3000:	e9 f7       	brne	.-6      	; 0x2ffc <main+0x1422>
    3002:	11 97       	sbiw	r26, 0x01	; 1
    3004:	e5 e4       	ldi	r30, 0x45	; 69
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	82 2d       	mov	r24, r2
    300a:	01 90       	ld	r0, Z+
    300c:	0d 92       	st	X+, r0
    300e:	8a 95       	dec	r24
    3010:	e1 f7       	brne	.-8      	; 0x300a <main+0x1430>
	writeLine(4, buf);
    3012:	b5 01       	movw	r22, r10
    3014:	84 e0       	ldi	r24, 0x04	; 4
    3016:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
					lfoDepth = adcValue[1] >> 2;
					menuKnobPos[MENU_LFO][1] = adcValue[1];
					lfoMenuDepthUpdate();
				}
			}
			if(menuChange[MENU_LFO][0] != 0)
    3026:	80 91 18 05 	lds	r24, 0x0518
    302a:	88 23       	and	r24, r24
    302c:	11 f4       	brne	.+4      	; 0x3032 <main+0x1458>
    302e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
			{
				if(adcValue[0] < 93)
    3032:	80 91 99 05 	lds	r24, 0x0599
    3036:	90 91 9a 05 	lds	r25, 0x059A
    303a:	8d 35       	cpi	r24, 0x5D	; 93
    303c:	91 05       	cpc	r25, r1
    303e:	0c f0       	brlt	.+2      	; 0x3042 <main+0x1468>
    3040:	53 c4       	rjmp	.+2214   	; 0x38e8 <main+0x1d0e>
				{
					if(lfoRoute != ROUTE_OSC1)
    3042:	80 91 5b 05 	lds	r24, 0x055B
    3046:	88 23       	and	r24, r24
    3048:	11 f4       	brne	.+4      	; 0x304e <main+0x1474>
    304a:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_OSC1;
    304e:	10 92 5b 05 	sts	0x055B, r1

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3052:	87 e0       	ldi	r24, 0x07	; 7
    3054:	e6 e3       	ldi	r30, 0x36	; 54
    3056:	f1 e0       	ldi	r31, 0x01	; 1
    3058:	d5 01       	movw	r26, r10
    305a:	01 90       	ld	r0, Z+
    305c:	0d 92       	st	X+, r0
    305e:	8a 95       	dec	r24
    3060:	e1 f7       	brne	.-8      	; 0x305a <main+0x1480>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3062:	e8 e6       	ldi	r30, 0x68	; 104
    3064:	f6 e0       	ldi	r31, 0x06	; 6
    3066:	65 91       	lpm	r22, Z+
    3068:	74 91       	lpm	r23, Z
    306a:	54 01       	movw	r10, r8
    306c:	81 2f       	mov	r24, r17
    306e:	93 2d       	mov	r25, r3
    3070:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "    ");
    3074:	d4 01       	movw	r26, r8
    3076:	0d 90       	ld	r0, X+
    3078:	00 20       	and	r0, r0
    307a:	e9 f7       	brne	.-6      	; 0x3076 <main+0x149c>
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	e5 e4       	ldi	r30, 0x45	; 69
    3080:	f1 e0       	ldi	r31, 0x01	; 1
    3082:	82 2d       	mov	r24, r2
    3084:	01 90       	ld	r0, Z+
    3086:	0d 92       	st	X+, r0
    3088:	8a 95       	dec	r24
    308a:	e1 f7       	brne	.-8      	; 0x3084 <main+0x14aa>
	writeLine(5, buf);
    308c:	61 2f       	mov	r22, r17
    308e:	73 2d       	mov	r23, r3
    3090:	85 e0       	ldi	r24, 0x05	; 5
    3092:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3096:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    309a:	80 91 95 05 	lds	r24, 0x0595
    309e:	88 23       	and	r24, r24
    30a0:	d9 f0       	breq	.+54     	; 0x30d8 <main+0x14fe>
    30a2:	80 91 28 05 	lds	r24, 0x0528
    30a6:	90 91 29 05 	lds	r25, 0x0529
    30aa:	20 91 99 05 	lds	r18, 0x0599
    30ae:	30 91 9a 05 	lds	r19, 0x059A
    30b2:	ac 01       	movw	r20, r24
    30b4:	47 5f       	subi	r20, 0xF7	; 247
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	42 17       	cp	r20, r18
    30ba:	53 07       	cpc	r21, r19
    30bc:	6c f0       	brlt	.+26     	; 0x30d8 <main+0x14fe>
    30be:	8b 30       	cpi	r24, 0x0B	; 11
    30c0:	91 05       	cpc	r25, r1
    30c2:	0c f4       	brge	.+2      	; 0x30c6 <main+0x14ec>
    30c4:	f5 c5       	rjmp	.+3050   	; 0x3cb0 <main+0x20d6>
    30c6:	0a 97       	sbiw	r24, 0x0a	; 10
    30c8:	82 17       	cp	r24, r18
    30ca:	93 07       	cpc	r25, r19
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <main+0x14fe>
			{
				menuChange[MENU_OSC1][0] = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	80 93 10 05 	sts	0x0510, r24
				updateADC[0] = false;
    30d4:	10 92 95 05 	sts	0x0595, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    30d8:	80 91 96 05 	lds	r24, 0x0596
    30dc:	88 23       	and	r24, r24
    30de:	d9 f0       	breq	.+54     	; 0x3116 <main+0x153c>
    30e0:	80 91 2a 05 	lds	r24, 0x052A
    30e4:	90 91 2b 05 	lds	r25, 0x052B
    30e8:	20 91 9b 05 	lds	r18, 0x059B
    30ec:	30 91 9c 05 	lds	r19, 0x059C
    30f0:	ac 01       	movw	r20, r24
    30f2:	47 5f       	subi	r20, 0xF7	; 247
    30f4:	5f 4f       	sbci	r21, 0xFF	; 255
    30f6:	42 17       	cp	r20, r18
    30f8:	53 07       	cpc	r21, r19
    30fa:	6c f0       	brlt	.+26     	; 0x3116 <main+0x153c>
    30fc:	8b 30       	cpi	r24, 0x0B	; 11
    30fe:	91 05       	cpc	r25, r1
    3100:	0c f4       	brge	.+2      	; 0x3104 <main+0x152a>
    3102:	e1 c5       	rjmp	.+3010   	; 0x3cc6 <main+0x20ec>
    3104:	0a 97       	sbiw	r24, 0x0a	; 10
    3106:	82 17       	cp	r24, r18
    3108:	93 07       	cpc	r25, r19
    310a:	2c f4       	brge	.+10     	; 0x3116 <main+0x153c>
			{
				menuChange[MENU_OSC1][1] = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	80 93 11 05 	sts	0x0511, r24
				updateADC[1] = false;
    3112:	10 92 96 05 	sts	0x0596, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    3116:	80 91 97 05 	lds	r24, 0x0597
    311a:	88 23       	and	r24, r24
    311c:	d9 f0       	breq	.+54     	; 0x3154 <main+0x157a>
    311e:	80 91 2c 05 	lds	r24, 0x052C
    3122:	90 91 2d 05 	lds	r25, 0x052D
    3126:	20 91 9d 05 	lds	r18, 0x059D
    312a:	30 91 9e 05 	lds	r19, 0x059E
    312e:	ac 01       	movw	r20, r24
    3130:	47 5f       	subi	r20, 0xF7	; 247
    3132:	5f 4f       	sbci	r21, 0xFF	; 255
    3134:	42 17       	cp	r20, r18
    3136:	53 07       	cpc	r21, r19
    3138:	6c f0       	brlt	.+26     	; 0x3154 <main+0x157a>
    313a:	8b 30       	cpi	r24, 0x0B	; 11
    313c:	91 05       	cpc	r25, r1
    313e:	0c f4       	brge	.+2      	; 0x3142 <main+0x1568>
    3140:	c5 c5       	rjmp	.+2954   	; 0x3ccc <main+0x20f2>
    3142:	0a 97       	sbiw	r24, 0x0a	; 10
    3144:	82 17       	cp	r24, r18
    3146:	93 07       	cpc	r25, r19
    3148:	2c f4       	brge	.+10     	; 0x3154 <main+0x157a>
			{
				menuChange[MENU_OSC1][2] = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	80 93 12 05 	sts	0x0512, r24
				updateADC[2] = false;
    3150:	10 92 97 05 	sts	0x0597, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    3154:	80 91 98 05 	lds	r24, 0x0598
    3158:	88 23       	and	r24, r24
    315a:	09 f4       	brne	.+2      	; 0x315e <main+0x1584>
    315c:	fa c2       	rjmp	.+1524   	; 0x3752 <main+0x1b78>
    315e:	20 91 2e 05 	lds	r18, 0x052E
    3162:	30 91 2f 05 	lds	r19, 0x052F
    3166:	80 91 9f 05 	lds	r24, 0x059F
    316a:	90 91 a0 05 	lds	r25, 0x05A0
    316e:	a9 01       	movw	r20, r18
    3170:	47 5f       	subi	r20, 0xF7	; 247
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	48 17       	cp	r20, r24
    3176:	59 07       	cpc	r21, r25
    3178:	0c f4       	brge	.+2      	; 0x317c <main+0x15a2>
    317a:	eb c2       	rjmp	.+1494   	; 0x3752 <main+0x1b78>
    317c:	2b 30       	cpi	r18, 0x0B	; 11
    317e:	31 05       	cpc	r19, r1
    3180:	0c f4       	brge	.+2      	; 0x3184 <main+0x15aa>
    3182:	c5 c5       	rjmp	.+2954   	; 0x3d0e <main+0x2134>
    3184:	2a 50       	subi	r18, 0x0A	; 10
    3186:	31 09       	sbc	r19, r1
    3188:	28 17       	cp	r18, r24
    318a:	39 07       	cpc	r19, r25
    318c:	0c f0       	brlt	.+2      	; 0x3190 <main+0x15b6>
    318e:	e1 c2       	rjmp	.+1474   	; 0x3752 <main+0x1b78>
			{
				menuChange[MENU_OSC1][3] = 1;
    3190:	21 e0       	ldi	r18, 0x01	; 1
    3192:	20 93 13 05 	sts	0x0513, r18
				updateADC[3] = false;
    3196:	10 92 98 05 	sts	0x0598, r1
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
			{
				if(adcValue[3] < 146)
    319a:	82 39       	cpi	r24, 0x92	; 146
    319c:	91 05       	cpc	r25, r1
    319e:	0c f0       	brlt	.+2      	; 0x31a2 <main+0x15c8>
    31a0:	e5 c2       	rjmp	.+1482   	; 0x376c <main+0x1b92>
				{
					if(osc1WaveForm != WAVE_SINE)
    31a2:	80 91 03 01 	lds	r24, 0x0103
    31a6:	81 11       	cpse	r24, r1
    31a8:	32 c6       	rjmp	.+3172   	; 0x3e0e <main+0x2234>
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
						osc1MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC1][2] != 0)
    31aa:	80 91 12 05 	lds	r24, 0x0512
    31ae:	88 23       	and	r24, r24
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <main+0x15da>
    31b2:	26 c1       	rjmp	.+588    	; 0x3400 <main+0x1826>
			{
				if(osc1SemisShift != (adcValue[2] >> 4) - 32)
    31b4:	80 91 9d 05 	lds	r24, 0x059D
    31b8:	90 91 9e 05 	lds	r25, 0x059E
    31bc:	9c 01       	movw	r18, r24
    31be:	35 95       	asr	r19
    31c0:	27 95       	ror	r18
    31c2:	35 95       	asr	r19
    31c4:	27 95       	ror	r18
    31c6:	35 95       	asr	r19
    31c8:	27 95       	ror	r18
    31ca:	35 95       	asr	r19
    31cc:	27 95       	ror	r18
    31ce:	60 91 7b 05 	lds	r22, 0x057B
    31d2:	77 27       	eor	r23, r23
    31d4:	67 fd       	sbrc	r22, 7
    31d6:	70 95       	com	r23
    31d8:	a9 01       	movw	r20, r18
    31da:	40 52       	subi	r20, 0x20	; 32
    31dc:	51 09       	sbc	r21, r1
    31de:	64 17       	cp	r22, r20
    31e0:	75 07       	cpc	r23, r21
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <main+0x160c>
    31e4:	0d c1       	rjmp	.+538    	; 0x3400 <main+0x1826>
				{
					osc1SemisShift = (adcValue[2] >> 4) - 32;
    31e6:	20 52       	subi	r18, 0x20	; 32
    31e8:	20 93 7b 05 	sts	0x057B, r18
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
    31ec:	90 93 2d 05 	sts	0x052D, r25
    31f0:	80 93 2c 05 	sts	0x052C, r24

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    31f4:	88 e0       	ldi	r24, 0x08	; 8
    31f6:	e7 e2       	ldi	r30, 0x27	; 39
    31f8:	f1 e0       	ldi	r31, 0x01	; 1
    31fa:	d5 01       	movw	r26, r10
    31fc:	01 90       	ld	r0, Z+
    31fe:	0d 92       	st	X+, r0
    3200:	8a 95       	dec	r24
    3202:	e1 f7       	brne	.-8      	; 0x31fc <main+0x1622>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3204:	82 2f       	mov	r24, r18
    3206:	99 27       	eor	r25, r25
    3208:	87 fd       	sbrc	r24, 7
    320a:	90 95       	com	r25
    320c:	9f 93       	push	r25
    320e:	2f 93       	push	r18
    3210:	a8 e0       	ldi	r26, 0x08	; 8
    3212:	b1 e0       	ldi	r27, 0x01	; 1
    3214:	bf 93       	push	r27
    3216:	af 93       	push	r26
    3218:	4b ad       	ldd	r20, Y+59	; 0x3b
    321a:	4f 93       	push	r20
    321c:	5a ad       	ldd	r21, Y+58	; 0x3a
    321e:	5f 93       	push	r21
    3220:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    3224:	d5 01       	movw	r26, r10
    3226:	0d 90       	ld	r0, X+
    3228:	00 20       	and	r0, r0
    322a:	e9 f7       	brne	.-6      	; 0x3226 <main+0x164c>
    322c:	11 97       	sbiw	r26, 0x01	; 1
    322e:	88 e0       	ldi	r24, 0x08	; 8
    3230:	e2 e4       	ldi	r30, 0x42	; 66
    3232:	f1 e0       	ldi	r31, 0x01	; 1
    3234:	01 90       	ld	r0, Z+
    3236:	0d 92       	st	X+, r0
    3238:	8a 95       	dec	r24
    323a:	e1 f7       	brne	.-8      	; 0x3234 <main+0x165a>
	writeLine(3, buf);
    323c:	b5 01       	movw	r22, r10
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    3244:	80 91 04 01 	lds	r24, 0x0104
    3248:	e0 91 7b 05 	lds	r30, 0x057B
    324c:	ff 27       	eor	r31, r31
    324e:	e7 fd       	sbrc	r30, 7
    3250:	f0 95       	com	r31
    3252:	e8 0f       	add	r30, r24
    3254:	f1 1d       	adc	r31, r1
    3256:	ee 0f       	add	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	ee 0f       	add	r30, r30
    325c:	ff 1f       	adc	r31, r31
    325e:	ee 55       	subi	r30, 0x5E	; 94
    3260:	fe 4f       	sbci	r31, 0xFE	; 254
    3262:	40 80       	ld	r4, Z
    3264:	51 80       	ldd	r5, Z+1	; 0x01
    3266:	62 80       	ldd	r6, Z+2	; 0x02
    3268:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    326a:	90 91 04 01 	lds	r25, 0x0104
    326e:	80 91 64 05 	lds	r24, 0x0564
    3272:	e0 91 65 05 	lds	r30, 0x0565
    3276:	ff 27       	eor	r31, r31
    3278:	e7 fd       	sbrc	r30, 7
    327a:	f0 95       	com	r31
    327c:	e9 0f       	add	r30, r25
    327e:	f1 1d       	adc	r31, r1
    3280:	9c e0       	ldi	r25, 0x0C	; 12
    3282:	89 02       	muls	r24, r25
    3284:	e0 0d       	add	r30, r0
    3286:	f1 1d       	adc	r31, r1
    3288:	11 24       	eor	r1, r1
    328a:	ee 0f       	add	r30, r30
    328c:	ff 1f       	adc	r31, r31
    328e:	ee 0f       	add	r30, r30
    3290:	ff 1f       	adc	r31, r31
    3292:	ee 55       	subi	r30, 0x5E	; 94
    3294:	fe 4f       	sbci	r31, 0xFE	; 254
    3296:	c0 80       	ld	r12, Z
    3298:	d1 80       	ldd	r13, Z+1	; 0x01
    329a:	e2 80       	ldd	r14, Z+2	; 0x02
    329c:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    329e:	60 91 7c 05 	lds	r22, 0x057C
    32a2:	a7 e2       	ldi	r26, 0x27	; 39
    32a4:	6a 02       	muls	r22, r26
    32a6:	b0 01       	movw	r22, r0
    32a8:	11 24       	eor	r1, r1
    32aa:	88 27       	eor	r24, r24
    32ac:	77 fd       	sbrc	r23, 7
    32ae:	80 95       	com	r24
    32b0:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    32b2:	a3 01       	movw	r20, r6
    32b4:	92 01       	movw	r18, r4
    32b6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    32ba:	00 e1       	ldi	r16, 0x10	; 16
    32bc:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    32c0:	21 96       	adiw	r28, 0x01	; 1
    32c2:	2f af       	std	Y+63, r18	; 0x3f
    32c4:	21 97       	sbiw	r28, 0x01	; 1
    32c6:	22 96       	adiw	r28, 0x02	; 2
    32c8:	3f af       	std	Y+63, r19	; 0x3f
    32ca:	22 97       	sbiw	r28, 0x02	; 2
    32cc:	23 96       	adiw	r28, 0x03	; 3
    32ce:	4f af       	std	Y+63, r20	; 0x3f
    32d0:	23 97       	sbiw	r28, 0x03	; 3
    32d2:	24 96       	adiw	r28, 0x04	; 4
    32d4:	5f af       	std	Y+63, r21	; 0x3f
    32d6:	24 97       	sbiw	r28, 0x04	; 4
    32d8:	25 96       	adiw	r28, 0x05	; 5
    32da:	6f af       	std	Y+63, r22	; 0x3f
    32dc:	25 97       	sbiw	r28, 0x05	; 5
    32de:	26 96       	adiw	r28, 0x06	; 6
    32e0:	7f af       	std	Y+63, r23	; 0x3f
    32e2:	26 97       	sbiw	r28, 0x06	; 6
    32e4:	27 96       	adiw	r28, 0x07	; 7
    32e6:	8f af       	std	Y+63, r24	; 0x3f
    32e8:	27 97       	sbiw	r28, 0x07	; 7
    32ea:	28 96       	adiw	r28, 0x08	; 8
    32ec:	9f af       	std	Y+63, r25	; 0x3f
    32ee:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    32f0:	24 96       	adiw	r28, 0x04	; 4
    32f2:	8c ad       	ldd	r24, Y+60	; 0x3c
    32f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    32f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    32f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    32fa:	24 97       	sbiw	r28, 0x04	; 4
    32fc:	84 0d       	add	r24, r4
    32fe:	95 1d       	adc	r25, r5
    3300:	a6 1d       	adc	r26, r6
    3302:	b7 1d       	adc	r27, r7
    3304:	24 96       	adiw	r28, 0x04	; 4
    3306:	8c af       	std	Y+60, r24	; 0x3c
    3308:	9d af       	std	Y+61, r25	; 0x3d
    330a:	ae af       	std	Y+62, r26	; 0x3e
    330c:	bf af       	std	Y+63, r27	; 0x3f
    330e:	24 97       	sbiw	r28, 0x04	; 4
    3310:	80 93 8d 05 	sts	0x058D, r24
    3314:	90 93 8e 05 	sts	0x058E, r25
    3318:	a0 93 8f 05 	sts	0x058F, r26
    331c:	b0 93 90 05 	sts	0x0590, r27

	centsConst = 0x27*osc2CentsShift;
    3320:	20 91 66 05 	lds	r18, 0x0566
    3324:	97 e2       	ldi	r25, 0x27	; 39
    3326:	29 02       	muls	r18, r25
    3328:	90 01       	movw	r18, r0
    332a:	11 24       	eor	r1, r1
    332c:	44 27       	eor	r20, r20
    332e:	37 fd       	sbrc	r19, 7
    3330:	40 95       	com	r20
    3332:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3334:	c7 01       	movw	r24, r14
    3336:	b6 01       	movw	r22, r12
    3338:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    333c:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    3340:	29 96       	adiw	r28, 0x09	; 9
    3342:	2f af       	std	Y+63, r18	; 0x3f
    3344:	29 97       	sbiw	r28, 0x09	; 9
    3346:	2a 96       	adiw	r28, 0x0a	; 10
    3348:	3f af       	std	Y+63, r19	; 0x3f
    334a:	2a 97       	sbiw	r28, 0x0a	; 10
    334c:	2b 96       	adiw	r28, 0x0b	; 11
    334e:	4f af       	std	Y+63, r20	; 0x3f
    3350:	2b 97       	sbiw	r28, 0x0b	; 11
    3352:	2c 96       	adiw	r28, 0x0c	; 12
    3354:	5f af       	std	Y+63, r21	; 0x3f
    3356:	2c 97       	sbiw	r28, 0x0c	; 12
    3358:	2d 96       	adiw	r28, 0x0d	; 13
    335a:	6f af       	std	Y+63, r22	; 0x3f
    335c:	2d 97       	sbiw	r28, 0x0d	; 13
    335e:	2e 96       	adiw	r28, 0x0e	; 14
    3360:	7f af       	std	Y+63, r23	; 0x3f
    3362:	2e 97       	sbiw	r28, 0x0e	; 14
    3364:	2f 96       	adiw	r28, 0x0f	; 15
    3366:	8f af       	std	Y+63, r24	; 0x3f
    3368:	2f 97       	sbiw	r28, 0x0f	; 15
    336a:	60 96       	adiw	r28, 0x10	; 16
    336c:	9f af       	std	Y+63, r25	; 0x3f
    336e:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    3370:	2c 96       	adiw	r28, 0x0c	; 12
    3372:	4c ac       	ldd	r4, Y+60	; 0x3c
    3374:	5d ac       	ldd	r5, Y+61	; 0x3d
    3376:	6e ac       	ldd	r6, Y+62	; 0x3e
    3378:	7f ac       	ldd	r7, Y+63	; 0x3f
    337a:	2c 97       	sbiw	r28, 0x0c	; 12
    337c:	4c 0c       	add	r4, r12
    337e:	5d 1c       	adc	r5, r13
    3380:	6e 1c       	adc	r6, r14
    3382:	7f 1c       	adc	r7, r15
    3384:	40 92 6f 05 	sts	0x056F, r4
    3388:	50 92 70 05 	sts	0x0570, r5
    338c:	60 92 71 05 	sts	0x0571, r6
    3390:	70 92 72 05 	sts	0x0572, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3394:	c0 90 0c 05 	lds	r12, 0x050C
    3398:	d0 90 0d 05 	lds	r13, 0x050D
    339c:	e0 90 0e 05 	lds	r14, 0x050E
    33a0:	f0 90 0f 05 	lds	r15, 0x050F
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    33a4:	24 96       	adiw	r28, 0x04	; 4
    33a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    33a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    33aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    33ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    33ae:	24 97       	sbiw	r28, 0x04	; 4
    33b0:	a7 01       	movw	r20, r14
    33b2:	96 01       	movw	r18, r12
    33b4:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    33b8:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    33bc:	c9 01       	movw	r24, r18
    33be:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    33c0:	80 93 7d 05 	sts	0x057D, r24
    33c4:	90 93 7e 05 	sts	0x057E, r25
    33c8:	a0 93 7f 05 	sts	0x057F, r26
    33cc:	b0 93 80 05 	sts	0x0580, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    33d0:	c3 01       	movw	r24, r6
    33d2:	b2 01       	movw	r22, r4
    33d4:	a7 01       	movw	r20, r14
    33d6:	96 01       	movw	r18, r12
    33d8:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    33dc:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    33e0:	c9 01       	movw	r24, r18
    33e2:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    33e4:	80 93 67 05 	sts	0x0567, r24
    33e8:	90 93 68 05 	sts	0x0568, r25
    33ec:	a0 93 69 05 	sts	0x0569, r26
    33f0:	b0 93 6a 05 	sts	0x056A, r27
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
					osc1MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][1] != 0)
    3400:	80 91 11 05 	lds	r24, 0x0511
    3404:	88 23       	and	r24, r24
    3406:	09 f4       	brne	.+2      	; 0x340a <main+0x1830>
    3408:	1e c1       	rjmp	.+572    	; 0x3646 <main+0x1a6c>
			{
				if(osc1CentsShift != (adcValue[1] >> 4) - 32)
    340a:	60 91 7c 05 	lds	r22, 0x057C
    340e:	26 2f       	mov	r18, r22
    3410:	33 27       	eor	r19, r19
    3412:	27 fd       	sbrc	r18, 7
    3414:	30 95       	com	r19
    3416:	40 91 9b 05 	lds	r20, 0x059B
    341a:	50 91 9c 05 	lds	r21, 0x059C
    341e:	ca 01       	movw	r24, r20
    3420:	95 95       	asr	r25
    3422:	87 95       	ror	r24
    3424:	95 95       	asr	r25
    3426:	87 95       	ror	r24
    3428:	95 95       	asr	r25
    342a:	87 95       	ror	r24
    342c:	95 95       	asr	r25
    342e:	87 95       	ror	r24
    3430:	80 97       	sbiw	r24, 0x20	; 32
    3432:	28 17       	cp	r18, r24
    3434:	39 07       	cpc	r19, r25
    3436:	09 f4       	brne	.+2      	; 0x343a <main+0x1860>
    3438:	06 c1       	rjmp	.+524    	; 0x3646 <main+0x1a6c>
				{
					//osc1CentsShift = (adcValue[1] >> 4) - 32;
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
    343a:	50 93 2b 05 	sts	0x052B, r21
    343e:	40 93 2a 05 	sts	0x052A, r20

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    3442:	88 e0       	ldi	r24, 0x08	; 8
    3444:	ef e1       	ldi	r30, 0x1F	; 31
    3446:	f1 e0       	ldi	r31, 0x01	; 1
    3448:	d5 01       	movw	r26, r10
    344a:	01 90       	ld	r0, Z+
    344c:	0d 92       	st	X+, r0
    344e:	8a 95       	dec	r24
    3450:	e1 f7       	brne	.-8      	; 0x344a <main+0x1870>
	sprintf(buf + 7, "%d", osc1CentsShift);
    3452:	3f 93       	push	r19
    3454:	6f 93       	push	r22
    3456:	a8 e0       	ldi	r26, 0x08	; 8
    3458:	b1 e0       	ldi	r27, 0x01	; 1
    345a:	bf 93       	push	r27
    345c:	af 93       	push	r26
    345e:	4b ad       	ldd	r20, Y+59	; 0x3b
    3460:	4f 93       	push	r20
    3462:	5a ad       	ldd	r21, Y+58	; 0x3a
    3464:	5f 93       	push	r21
    3466:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    346a:	d5 01       	movw	r26, r10
    346c:	0d 90       	ld	r0, X+
    346e:	00 20       	and	r0, r0
    3470:	e9 f7       	brne	.-6      	; 0x346c <main+0x1892>
    3472:	11 97       	sbiw	r26, 0x01	; 1
    3474:	88 e0       	ldi	r24, 0x08	; 8
    3476:	e2 e4       	ldi	r30, 0x42	; 66
    3478:	f1 e0       	ldi	r31, 0x01	; 1
    347a:	01 90       	ld	r0, Z+
    347c:	0d 92       	st	X+, r0
    347e:	8a 95       	dec	r24
    3480:	e1 f7       	brne	.-8      	; 0x347a <main+0x18a0>
	writeLine(4, buf);
    3482:	b5 01       	movw	r22, r10
    3484:	84 e0       	ldi	r24, 0x04	; 4
    3486:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    348a:	80 91 04 01 	lds	r24, 0x0104
    348e:	e0 91 7b 05 	lds	r30, 0x057B
    3492:	ff 27       	eor	r31, r31
    3494:	e7 fd       	sbrc	r30, 7
    3496:	f0 95       	com	r31
    3498:	e8 0f       	add	r30, r24
    349a:	f1 1d       	adc	r31, r1
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	ee 55       	subi	r30, 0x5E	; 94
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	40 80       	ld	r4, Z
    34aa:	51 80       	ldd	r5, Z+1	; 0x01
    34ac:	62 80       	ldd	r6, Z+2	; 0x02
    34ae:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    34b0:	90 91 04 01 	lds	r25, 0x0104
    34b4:	80 91 64 05 	lds	r24, 0x0564
    34b8:	e0 91 65 05 	lds	r30, 0x0565
    34bc:	ff 27       	eor	r31, r31
    34be:	e7 fd       	sbrc	r30, 7
    34c0:	f0 95       	com	r31
    34c2:	e9 0f       	add	r30, r25
    34c4:	f1 1d       	adc	r31, r1
    34c6:	9c e0       	ldi	r25, 0x0C	; 12
    34c8:	89 02       	muls	r24, r25
    34ca:	e0 0d       	add	r30, r0
    34cc:	f1 1d       	adc	r31, r1
    34ce:	11 24       	eor	r1, r1
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	ee 55       	subi	r30, 0x5E	; 94
    34da:	fe 4f       	sbci	r31, 0xFE	; 254
    34dc:	c0 80       	ld	r12, Z
    34de:	d1 80       	ldd	r13, Z+1	; 0x01
    34e0:	e2 80       	ldd	r14, Z+2	; 0x02
    34e2:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    34e4:	60 91 7c 05 	lds	r22, 0x057C
    34e8:	a7 e2       	ldi	r26, 0x27	; 39
    34ea:	6a 02       	muls	r22, r26
    34ec:	b0 01       	movw	r22, r0
    34ee:	11 24       	eor	r1, r1
    34f0:	88 27       	eor	r24, r24
    34f2:	77 fd       	sbrc	r23, 7
    34f4:	80 95       	com	r24
    34f6:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    34f8:	a3 01       	movw	r20, r6
    34fa:	92 01       	movw	r18, r4
    34fc:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3500:	00 e1       	ldi	r16, 0x10	; 16
    3502:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    3506:	21 96       	adiw	r28, 0x01	; 1
    3508:	2f af       	std	Y+63, r18	; 0x3f
    350a:	21 97       	sbiw	r28, 0x01	; 1
    350c:	22 96       	adiw	r28, 0x02	; 2
    350e:	3f af       	std	Y+63, r19	; 0x3f
    3510:	22 97       	sbiw	r28, 0x02	; 2
    3512:	23 96       	adiw	r28, 0x03	; 3
    3514:	4f af       	std	Y+63, r20	; 0x3f
    3516:	23 97       	sbiw	r28, 0x03	; 3
    3518:	24 96       	adiw	r28, 0x04	; 4
    351a:	5f af       	std	Y+63, r21	; 0x3f
    351c:	24 97       	sbiw	r28, 0x04	; 4
    351e:	25 96       	adiw	r28, 0x05	; 5
    3520:	6f af       	std	Y+63, r22	; 0x3f
    3522:	25 97       	sbiw	r28, 0x05	; 5
    3524:	26 96       	adiw	r28, 0x06	; 6
    3526:	7f af       	std	Y+63, r23	; 0x3f
    3528:	26 97       	sbiw	r28, 0x06	; 6
    352a:	27 96       	adiw	r28, 0x07	; 7
    352c:	8f af       	std	Y+63, r24	; 0x3f
    352e:	27 97       	sbiw	r28, 0x07	; 7
    3530:	28 96       	adiw	r28, 0x08	; 8
    3532:	9f af       	std	Y+63, r25	; 0x3f
    3534:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    3536:	24 96       	adiw	r28, 0x04	; 4
    3538:	8c ad       	ldd	r24, Y+60	; 0x3c
    353a:	9d ad       	ldd	r25, Y+61	; 0x3d
    353c:	ae ad       	ldd	r26, Y+62	; 0x3e
    353e:	bf ad       	ldd	r27, Y+63	; 0x3f
    3540:	24 97       	sbiw	r28, 0x04	; 4
    3542:	84 0d       	add	r24, r4
    3544:	95 1d       	adc	r25, r5
    3546:	a6 1d       	adc	r26, r6
    3548:	b7 1d       	adc	r27, r7
    354a:	24 96       	adiw	r28, 0x04	; 4
    354c:	8c af       	std	Y+60, r24	; 0x3c
    354e:	9d af       	std	Y+61, r25	; 0x3d
    3550:	ae af       	std	Y+62, r26	; 0x3e
    3552:	bf af       	std	Y+63, r27	; 0x3f
    3554:	24 97       	sbiw	r28, 0x04	; 4
    3556:	80 93 8d 05 	sts	0x058D, r24
    355a:	90 93 8e 05 	sts	0x058E, r25
    355e:	a0 93 8f 05 	sts	0x058F, r26
    3562:	b0 93 90 05 	sts	0x0590, r27

	centsConst = 0x27*osc2CentsShift;
    3566:	20 91 66 05 	lds	r18, 0x0566
    356a:	97 e2       	ldi	r25, 0x27	; 39
    356c:	29 02       	muls	r18, r25
    356e:	90 01       	movw	r18, r0
    3570:	11 24       	eor	r1, r1
    3572:	44 27       	eor	r20, r20
    3574:	37 fd       	sbrc	r19, 7
    3576:	40 95       	com	r20
    3578:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    357a:	c7 01       	movw	r24, r14
    357c:	b6 01       	movw	r22, r12
    357e:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3582:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    3586:	29 96       	adiw	r28, 0x09	; 9
    3588:	2f af       	std	Y+63, r18	; 0x3f
    358a:	29 97       	sbiw	r28, 0x09	; 9
    358c:	2a 96       	adiw	r28, 0x0a	; 10
    358e:	3f af       	std	Y+63, r19	; 0x3f
    3590:	2a 97       	sbiw	r28, 0x0a	; 10
    3592:	2b 96       	adiw	r28, 0x0b	; 11
    3594:	4f af       	std	Y+63, r20	; 0x3f
    3596:	2b 97       	sbiw	r28, 0x0b	; 11
    3598:	2c 96       	adiw	r28, 0x0c	; 12
    359a:	5f af       	std	Y+63, r21	; 0x3f
    359c:	2c 97       	sbiw	r28, 0x0c	; 12
    359e:	2d 96       	adiw	r28, 0x0d	; 13
    35a0:	6f af       	std	Y+63, r22	; 0x3f
    35a2:	2d 97       	sbiw	r28, 0x0d	; 13
    35a4:	2e 96       	adiw	r28, 0x0e	; 14
    35a6:	7f af       	std	Y+63, r23	; 0x3f
    35a8:	2e 97       	sbiw	r28, 0x0e	; 14
    35aa:	2f 96       	adiw	r28, 0x0f	; 15
    35ac:	8f af       	std	Y+63, r24	; 0x3f
    35ae:	2f 97       	sbiw	r28, 0x0f	; 15
    35b0:	60 96       	adiw	r28, 0x10	; 16
    35b2:	9f af       	std	Y+63, r25	; 0x3f
    35b4:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    35b6:	2c 96       	adiw	r28, 0x0c	; 12
    35b8:	4c ac       	ldd	r4, Y+60	; 0x3c
    35ba:	5d ac       	ldd	r5, Y+61	; 0x3d
    35bc:	6e ac       	ldd	r6, Y+62	; 0x3e
    35be:	7f ac       	ldd	r7, Y+63	; 0x3f
    35c0:	2c 97       	sbiw	r28, 0x0c	; 12
    35c2:	4c 0c       	add	r4, r12
    35c4:	5d 1c       	adc	r5, r13
    35c6:	6e 1c       	adc	r6, r14
    35c8:	7f 1c       	adc	r7, r15
    35ca:	40 92 6f 05 	sts	0x056F, r4
    35ce:	50 92 70 05 	sts	0x0570, r5
    35d2:	60 92 71 05 	sts	0x0571, r6
    35d6:	70 92 72 05 	sts	0x0572, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    35da:	c0 90 0c 05 	lds	r12, 0x050C
    35de:	d0 90 0d 05 	lds	r13, 0x050D
    35e2:	e0 90 0e 05 	lds	r14, 0x050E
    35e6:	f0 90 0f 05 	lds	r15, 0x050F
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    35ea:	24 96       	adiw	r28, 0x04	; 4
    35ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    35ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    35f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    35f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    35f4:	24 97       	sbiw	r28, 0x04	; 4
    35f6:	a7 01       	movw	r20, r14
    35f8:	96 01       	movw	r18, r12
    35fa:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    35fe:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    3602:	c9 01       	movw	r24, r18
    3604:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3606:	80 93 7d 05 	sts	0x057D, r24
    360a:	90 93 7e 05 	sts	0x057E, r25
    360e:	a0 93 7f 05 	sts	0x057F, r26
    3612:	b0 93 80 05 	sts	0x0580, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3616:	c3 01       	movw	r24, r6
    3618:	b2 01       	movw	r22, r4
    361a:	a7 01       	movw	r20, r14
    361c:	96 01       	movw	r18, r12
    361e:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3622:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    3626:	c9 01       	movw	r24, r18
    3628:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    362a:	80 93 67 05 	sts	0x0567, r24
    362e:	90 93 68 05 	sts	0x0568, r25
    3632:	a0 93 69 05 	sts	0x0569, r26
    3636:	b0 93 6a 05 	sts	0x056A, r27
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
					osc1MenuCentsUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][0] != 0)
    3646:	80 91 10 05 	lds	r24, 0x0510
    364a:	88 23       	and	r24, r24
    364c:	11 f4       	brne	.+4      	; 0x3652 <main+0x1a78>
    364e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
			{
				if(adcValue[0] < 512)
    3652:	80 91 99 05 	lds	r24, 0x0599
    3656:	90 91 9a 05 	lds	r25, 0x059A
    365a:	81 15       	cp	r24, r1
    365c:	a2 e0       	ldi	r26, 0x02	; 2
    365e:	9a 07       	cpc	r25, r26
    3660:	0c f0       	brlt	.+2      	; 0x3664 <main+0x1a8a>
    3662:	5a c1       	rjmp	.+692    	; 0x3918 <main+0x1d3e>
				{
					if(osc1NoteSync != false)
    3664:	80 91 73 05 	lds	r24, 0x0573
    3668:	88 23       	and	r24, r24
    366a:	11 f4       	brne	.+4      	; 0x3670 <main+0x1a96>
    366c:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc1NoteSync = false;
    3670:	10 92 73 05 	sts	0x0573, r1

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3674:	87 e0       	ldi	r24, 0x07	; 7
    3676:	ef e2       	ldi	r30, 0x2F	; 47
    3678:	f1 e0       	ldi	r31, 0x01	; 1
    367a:	d5 01       	movw	r26, r10
    367c:	01 90       	ld	r0, Z+
    367e:	0d 92       	st	X+, r0
    3680:	8a 95       	dec	r24
    3682:	e1 f7       	brne	.-8      	; 0x367c <main+0x1aa2>
	if(osc1NoteSync != false)
    3684:	80 91 73 05 	lds	r24, 0x0573
    3688:	81 11       	cpse	r24, r1
    368a:	5c c4       	rjmp	.+2232   	; 0x3f44 <main+0x236a>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    368c:	8f e4       	ldi	r24, 0x4F	; 79
    368e:	96 e4       	ldi	r25, 0x46	; 70
    3690:	a6 e4       	ldi	r26, 0x46	; 70
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	8f 83       	std	Y+7, r24	; 0x07
    3696:	98 87       	std	Y+8, r25	; 0x08
    3698:	a9 87       	std	Y+9, r26	; 0x09
    369a:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    369c:	d5 01       	movw	r26, r10
    369e:	0d 90       	ld	r0, X+
    36a0:	00 20       	and	r0, r0
    36a2:	e9 f7       	brne	.-6      	; 0x369e <main+0x1ac4>
    36a4:	11 97       	sbiw	r26, 0x01	; 1
    36a6:	88 e0       	ldi	r24, 0x08	; 8
    36a8:	e2 e4       	ldi	r30, 0x42	; 66
    36aa:	f1 e0       	ldi	r31, 0x01	; 1
    36ac:	01 90       	ld	r0, Z+
    36ae:	0d 92       	st	X+, r0
    36b0:	8a 95       	dec	r24
    36b2:	e1 f7       	brne	.-8      	; 0x36ac <main+0x1ad2>
	writeLine(5, buf);
    36b4:	b5 01       	movw	r22, r10
    36b6:	85 e0       	ldi	r24, 0x05	; 5
    36b8:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    36bc:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
			{
				menuChange[MENU_OSC2][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
    36c0:	80 91 17 05 	lds	r24, 0x0517
    36c4:	88 23       	and	r24, r24
    36c6:	09 f4       	brne	.+2      	; 0x36ca <main+0x1af0>
    36c8:	ce c9       	rjmp	.-3172   	; 0x2a66 <main+0xe8c>
    36ca:	80 91 9f 05 	lds	r24, 0x059F
    36ce:	90 91 a0 05 	lds	r25, 0x05A0
			{
				if(adcValue[3] < 146)
    36d2:	82 39       	cpi	r24, 0x92	; 146
    36d4:	91 05       	cpc	r25, r1
    36d6:	0c f4       	brge	.+2      	; 0x36da <main+0x1b00>
    36d8:	c1 c9       	rjmp	.-3198   	; 0x2a5c <main+0xe82>
						osc2WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC2][3] = 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    36da:	84 32       	cpi	r24, 0x24	; 36
    36dc:	a1 e0       	ldi	r26, 0x01	; 1
    36de:	9a 07       	cpc	r25, r26
    36e0:	0c f0       	brlt	.+2      	; 0x36e4 <main+0x1b0a>
    36e2:	3d c3       	rjmp	.+1658   	; 0x3d5e <main+0x2184>
				{
					if(osc2WaveForm != WAVE_TRI)
    36e4:	80 91 02 01 	lds	r24, 0x0102
    36e8:	81 30       	cpi	r24, 0x01	; 1
    36ea:	09 f4       	brne	.+2      	; 0x36ee <main+0x1b14>
    36ec:	bc c9       	rjmp	.-3208   	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_TRI;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 219;
    36f4:	8b ed       	ldi	r24, 0xDB	; 219
    36f6:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc2WaveForm != WAVE_FLAT)
					{
						osc2WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    36f8:	90 93 37 05 	sts	0x0537, r25
    36fc:	80 93 36 05 	sts	0x0536, r24

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3700:	87 e0       	ldi	r24, 0x07	; 7
    3702:	e8 e1       	ldi	r30, 0x18	; 24
    3704:	f1 e0       	ldi	r31, 0x01	; 1
    3706:	d5 01       	movw	r26, r10
    3708:	01 90       	ld	r0, Z+
    370a:	0d 92       	st	X+, r0
    370c:	8a 95       	dec	r24
    370e:	e1 f7       	brne	.-8      	; 0x3708 <main+0x1b2e>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    3710:	80 91 02 01 	lds	r24, 0x0102
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	80 58       	subi	r24, 0x80	; 128
    371c:	99 4f       	sbci	r25, 0xF9	; 249
    371e:	fc 01       	movw	r30, r24
    3720:	65 91       	lpm	r22, Z+
    3722:	74 91       	lpm	r23, Z
    3724:	54 01       	movw	r10, r8
    3726:	81 2f       	mov	r24, r17
    3728:	93 2d       	mov	r25, r3
    372a:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "       ");
    372e:	d4 01       	movw	r26, r8
    3730:	0d 90       	ld	r0, X+
    3732:	00 20       	and	r0, r0
    3734:	e9 f7       	brne	.-6      	; 0x3730 <main+0x1b56>
    3736:	11 97       	sbiw	r26, 0x01	; 1
    3738:	88 e0       	ldi	r24, 0x08	; 8
    373a:	e2 e4       	ldi	r30, 0x42	; 66
    373c:	f1 e0       	ldi	r31, 0x01	; 1
    373e:	01 90       	ld	r0, Z+
    3740:	0d 92       	st	X+, r0
    3742:	8a 95       	dec	r24
    3744:	e1 f7       	brne	.-8      	; 0x373e <main+0x1b64>
	writeLine(2, buf);	
    3746:	61 2f       	mov	r22, r17
    3748:	73 2d       	mov	r23, r3
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3750:	8a c9       	rjmp	.-3308   	; 0x2a66 <main+0xe8c>
			{
				menuChange[MENU_OSC1][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
    3752:	80 91 13 05 	lds	r24, 0x0513
    3756:	88 23       	and	r24, r24
    3758:	09 f4       	brne	.+2      	; 0x375c <main+0x1b82>
    375a:	27 cd       	rjmp	.-1458   	; 0x31aa <main+0x15d0>
    375c:	80 91 9f 05 	lds	r24, 0x059F
    3760:	90 91 a0 05 	lds	r25, 0x05A0
			{
				if(adcValue[3] < 146)
    3764:	82 39       	cpi	r24, 0x92	; 146
    3766:	91 05       	cpc	r25, r1
    3768:	0c f4       	brge	.+2      	; 0x376c <main+0x1b92>
    376a:	1b cd       	rjmp	.-1482   	; 0x31a2 <main+0x15c8>
						osc1WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC1][3] = 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    376c:	84 32       	cpi	r24, 0x24	; 36
    376e:	a1 e0       	ldi	r26, 0x01	; 1
    3770:	9a 07       	cpc	r25, r26
    3772:	0c f0       	brlt	.+2      	; 0x3776 <main+0x1b9c>
    3774:	e4 c2       	rjmp	.+1480   	; 0x3d3e <main+0x2164>
				{
					if(osc1WaveForm != WAVE_TRI)
    3776:	80 91 03 01 	lds	r24, 0x0103
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	09 f4       	brne	.+2      	; 0x3780 <main+0x1ba6>
    377e:	15 cd       	rjmp	.-1494   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_TRI;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 219;
    3786:	8b ed       	ldi	r24, 0xDB	; 219
    3788:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc1WaveForm != WAVE_FLAT)
					{
						osc1WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    378a:	90 93 2f 05 	sts	0x052F, r25
    378e:	80 93 2e 05 	sts	0x052E, r24

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3792:	87 e0       	ldi	r24, 0x07	; 7
    3794:	e8 e1       	ldi	r30, 0x18	; 24
    3796:	f1 e0       	ldi	r31, 0x01	; 1
    3798:	d5 01       	movw	r26, r10
    379a:	01 90       	ld	r0, Z+
    379c:	0d 92       	st	X+, r0
    379e:	8a 95       	dec	r24
    37a0:	e1 f7       	brne	.-8      	; 0x379a <main+0x1bc0>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    37a2:	80 91 03 01 	lds	r24, 0x0103
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	80 58       	subi	r24, 0x80	; 128
    37ae:	99 4f       	sbci	r25, 0xF9	; 249
    37b0:	fc 01       	movw	r30, r24
    37b2:	65 91       	lpm	r22, Z+
    37b4:	74 91       	lpm	r23, Z
    37b6:	54 01       	movw	r10, r8
    37b8:	81 2f       	mov	r24, r17
    37ba:	93 2d       	mov	r25, r3
    37bc:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "       ");
    37c0:	d4 01       	movw	r26, r8
    37c2:	0d 90       	ld	r0, X+
    37c4:	00 20       	and	r0, r0
    37c6:	e9 f7       	brne	.-6      	; 0x37c2 <main+0x1be8>
    37c8:	11 97       	sbiw	r26, 0x01	; 1
    37ca:	88 e0       	ldi	r24, 0x08	; 8
    37cc:	e2 e4       	ldi	r30, 0x42	; 66
    37ce:	f1 e0       	ldi	r31, 0x01	; 1
    37d0:	01 90       	ld	r0, Z+
    37d2:	0d 92       	st	X+, r0
    37d4:	8a 95       	dec	r24
    37d6:	e1 f7       	brne	.-8      	; 0x37d0 <main+0x1bf6>
	writeLine(2, buf);	
    37d8:	61 2f       	mov	r22, r17
    37da:	73 2d       	mov	r23, r3
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    37e2:	e3 cc       	rjmp	.-1594   	; 0x31aa <main+0x15d0>
			{
				menuChange[MENU_LFO][3] = 1;
				updateADC[3] = false;
			}
						
			if(menuChange[MENU_LFO][3] != 0)
    37e4:	80 91 1b 05 	lds	r24, 0x051B
    37e8:	88 23       	and	r24, r24
    37ea:	09 f4       	brne	.+2      	; 0x37ee <main+0x1c14>
    37ec:	92 cb       	rjmp	.-2268   	; 0x2f12 <main+0x1338>
    37ee:	80 91 9f 05 	lds	r24, 0x059F
    37f2:	90 91 a0 05 	lds	r25, 0x05A0
			{
				if(adcValue[3] < 171)
    37f6:	8b 3a       	cpi	r24, 0xAB	; 171
    37f8:	91 05       	cpc	r25, r1
    37fa:	0c f4       	brge	.+2      	; 0x37fe <main+0x1c24>
    37fc:	86 cb       	rjmp	.-2292   	; 0x2f0a <main+0x1330>
						lfoWaveForm = WAVE_SINE;
						menuKnobPos[MENU_LFO][3] = 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 341)
    37fe:	85 35       	cpi	r24, 0x55	; 85
    3800:	a1 e0       	ldi	r26, 0x01	; 1
    3802:	9a 07       	cpc	r25, r26
    3804:	0c f0       	brlt	.+2      	; 0x3808 <main+0x1c2e>
    3806:	65 c2       	rjmp	.+1226   	; 0x3cd2 <main+0x20f8>
				{
					if(lfoWaveForm != WAVE_TRI)
    3808:	80 91 05 01 	lds	r24, 0x0105
    380c:	81 30       	cpi	r24, 0x01	; 1
    380e:	09 f4       	brne	.+2      	; 0x3812 <main+0x1c38>
    3810:	80 cb       	rjmp	.-2304   	; 0x2f12 <main+0x1338>
					{
						lfoWaveForm = WAVE_TRI;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	80 93 05 01 	sts	0x0105, r24
						menuKnobPos[MENU_LFO][3] = 171 + 85;
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	91 e0       	ldi	r25, 0x01	; 1
    381c:	90 93 3f 05 	sts	0x053F, r25
    3820:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3824:	87 e0       	ldi	r24, 0x07	; 7
    3826:	e8 e1       	ldi	r30, 0x18	; 24
    3828:	f1 e0       	ldi	r31, 0x01	; 1
    382a:	d5 01       	movw	r26, r10
    382c:	01 90       	ld	r0, Z+
    382e:	0d 92       	st	X+, r0
    3830:	8a 95       	dec	r24
    3832:	e1 f7       	brne	.-8      	; 0x382c <main+0x1c52>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3834:	e2 e8       	ldi	r30, 0x82	; 130
    3836:	f6 e0       	ldi	r31, 0x06	; 6
    3838:	65 91       	lpm	r22, Z+
    383a:	74 91       	lpm	r23, Z
    383c:	54 01       	movw	r10, r8
    383e:	81 2f       	mov	r24, r17
    3840:	93 2d       	mov	r25, r3
    3842:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "    ");
    3846:	d4 01       	movw	r26, r8
    3848:	0d 90       	ld	r0, X+
    384a:	00 20       	and	r0, r0
    384c:	e9 f7       	brne	.-6      	; 0x3848 <main+0x1c6e>
    384e:	11 97       	sbiw	r26, 0x01	; 1
    3850:	e5 e4       	ldi	r30, 0x45	; 69
    3852:	f1 e0       	ldi	r31, 0x01	; 1
    3854:	82 2d       	mov	r24, r2
    3856:	01 90       	ld	r0, Z+
    3858:	0d 92       	st	X+, r0
    385a:	8a 95       	dec	r24
    385c:	e1 f7       	brne	.-8      	; 0x3856 <main+0x1c7c>
	writeLine(2, buf);
    385e:	61 2f       	mov	r22, r17
    3860:	73 2d       	mov	r23, r3
    3862:	82 e0       	ldi	r24, 0x02	; 2
    3864:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3868:	54 cb       	rjmp	.-2392   	; 0x2f12 <main+0x1338>
			{
				menuChange[MENU_MIX][3] = 1;
				updateADC[3] = false;
			}

			if(menuChange[MENU_MIX][3] != 0)
    386a:	80 91 1f 05 	lds	r24, 0x051F
    386e:	88 23       	and	r24, r24
    3870:	11 f4       	brne	.+4      	; 0x3876 <main+0x1c9c>
    3872:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <main+0xbf6>
    3876:	80 91 9f 05 	lds	r24, 0x059F
    387a:	90 91 a0 05 	lds	r25, 0x05A0
    387e:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <main+0x996>
		{
			if(btnPressed[MENU_OSC2])
			btnPressed[MENU_OSC2] = false;
					
			if(!btnCanPress[MENU_OSC2])
			btnLastPressed[MENU_OSC2]++;
    3882:	90 91 f2 04 	lds	r25, 0x04F2
    3886:	9f 5f       	subi	r25, 0xFF	; 255
    3888:	90 93 f2 04 	sts	0x04F2, r25
    388c:	3e c8       	rjmp	.-3972   	; 0x290a <main+0xd30>
				if(adcValue[1] > 512 && osc2Sync != true)
				{
					osc2Sync = true;
					mixerMenuOsc2SyncUpdate();
				}
				else if(adcValue[1] < 512 && osc2Sync != false)
    388e:	81 15       	cp	r24, r1
    3890:	92 40       	sbci	r25, 0x02	; 2
    3892:	14 f0       	brlt	.+4      	; 0x3898 <main+0x1cbe>
    3894:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
    3898:	80 91 06 01 	lds	r24, 0x0106
    389c:	88 23       	and	r24, r24
    389e:	11 f4       	brne	.+4      	; 0x38a4 <main+0x1cca>
    38a0:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
				{
					osc2Sync = false;
    38a4:	10 92 06 01 	sts	0x0106, r1
    38a8:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <main+0xc22>
						osc2OctaveShift = -2;
						menuKnobPos[MENU_OSC2][0] = 102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 410)
    38ac:	8a 39       	cpi	r24, 0x9A	; 154
    38ae:	a1 e0       	ldi	r26, 0x01	; 1
    38b0:	9a 07       	cpc	r25, r26
    38b2:	0c f0       	brlt	.+2      	; 0x38b6 <main+0x1cdc>
    38b4:	65 c2       	rjmp	.+1226   	; 0x3d80 <main+0x21a6>
				{
					if(osc2OctaveShift != -1)
    38b6:	80 91 64 05 	lds	r24, 0x0564
    38ba:	8f 3f       	cpi	r24, 0xFF	; 255
    38bc:	11 f4       	brne	.+4      	; 0x38c2 <main+0x1ce8>
    38be:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc2OctaveShift = -1;
    38c2:	2f ef       	ldi	r18, 0xFF	; 255
    38c4:	20 93 64 05 	sts	0x0564, r18
						menuKnobPos[MENU_OSC2][0] = 205+102;
    38c8:	83 e3       	ldi	r24, 0x33	; 51
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	90 93 31 05 	sts	0x0531, r25
    38d0:	80 93 30 05 	sts	0x0530, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    38d4:	86 e0       	ldi	r24, 0x06	; 6
    38d6:	e7 e5       	ldi	r30, 0x57	; 87
    38d8:	f1 e0       	ldi	r31, 0x01	; 1
    38da:	d5 01       	movw	r26, r10
    38dc:	01 90       	ld	r0, Z+
    38de:	0d 92       	st	X+, r0
    38e0:	8a 95       	dec	r24
    38e2:	e1 f7       	brne	.-8      	; 0x38dc <main+0x1d02>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    38e4:	2f 93       	push	r18
    38e6:	58 ca       	rjmp	.-2896   	; 0x2d98 <main+0x11be>
					{
						lfoRoute = ROUTE_OSC1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 186)
    38e8:	8a 3b       	cpi	r24, 0xBA	; 186
    38ea:	91 05       	cpc	r25, r1
    38ec:	0c f0       	brlt	.+2      	; 0x38f0 <main+0x1d16>
    38ee:	6b c2       	rjmp	.+1238   	; 0x3dc6 <main+0x21ec>
				{
					if(lfoRoute != ROUTE_OSC2)
    38f0:	80 91 5b 05 	lds	r24, 0x055B
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	11 f4       	brne	.+4      	; 0x38fc <main+0x1d22>
    38f8:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_OSC2;
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	80 93 5b 05 	sts	0x055B, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3902:	87 e0       	ldi	r24, 0x07	; 7
    3904:	e6 e3       	ldi	r30, 0x36	; 54
    3906:	f1 e0       	ldi	r31, 0x01	; 1
    3908:	d5 01       	movw	r26, r10
    390a:	01 90       	ld	r0, Z+
    390c:	0d 92       	st	X+, r0
    390e:	8a 95       	dec	r24
    3910:	e1 f7       	brne	.-8      	; 0x390a <main+0x1d30>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3912:	ea e6       	ldi	r30, 0x6A	; 106
    3914:	f6 e0       	ldi	r31, 0x06	; 6
    3916:	a7 cb       	rjmp	.-2226   	; 0x3066 <main+0x148c>
					{
						osc1NoteSync = false;
						osc1MenuSyncUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    3918:	8f 3f       	cpi	r24, 0xFF	; 255
    391a:	93 40       	sbci	r25, 0x03	; 3
    391c:	14 f0       	brlt	.+4      	; 0x3922 <main+0x1d48>
    391e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
				{
					if(osc1NoteSync != true)
    3922:	80 91 73 05 	lds	r24, 0x0573
    3926:	81 11       	cpse	r24, r1
    3928:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc1NoteSync = true;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	80 93 73 05 	sts	0x0573, r24
    3932:	a0 ce       	rjmp	.-704    	; 0x3674 <main+0x1a9a>
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
			{		
				btnLastPressed[MENU_OSC1] = 0;
    3934:	10 92 f1 04 	sts	0x04F1, r1
				
				menuSelect = MENU_OSC1;
    3938:	10 92 58 05 	sts	0x0558, r1

				menuChange[menuSelect][0] = 0;
    393c:	10 92 10 05 	sts	0x0510, r1
				menuChange[menuSelect][1] = 0;
    3940:	10 92 11 05 	sts	0x0511, r1
				menuChange[menuSelect][2] = 0;
    3944:	10 92 12 05 	sts	0x0512, r1
				menuChange[menuSelect][3] = 0;
    3948:	10 92 13 05 	sts	0x0513, r1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    394c:	eb e0       	ldi	r30, 0x0B	; 11
    394e:	f1 e0       	ldi	r31, 0x01	; 1
    3950:	61 96       	adiw	r28, 0x11	; 17
    3952:	af ad       	ldd	r26, Y+63	; 0x3f
    3954:	61 97       	sbiw	r28, 0x11	; 17
    3956:	62 96       	adiw	r28, 0x12	; 18
    3958:	bf ad       	ldd	r27, Y+63	; 0x3f
    395a:	62 97       	sbiw	r28, 0x12	; 18
    395c:	82 2f       	mov	r24, r18
    395e:	01 90       	ld	r0, Z+
    3960:	0d 92       	st	X+, r0
    3962:	8a 95       	dec	r24
    3964:	e1 f7       	brne	.-8      	; 0x395e <main+0x1d84>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    3966:	fe 01       	movw	r30, r28
    3968:	75 96       	adiw	r30, 0x15	; 21
    396a:	d5 01       	movw	r26, r10
    396c:	83 2f       	mov	r24, r19
    396e:	01 90       	ld	r0, Z+
    3970:	0d 92       	st	X+, r0
    3972:	8a 95       	dec	r24
    3974:	e1 f7       	brne	.-8      	; 0x396e <main+0x1d94>
	buf[12] = '\0';
    3976:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    3978:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    397a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    397c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    397e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3980:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3982:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3984:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3986:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3988:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    398a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    398c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    398e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3990:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3992:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3994:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3996:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3998:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    399a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    399c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    399e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39ac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    39ae:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    39b0:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    39b2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39ba:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    39bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39de:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39e4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    39e6:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	88 23       	and	r24, r24
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <main+0x1e16>
    39ee:	81 c0       	rjmp	.+258    	; 0x3af2 <main+0x1f18>
    39f0:	de 01       	movw	r26, r28
    39f2:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    39f4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    39f6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    39fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    39fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    39fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a00:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a02:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a04:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a10:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a12:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a14:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a16:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a18:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a1a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a1c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a1e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a20:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a22:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a24:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a26:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a28:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3a2a:	44 9a       	sbi	0x08, 4	; 8
    3a2c:	99 27       	eor	r25, r25
    3a2e:	87 fd       	sbrc	r24, 7
    3a30:	90 95       	com	r25
    3a32:	80 97       	sbiw	r24, 0x20	; 32
    3a34:	fc 01       	movw	r30, r24
    3a36:	ee 0f       	add	r30, r30
    3a38:	ff 1f       	adc	r31, r31
    3a3a:	ee 0f       	add	r30, r30
    3a3c:	ff 1f       	adc	r31, r31
    3a3e:	e8 0f       	add	r30, r24
    3a40:	f9 1f       	adc	r31, r25
    3a42:	e0 5f       	subi	r30, 0xF0	; 240
    3a44:	fc 4f       	sbci	r31, 0xFC	; 252
    3a46:	55 e0       	ldi	r21, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    3a48:	41 91       	ld	r20, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3a4a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3a4c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a4e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a50:	84 2f       	mov	r24, r20
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	88 0f       	add	r24, r24
    3a56:	89 2f       	mov	r24, r25
    3a58:	88 1f       	adc	r24, r24
    3a5a:	99 0b       	sbc	r25, r25
    3a5c:	89 2b       	or	r24, r25
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <main+0x1e88>
    3a60:	1c c1       	rjmp	.+568    	; 0x3c9a <main+0x20c0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a62:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a64:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a66:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a68:	46 fd       	sbrc	r20, 6
    3a6a:	1c c1       	rjmp	.+568    	; 0x3ca4 <main+0x20ca>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a6c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a6e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a70:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a72:	45 fd       	sbrc	r20, 5
    3a74:	10 c1       	rjmp	.+544    	; 0x3c96 <main+0x20bc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a7a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a7c:	44 fd       	sbrc	r20, 4
    3a7e:	09 c1       	rjmp	.+530    	; 0x3c92 <main+0x20b8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a84:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a86:	43 fd       	sbrc	r20, 3
    3a88:	02 c1       	rjmp	.+516    	; 0x3c8e <main+0x20b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a8e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a90:	42 fd       	sbrc	r20, 2
    3a92:	fb c0       	rjmp	.+502    	; 0x3c8a <main+0x20b0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a94:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a96:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3a98:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3a9a:	41 fd       	sbrc	r20, 1
    3a9c:	f4 c0       	rjmp	.+488    	; 0x3c86 <main+0x20ac>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3a9e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3aa0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3aa2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3aa4:	40 fd       	sbrc	r20, 0
    3aa6:	ed c0       	rjmp	.+474    	; 0x3c82 <main+0x20a8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3aa8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3aaa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3aac:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3aae:	44 9a       	sbi	0x08, 4	; 8
    3ab0:	51 50       	subi	r21, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    3ab2:	51 f6       	brne	.-108    	; 0x3a48 <main+0x1e6e>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3ab4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3ab6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ab8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3aba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3abc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3abe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ac0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ac2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ac4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ac6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ac8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3aca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3acc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ace:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ad0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ad2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ad4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ad6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ad8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ada:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3adc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ade:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ae0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ae2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ae4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ae6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ae8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3aea:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3aec:	8d 91       	ld	r24, X+
    3aee:	81 11       	cpse	r24, r1
    3af0:	81 cf       	rjmp	.-254    	; 0x39f4 <main+0x1e1a>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3af2:	e8 e1       	ldi	r30, 0x18	; 24
    3af4:	f1 e0       	ldi	r31, 0x01	; 1
    3af6:	d5 01       	movw	r26, r10
    3af8:	8f 2d       	mov	r24, r15
    3afa:	01 90       	ld	r0, Z+
    3afc:	0d 92       	st	X+, r0
    3afe:	8a 95       	dec	r24
    3b00:	e1 f7       	brne	.-8      	; 0x3afa <main+0x1f20>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3b02:	80 91 03 01 	lds	r24, 0x0103
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	80 58       	subi	r24, 0x80	; 128
    3b0e:	99 4f       	sbci	r25, 0xF9	; 249
    3b10:	fc 01       	movw	r30, r24
    3b12:	65 91       	lpm	r22, Z+
    3b14:	74 91       	lpm	r23, Z
    3b16:	a1 2e       	mov	r10, r17
    3b18:	b3 2c       	mov	r11, r3
    3b1a:	81 2f       	mov	r24, r17
    3b1c:	93 2d       	mov	r25, r3
    3b1e:	63 96       	adiw	r28, 0x13	; 19
    3b20:	2f af       	std	Y+63, r18	; 0x3f
    3b22:	63 97       	sbiw	r28, 0x13	; 19
    3b24:	64 96       	adiw	r28, 0x14	; 20
    3b26:	3f af       	std	Y+63, r19	; 0x3f
    3b28:	64 97       	sbiw	r28, 0x14	; 20
    3b2a:	0e 94 c4 24 	call	0x4988	; 0x4988 <strcat_P>
	strcat(buf, "       ");
    3b2e:	d4 01       	movw	r26, r8
    3b30:	0d 90       	ld	r0, X+
    3b32:	00 20       	and	r0, r0
    3b34:	e9 f7       	brne	.-6      	; 0x3b30 <main+0x1f56>
    3b36:	11 97       	sbiw	r26, 0x01	; 1
    3b38:	88 e0       	ldi	r24, 0x08	; 8
    3b3a:	e2 e4       	ldi	r30, 0x42	; 66
    3b3c:	f1 e0       	ldi	r31, 0x01	; 1
    3b3e:	01 90       	ld	r0, Z+
    3b40:	0d 92       	st	X+, r0
    3b42:	8a 95       	dec	r24
    3b44:	e1 f7       	brne	.-8      	; 0x3b3e <main+0x1f64>
	writeLine(2, buf);	
    3b46:	61 2f       	mov	r22, r17
    3b48:	73 2d       	mov	r23, r3
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
    3b4c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    3b50:	88 e0       	ldi	r24, 0x08	; 8
    3b52:	ef e1       	ldi	r30, 0x1F	; 31
    3b54:	f1 e0       	ldi	r31, 0x01	; 1
    3b56:	a1 2f       	mov	r26, r17
    3b58:	b3 2d       	mov	r27, r3
    3b5a:	01 90       	ld	r0, Z+
    3b5c:	0d 92       	st	X+, r0
    3b5e:	8a 95       	dec	r24
    3b60:	e1 f7       	brne	.-8      	; 0x3b5a <main+0x1f80>
	sprintf(buf + 7, "%d", osc1CentsShift);
    3b62:	40 91 7c 05 	lds	r20, 0x057C
    3b66:	84 2f       	mov	r24, r20
    3b68:	99 27       	eor	r25, r25
    3b6a:	87 fd       	sbrc	r24, 7
    3b6c:	90 95       	com	r25
    3b6e:	9f 93       	push	r25
    3b70:	4f 93       	push	r20
    3b72:	a8 e0       	ldi	r26, 0x08	; 8
    3b74:	b1 e0       	ldi	r27, 0x01	; 1
    3b76:	bf 93       	push	r27
    3b78:	af 93       	push	r26
    3b7a:	5b ad       	ldd	r21, Y+59	; 0x3b
    3b7c:	5f 93       	push	r21
    3b7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b80:	8f 93       	push	r24
    3b82:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    3b86:	d4 01       	movw	r26, r8
    3b88:	0d 90       	ld	r0, X+
    3b8a:	00 20       	and	r0, r0
    3b8c:	e9 f7       	brne	.-6      	; 0x3b88 <main+0x1fae>
    3b8e:	11 97       	sbiw	r26, 0x01	; 1
    3b90:	88 e0       	ldi	r24, 0x08	; 8
    3b92:	e2 e4       	ldi	r30, 0x42	; 66
    3b94:	f1 e0       	ldi	r31, 0x01	; 1
    3b96:	01 90       	ld	r0, Z+
    3b98:	0d 92       	st	X+, r0
    3b9a:	8a 95       	dec	r24
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <main+0x1fbc>
	writeLine(4, buf);
    3b9e:	61 2f       	mov	r22, r17
    3ba0:	73 2d       	mov	r23, r3
    3ba2:	84 e0       	ldi	r24, 0x04	; 4
    3ba4:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    3ba8:	88 e0       	ldi	r24, 0x08	; 8
    3baa:	e7 e2       	ldi	r30, 0x27	; 39
    3bac:	f1 e0       	ldi	r31, 0x01	; 1
    3bae:	a1 2f       	mov	r26, r17
    3bb0:	b3 2d       	mov	r27, r3
    3bb2:	01 90       	ld	r0, Z+
    3bb4:	0d 92       	st	X+, r0
    3bb6:	8a 95       	dec	r24
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <main+0x1fd8>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3bba:	40 91 7b 05 	lds	r20, 0x057B
    3bbe:	84 2f       	mov	r24, r20
    3bc0:	99 27       	eor	r25, r25
    3bc2:	87 fd       	sbrc	r24, 7
    3bc4:	90 95       	com	r25
    3bc6:	9f 93       	push	r25
    3bc8:	4f 93       	push	r20
    3bca:	a8 e0       	ldi	r26, 0x08	; 8
    3bcc:	b1 e0       	ldi	r27, 0x01	; 1
    3bce:	bf 93       	push	r27
    3bd0:	af 93       	push	r26
    3bd2:	5b ad       	ldd	r21, Y+59	; 0x3b
    3bd4:	5f 93       	push	r21
    3bd6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bd8:	8f 93       	push	r24
    3bda:	0e 94 cf 24 	call	0x499e	; 0x499e <sprintf>
	strcat(buf, "       ");
    3bde:	d4 01       	movw	r26, r8
    3be0:	0d 90       	ld	r0, X+
    3be2:	00 20       	and	r0, r0
    3be4:	e9 f7       	brne	.-6      	; 0x3be0 <main+0x2006>
    3be6:	11 97       	sbiw	r26, 0x01	; 1
    3be8:	88 e0       	ldi	r24, 0x08	; 8
    3bea:	e2 e4       	ldi	r30, 0x42	; 66
    3bec:	f1 e0       	ldi	r31, 0x01	; 1
    3bee:	01 90       	ld	r0, Z+
    3bf0:	0d 92       	st	X+, r0
    3bf2:	8a 95       	dec	r24
    3bf4:	e1 f7       	brne	.-8      	; 0x3bee <main+0x2014>
	writeLine(3, buf);
    3bf6:	61 2f       	mov	r22, r17
    3bf8:	73 2d       	mov	r23, r3
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3c00:	ef e2       	ldi	r30, 0x2F	; 47
    3c02:	f1 e0       	ldi	r31, 0x01	; 1
    3c04:	a1 2f       	mov	r26, r17
    3c06:	b3 2d       	mov	r27, r3
    3c08:	8f 2d       	mov	r24, r15
    3c0a:	01 90       	ld	r0, Z+
    3c0c:	0d 92       	st	X+, r0
    3c0e:	8a 95       	dec	r24
    3c10:	e1 f7       	brne	.-8      	; 0x3c0a <main+0x2030>
	if(osc1NoteSync != false)
    3c12:	80 91 73 05 	lds	r24, 0x0573
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	63 96       	adiw	r28, 0x13	; 19
    3c22:	2f ad       	ldd	r18, Y+63	; 0x3f
    3c24:	63 97       	sbiw	r28, 0x13	; 19
    3c26:	64 96       	adiw	r28, 0x14	; 20
    3c28:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c2a:	64 97       	sbiw	r28, 0x14	; 20
    3c2c:	81 11       	cpse	r24, r1
    3c2e:	36 c1       	rjmp	.+620    	; 0x3e9c <main+0x22c2>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3c30:	8f e4       	ldi	r24, 0x4F	; 79
    3c32:	96 e4       	ldi	r25, 0x46	; 70
    3c34:	a6 e4       	ldi	r26, 0x46	; 70
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	8f 83       	std	Y+7, r24	; 0x07
    3c3a:	98 87       	std	Y+8, r25	; 0x08
    3c3c:	a9 87       	std	Y+9, r26	; 0x09
    3c3e:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    3c40:	d4 01       	movw	r26, r8
    3c42:	0d 90       	ld	r0, X+
    3c44:	00 20       	and	r0, r0
    3c46:	e9 f7       	brne	.-6      	; 0x3c42 <main+0x2068>
    3c48:	11 97       	sbiw	r26, 0x01	; 1
    3c4a:	88 e0       	ldi	r24, 0x08	; 8
    3c4c:	e2 e4       	ldi	r30, 0x42	; 66
    3c4e:	f1 e0       	ldi	r31, 0x01	; 1
    3c50:	01 90       	ld	r0, Z+
    3c52:	0d 92       	st	X+, r0
    3c54:	8a 95       	dec	r24
    3c56:	e1 f7       	brne	.-8      	; 0x3c50 <main+0x2076>
	writeLine(5, buf);
    3c58:	61 2f       	mov	r22, r17
    3c5a:	73 2d       	mov	r23, r3
    3c5c:	85 e0       	ldi	r24, 0x05	; 5
    3c5e:	63 96       	adiw	r28, 0x13	; 19
    3c60:	2f af       	std	Y+63, r18	; 0x3f
    3c62:	63 97       	sbiw	r28, 0x13	; 19
    3c64:	64 96       	adiw	r28, 0x14	; 20
    3c66:	3f af       	std	Y+63, r19	; 0x3f
    3c68:	64 97       	sbiw	r28, 0x14	; 20
    3c6a:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z9writeLinehPc>
    3c6e:	80 91 58 05 	lds	r24, 0x0558
    3c72:	63 96       	adiw	r28, 0x13	; 19
    3c74:	2f ad       	ldd	r18, Y+63	; 0x3f
    3c76:	63 97       	sbiw	r28, 0x13	; 19
    3c78:	64 96       	adiw	r28, 0x14	; 20
    3c7a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c7c:	64 97       	sbiw	r28, 0x14	; 20
    3c7e:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <main+0x1a4>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3c82:	5d 9a       	sbi	0x0b, 5	; 11
    3c84:	12 cf       	rjmp	.-476    	; 0x3aaa <main+0x1ed0>
    3c86:	5d 9a       	sbi	0x0b, 5	; 11
    3c88:	0b cf       	rjmp	.-490    	; 0x3aa0 <main+0x1ec6>
    3c8a:	5d 9a       	sbi	0x0b, 5	; 11
    3c8c:	04 cf       	rjmp	.-504    	; 0x3a96 <main+0x1ebc>
    3c8e:	5d 9a       	sbi	0x0b, 5	; 11
    3c90:	fd ce       	rjmp	.-518    	; 0x3a8c <main+0x1eb2>
    3c92:	5d 9a       	sbi	0x0b, 5	; 11
    3c94:	f6 ce       	rjmp	.-532    	; 0x3a82 <main+0x1ea8>
    3c96:	5d 9a       	sbi	0x0b, 5	; 11
    3c98:	ef ce       	rjmp	.-546    	; 0x3a78 <main+0x1e9e>
    3c9a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3c9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3c9e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3ca0:	46 ff       	sbrs	r20, 6
    3ca2:	e4 ce       	rjmp	.-568    	; 0x3a6c <main+0x1e92>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ca4:	5d 9a       	sbi	0x0b, 5	; 11
    3ca6:	e3 ce       	rjmp	.-570    	; 0x3a6e <main+0x1e94>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
			{
				menuChange[MENU_MIX][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	0c 94 ae 12 	jmp	0x255c	; 0x255c <main+0x982>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	09 ca       	rjmp	.-3054   	; 0x30c8 <main+0x14ee>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    3cb6:	8f e4       	ldi	r24, 0x4F	; 79
    3cb8:	9e e4       	ldi	r25, 0x4E	; 78
    3cba:	a0 e0       	ldi	r26, 0x00	; 0
    3cbc:	89 87       	std	Y+9, r24	; 0x09
    3cbe:	9a 87       	std	Y+10, r25	; 0x0a
    3cc0:	ab 87       	std	Y+11, r26	; 0x0b
    3cc2:	0c 94 02 12 	jmp	0x2404	; 0x2404 <main+0x82a>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
			{
				menuChange[MENU_OSC1][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	1d ca       	rjmp	.-3014   	; 0x3106 <main+0x152c>
			{
				menuChange[MENU_OSC1][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	39 ca       	rjmp	.-2958   	; 0x3144 <main+0x156a>
						lfoWaveForm = WAVE_TRI;
						menuKnobPos[MENU_LFO][3] = 171 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 511)
    3cd2:	8f 3f       	cpi	r24, 0xFF	; 255
    3cd4:	b1 e0       	ldi	r27, 0x01	; 1
    3cd6:	9b 07       	cpc	r25, r27
    3cd8:	0c f0       	brlt	.+2      	; 0x3cdc <main+0x2102>
    3cda:	ec c0       	rjmp	.+472    	; 0x3eb4 <main+0x22da>
				{
					if(lfoWaveForm != WAVE_LSAW)
    3cdc:	80 91 05 01 	lds	r24, 0x0105
    3ce0:	82 30       	cpi	r24, 0x02	; 2
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <main+0x210c>
    3ce4:	16 c9       	rjmp	.-3540   	; 0x2f12 <main+0x1338>
					{
						lfoWaveForm = WAVE_LSAW;
    3ce6:	82 e0       	ldi	r24, 0x02	; 2
    3ce8:	80 93 05 01 	sts	0x0105, r24
						menuKnobPos[MENU_LFO][3] = 341 + 85;
    3cec:	8a ea       	ldi	r24, 0xAA	; 170
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	90 93 3f 05 	sts	0x053F, r25
    3cf4:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3cf8:	87 e0       	ldi	r24, 0x07	; 7
    3cfa:	e8 e1       	ldi	r30, 0x18	; 24
    3cfc:	f1 e0       	ldi	r31, 0x01	; 1
    3cfe:	d5 01       	movw	r26, r10
    3d00:	01 90       	ld	r0, Z+
    3d02:	0d 92       	st	X+, r0
    3d04:	8a 95       	dec	r24
    3d06:	e1 f7       	brne	.-8      	; 0x3d00 <main+0x2126>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3d08:	e4 e8       	ldi	r30, 0x84	; 132
    3d0a:	f6 e0       	ldi	r31, 0x06	; 6
    3d0c:	95 cd       	rjmp	.-1238   	; 0x3838 <main+0x1c5e>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
			{
				menuChange[MENU_OSC1][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	3a ca       	rjmp	.-2956   	; 0x3188 <main+0x15ae>
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
			{
				menuChange[MENU_LFO][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	c9 c8       	rjmp	.-3694   	; 0x2eac <main+0x12d2>
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
			{
				menuChange[MENU_MIX][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <main+0x938>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0c 94 49 12 	jmp	0x2492	; 0x2492 <main+0x8b8>
			{
				menuChange[MENU_MIX][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <main+0x8f8>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	7c c8       	rjmp	.-3848   	; 0x2e30 <main+0x1256>
			{
				menuChange[MENU_LFO][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	98 c8       	rjmp	.-3792   	; 0x2e6e <main+0x1294>
						osc1WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC1][3] = 219;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3d3e:	86 3b       	cpi	r24, 0xB6	; 182
    3d40:	b1 e0       	ldi	r27, 0x01	; 1
    3d42:	9b 07       	cpc	r25, r27
    3d44:	0c f0       	brlt	.+2      	; 0x3d48 <main+0x216e>
    3d46:	68 c0       	rjmp	.+208    	; 0x3e18 <main+0x223e>
				{
					if(osc1WaveForm != WAVE_LSAW)
    3d48:	80 91 03 01 	lds	r24, 0x0103
    3d4c:	82 30       	cpi	r24, 0x02	; 2
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <main+0x2178>
    3d50:	2c ca       	rjmp	.-2984   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_LSAW;
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 365;
    3d58:	8d e6       	ldi	r24, 0x6D	; 109
    3d5a:	91 e0       	ldi	r25, 0x01	; 1
    3d5c:	16 cd       	rjmp	.-1492   	; 0x378a <main+0x1bb0>
						osc2WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC2][3] = 219;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    3d5e:	86 3b       	cpi	r24, 0xB6	; 182
    3d60:	b1 e0       	ldi	r27, 0x01	; 1
    3d62:	9b 07       	cpc	r25, r27
    3d64:	0c f0       	brlt	.+2      	; 0x3d68 <main+0x218e>
    3d66:	dd c0       	rjmp	.+442    	; 0x3f22 <main+0x2348>
				{
					if(osc2WaveForm != WAVE_LSAW)
    3d68:	80 91 02 01 	lds	r24, 0x0102
    3d6c:	82 30       	cpi	r24, 0x02	; 2
    3d6e:	11 f4       	brne	.+4      	; 0x3d74 <main+0x219a>
    3d70:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_LSAW;
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 365;
    3d7a:	8d e6       	ldi	r24, 0x6D	; 109
    3d7c:	91 e0       	ldi	r25, 0x01	; 1
    3d7e:	bc cc       	rjmp	.-1672   	; 0x36f8 <main+0x1b1e>
						osc2OctaveShift = -1;
						menuKnobPos[MENU_OSC2][0] = 205+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 615)
    3d80:	87 36       	cpi	r24, 0x67	; 103
    3d82:	a2 e0       	ldi	r26, 0x02	; 2
    3d84:	9a 07       	cpc	r25, r26
    3d86:	0c f0       	brlt	.+2      	; 0x3d8a <main+0x21b0>
    3d88:	57 c0       	rjmp	.+174    	; 0x3e38 <main+0x225e>
				{
					if(osc2OctaveShift != 0)
    3d8a:	80 91 64 05 	lds	r24, 0x0564
    3d8e:	88 23       	and	r24, r24
    3d90:	11 f4       	brne	.+4      	; 0x3d96 <main+0x21bc>
    3d92:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc2OctaveShift = 0;
    3d96:	10 92 64 05 	sts	0x0564, r1
						menuKnobPos[MENU_OSC2][0] = 410+102;
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	92 e0       	ldi	r25, 0x02	; 2
    3d9e:	90 93 31 05 	sts	0x0531, r25
    3da2:	80 93 30 05 	sts	0x0530, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3da6:	86 e0       	ldi	r24, 0x06	; 6
    3da8:	e7 e5       	ldi	r30, 0x57	; 87
    3daa:	f1 e0       	ldi	r31, 0x01	; 1
    3dac:	d5 01       	movw	r26, r10
    3dae:	01 90       	ld	r0, Z+
    3db0:	0d 92       	st	X+, r0
    3db2:	8a 95       	dec	r24
    3db4:	e1 f7       	brne	.-8      	; 0x3dae <main+0x21d4>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3db6:	1f 92       	push	r1
    3db8:	1f 92       	push	r1
    3dba:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <main+0x11c0>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <main+0xdbc>
					{
						lfoRoute = ROUTE_OSC2;
						lfoMenuRouteUpdate();
					}					
				}
				else if(adcValue[0] < 279)
    3dc6:	87 31       	cpi	r24, 0x17	; 23
    3dc8:	a1 e0       	ldi	r26, 0x01	; 1
    3dca:	9a 07       	cpc	r25, r26
    3dcc:	0c f0       	brlt	.+2      	; 0x3dd0 <main+0x21f6>
    3dce:	90 c0       	rjmp	.+288    	; 0x3ef0 <main+0x2316>
				{
					if(lfoRoute != ROUTE_CENTS1)
    3dd0:	80 91 5b 05 	lds	r24, 0x055B
    3dd4:	82 30       	cpi	r24, 0x02	; 2
    3dd6:	11 f4       	brne	.+4      	; 0x3ddc <main+0x2202>
    3dd8:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS1;
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	80 93 5b 05 	sts	0x055B, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3de2:	87 e0       	ldi	r24, 0x07	; 7
    3de4:	e6 e3       	ldi	r30, 0x36	; 54
    3de6:	f1 e0       	ldi	r31, 0x01	; 1
    3de8:	d5 01       	movw	r26, r10
    3dea:	01 90       	ld	r0, Z+
    3dec:	0d 92       	st	X+, r0
    3dee:	8a 95       	dec	r24
    3df0:	e1 f7       	brne	.-8      	; 0x3dea <main+0x2210>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3df2:	ec e6       	ldi	r30, 0x6C	; 108
    3df4:	f6 e0       	ldi	r31, 0x06	; 6
    3df6:	37 c9       	rjmp	.-3474   	; 0x3066 <main+0x148c>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
			{
				menuChange[MENU_LFO][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	79 c8       	rjmp	.-3854   	; 0x2ef0 <main+0x1316>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    3dfe:	8f e4       	ldi	r24, 0x4F	; 79
    3e00:	9e e4       	ldi	r25, 0x4E	; 78
    3e02:	a0 e0       	ldi	r26, 0x00	; 0
    3e04:	89 87       	std	Y+9, r24	; 0x09
    3e06:	9a 87       	std	Y+10, r25	; 0x0a
    3e08:	ab 87       	std	Y+11, r26	; 0x0b
    3e0a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <main+0xc4c>
			{
				if(adcValue[3] < 146)
				{
					if(osc1WaveForm != WAVE_SINE)
					{
						osc1WaveForm = WAVE_SINE;
    3e0e:	10 92 03 01 	sts	0x0103, r1
						menuKnobPos[MENU_OSC1][3] = 73;
    3e12:	89 e4       	ldi	r24, 0x49	; 73
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b9 cc       	rjmp	.-1678   	; 0x378a <main+0x1bb0>
						osc1WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC1][3] = 365;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    3e18:	88 34       	cpi	r24, 0x48	; 72
    3e1a:	22 e0       	ldi	r18, 0x02	; 2
    3e1c:	92 07       	cpc	r25, r18
    3e1e:	0c f0       	brlt	.+2      	; 0x3e22 <main+0x2248>
    3e20:	c8 c0       	rjmp	.+400    	; 0x3fb2 <main+0x23d8>
				{
					if(osc1WaveForm != WAVE_RSAW)
    3e22:	80 91 03 01 	lds	r24, 0x0103
    3e26:	83 30       	cpi	r24, 0x03	; 3
    3e28:	09 f4       	brne	.+2      	; 0x3e2c <main+0x2252>
    3e2a:	bf c9       	rjmp	.-3202   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_RSAW;
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 511;
    3e32:	8f ef       	ldi	r24, 0xFF	; 255
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	a9 cc       	rjmp	.-1710   	; 0x378a <main+0x1bb0>
						osc2OctaveShift = 0;
						menuKnobPos[MENU_OSC2][0] = 410+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 820)
    3e38:	84 33       	cpi	r24, 0x34	; 52
    3e3a:	a3 e0       	ldi	r26, 0x03	; 3
    3e3c:	9a 07       	cpc	r25, r26
    3e3e:	0c f0       	brlt	.+2      	; 0x3e42 <main+0x2268>
    3e40:	a7 c0       	rjmp	.+334    	; 0x3f90 <main+0x23b6>
				{
					if(osc2OctaveShift != 1)
    3e42:	80 91 64 05 	lds	r24, 0x0564
    3e46:	81 30       	cpi	r24, 0x01	; 1
    3e48:	11 f4       	brne	.+4      	; 0x3e4e <main+0x2274>
    3e4a:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc2OctaveShift = 1;
    3e4e:	21 e0       	ldi	r18, 0x01	; 1
    3e50:	20 93 64 05 	sts	0x0564, r18
						menuKnobPos[MENU_OSC2][0] = 615+102;
    3e54:	8d ec       	ldi	r24, 0xCD	; 205
    3e56:	92 e0       	ldi	r25, 0x02	; 2
				else if(adcValue[0] < 1023)
				{
					if(osc2OctaveShift != 2)
					{
						osc2OctaveShift = 2;
						menuKnobPos[MENU_OSC2][0] = 820+102;
    3e58:	90 93 31 05 	sts	0x0531, r25
    3e5c:	80 93 30 05 	sts	0x0530, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3e60:	86 e0       	ldi	r24, 0x06	; 6
    3e62:	e7 e5       	ldi	r30, 0x57	; 87
    3e64:	f1 e0       	ldi	r31, 0x01	; 1
    3e66:	d5 01       	movw	r26, r10
    3e68:	01 90       	ld	r0, Z+
    3e6a:	0d 92       	st	X+, r0
    3e6c:	8a 95       	dec	r24
    3e6e:	e1 f7       	brne	.-8      	; 0x3e68 <main+0x228e>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3e70:	1f 92       	push	r1
    3e72:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <main+0x11be>
			{
				if(adcValue[3] < 171)
				{
					if(lfoWaveForm != WAVE_SINE)
					{
						lfoWaveForm = WAVE_SINE;
    3e76:	10 92 05 01 	sts	0x0105, r1
						menuKnobPos[MENU_LFO][3] = 85;
    3e7a:	85 e5       	ldi	r24, 0x55	; 85
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	90 93 3f 05 	sts	0x053F, r25
    3e82:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3e86:	87 e0       	ldi	r24, 0x07	; 7
    3e88:	e8 e1       	ldi	r30, 0x18	; 24
    3e8a:	f1 e0       	ldi	r31, 0x01	; 1
    3e8c:	d5 01       	movw	r26, r10
    3e8e:	01 90       	ld	r0, Z+
    3e90:	0d 92       	st	X+, r0
    3e92:	8a 95       	dec	r24
    3e94:	e1 f7       	brne	.-8      	; 0x3e8e <main+0x22b4>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3e96:	e0 e8       	ldi	r30, 0x80	; 128
    3e98:	f6 e0       	ldi	r31, 0x06	; 6
    3e9a:	ce cc       	rjmp	.-1636   	; 0x3838 <main+0x1c5e>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    3e9c:	8f e4       	ldi	r24, 0x4F	; 79
    3e9e:	9e e4       	ldi	r25, 0x4E	; 78
    3ea0:	a0 e0       	ldi	r26, 0x00	; 0
    3ea2:	8f 83       	std	Y+7, r24	; 0x07
    3ea4:	98 87       	std	Y+8, r25	; 0x08
    3ea6:	a9 87       	std	Y+9, r26	; 0x09
    3ea8:	cb ce       	rjmp	.-618    	; 0x3c40 <main+0x2066>
			{
				if(adcValue[3] < 146)
				{
					if(osc2WaveForm != WAVE_SINE)
					{
						osc2WaveForm = WAVE_SINE;
    3eaa:	10 92 02 01 	sts	0x0102, r1
						menuKnobPos[MENU_OSC2][3] = 73;
    3eae:	89 e4       	ldi	r24, 0x49	; 73
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	22 cc       	rjmp	.-1980   	; 0x36f8 <main+0x1b1e>
						lfoWaveForm = WAVE_LSAW;
						menuKnobPos[MENU_LFO][3] = 341 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 682)
    3eb4:	8a 3a       	cpi	r24, 0xAA	; 170
    3eb6:	22 e0       	ldi	r18, 0x02	; 2
    3eb8:	92 07       	cpc	r25, r18
    3eba:	0c f0       	brlt	.+2      	; 0x3ebe <main+0x22e4>
    3ebc:	4a c0       	rjmp	.+148    	; 0x3f52 <main+0x2378>
				{
					if(lfoWaveForm != WAVE_RSAW)
    3ebe:	80 91 05 01 	lds	r24, 0x0105
    3ec2:	83 30       	cpi	r24, 0x03	; 3
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <main+0x22ee>
    3ec6:	25 c8       	rjmp	.-4022   	; 0x2f12 <main+0x1338>
					{
						lfoWaveForm = WAVE_RSAW;
    3ec8:	83 e0       	ldi	r24, 0x03	; 3
    3eca:	80 93 05 01 	sts	0x0105, r24
						menuKnobPos[MENU_LFO][3] = 511 + 85;
    3ece:	84 e5       	ldi	r24, 0x54	; 84
    3ed0:	92 e0       	ldi	r25, 0x02	; 2
    3ed2:	90 93 3f 05 	sts	0x053F, r25
    3ed6:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3eda:	87 e0       	ldi	r24, 0x07	; 7
    3edc:	e8 e1       	ldi	r30, 0x18	; 24
    3ede:	f1 e0       	ldi	r31, 0x01	; 1
    3ee0:	d5 01       	movw	r26, r10
    3ee2:	01 90       	ld	r0, Z+
    3ee4:	0d 92       	st	X+, r0
    3ee6:	8a 95       	dec	r24
    3ee8:	e1 f7       	brne	.-8      	; 0x3ee2 <main+0x2308>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3eea:	e6 e8       	ldi	r30, 0x86	; 134
    3eec:	f6 e0       	ldi	r31, 0x06	; 6
    3eee:	a4 cc       	rjmp	.-1720   	; 0x3838 <main+0x1c5e>
					{
						lfoRoute = ROUTE_CENTS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 372)
    3ef0:	84 37       	cpi	r24, 0x74	; 116
    3ef2:	b1 e0       	ldi	r27, 0x01	; 1
    3ef4:	9b 07       	cpc	r25, r27
    3ef6:	0c f0       	brlt	.+2      	; 0x3efa <main+0x2320>
    3ef8:	9c c0       	rjmp	.+312    	; 0x4032 <main+0x2458>
				{
					if(lfoRoute != ROUTE_CENTS2)
    3efa:	80 91 5b 05 	lds	r24, 0x055B
    3efe:	83 30       	cpi	r24, 0x03	; 3
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <main+0x232c>
    3f02:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS2;
    3f06:	83 e0       	ldi	r24, 0x03	; 3
    3f08:	80 93 5b 05 	sts	0x055B, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3f0c:	87 e0       	ldi	r24, 0x07	; 7
    3f0e:	e6 e3       	ldi	r30, 0x36	; 54
    3f10:	f1 e0       	ldi	r31, 0x01	; 1
    3f12:	d5 01       	movw	r26, r10
    3f14:	01 90       	ld	r0, Z+
    3f16:	0d 92       	st	X+, r0
    3f18:	8a 95       	dec	r24
    3f1a:	e1 f7       	brne	.-8      	; 0x3f14 <main+0x233a>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3f1c:	ee e6       	ldi	r30, 0x6E	; 110
    3f1e:	f6 e0       	ldi	r31, 0x06	; 6
    3f20:	a2 c8       	rjmp	.-3772   	; 0x3066 <main+0x148c>
						osc2WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC2][3] = 365;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    3f22:	88 34       	cpi	r24, 0x48	; 72
    3f24:	22 e0       	ldi	r18, 0x02	; 2
    3f26:	92 07       	cpc	r25, r18
    3f28:	0c f0       	brlt	.+2      	; 0x3f2c <main+0x2352>
    3f2a:	52 c0       	rjmp	.+164    	; 0x3fd0 <main+0x23f6>
				{
					if(osc2WaveForm != WAVE_RSAW)
    3f2c:	80 91 02 01 	lds	r24, 0x0102
    3f30:	83 30       	cpi	r24, 0x03	; 3
    3f32:	11 f4       	brne	.+4      	; 0x3f38 <main+0x235e>
    3f34:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_RSAW;
    3f38:	83 e0       	ldi	r24, 0x03	; 3
    3f3a:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 511;
    3f3e:	8f ef       	ldi	r24, 0xFF	; 255
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	da cb       	rjmp	.-2124   	; 0x36f8 <main+0x1b1e>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    3f44:	8f e4       	ldi	r24, 0x4F	; 79
    3f46:	9e e4       	ldi	r25, 0x4E	; 78
    3f48:	a0 e0       	ldi	r26, 0x00	; 0
    3f4a:	8f 83       	std	Y+7, r24	; 0x07
    3f4c:	98 87       	std	Y+8, r25	; 0x08
    3f4e:	a9 87       	std	Y+9, r26	; 0x09
    3f50:	a5 cb       	rjmp	.-2230   	; 0x369c <main+0x1ac2>
						lfoWaveForm = WAVE_RSAW;
						menuKnobPos[MENU_LFO][3] = 511 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 852)
    3f52:	84 35       	cpi	r24, 0x54	; 84
    3f54:	43 e0       	ldi	r20, 0x03	; 3
    3f56:	94 07       	cpc	r25, r20
    3f58:	0c f0       	brlt	.+2      	; 0x3f5c <main+0x2382>
    3f5a:	84 c0       	rjmp	.+264    	; 0x4064 <main+0x248a>
				{
					if(lfoWaveForm != WAVE_SQU)
    3f5c:	80 91 05 01 	lds	r24, 0x0105
    3f60:	84 30       	cpi	r24, 0x04	; 4
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <main+0x238e>
    3f64:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <main+0x1338>
					{
						lfoWaveForm = WAVE_SQU;
    3f68:	84 e0       	ldi	r24, 0x04	; 4
    3f6a:	80 93 05 01 	sts	0x0105, r24
						menuKnobPos[MENU_LFO][3] = 682 + 85;
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	92 e0       	ldi	r25, 0x02	; 2
    3f72:	90 93 3f 05 	sts	0x053F, r25
    3f76:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3f7a:	87 e0       	ldi	r24, 0x07	; 7
    3f7c:	e8 e1       	ldi	r30, 0x18	; 24
    3f7e:	f1 e0       	ldi	r31, 0x01	; 1
    3f80:	d5 01       	movw	r26, r10
    3f82:	01 90       	ld	r0, Z+
    3f84:	0d 92       	st	X+, r0
    3f86:	8a 95       	dec	r24
    3f88:	e1 f7       	brne	.-8      	; 0x3f82 <main+0x23a8>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3f8a:	e8 e8       	ldi	r30, 0x88	; 136
    3f8c:	f6 e0       	ldi	r31, 0x06	; 6
    3f8e:	54 cc       	rjmp	.-1880   	; 0x3838 <main+0x1c5e>
						osc2OctaveShift = 1;
						menuKnobPos[MENU_OSC2][0] = 615+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    3f90:	8f 3f       	cpi	r24, 0xFF	; 255
    3f92:	93 40       	sbci	r25, 0x03	; 3
    3f94:	14 f0       	brlt	.+4      	; 0x3f9a <main+0x23c0>
    3f96:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
				{
					if(osc2OctaveShift != 2)
    3f9a:	80 91 64 05 	lds	r24, 0x0564
    3f9e:	82 30       	cpi	r24, 0x02	; 2
    3fa0:	11 f4       	brne	.+4      	; 0x3fa6 <main+0x23cc>
    3fa2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						osc2OctaveShift = 2;
    3fa6:	22 e0       	ldi	r18, 0x02	; 2
    3fa8:	20 93 64 05 	sts	0x0564, r18
						menuKnobPos[MENU_OSC2][0] = 820+102;
    3fac:	8a e9       	ldi	r24, 0x9A	; 154
    3fae:	93 e0       	ldi	r25, 0x03	; 3
    3fb0:	53 cf       	rjmp	.-346    	; 0x3e58 <main+0x227e>
						osc1WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC1][3] = 511;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    3fb2:	8a 3d       	cpi	r24, 0xDA	; 218
    3fb4:	42 e0       	ldi	r20, 0x02	; 2
    3fb6:	94 07       	cpc	r25, r20
    3fb8:	dc f4       	brge	.+54     	; 0x3ff0 <main+0x2416>
				{
					if(osc1WaveForm != WAVE_SQU)
    3fba:	80 91 03 01 	lds	r24, 0x0103
    3fbe:	84 30       	cpi	r24, 0x04	; 4
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <main+0x23ea>
    3fc2:	f3 c8       	rjmp	.-3610   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_SQU;
    3fc4:	84 e0       	ldi	r24, 0x04	; 4
    3fc6:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
    3fca:	81 e9       	ldi	r24, 0x91	; 145
    3fcc:	92 e0       	ldi	r25, 0x02	; 2
    3fce:	dd cb       	rjmp	.-2118   	; 0x378a <main+0x1bb0>
						osc2WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC2][3] = 511;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    3fd0:	8a 3d       	cpi	r24, 0xDA	; 218
    3fd2:	42 e0       	ldi	r20, 0x02	; 2
    3fd4:	94 07       	cpc	r25, r20
    3fd6:	e4 f4       	brge	.+56     	; 0x4010 <main+0x2436>
				{
					if(osc2WaveForm != WAVE_SQU)
    3fd8:	80 91 02 01 	lds	r24, 0x0102
    3fdc:	84 30       	cpi	r24, 0x04	; 4
    3fde:	11 f4       	brne	.+4      	; 0x3fe4 <main+0x240a>
    3fe0:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_SQU;
    3fe4:	84 e0       	ldi	r24, 0x04	; 4
    3fe6:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
    3fea:	81 e9       	ldi	r24, 0x91	; 145
    3fec:	92 e0       	ldi	r25, 0x02	; 2
    3fee:	84 cb       	rjmp	.-2296   	; 0x36f8 <main+0x1b1e>
						osc1WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    3ff0:	8c 36       	cpi	r24, 0x6C	; 108
    3ff2:	53 e0       	ldi	r21, 0x03	; 3
    3ff4:	95 07       	cpc	r25, r21
    3ff6:	0c f0       	brlt	.+2      	; 0x3ffa <main+0x2420>
    3ff8:	6d c0       	rjmp	.+218    	; 0x40d4 <main+0x24fa>
				{
					if(osc1WaveForm != WAVE_NOISE)
    3ffa:	80 91 03 01 	lds	r24, 0x0103
    3ffe:	85 30       	cpi	r24, 0x05	; 5
    4000:	09 f4       	brne	.+2      	; 0x4004 <main+0x242a>
    4002:	d3 c8       	rjmp	.-3674   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_NOISE;
    4004:	85 e0       	ldi	r24, 0x05	; 5
    4006:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
    400a:	83 e2       	ldi	r24, 0x23	; 35
    400c:	93 e0       	ldi	r25, 0x03	; 3
    400e:	bd cb       	rjmp	.-2182   	; 0x378a <main+0x1bb0>
						osc2WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    4010:	8c 36       	cpi	r24, 0x6C	; 108
    4012:	53 e0       	ldi	r21, 0x03	; 3
    4014:	95 07       	cpc	r25, r21
    4016:	0c f0       	brlt	.+2      	; 0x401a <main+0x2440>
    4018:	6c c0       	rjmp	.+216    	; 0x40f2 <main+0x2518>
				{
					if(osc2WaveForm != WAVE_NOISE)
    401a:	80 91 02 01 	lds	r24, 0x0102
    401e:	85 30       	cpi	r24, 0x05	; 5
    4020:	11 f4       	brne	.+4      	; 0x4026 <main+0x244c>
    4022:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_NOISE;
    4026:	85 e0       	ldi	r24, 0x05	; 5
    4028:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
    402c:	83 e2       	ldi	r24, 0x23	; 35
    402e:	93 e0       	ldi	r25, 0x03	; 3
    4030:	63 cb       	rjmp	.-2362   	; 0x36f8 <main+0x1b1e>
					{
						lfoRoute = ROUTE_CENTS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 465)
    4032:	81 3d       	cpi	r24, 0xD1	; 209
    4034:	21 e0       	ldi	r18, 0x01	; 1
    4036:	92 07       	cpc	r25, r18
    4038:	a4 f5       	brge	.+104    	; 0x40a2 <main+0x24c8>
				{
					if(lfoRoute != ROUTE_SEMIS1)
    403a:	80 91 5b 05 	lds	r24, 0x055B
    403e:	84 30       	cpi	r24, 0x04	; 4
    4040:	11 f4       	brne	.+4      	; 0x4046 <main+0x246c>
    4042:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS1;
    4046:	84 e0       	ldi	r24, 0x04	; 4
    4048:	80 93 5b 05 	sts	0x055B, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    404c:	87 e0       	ldi	r24, 0x07	; 7
    404e:	e6 e3       	ldi	r30, 0x36	; 54
    4050:	f1 e0       	ldi	r31, 0x01	; 1
    4052:	d5 01       	movw	r26, r10
    4054:	01 90       	ld	r0, Z+
    4056:	0d 92       	st	X+, r0
    4058:	8a 95       	dec	r24
    405a:	e1 f7       	brne	.-8      	; 0x4054 <main+0x247a>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    405c:	e0 e7       	ldi	r30, 0x70	; 112
    405e:	f6 e0       	ldi	r31, 0x06	; 6
    4060:	0c 94 33 18 	jmp	0x3066	; 0x3066 <main+0x148c>
						lfoWaveForm = WAVE_SQU;
						menuKnobPos[MENU_LFO][3] = 682 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    4064:	8f 3f       	cpi	r24, 0xFF	; 255
    4066:	93 40       	sbci	r25, 0x03	; 3
    4068:	14 f0       	brlt	.+4      	; 0x406e <main+0x2494>
    406a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <main+0x1338>
				{
					if(lfoWaveForm != WAVE_FLAT)
    406e:	80 91 05 01 	lds	r24, 0x0105
    4072:	86 30       	cpi	r24, 0x06	; 6
    4074:	11 f4       	brne	.+4      	; 0x407a <main+0x24a0>
    4076:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <main+0x1338>
					{
						lfoWaveForm = WAVE_FLAT;
    407a:	86 e0       	ldi	r24, 0x06	; 6
    407c:	80 93 05 01 	sts	0x0105, r24
						menuKnobPos[MENU_LFO][3] = 852 + 85;
    4080:	89 ea       	ldi	r24, 0xA9	; 169
    4082:	93 e0       	ldi	r25, 0x03	; 3
    4084:	90 93 3f 05 	sts	0x053F, r25
    4088:	80 93 3e 05 	sts	0x053E, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    408c:	87 e0       	ldi	r24, 0x07	; 7
    408e:	e8 e1       	ldi	r30, 0x18	; 24
    4090:	f1 e0       	ldi	r31, 0x01	; 1
    4092:	d5 01       	movw	r26, r10
    4094:	01 90       	ld	r0, Z+
    4096:	0d 92       	st	X+, r0
    4098:	8a 95       	dec	r24
    409a:	e1 f7       	brne	.-8      	; 0x4094 <main+0x24ba>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    409c:	ec e8       	ldi	r30, 0x8C	; 140
    409e:	f6 e0       	ldi	r31, 0x06	; 6
    40a0:	cb cb       	rjmp	.-2154   	; 0x3838 <main+0x1c5e>
					{
						lfoRoute = ROUTE_SEMIS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 558)
    40a2:	8e 32       	cpi	r24, 0x2E	; 46
    40a4:	42 e0       	ldi	r20, 0x02	; 2
    40a6:	94 07       	cpc	r25, r20
    40a8:	ac f5       	brge	.+106    	; 0x4114 <main+0x253a>
				{
					if(lfoRoute != ROUTE_SEMIS2)
    40aa:	80 91 5b 05 	lds	r24, 0x055B
    40ae:	85 30       	cpi	r24, 0x05	; 5
    40b0:	11 f4       	brne	.+4      	; 0x40b6 <main+0x24dc>
    40b2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS2;
    40b6:	55 e0       	ldi	r21, 0x05	; 5
    40b8:	50 93 5b 05 	sts	0x055B, r21

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    40bc:	87 e0       	ldi	r24, 0x07	; 7
    40be:	e6 e3       	ldi	r30, 0x36	; 54
    40c0:	f1 e0       	ldi	r31, 0x01	; 1
    40c2:	d5 01       	movw	r26, r10
    40c4:	01 90       	ld	r0, Z+
    40c6:	0d 92       	st	X+, r0
    40c8:	8a 95       	dec	r24
    40ca:	e1 f7       	brne	.-8      	; 0x40c4 <main+0x24ea>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    40cc:	e2 e7       	ldi	r30, 0x72	; 114
    40ce:	f6 e0       	ldi	r31, 0x06	; 6
    40d0:	0c 94 33 18 	jmp	0x3066	; 0x3066 <main+0x148c>
						osc1WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    40d4:	8f 3f       	cpi	r24, 0xFF	; 255
    40d6:	93 40       	sbci	r25, 0x03	; 3
    40d8:	0c f0       	brlt	.+2      	; 0x40dc <main+0x2502>
    40da:	67 c8       	rjmp	.-3890   	; 0x31aa <main+0x15d0>
				{
					if(osc1WaveForm != WAVE_FLAT)
    40dc:	80 91 03 01 	lds	r24, 0x0103
    40e0:	86 30       	cpi	r24, 0x06	; 6
    40e2:	09 f4       	brne	.+2      	; 0x40e6 <main+0x250c>
    40e4:	62 c8       	rjmp	.-3900   	; 0x31aa <main+0x15d0>
					{
						osc1WaveForm = WAVE_FLAT;
    40e6:	86 e0       	ldi	r24, 0x06	; 6
    40e8:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    40ec:	85 eb       	ldi	r24, 0xB5	; 181
    40ee:	93 e0       	ldi	r25, 0x03	; 3
    40f0:	4c cb       	rjmp	.-2408   	; 0x378a <main+0x1bb0>
						osc2WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    40f2:	8f 3f       	cpi	r24, 0xFF	; 255
    40f4:	93 40       	sbci	r25, 0x03	; 3
    40f6:	14 f0       	brlt	.+4      	; 0x40fc <main+0x2522>
    40f8:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
				{
					if(osc2WaveForm != WAVE_FLAT)
    40fc:	80 91 02 01 	lds	r24, 0x0102
    4100:	86 30       	cpi	r24, 0x06	; 6
    4102:	11 f4       	brne	.+4      	; 0x4108 <main+0x252e>
    4104:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0xe8c>
					{
						osc2WaveForm = WAVE_FLAT;
    4108:	86 e0       	ldi	r24, 0x06	; 6
    410a:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    410e:	85 eb       	ldi	r24, 0xB5	; 181
    4110:	93 e0       	ldi	r25, 0x03	; 3
    4112:	f2 ca       	rjmp	.-2588   	; 0x36f8 <main+0x1b1e>
					{
						lfoRoute = ROUTE_SEMIS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 651)
    4114:	8b 38       	cpi	r24, 0x8B	; 139
    4116:	a2 e0       	ldi	r26, 0x02	; 2
    4118:	9a 07       	cpc	r25, r26
    411a:	ac f4       	brge	.+42     	; 0x4146 <main+0x256c>
				{
					if(lfoRoute != ROUTE_PHASE1)
    411c:	80 91 5b 05 	lds	r24, 0x055B
    4120:	86 30       	cpi	r24, 0x06	; 6
    4122:	11 f4       	brne	.+4      	; 0x4128 <main+0x254e>
    4124:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE1;
    4128:	86 e0       	ldi	r24, 0x06	; 6
    412a:	80 93 5b 05 	sts	0x055B, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    412e:	87 e0       	ldi	r24, 0x07	; 7
    4130:	e6 e3       	ldi	r30, 0x36	; 54
    4132:	f1 e0       	ldi	r31, 0x01	; 1
    4134:	d5 01       	movw	r26, r10
    4136:	01 90       	ld	r0, Z+
    4138:	0d 92       	st	X+, r0
    413a:	8a 95       	dec	r24
    413c:	e1 f7       	brne	.-8      	; 0x4136 <main+0x255c>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    413e:	e4 e7       	ldi	r30, 0x74	; 116
    4140:	f6 e0       	ldi	r31, 0x06	; 6
    4142:	0c 94 33 18 	jmp	0x3066	; 0x3066 <main+0x148c>
					{
						lfoRoute = ROUTE_PHASE1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 744)
    4146:	88 3e       	cpi	r24, 0xE8	; 232
    4148:	b2 e0       	ldi	r27, 0x02	; 2
    414a:	9b 07       	cpc	r25, r27
    414c:	6c f4       	brge	.+26     	; 0x4168 <main+0x258e>
				{
					if(lfoRoute != ROUTE_PHASE2)
    414e:	80 91 5b 05 	lds	r24, 0x055B
    4152:	87 30       	cpi	r24, 0x07	; 7
    4154:	11 f4       	brne	.+4      	; 0x415a <main+0x2580>
    4156:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE2;
    415a:	87 e0       	ldi	r24, 0x07	; 7
    415c:	80 93 5b 05 	sts	0x055B, r24
						lfoMenuRouteUpdate();
    4160:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    4164:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					}
				}
				else if(adcValue[0] < 837)
    4168:	85 34       	cpi	r24, 0x45	; 69
    416a:	23 e0       	ldi	r18, 0x03	; 3
    416c:	92 07       	cpc	r25, r18
    416e:	6c f4       	brge	.+26     	; 0x418a <main+0x25b0>
				{
					if(lfoRoute != ROUTE_WAVE1)
    4170:	80 91 5b 05 	lds	r24, 0x055B
    4174:	88 30       	cpi	r24, 0x08	; 8
    4176:	11 f4       	brne	.+4      	; 0x417c <main+0x25a2>
    4178:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE1;
    417c:	88 e0       	ldi	r24, 0x08	; 8
    417e:	80 93 5b 05 	sts	0x055B, r24
						lfoMenuRouteUpdate();
    4182:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    4186:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					}
				}
				else if(adcValue[0] < 930)
    418a:	82 3a       	cpi	r24, 0xA2	; 162
    418c:	43 e0       	ldi	r20, 0x03	; 3
    418e:	94 07       	cpc	r25, r20
    4190:	6c f4       	brge	.+26     	; 0x41ac <main+0x25d2>
				{
					if(lfoRoute != ROUTE_WAVE2)
    4192:	80 91 5b 05 	lds	r24, 0x055B
    4196:	89 30       	cpi	r24, 0x09	; 9
    4198:	11 f4       	brne	.+4      	; 0x419e <main+0x25c4>
    419a:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE2;
    419e:	89 e0       	ldi	r24, 0x09	; 9
    41a0:	80 93 5b 05 	sts	0x055B, r24
						lfoMenuRouteUpdate();
    41a4:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    41a8:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					}
				}
				else if(adcValue[0] < 1023)
    41ac:	8f 3f       	cpi	r24, 0xFF	; 255
    41ae:	93 40       	sbci	r25, 0x03	; 3
    41b0:	14 f0       	brlt	.+4      	; 0x41b6 <main+0x25dc>
    41b2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
				{
					if(lfoRoute != ROUTE_CUTOFF)
    41b6:	80 91 5b 05 	lds	r24, 0x055B
    41ba:	8a 30       	cpi	r24, 0x0A	; 10
    41bc:	11 f4       	brne	.+4      	; 0x41c2 <main+0x25e8>
    41be:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>
					{
						lfoRoute = ROUTE_CUTOFF;
    41c2:	8a e0       	ldi	r24, 0x0A	; 10
    41c4:	80 93 5b 05 	sts	0x055B, r24
						lfoMenuRouteUpdate();
    41c8:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z18lfoMenuRouteUpdatev>
    41cc:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <main+0x158>

000041d0 <__vector_18>:
		lfsrState ^= 0xB400;
	}
}

ISR(USART_RX_vect)
{
    41d0:	1f 92       	push	r1
    41d2:	0f 92       	push	r0
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	0f 92       	push	r0
    41d8:	11 24       	eor	r1, r1
    41da:	4f 92       	push	r4
    41dc:	5f 92       	push	r5
    41de:	6f 92       	push	r6
    41e0:	7f 92       	push	r7
    41e2:	8f 92       	push	r8
    41e4:	9f 92       	push	r9
    41e6:	af 92       	push	r10
    41e8:	bf 92       	push	r11
    41ea:	cf 92       	push	r12
    41ec:	df 92       	push	r13
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	2f 93       	push	r18
    41f6:	3f 93       	push	r19
    41f8:	4f 93       	push	r20
    41fa:	5f 93       	push	r21
    41fc:	6f 93       	push	r22
    41fe:	7f 93       	push	r23
    4200:	8f 93       	push	r24
    4202:	9f 93       	push	r25
    4204:	af 93       	push	r26
    4206:	bf 93       	push	r27
    4208:	ef 93       	push	r30
    420a:	ff 93       	push	r31
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
    4214:	28 97       	sbiw	r28, 0x08	; 8
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg = UDR0;
    421a:	80 91 c6 00 	lds	r24, 0x00C6
	
	if(msg & 0x80) //New command
    421e:	87 fd       	sbrc	r24, 7
    4220:	49 c0       	rjmp	.+146    	; 0x42b4 <__vector_18+0xe4>
		
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
    4222:	90 91 91 05 	lds	r25, 0x0591
    4226:	e9 2f       	mov	r30, r25
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	ee 56       	subi	r30, 0x6E	; 110
    422c:	fa 4f       	sbci	r31, 0xFA	; 250
    422e:	80 83       	st	Z, r24
		commandCount++;
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	89 0f       	add	r24, r25
    4234:	80 93 91 05 	sts	0x0591, r24
		
		if(commandCount == 3)
    4238:	83 30       	cpi	r24, 0x03	; 3
    423a:	31 f1       	breq	.+76     	; 0x4288 <__vector_18+0xb8>
				}
				break;
			}
		}
	}
}
    423c:	28 96       	adiw	r28, 0x08	; 8
    423e:	0f b6       	in	r0, 0x3f	; 63
    4240:	f8 94       	cli
    4242:	de bf       	out	0x3e, r29	; 62
    4244:	0f be       	out	0x3f, r0	; 63
    4246:	cd bf       	out	0x3d, r28	; 61
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	ff 91       	pop	r31
    424e:	ef 91       	pop	r30
    4250:	bf 91       	pop	r27
    4252:	af 91       	pop	r26
    4254:	9f 91       	pop	r25
    4256:	8f 91       	pop	r24
    4258:	7f 91       	pop	r23
    425a:	6f 91       	pop	r22
    425c:	5f 91       	pop	r21
    425e:	4f 91       	pop	r20
    4260:	3f 91       	pop	r19
    4262:	2f 91       	pop	r18
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	df 90       	pop	r13
    426c:	cf 90       	pop	r12
    426e:	bf 90       	pop	r11
    4270:	af 90       	pop	r10
    4272:	9f 90       	pop	r9
    4274:	8f 90       	pop	r8
    4276:	7f 90       	pop	r7
    4278:	6f 90       	pop	r6
    427a:	5f 90       	pop	r5
    427c:	4f 90       	pop	r4
    427e:	0f 90       	pop	r0
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	0f 90       	pop	r0
    4284:	1f 90       	pop	r1
    4286:	18 95       	reti
		commandBytes[commandCount] = msg;
		commandCount++;
		
		if(commandCount == 3)
		{
			commandCount = 1;
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	90 93 91 05 	sts	0x0591, r25
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    428e:	80 91 92 05 	lds	r24, 0x0592
    4292:	80 39       	cpi	r24, 0x90	; 144
    4294:	b1 f0       	breq	.+44     	; 0x42c2 <__vector_18+0xf2>
				commandBytes[0] = NOTE_OFF;

			switch(commandBytes[0])
    4296:	80 38       	cpi	r24, 0x80	; 128
    4298:	89 f6       	brne	.-94     	; 0x423c <__vector_18+0x6c>
				noteUpdate();
				break;
				
				case NOTE_OFF:
				//writeLine(1, "NOTE OFF   ");
				if(playThisNote == commandBytes[1] - MIDI_OFFSET)
    429a:	20 91 04 01 	lds	r18, 0x0104
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	80 91 93 05 	lds	r24, 0x0593
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	45 97       	sbiw	r24, 0x15	; 21
    42a8:	28 17       	cp	r18, r24
    42aa:	39 07       	cpc	r19, r25
    42ac:	39 f6       	brne	.-114    	; 0x423c <__vector_18+0x6c>
				{
					notePlaying = false;
    42ae:	10 92 03 05 	sts	0x0503, r1
    42b2:	c4 cf       	rjmp	.-120    	; 0x423c <__vector_18+0x6c>
{
	unsigned char msg = UDR0;
	
	if(msg & 0x80) //New command
	{
		commandBytes[0] = msg & 0xF0;
    42b4:	80 7f       	andi	r24, 0xF0	; 240
    42b6:	80 93 92 05 	sts	0x0592, r24
		
		commandCount = 1;
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	80 93 91 05 	sts	0x0591, r24
    42c0:	bd cf       	rjmp	.-134    	; 0x423c <__vector_18+0x6c>
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    42c2:	80 91 94 05 	lds	r24, 0x0594
    42c6:	81 11       	cpse	r24, r1
    42c8:	04 c0       	rjmp	.+8      	; 0x42d2 <__vector_18+0x102>
				commandBytes[0] = NOTE_OFF;
    42ca:	80 e8       	ldi	r24, 0x80	; 128
    42cc:	80 93 92 05 	sts	0x0592, r24
    42d0:	e4 cf       	rjmp	.-56     	; 0x429a <__vector_18+0xca>

			switch(commandBytes[0])
			{
				case NOTE_ON:
				//writeLine(1, "NOTE ON   ");
				playThisNote = commandBytes[1] - MIDI_OFFSET;
    42d2:	80 91 93 05 	lds	r24, 0x0593
    42d6:	85 51       	subi	r24, 0x15	; 21
    42d8:	80 93 04 01 	sts	0x0104, r24
				notePlaying = true;
    42dc:	90 93 03 05 	sts	0x0503, r25
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
    42e0:	80 91 04 01 	lds	r24, 0x0104
    42e4:	e0 91 7b 05 	lds	r30, 0x057B
    42e8:	ff 27       	eor	r31, r31
    42ea:	e7 fd       	sbrc	r30, 7
    42ec:	f0 95       	com	r31
    42ee:	e8 0f       	add	r30, r24
    42f0:	f1 1d       	adc	r31, r1
    42f2:	ee 0f       	add	r30, r30
    42f4:	ff 1f       	adc	r31, r31
    42f6:	ee 0f       	add	r30, r30
    42f8:	ff 1f       	adc	r31, r31
    42fa:	ee 55       	subi	r30, 0x5E	; 94
    42fc:	fe 4f       	sbci	r31, 0xFE	; 254
    42fe:	c0 80       	ld	r12, Z
    4300:	d1 80       	ldd	r13, Z+1	; 0x01
    4302:	e2 80       	ldd	r14, Z+2	; 0x02
    4304:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];
    4306:	90 91 04 01 	lds	r25, 0x0104
    430a:	80 91 64 05 	lds	r24, 0x0564
    430e:	e0 91 65 05 	lds	r30, 0x0565
    4312:	ff 27       	eor	r31, r31
    4314:	e7 fd       	sbrc	r30, 7
    4316:	f0 95       	com	r31
    4318:	e9 0f       	add	r30, r25
    431a:	f1 1d       	adc	r31, r1
    431c:	9c e0       	ldi	r25, 0x0C	; 12
    431e:	89 02       	muls	r24, r25
    4320:	e0 0d       	add	r30, r0
    4322:	f1 1d       	adc	r31, r1
    4324:	11 24       	eor	r1, r1
    4326:	ee 0f       	add	r30, r30
    4328:	ff 1f       	adc	r31, r31
    432a:	ee 0f       	add	r30, r30
    432c:	ff 1f       	adc	r31, r31
    432e:	ee 55       	subi	r30, 0x5E	; 94
    4330:	fe 4f       	sbci	r31, 0xFE	; 254
    4332:	80 80       	ld	r8, Z
    4334:	91 80       	ldd	r9, Z+1	; 0x01
    4336:	a2 80       	ldd	r10, Z+2	; 0x02
    4338:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    433a:	60 91 7c 05 	lds	r22, 0x057C
    433e:	a7 e2       	ldi	r26, 0x27	; 39
    4340:	6a 02       	muls	r22, r26
    4342:	b0 01       	movw	r22, r0
    4344:	11 24       	eor	r1, r1
    4346:	88 27       	eor	r24, r24
    4348:	77 fd       	sbrc	r23, 7
    434a:	80 95       	com	r24
    434c:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    434e:	a7 01       	movw	r20, r14
    4350:	96 01       	movw	r18, r12
    4352:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4356:	00 e1       	ldi	r16, 0x10	; 16
    4358:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    435c:	29 83       	std	Y+1, r18	; 0x01
    435e:	3a 83       	std	Y+2, r19	; 0x02
    4360:	4b 83       	std	Y+3, r20	; 0x03
    4362:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[playThisNote + osc1SemisShift];
	osc2Freq = keyFreq[playThisNote + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	9a 81       	ldd	r25, Y+2	; 0x02
    4368:	ab 81       	ldd	r26, Y+3	; 0x03
    436a:	bc 81       	ldd	r27, Y+4	; 0x04
    436c:	c8 0e       	add	r12, r24
    436e:	d9 1e       	adc	r13, r25
    4370:	ea 1e       	adc	r14, r26
    4372:	fb 1e       	adc	r15, r27
    4374:	c0 92 8d 05 	sts	0x058D, r12
    4378:	d0 92 8e 05 	sts	0x058E, r13
    437c:	e0 92 8f 05 	sts	0x058F, r14
    4380:	f0 92 90 05 	sts	0x0590, r15

	centsConst = 0x27*osc2CentsShift;
    4384:	20 91 66 05 	lds	r18, 0x0566
    4388:	97 e2       	ldi	r25, 0x27	; 39
    438a:	29 02       	muls	r18, r25
    438c:	90 01       	movw	r18, r0
    438e:	11 24       	eor	r1, r1
    4390:	44 27       	eor	r20, r20
    4392:	37 fd       	sbrc	r19, 7
    4394:	40 95       	com	r20
    4396:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4398:	c5 01       	movw	r24, r10
    439a:	b4 01       	movw	r22, r8
    439c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    43a0:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    43a4:	29 83       	std	Y+1, r18	; 0x01
    43a6:	3a 83       	std	Y+2, r19	; 0x02
    43a8:	4b 83       	std	Y+3, r20	; 0x03
    43aa:	5c 83       	std	Y+4, r21	; 0x04
    43ac:	6d 83       	std	Y+5, r22	; 0x05
    43ae:	7e 83       	std	Y+6, r23	; 0x06
    43b0:	8f 83       	std	Y+7, r24	; 0x07
    43b2:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	9a 81       	ldd	r25, Y+2	; 0x02
    43b8:	ab 81       	ldd	r26, Y+3	; 0x03
    43ba:	bc 81       	ldd	r27, Y+4	; 0x04
    43bc:	88 0e       	add	r8, r24
    43be:	99 1e       	adc	r9, r25
    43c0:	aa 1e       	adc	r10, r26
    43c2:	bb 1e       	adc	r11, r27
    43c4:	80 92 6f 05 	sts	0x056F, r8
    43c8:	90 92 70 05 	sts	0x0570, r9
    43cc:	a0 92 71 05 	sts	0x0571, r10
    43d0:	b0 92 72 05 	sts	0x0572, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    43d4:	40 90 0c 05 	lds	r4, 0x050C
    43d8:	50 90 0d 05 	lds	r5, 0x050D
    43dc:	60 90 0e 05 	lds	r6, 0x050E
    43e0:	70 90 0f 05 	lds	r7, 0x050F
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    43e4:	c7 01       	movw	r24, r14
    43e6:	b6 01       	movw	r22, r12
    43e8:	a3 01       	movw	r20, r6
    43ea:	92 01       	movw	r18, r4
    43ec:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    43f0:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    43f4:	c9 01       	movw	r24, r18
    43f6:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    43f8:	80 93 7d 05 	sts	0x057D, r24
    43fc:	90 93 7e 05 	sts	0x057E, r25
    4400:	a0 93 7f 05 	sts	0x057F, r26
    4404:	b0 93 80 05 	sts	0x0580, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4408:	c5 01       	movw	r24, r10
    440a:	b4 01       	movw	r22, r8
    440c:	a3 01       	movw	r20, r6
    440e:	92 01       	movw	r18, r4
    4410:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4414:	0e 94 87 24 	call	0x490e	; 0x490e <__lshrdi3>
    4418:	c9 01       	movw	r24, r18
    441a:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    441c:	80 93 67 05 	sts	0x0567, r24
    4420:	90 93 68 05 	sts	0x0568, r25
    4424:	a0 93 69 05 	sts	0x0569, r26
    4428:	b0 93 6a 05 	sts	0x056A, r27
    442c:	07 cf       	rjmp	.-498    	; 0x423c <__vector_18+0x6c>

0000442e <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
    442e:	1f 92       	push	r1
    4430:	0f 92       	push	r0
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	0f 92       	push	r0
    4436:	11 24       	eor	r1, r1
    4438:	2f 93       	push	r18
    443a:	3f 93       	push	r19
    443c:	4f 93       	push	r20
    443e:	8f 93       	push	r24
    4440:	9f 93       	push	r25
    4442:	ef 93       	push	r30
    4444:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
    4446:	40 91 a1 05 	lds	r20, 0x05A1
    444a:	84 2f       	mov	r24, r20
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	20 91 78 00 	lds	r18, 0x0078
    4452:	30 91 79 00 	lds	r19, 0x0079
    4456:	fc 01       	movw	r30, r24
    4458:	ee 0f       	add	r30, r30
    445a:	ff 1f       	adc	r31, r31
    445c:	e7 56       	subi	r30, 0x67	; 103
    445e:	fa 4f       	sbci	r31, 0xFA	; 250
    4460:	31 83       	std	Z+1, r19	; 0x01
    4462:	20 83       	st	Z, r18
	updateADC[adcSelect] = true;
    4464:	fc 01       	movw	r30, r24
    4466:	eb 56       	subi	r30, 0x6B	; 107
    4468:	fa 4f       	sbci	r31, 0xFA	; 250
    446a:	21 e0       	ldi	r18, 0x01	; 1
    446c:	20 83       	st	Z, r18

	adcSelect++;
    446e:	4f 5f       	subi	r20, 0xFF	; 255
	
	if(adcSelect > 3)
    4470:	44 30       	cpi	r20, 0x04	; 4
    4472:	88 f0       	brcs	.+34     	; 0x4496 <__vector_21+0x68>
	adcSelect = 0;
    4474:	10 92 a1 05 	sts	0x05A1, r1
    4478:	40 e0       	ldi	r20, 0x00	; 0
	
	ADMUX = adcSelect;
    447a:	40 93 7c 00 	sts	0x007C, r20
}
    447e:	ff 91       	pop	r31
    4480:	ef 91       	pop	r30
    4482:	9f 91       	pop	r25
    4484:	8f 91       	pop	r24
    4486:	4f 91       	pop	r20
    4488:	3f 91       	pop	r19
    448a:	2f 91       	pop	r18
    448c:	0f 90       	pop	r0
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	0f 90       	pop	r0
    4492:	1f 90       	pop	r1
    4494:	18 95       	reti
ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;
	updateADC[adcSelect] = true;

	adcSelect++;
    4496:	40 93 a1 05 	sts	0x05A1, r20
    449a:	ef cf       	rjmp	.-34     	; 0x447a <__vector_21+0x4c>

0000449c <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
    449c:	1f 92       	push	r1
    449e:	0f 92       	push	r0
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	0f 92       	push	r0
    44a4:	11 24       	eor	r1, r1
    44a6:	2f 93       	push	r18
    44a8:	3f 93       	push	r19
    44aa:	4f 93       	push	r20
    44ac:	5f 93       	push	r21
    44ae:	6f 93       	push	r22
    44b0:	7f 93       	push	r23
    44b2:	8f 93       	push	r24
    44b4:	9f 93       	push	r25
    44b6:	af 93       	push	r26
    44b8:	bf 93       	push	r27
    44ba:	ef 93       	push	r30
    44bc:	ff 93       	push	r31
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	00 d0       	rcall	.+0      	; 0x44c4 <__vector_9+0x28>
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <__vector_9+0x2a>
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
    44ca:	80 91 03 05 	lds	r24, 0x0503
    44ce:	88 23       	and	r24, r24
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <__vector_9+0x38>
    44d2:	f6 c0       	rjmp	.+492    	; 0x46c0 <__vector_9+0x224>
	{
		osc1Phaccu[0] = osc1Phaccu[1];
    44d4:	80 91 85 05 	lds	r24, 0x0585
    44d8:	90 91 86 05 	lds	r25, 0x0586
    44dc:	a0 91 87 05 	lds	r26, 0x0587
    44e0:	b0 91 88 05 	lds	r27, 0x0588
    44e4:	80 93 81 05 	sts	0x0581, r24
    44e8:	90 93 82 05 	sts	0x0582, r25
    44ec:	a0 93 83 05 	sts	0x0583, r26
    44f0:	b0 93 84 05 	sts	0x0584, r27
		osc1Phaccu[1] = osc1Phaccu[2];
    44f4:	80 91 89 05 	lds	r24, 0x0589
    44f8:	90 91 8a 05 	lds	r25, 0x058A
    44fc:	a0 91 8b 05 	lds	r26, 0x058B
    4500:	b0 91 8c 05 	lds	r27, 0x058C
    4504:	80 93 85 05 	sts	0x0585, r24
    4508:	90 93 86 05 	sts	0x0586, r25
    450c:	a0 93 87 05 	sts	0x0587, r26
    4510:	b0 93 88 05 	sts	0x0588, r27
		osc1Phaccu[2] += osc1TWord;
    4514:	40 91 7d 05 	lds	r20, 0x057D
    4518:	50 91 7e 05 	lds	r21, 0x057E
    451c:	60 91 7f 05 	lds	r22, 0x057F
    4520:	70 91 80 05 	lds	r23, 0x0580
    4524:	80 91 89 05 	lds	r24, 0x0589
    4528:	90 91 8a 05 	lds	r25, 0x058A
    452c:	a0 91 8b 05 	lds	r26, 0x058B
    4530:	b0 91 8c 05 	lds	r27, 0x058C
    4534:	84 0f       	add	r24, r20
    4536:	95 1f       	adc	r25, r21
    4538:	a6 1f       	adc	r26, r22
    453a:	b7 1f       	adc	r27, r23
    453c:	80 93 89 05 	sts	0x0589, r24
    4540:	90 93 8a 05 	sts	0x058A, r25
    4544:	a0 93 8b 05 	sts	0x058B, r26
    4548:	b0 93 8c 05 	sts	0x058C, r27

		osc2Phaccu += osc2TWord;
    454c:	40 91 67 05 	lds	r20, 0x0567
    4550:	50 91 68 05 	lds	r21, 0x0568
    4554:	60 91 69 05 	lds	r22, 0x0569
    4558:	70 91 6a 05 	lds	r23, 0x056A
    455c:	80 91 6b 05 	lds	r24, 0x056B
    4560:	90 91 6c 05 	lds	r25, 0x056C
    4564:	a0 91 6d 05 	lds	r26, 0x056D
    4568:	b0 91 6e 05 	lds	r27, 0x056E
    456c:	84 0f       	add	r24, r20
    456e:	95 1f       	adc	r25, r21
    4570:	a6 1f       	adc	r26, r22
    4572:	b7 1f       	adc	r27, r23
    4574:	80 93 6b 05 	sts	0x056B, r24
    4578:	90 93 6c 05 	sts	0x056C, r25
    457c:	a0 93 6d 05 	sts	0x056D, r26
    4580:	b0 93 6e 05 	sts	0x056E, r27
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
    4584:	80 91 00 01 	lds	r24, 0x0100
    4588:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
    458c:	9c 01       	movw	r18, r24
    458e:	36 95       	lsr	r19
    4590:	27 95       	ror	r18
	
	if(lsb == 1)
    4592:	80 fd       	sbrc	r24, 0
    4594:	bb c0       	rjmp	.+374    	; 0x470c <__vector_9+0x270>
	{
		lfsrState ^= 0xB400;
    4596:	30 93 01 01 	sts	0x0101, r19
    459a:	20 93 00 01 	sts	0x0100, r18
		lfsrUpdate();

		unsigned short fraction = 0;
		unsigned short whole = 0;

		osc1Out[0] = osc1Out[1];
    459e:	80 91 76 05 	lds	r24, 0x0576
    45a2:	90 91 77 05 	lds	r25, 0x0577
    45a6:	90 93 75 05 	sts	0x0575, r25
    45aa:	80 93 74 05 	sts	0x0574, r24
		osc1Out[1] = osc1Out[2];
    45ae:	80 91 78 05 	lds	r24, 0x0578
    45b2:	90 91 79 05 	lds	r25, 0x0579
    45b6:	90 93 77 05 	sts	0x0577, r25
    45ba:	80 93 76 05 	sts	0x0576, r24
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
    45be:	e0 91 03 01 	lds	r30, 0x0103
    45c2:	90 91 8b 05 	lds	r25, 0x058B
    45c6:	80 91 7a 05 	lds	r24, 0x057A
    45ca:	89 0f       	add	r24, r25
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	ee 0f       	add	r30, r30
    45d0:	ff 1f       	adc	r31, r31
    45d2:	ee 5f       	subi	r30, 0xFE	; 254
    45d4:	fc 4f       	sbci	r31, 0xFC	; 252
    45d6:	01 90       	ld	r0, Z+
    45d8:	f0 81       	ld	r31, Z
    45da:	e0 2d       	mov	r30, r0
    45dc:	e8 0f       	add	r30, r24
    45de:	f1 1d       	adc	r31, r1
    45e0:	e8 59       	subi	r30, 0x98	; 152
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	e4 91       	lpm	r30, Z
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	f0 93 79 05 	sts	0x0579, r31
    45ec:	e0 93 78 05 	sts	0x0578, r30
		
		if(osc1WaveForm == WAVE_NOISE)
    45f0:	80 91 03 01 	lds	r24, 0x0103
    45f4:	85 30       	cpi	r24, 0x05	; 5
    45f6:	09 f4       	brne	.+2      	; 0x45fa <__vector_9+0x15e>
    45f8:	7a c0       	rjmp	.+244    	; 0x46ee <__vector_9+0x252>
			osc1Out[2] = lfsrState;

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    45fa:	80 91 06 01 	lds	r24, 0x0106
    45fe:	88 23       	and	r24, r24
    4600:	81 f0       	breq	.+32     	; 0x4622 <__vector_9+0x186>
    4602:	80 91 87 05 	lds	r24, 0x0587
    4606:	40 91 83 05 	lds	r20, 0x0583
    460a:	84 17       	cp	r24, r20
    460c:	50 f4       	brcc	.+20     	; 0x4622 <__vector_9+0x186>
    460e:	89 17       	cp	r24, r25
    4610:	40 f4       	brcc	.+16     	; 0x4622 <__vector_9+0x186>
		{
			osc2Phaccu = 0;
    4612:	10 92 6b 05 	sts	0x056B, r1
    4616:	10 92 6c 05 	sts	0x056C, r1
    461a:	10 92 6d 05 	sts	0x056D, r1
    461e:	10 92 6e 05 	sts	0x056E, r1
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
    4622:	e0 91 02 01 	lds	r30, 0x0102
    4626:	80 91 63 05 	lds	r24, 0x0563
    462a:	90 91 6d 05 	lds	r25, 0x056D
    462e:	89 0f       	add	r24, r25
    4630:	f0 e0       	ldi	r31, 0x00	; 0
    4632:	ee 0f       	add	r30, r30
    4634:	ff 1f       	adc	r31, r31
    4636:	ee 5f       	subi	r30, 0xFE	; 254
    4638:	fc 4f       	sbci	r31, 0xFC	; 252
    463a:	01 90       	ld	r0, Z+
    463c:	f0 81       	ld	r31, Z
    463e:	e0 2d       	mov	r30, r0
    4640:	e8 0f       	add	r30, r24
    4642:	f1 1d       	adc	r31, r1
    4644:	e8 59       	subi	r30, 0x98	; 152
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	e4 91       	lpm	r30, Z
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	f0 93 61 05 	sts	0x0561, r31
    4650:	e0 93 60 05 	sts	0x0560, r30
		
		if(osc2WaveForm == WAVE_NOISE)
    4654:	80 91 02 01 	lds	r24, 0x0102
    4658:	85 30       	cpi	r24, 0x05	; 5
    465a:	09 f4       	brne	.+2      	; 0x465e <__vector_9+0x1c2>
    465c:	52 c0       	rjmp	.+164    	; 0x4702 <__vector_9+0x266>
			osc2Out[2] = lfsrState;

		unsigned long temp = 0;

		osc1Out[2] *= osc1Weight;
    465e:	20 91 78 05 	lds	r18, 0x0578
    4662:	30 91 79 05 	lds	r19, 0x0579
    4666:	40 91 07 01 	lds	r20, 0x0107
    466a:	42 9f       	mul	r20, r18
    466c:	c0 01       	movw	r24, r0
    466e:	43 9f       	mul	r20, r19
    4670:	90 0d       	add	r25, r0
    4672:	11 24       	eor	r1, r1
    4674:	90 93 79 05 	sts	0x0579, r25
    4678:	80 93 78 05 	sts	0x0578, r24
		osc2Out[2] *= osc2Weight;
    467c:	20 91 60 05 	lds	r18, 0x0560
    4680:	30 91 61 05 	lds	r19, 0x0561
    4684:	40 91 62 05 	lds	r20, 0x0562
    4688:	42 9f       	mul	r20, r18
    468a:	c0 01       	movw	r24, r0
    468c:	43 9f       	mul	r20, r19
    468e:	90 0d       	add	r25, r0
    4690:	11 24       	eor	r1, r1
    4692:	90 93 61 05 	sts	0x0561, r25
    4696:	80 93 60 05 	sts	0x0560, r24

		temp = osc1Out[2] + osc2Out[2];
    469a:	20 91 78 05 	lds	r18, 0x0578
    469e:	30 91 79 05 	lds	r19, 0x0579
    46a2:	80 91 60 05 	lds	r24, 0x0560
    46a6:	90 91 61 05 	lds	r25, 0x0561
    46aa:	82 0f       	add	r24, r18
    46ac:	93 1f       	adc	r25, r19
    46ae:	a0 e0       	ldi	r26, 0x00	; 0
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	89 83       	std	Y+1, r24	; 0x01
    46b4:	9a 83       	std	Y+2, r25	; 0x02
    46b6:	ab 83       	std	Y+3, r26	; 0x03
    46b8:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    46ba:	8a 81       	ldd	r24, Y+2	; 0x02
    46bc:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	ff 91       	pop	r31
    46ce:	ef 91       	pop	r30
    46d0:	bf 91       	pop	r27
    46d2:	af 91       	pop	r26
    46d4:	9f 91       	pop	r25
    46d6:	8f 91       	pop	r24
    46d8:	7f 91       	pop	r23
    46da:	6f 91       	pop	r22
    46dc:	5f 91       	pop	r21
    46de:	4f 91       	pop	r20
    46e0:	3f 91       	pop	r19
    46e2:	2f 91       	pop	r18
    46e4:	0f 90       	pop	r0
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	0f 90       	pop	r0
    46ea:	1f 90       	pop	r1
    46ec:	18 95       	reti
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    46ee:	30 93 79 05 	sts	0x0579, r19
    46f2:	20 93 78 05 	sts	0x0578, r18

		if(osc2Sync &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    46f6:	80 91 06 01 	lds	r24, 0x0106
    46fa:	88 23       	and	r24, r24
    46fc:	09 f4       	brne	.+2      	; 0x4700 <__vector_9+0x264>
    46fe:	91 cf       	rjmp	.-222    	; 0x4622 <__vector_9+0x186>
    4700:	80 cf       	rjmp	.-256    	; 0x4602 <__vector_9+0x166>
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
		
		if(osc2WaveForm == WAVE_NOISE)
			osc2Out[2] = lfsrState;
    4702:	30 93 61 05 	sts	0x0561, r19
    4706:	20 93 60 05 	sts	0x0560, r18
    470a:	a9 cf       	rjmp	.-174    	; 0x465e <__vector_9+0x1c2>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    470c:	84 eb       	ldi	r24, 0xB4	; 180
    470e:	38 27       	eor	r19, r24
    4710:	42 cf       	rjmp	.-380    	; 0x4596 <__vector_9+0xfa>

00004712 <__muldi3>:
    4712:	df 93       	push	r29
    4714:	cf 93       	push	r28
    4716:	1f 93       	push	r17
    4718:	0f 93       	push	r16
    471a:	9a 9d       	mul	r25, r10
    471c:	f0 2d       	mov	r31, r0
    471e:	21 9f       	mul	r18, r17
    4720:	f0 0d       	add	r31, r0
    4722:	8b 9d       	mul	r24, r11
    4724:	f0 0d       	add	r31, r0
    4726:	8a 9d       	mul	r24, r10
    4728:	e0 2d       	mov	r30, r0
    472a:	f1 0d       	add	r31, r1
    472c:	03 9f       	mul	r16, r19
    472e:	f0 0d       	add	r31, r0
    4730:	02 9f       	mul	r16, r18
    4732:	e0 0d       	add	r30, r0
    4734:	f1 1d       	adc	r31, r1
    4736:	4e 9d       	mul	r20, r14
    4738:	e0 0d       	add	r30, r0
    473a:	f1 1d       	adc	r31, r1
    473c:	5e 9d       	mul	r21, r14
    473e:	f0 0d       	add	r31, r0
    4740:	4f 9d       	mul	r20, r15
    4742:	f0 0d       	add	r31, r0
    4744:	7f 93       	push	r23
    4746:	6f 93       	push	r22
    4748:	bf 92       	push	r11
    474a:	af 92       	push	r10
    474c:	5f 93       	push	r21
    474e:	4f 93       	push	r20
    4750:	d5 01       	movw	r26, r10
    4752:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    4756:	8b 01       	movw	r16, r22
    4758:	ac 01       	movw	r20, r24
    475a:	d7 01       	movw	r26, r14
    475c:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    4760:	eb 01       	movw	r28, r22
    4762:	e8 0f       	add	r30, r24
    4764:	f9 1f       	adc	r31, r25
    4766:	d6 01       	movw	r26, r12
    4768:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <__muldi3_6>
    476c:	2f 91       	pop	r18
    476e:	3f 91       	pop	r19
    4770:	d6 01       	movw	r26, r12
    4772:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    4776:	c6 0f       	add	r28, r22
    4778:	d7 1f       	adc	r29, r23
    477a:	e8 1f       	adc	r30, r24
    477c:	f9 1f       	adc	r31, r25
    477e:	af 91       	pop	r26
    4780:	bf 91       	pop	r27
    4782:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <__muldi3_6>
    4786:	2f 91       	pop	r18
    4788:	3f 91       	pop	r19
    478a:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    478e:	c6 0f       	add	r28, r22
    4790:	d7 1f       	adc	r29, r23
    4792:	e8 1f       	adc	r30, r24
    4794:	f9 1f       	adc	r31, r25
    4796:	d6 01       	movw	r26, r12
    4798:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    479c:	e6 0f       	add	r30, r22
    479e:	f7 1f       	adc	r31, r23
    47a0:	98 01       	movw	r18, r16
    47a2:	be 01       	movw	r22, r28
    47a4:	cf 01       	movw	r24, r30
    47a6:	11 24       	eor	r1, r1
    47a8:	0f 91       	pop	r16
    47aa:	1f 91       	pop	r17
    47ac:	cf 91       	pop	r28
    47ae:	df 91       	pop	r29
    47b0:	08 95       	ret

000047b2 <__muldi3_6>:
    47b2:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    47b6:	46 0f       	add	r20, r22
    47b8:	57 1f       	adc	r21, r23
    47ba:	c8 1f       	adc	r28, r24
    47bc:	d9 1f       	adc	r29, r25
    47be:	08 f4       	brcc	.+2      	; 0x47c2 <__muldi3_6+0x10>
    47c0:	31 96       	adiw	r30, 0x01	; 1
    47c2:	08 95       	ret

000047c4 <__umulsidi3>:
    47c4:	e8 94       	clt

000047c6 <__umulsidi3_helper>:
    47c6:	df 93       	push	r29
    47c8:	cf 93       	push	r28
    47ca:	fc 01       	movw	r30, r24
    47cc:	db 01       	movw	r26, r22
    47ce:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    47d2:	7f 93       	push	r23
    47d4:	6f 93       	push	r22
    47d6:	e9 01       	movw	r28, r18
    47d8:	9a 01       	movw	r18, r20
    47da:	ac 01       	movw	r20, r24
    47dc:	bf 93       	push	r27
    47de:	af 93       	push	r26
    47e0:	3f 93       	push	r19
    47e2:	2f 93       	push	r18
    47e4:	df 01       	movw	r26, r30
    47e6:	0e 94 b5 24 	call	0x496a	; 0x496a <__umulhisi3>
    47ea:	26 f4       	brtc	.+8      	; 0x47f4 <__umulsidi3_helper+0x2e>
    47ec:	6c 1b       	sub	r22, r28
    47ee:	7d 0b       	sbc	r23, r29
    47f0:	82 0b       	sbc	r24, r18
    47f2:	93 0b       	sbc	r25, r19
    47f4:	9e 01       	movw	r18, r28
    47f6:	eb 01       	movw	r28, r22
    47f8:	fc 01       	movw	r30, r24
    47fa:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <__muldi3_6>
    47fe:	af 91       	pop	r26
    4800:	bf 91       	pop	r27
    4802:	2f 91       	pop	r18
    4804:	3f 91       	pop	r19
    4806:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <__muldi3_6>
    480a:	be 01       	movw	r22, r28
    480c:	cf 01       	movw	r24, r30
    480e:	f9 01       	movw	r30, r18
    4810:	2f 91       	pop	r18
    4812:	3f 91       	pop	r19
    4814:	cf 91       	pop	r28
    4816:	df 91       	pop	r29
    4818:	08 95       	ret

0000481a <__umoddi3>:
    481a:	68 94       	set
    481c:	01 c0       	rjmp	.+2      	; 0x4820 <__udivdi3_umoddi3>

0000481e <__udivdi3>:
    481e:	e8 94       	clt

00004820 <__udivdi3_umoddi3>:
    4820:	8f 92       	push	r8
    4822:	9f 92       	push	r9
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
    4828:	0e 94 1b 24 	call	0x4836	; 0x4836 <__udivmod64>
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	9f 90       	pop	r9
    4832:	8f 90       	pop	r8
    4834:	08 95       	ret

00004836 <__udivmod64>:
    4836:	88 24       	eor	r8, r8
    4838:	99 24       	eor	r9, r9
    483a:	f4 01       	movw	r30, r8
    483c:	e4 01       	movw	r28, r8
    483e:	b0 e4       	ldi	r27, 0x40	; 64
    4840:	9f 93       	push	r25
    4842:	aa 27       	eor	r26, r26
    4844:	9a 15       	cp	r25, r10
    4846:	8b 04       	cpc	r8, r11
    4848:	9c 04       	cpc	r9, r12
    484a:	ed 05       	cpc	r30, r13
    484c:	fe 05       	cpc	r31, r14
    484e:	cf 05       	cpc	r28, r15
    4850:	d0 07       	cpc	r29, r16
    4852:	a1 07       	cpc	r26, r17
    4854:	98 f4       	brcc	.+38     	; 0x487c <__udivmod64+0x46>
    4856:	ad 2f       	mov	r26, r29
    4858:	dc 2f       	mov	r29, r28
    485a:	cf 2f       	mov	r28, r31
    485c:	fe 2f       	mov	r31, r30
    485e:	e9 2d       	mov	r30, r9
    4860:	98 2c       	mov	r9, r8
    4862:	89 2e       	mov	r8, r25
    4864:	98 2f       	mov	r25, r24
    4866:	87 2f       	mov	r24, r23
    4868:	76 2f       	mov	r23, r22
    486a:	65 2f       	mov	r22, r21
    486c:	54 2f       	mov	r21, r20
    486e:	43 2f       	mov	r20, r19
    4870:	32 2f       	mov	r19, r18
    4872:	22 27       	eor	r18, r18
    4874:	b8 50       	subi	r27, 0x08	; 8
    4876:	31 f7       	brne	.-52     	; 0x4844 <__udivmod64+0xe>
    4878:	bf 91       	pop	r27
    487a:	27 c0       	rjmp	.+78     	; 0x48ca <__udivmod64+0x94>
    487c:	1b 2e       	mov	r1, r27
    487e:	bf 91       	pop	r27
    4880:	bb 27       	eor	r27, r27
    4882:	22 0f       	add	r18, r18
    4884:	33 1f       	adc	r19, r19
    4886:	44 1f       	adc	r20, r20
    4888:	55 1f       	adc	r21, r21
    488a:	66 1f       	adc	r22, r22
    488c:	77 1f       	adc	r23, r23
    488e:	88 1f       	adc	r24, r24
    4890:	99 1f       	adc	r25, r25
    4892:	88 1c       	adc	r8, r8
    4894:	99 1c       	adc	r9, r9
    4896:	ee 1f       	adc	r30, r30
    4898:	ff 1f       	adc	r31, r31
    489a:	cc 1f       	adc	r28, r28
    489c:	dd 1f       	adc	r29, r29
    489e:	aa 1f       	adc	r26, r26
    48a0:	bb 1f       	adc	r27, r27
    48a2:	8a 14       	cp	r8, r10
    48a4:	9b 04       	cpc	r9, r11
    48a6:	ec 05       	cpc	r30, r12
    48a8:	fd 05       	cpc	r31, r13
    48aa:	ce 05       	cpc	r28, r14
    48ac:	df 05       	cpc	r29, r15
    48ae:	a0 07       	cpc	r26, r16
    48b0:	b1 07       	cpc	r27, r17
    48b2:	48 f0       	brcs	.+18     	; 0x48c6 <__udivmod64+0x90>
    48b4:	8a 18       	sub	r8, r10
    48b6:	9b 08       	sbc	r9, r11
    48b8:	ec 09       	sbc	r30, r12
    48ba:	fd 09       	sbc	r31, r13
    48bc:	ce 09       	sbc	r28, r14
    48be:	df 09       	sbc	r29, r15
    48c0:	a0 0b       	sbc	r26, r16
    48c2:	b1 0b       	sbc	r27, r17
    48c4:	21 60       	ori	r18, 0x01	; 1
    48c6:	1a 94       	dec	r1
    48c8:	e1 f6       	brne	.-72     	; 0x4882 <__udivmod64+0x4c>
    48ca:	2e f4       	brtc	.+10     	; 0x48d6 <__udivmod64+0xa0>
    48cc:	94 01       	movw	r18, r8
    48ce:	af 01       	movw	r20, r30
    48d0:	be 01       	movw	r22, r28
    48d2:	cd 01       	movw	r24, r26
    48d4:	00 0c       	add	r0, r0
    48d6:	08 95       	ret

000048d8 <__ashldi3>:
    48d8:	0f 93       	push	r16
    48da:	08 30       	cpi	r16, 0x08	; 8
    48dc:	90 f0       	brcs	.+36     	; 0x4902 <__ashldi3+0x2a>
    48de:	98 2f       	mov	r25, r24
    48e0:	87 2f       	mov	r24, r23
    48e2:	76 2f       	mov	r23, r22
    48e4:	65 2f       	mov	r22, r21
    48e6:	54 2f       	mov	r21, r20
    48e8:	43 2f       	mov	r20, r19
    48ea:	32 2f       	mov	r19, r18
    48ec:	22 27       	eor	r18, r18
    48ee:	08 50       	subi	r16, 0x08	; 8
    48f0:	f4 cf       	rjmp	.-24     	; 0x48da <__ashldi3+0x2>
    48f2:	22 0f       	add	r18, r18
    48f4:	33 1f       	adc	r19, r19
    48f6:	44 1f       	adc	r20, r20
    48f8:	55 1f       	adc	r21, r21
    48fa:	66 1f       	adc	r22, r22
    48fc:	77 1f       	adc	r23, r23
    48fe:	88 1f       	adc	r24, r24
    4900:	99 1f       	adc	r25, r25
    4902:	0a 95       	dec	r16
    4904:	b2 f7       	brpl	.-20     	; 0x48f2 <__ashldi3+0x1a>
    4906:	0f 91       	pop	r16
    4908:	08 95       	ret

0000490a <__ashrdi3>:
    490a:	97 fb       	bst	r25, 7
    490c:	10 f8       	bld	r1, 0

0000490e <__lshrdi3>:
    490e:	16 94       	lsr	r1
    4910:	00 08       	sbc	r0, r0
    4912:	0f 93       	push	r16
    4914:	08 30       	cpi	r16, 0x08	; 8
    4916:	98 f0       	brcs	.+38     	; 0x493e <__lshrdi3+0x30>
    4918:	08 50       	subi	r16, 0x08	; 8
    491a:	23 2f       	mov	r18, r19
    491c:	34 2f       	mov	r19, r20
    491e:	45 2f       	mov	r20, r21
    4920:	56 2f       	mov	r21, r22
    4922:	67 2f       	mov	r22, r23
    4924:	78 2f       	mov	r23, r24
    4926:	89 2f       	mov	r24, r25
    4928:	90 2d       	mov	r25, r0
    492a:	f4 cf       	rjmp	.-24     	; 0x4914 <__lshrdi3+0x6>
    492c:	05 94       	asr	r0
    492e:	97 95       	ror	r25
    4930:	87 95       	ror	r24
    4932:	77 95       	ror	r23
    4934:	67 95       	ror	r22
    4936:	57 95       	ror	r21
    4938:	47 95       	ror	r20
    493a:	37 95       	ror	r19
    493c:	27 95       	ror	r18
    493e:	0a 95       	dec	r16
    4940:	aa f7       	brpl	.-22     	; 0x492c <__lshrdi3+0x1e>
    4942:	0f 91       	pop	r16
    4944:	08 95       	ret

00004946 <__adddi3>:
    4946:	2a 0d       	add	r18, r10
    4948:	3b 1d       	adc	r19, r11
    494a:	4c 1d       	adc	r20, r12
    494c:	5d 1d       	adc	r21, r13
    494e:	6e 1d       	adc	r22, r14
    4950:	7f 1d       	adc	r23, r15
    4952:	80 1f       	adc	r24, r16
    4954:	91 1f       	adc	r25, r17
    4956:	08 95       	ret

00004958 <__subdi3>:
    4958:	2a 19       	sub	r18, r10
    495a:	3b 09       	sbc	r19, r11
    495c:	4c 09       	sbc	r20, r12
    495e:	5d 09       	sbc	r21, r13
    4960:	6e 09       	sbc	r22, r14
    4962:	7f 09       	sbc	r23, r15
    4964:	80 0b       	sbc	r24, r16
    4966:	91 0b       	sbc	r25, r17
    4968:	08 95       	ret

0000496a <__umulhisi3>:
    496a:	a2 9f       	mul	r26, r18
    496c:	b0 01       	movw	r22, r0
    496e:	b3 9f       	mul	r27, r19
    4970:	c0 01       	movw	r24, r0
    4972:	a3 9f       	mul	r26, r19
    4974:	70 0d       	add	r23, r0
    4976:	81 1d       	adc	r24, r1
    4978:	11 24       	eor	r1, r1
    497a:	91 1d       	adc	r25, r1
    497c:	b2 9f       	mul	r27, r18
    497e:	70 0d       	add	r23, r0
    4980:	81 1d       	adc	r24, r1
    4982:	11 24       	eor	r1, r1
    4984:	91 1d       	adc	r25, r1
    4986:	08 95       	ret

00004988 <strcat_P>:
    4988:	fb 01       	movw	r30, r22
    498a:	dc 01       	movw	r26, r24
    498c:	0d 90       	ld	r0, X+
    498e:	00 20       	and	r0, r0
    4990:	e9 f7       	brne	.-6      	; 0x498c <strcat_P+0x4>
    4992:	11 97       	sbiw	r26, 0x01	; 1
    4994:	05 90       	lpm	r0, Z+
    4996:	0d 92       	st	X+, r0
    4998:	00 20       	and	r0, r0
    499a:	e1 f7       	brne	.-8      	; 0x4994 <strcat_P+0xc>
    499c:	08 95       	ret

0000499e <sprintf>:
    499e:	ae e0       	ldi	r26, 0x0E	; 14
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	e5 ed       	ldi	r30, 0xD5	; 213
    49a4:	f4 e2       	ldi	r31, 0x24	; 36
    49a6:	0c 94 77 27 	jmp	0x4eee	; 0x4eee <__prologue_saves__+0x1c>
    49aa:	0d 89       	ldd	r16, Y+21	; 0x15
    49ac:	1e 89       	ldd	r17, Y+22	; 0x16
    49ae:	86 e0       	ldi	r24, 0x06	; 6
    49b0:	8c 83       	std	Y+4, r24	; 0x04
    49b2:	1a 83       	std	Y+2, r17	; 0x02
    49b4:	09 83       	std	Y+1, r16	; 0x01
    49b6:	8f ef       	ldi	r24, 0xFF	; 255
    49b8:	9f e7       	ldi	r25, 0x7F	; 127
    49ba:	9e 83       	std	Y+6, r25	; 0x06
    49bc:	8d 83       	std	Y+5, r24	; 0x05
    49be:	ae 01       	movw	r20, r28
    49c0:	47 5e       	subi	r20, 0xE7	; 231
    49c2:	5f 4f       	sbci	r21, 0xFF	; 255
    49c4:	6f 89       	ldd	r22, Y+23	; 0x17
    49c6:	78 8d       	ldd	r23, Y+24	; 0x18
    49c8:	ce 01       	movw	r24, r28
    49ca:	01 96       	adiw	r24, 0x01	; 1
    49cc:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <vfprintf>
    49d0:	ef 81       	ldd	r30, Y+7	; 0x07
    49d2:	f8 85       	ldd	r31, Y+8	; 0x08
    49d4:	e0 0f       	add	r30, r16
    49d6:	f1 1f       	adc	r31, r17
    49d8:	10 82       	st	Z, r1
    49da:	2e 96       	adiw	r28, 0x0e	; 14
    49dc:	e4 e0       	ldi	r30, 0x04	; 4
    49de:	0c 94 93 27 	jmp	0x4f26	; 0x4f26 <__epilogue_restores__+0x1c>

000049e2 <vfprintf>:
    49e2:	ac e0       	ldi	r26, 0x0C	; 12
    49e4:	b0 e0       	ldi	r27, 0x00	; 0
    49e6:	e7 ef       	ldi	r30, 0xF7	; 247
    49e8:	f4 e2       	ldi	r31, 0x24	; 36
    49ea:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__prologue_saves__>
    49ee:	7c 01       	movw	r14, r24
    49f0:	6b 01       	movw	r12, r22
    49f2:	8a 01       	movw	r16, r20
    49f4:	fc 01       	movw	r30, r24
    49f6:	17 82       	std	Z+7, r1	; 0x07
    49f8:	16 82       	std	Z+6, r1	; 0x06
    49fa:	83 81       	ldd	r24, Z+3	; 0x03
    49fc:	81 ff       	sbrs	r24, 1
    49fe:	bd c1       	rjmp	.+890    	; 0x4d7a <vfprintf+0x398>
    4a00:	ce 01       	movw	r24, r28
    4a02:	01 96       	adiw	r24, 0x01	; 1
    4a04:	4c 01       	movw	r8, r24
    4a06:	f7 01       	movw	r30, r14
    4a08:	93 81       	ldd	r25, Z+3	; 0x03
    4a0a:	f6 01       	movw	r30, r12
    4a0c:	93 fd       	sbrc	r25, 3
    4a0e:	85 91       	lpm	r24, Z+
    4a10:	93 ff       	sbrs	r25, 3
    4a12:	81 91       	ld	r24, Z+
    4a14:	6f 01       	movw	r12, r30
    4a16:	88 23       	and	r24, r24
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <vfprintf+0x3a>
    4a1a:	ab c1       	rjmp	.+854    	; 0x4d72 <vfprintf+0x390>
    4a1c:	85 32       	cpi	r24, 0x25	; 37
    4a1e:	39 f4       	brne	.+14     	; 0x4a2e <vfprintf+0x4c>
    4a20:	93 fd       	sbrc	r25, 3
    4a22:	85 91       	lpm	r24, Z+
    4a24:	93 ff       	sbrs	r25, 3
    4a26:	81 91       	ld	r24, Z+
    4a28:	6f 01       	movw	r12, r30
    4a2a:	85 32       	cpi	r24, 0x25	; 37
    4a2c:	29 f4       	brne	.+10     	; 0x4a38 <vfprintf+0x56>
    4a2e:	b7 01       	movw	r22, r14
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4a36:	e7 cf       	rjmp	.-50     	; 0x4a06 <vfprintf+0x24>
    4a38:	51 2c       	mov	r5, r1
    4a3a:	31 2c       	mov	r3, r1
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	20 32       	cpi	r18, 0x20	; 32
    4a40:	a0 f4       	brcc	.+40     	; 0x4a6a <vfprintf+0x88>
    4a42:	8b 32       	cpi	r24, 0x2B	; 43
    4a44:	69 f0       	breq	.+26     	; 0x4a60 <vfprintf+0x7e>
    4a46:	30 f4       	brcc	.+12     	; 0x4a54 <vfprintf+0x72>
    4a48:	80 32       	cpi	r24, 0x20	; 32
    4a4a:	59 f0       	breq	.+22     	; 0x4a62 <vfprintf+0x80>
    4a4c:	83 32       	cpi	r24, 0x23	; 35
    4a4e:	69 f4       	brne	.+26     	; 0x4a6a <vfprintf+0x88>
    4a50:	20 61       	ori	r18, 0x10	; 16
    4a52:	2c c0       	rjmp	.+88     	; 0x4aac <vfprintf+0xca>
    4a54:	8d 32       	cpi	r24, 0x2D	; 45
    4a56:	39 f0       	breq	.+14     	; 0x4a66 <vfprintf+0x84>
    4a58:	80 33       	cpi	r24, 0x30	; 48
    4a5a:	39 f4       	brne	.+14     	; 0x4a6a <vfprintf+0x88>
    4a5c:	21 60       	ori	r18, 0x01	; 1
    4a5e:	26 c0       	rjmp	.+76     	; 0x4aac <vfprintf+0xca>
    4a60:	22 60       	ori	r18, 0x02	; 2
    4a62:	24 60       	ori	r18, 0x04	; 4
    4a64:	23 c0       	rjmp	.+70     	; 0x4aac <vfprintf+0xca>
    4a66:	28 60       	ori	r18, 0x08	; 8
    4a68:	21 c0       	rjmp	.+66     	; 0x4aac <vfprintf+0xca>
    4a6a:	27 fd       	sbrc	r18, 7
    4a6c:	27 c0       	rjmp	.+78     	; 0x4abc <vfprintf+0xda>
    4a6e:	30 ed       	ldi	r19, 0xD0	; 208
    4a70:	38 0f       	add	r19, r24
    4a72:	3a 30       	cpi	r19, 0x0A	; 10
    4a74:	78 f4       	brcc	.+30     	; 0x4a94 <vfprintf+0xb2>
    4a76:	26 ff       	sbrs	r18, 6
    4a78:	06 c0       	rjmp	.+12     	; 0x4a86 <vfprintf+0xa4>
    4a7a:	fa e0       	ldi	r31, 0x0A	; 10
    4a7c:	5f 9e       	mul	r5, r31
    4a7e:	30 0d       	add	r19, r0
    4a80:	11 24       	eor	r1, r1
    4a82:	53 2e       	mov	r5, r19
    4a84:	13 c0       	rjmp	.+38     	; 0x4aac <vfprintf+0xca>
    4a86:	8a e0       	ldi	r24, 0x0A	; 10
    4a88:	38 9e       	mul	r3, r24
    4a8a:	30 0d       	add	r19, r0
    4a8c:	11 24       	eor	r1, r1
    4a8e:	33 2e       	mov	r3, r19
    4a90:	20 62       	ori	r18, 0x20	; 32
    4a92:	0c c0       	rjmp	.+24     	; 0x4aac <vfprintf+0xca>
    4a94:	8e 32       	cpi	r24, 0x2E	; 46
    4a96:	21 f4       	brne	.+8      	; 0x4aa0 <vfprintf+0xbe>
    4a98:	26 fd       	sbrc	r18, 6
    4a9a:	6b c1       	rjmp	.+726    	; 0x4d72 <vfprintf+0x390>
    4a9c:	20 64       	ori	r18, 0x40	; 64
    4a9e:	06 c0       	rjmp	.+12     	; 0x4aac <vfprintf+0xca>
    4aa0:	8c 36       	cpi	r24, 0x6C	; 108
    4aa2:	11 f4       	brne	.+4      	; 0x4aa8 <vfprintf+0xc6>
    4aa4:	20 68       	ori	r18, 0x80	; 128
    4aa6:	02 c0       	rjmp	.+4      	; 0x4aac <vfprintf+0xca>
    4aa8:	88 36       	cpi	r24, 0x68	; 104
    4aaa:	41 f4       	brne	.+16     	; 0x4abc <vfprintf+0xda>
    4aac:	f6 01       	movw	r30, r12
    4aae:	93 fd       	sbrc	r25, 3
    4ab0:	85 91       	lpm	r24, Z+
    4ab2:	93 ff       	sbrs	r25, 3
    4ab4:	81 91       	ld	r24, Z+
    4ab6:	6f 01       	movw	r12, r30
    4ab8:	81 11       	cpse	r24, r1
    4aba:	c1 cf       	rjmp	.-126    	; 0x4a3e <vfprintf+0x5c>
    4abc:	98 2f       	mov	r25, r24
    4abe:	9f 7d       	andi	r25, 0xDF	; 223
    4ac0:	95 54       	subi	r25, 0x45	; 69
    4ac2:	93 30       	cpi	r25, 0x03	; 3
    4ac4:	28 f4       	brcc	.+10     	; 0x4ad0 <vfprintf+0xee>
    4ac6:	0c 5f       	subi	r16, 0xFC	; 252
    4ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aca:	ff e3       	ldi	r31, 0x3F	; 63
    4acc:	f9 83       	std	Y+1, r31	; 0x01
    4ace:	0d c0       	rjmp	.+26     	; 0x4aea <vfprintf+0x108>
    4ad0:	83 36       	cpi	r24, 0x63	; 99
    4ad2:	31 f0       	breq	.+12     	; 0x4ae0 <vfprintf+0xfe>
    4ad4:	83 37       	cpi	r24, 0x73	; 115
    4ad6:	71 f0       	breq	.+28     	; 0x4af4 <vfprintf+0x112>
    4ad8:	83 35       	cpi	r24, 0x53	; 83
    4ada:	09 f0       	breq	.+2      	; 0x4ade <vfprintf+0xfc>
    4adc:	5b c0       	rjmp	.+182    	; 0x4b94 <vfprintf+0x1b2>
    4ade:	22 c0       	rjmp	.+68     	; 0x4b24 <vfprintf+0x142>
    4ae0:	f8 01       	movw	r30, r16
    4ae2:	80 81       	ld	r24, Z
    4ae4:	89 83       	std	Y+1, r24	; 0x01
    4ae6:	0e 5f       	subi	r16, 0xFE	; 254
    4ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aea:	44 24       	eor	r4, r4
    4aec:	43 94       	inc	r4
    4aee:	51 2c       	mov	r5, r1
    4af0:	54 01       	movw	r10, r8
    4af2:	15 c0       	rjmp	.+42     	; 0x4b1e <vfprintf+0x13c>
    4af4:	38 01       	movw	r6, r16
    4af6:	f2 e0       	ldi	r31, 0x02	; 2
    4af8:	6f 0e       	add	r6, r31
    4afa:	71 1c       	adc	r7, r1
    4afc:	f8 01       	movw	r30, r16
    4afe:	a0 80       	ld	r10, Z
    4b00:	b1 80       	ldd	r11, Z+1	; 0x01
    4b02:	26 ff       	sbrs	r18, 6
    4b04:	03 c0       	rjmp	.+6      	; 0x4b0c <vfprintf+0x12a>
    4b06:	65 2d       	mov	r22, r5
    4b08:	70 e0       	ldi	r23, 0x00	; 0
    4b0a:	02 c0       	rjmp	.+4      	; 0x4b10 <vfprintf+0x12e>
    4b0c:	6f ef       	ldi	r22, 0xFF	; 255
    4b0e:	7f ef       	ldi	r23, 0xFF	; 255
    4b10:	c5 01       	movw	r24, r10
    4b12:	2c 87       	std	Y+12, r18	; 0x0c
    4b14:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <strnlen>
    4b18:	2c 01       	movw	r4, r24
    4b1a:	83 01       	movw	r16, r6
    4b1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b1e:	2f 77       	andi	r18, 0x7F	; 127
    4b20:	22 2e       	mov	r2, r18
    4b22:	17 c0       	rjmp	.+46     	; 0x4b52 <vfprintf+0x170>
    4b24:	38 01       	movw	r6, r16
    4b26:	f2 e0       	ldi	r31, 0x02	; 2
    4b28:	6f 0e       	add	r6, r31
    4b2a:	71 1c       	adc	r7, r1
    4b2c:	f8 01       	movw	r30, r16
    4b2e:	a0 80       	ld	r10, Z
    4b30:	b1 80       	ldd	r11, Z+1	; 0x01
    4b32:	26 ff       	sbrs	r18, 6
    4b34:	03 c0       	rjmp	.+6      	; 0x4b3c <vfprintf+0x15a>
    4b36:	65 2d       	mov	r22, r5
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <vfprintf+0x15e>
    4b3c:	6f ef       	ldi	r22, 0xFF	; 255
    4b3e:	7f ef       	ldi	r23, 0xFF	; 255
    4b40:	c5 01       	movw	r24, r10
    4b42:	2c 87       	std	Y+12, r18	; 0x0c
    4b44:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <strnlen_P>
    4b48:	2c 01       	movw	r4, r24
    4b4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b4c:	20 68       	ori	r18, 0x80	; 128
    4b4e:	22 2e       	mov	r2, r18
    4b50:	83 01       	movw	r16, r6
    4b52:	23 fc       	sbrc	r2, 3
    4b54:	1b c0       	rjmp	.+54     	; 0x4b8c <vfprintf+0x1aa>
    4b56:	83 2d       	mov	r24, r3
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	48 16       	cp	r4, r24
    4b5c:	59 06       	cpc	r5, r25
    4b5e:	b0 f4       	brcc	.+44     	; 0x4b8c <vfprintf+0x1aa>
    4b60:	b7 01       	movw	r22, r14
    4b62:	80 e2       	ldi	r24, 0x20	; 32
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4b6a:	3a 94       	dec	r3
    4b6c:	f4 cf       	rjmp	.-24     	; 0x4b56 <vfprintf+0x174>
    4b6e:	f5 01       	movw	r30, r10
    4b70:	27 fc       	sbrc	r2, 7
    4b72:	85 91       	lpm	r24, Z+
    4b74:	27 fe       	sbrs	r2, 7
    4b76:	81 91       	ld	r24, Z+
    4b78:	5f 01       	movw	r10, r30
    4b7a:	b7 01       	movw	r22, r14
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4b82:	31 10       	cpse	r3, r1
    4b84:	3a 94       	dec	r3
    4b86:	f1 e0       	ldi	r31, 0x01	; 1
    4b88:	4f 1a       	sub	r4, r31
    4b8a:	51 08       	sbc	r5, r1
    4b8c:	41 14       	cp	r4, r1
    4b8e:	51 04       	cpc	r5, r1
    4b90:	71 f7       	brne	.-36     	; 0x4b6e <vfprintf+0x18c>
    4b92:	e5 c0       	rjmp	.+458    	; 0x4d5e <vfprintf+0x37c>
    4b94:	84 36       	cpi	r24, 0x64	; 100
    4b96:	11 f0       	breq	.+4      	; 0x4b9c <vfprintf+0x1ba>
    4b98:	89 36       	cpi	r24, 0x69	; 105
    4b9a:	39 f5       	brne	.+78     	; 0x4bea <vfprintf+0x208>
    4b9c:	f8 01       	movw	r30, r16
    4b9e:	27 ff       	sbrs	r18, 7
    4ba0:	07 c0       	rjmp	.+14     	; 0x4bb0 <vfprintf+0x1ce>
    4ba2:	60 81       	ld	r22, Z
    4ba4:	71 81       	ldd	r23, Z+1	; 0x01
    4ba6:	82 81       	ldd	r24, Z+2	; 0x02
    4ba8:	93 81       	ldd	r25, Z+3	; 0x03
    4baa:	0c 5f       	subi	r16, 0xFC	; 252
    4bac:	1f 4f       	sbci	r17, 0xFF	; 255
    4bae:	08 c0       	rjmp	.+16     	; 0x4bc0 <vfprintf+0x1de>
    4bb0:	60 81       	ld	r22, Z
    4bb2:	71 81       	ldd	r23, Z+1	; 0x01
    4bb4:	88 27       	eor	r24, r24
    4bb6:	77 fd       	sbrc	r23, 7
    4bb8:	80 95       	com	r24
    4bba:	98 2f       	mov	r25, r24
    4bbc:	0e 5f       	subi	r16, 0xFE	; 254
    4bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc0:	2f 76       	andi	r18, 0x6F	; 111
    4bc2:	b2 2e       	mov	r11, r18
    4bc4:	97 ff       	sbrs	r25, 7
    4bc6:	09 c0       	rjmp	.+18     	; 0x4bda <vfprintf+0x1f8>
    4bc8:	90 95       	com	r25
    4bca:	80 95       	com	r24
    4bcc:	70 95       	com	r23
    4bce:	61 95       	neg	r22
    4bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    4bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd6:	20 68       	ori	r18, 0x80	; 128
    4bd8:	b2 2e       	mov	r11, r18
    4bda:	2a e0       	ldi	r18, 0x0A	; 10
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	a4 01       	movw	r20, r8
    4be0:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__ultoa_invert>
    4be4:	a8 2e       	mov	r10, r24
    4be6:	a8 18       	sub	r10, r8
    4be8:	44 c0       	rjmp	.+136    	; 0x4c72 <vfprintf+0x290>
    4bea:	85 37       	cpi	r24, 0x75	; 117
    4bec:	29 f4       	brne	.+10     	; 0x4bf8 <vfprintf+0x216>
    4bee:	2f 7e       	andi	r18, 0xEF	; 239
    4bf0:	b2 2e       	mov	r11, r18
    4bf2:	2a e0       	ldi	r18, 0x0A	; 10
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	25 c0       	rjmp	.+74     	; 0x4c42 <vfprintf+0x260>
    4bf8:	f2 2f       	mov	r31, r18
    4bfa:	f9 7f       	andi	r31, 0xF9	; 249
    4bfc:	bf 2e       	mov	r11, r31
    4bfe:	8f 36       	cpi	r24, 0x6F	; 111
    4c00:	c1 f0       	breq	.+48     	; 0x4c32 <vfprintf+0x250>
    4c02:	18 f4       	brcc	.+6      	; 0x4c0a <vfprintf+0x228>
    4c04:	88 35       	cpi	r24, 0x58	; 88
    4c06:	79 f0       	breq	.+30     	; 0x4c26 <vfprintf+0x244>
    4c08:	b4 c0       	rjmp	.+360    	; 0x4d72 <vfprintf+0x390>
    4c0a:	80 37       	cpi	r24, 0x70	; 112
    4c0c:	19 f0       	breq	.+6      	; 0x4c14 <vfprintf+0x232>
    4c0e:	88 37       	cpi	r24, 0x78	; 120
    4c10:	21 f0       	breq	.+8      	; 0x4c1a <vfprintf+0x238>
    4c12:	af c0       	rjmp	.+350    	; 0x4d72 <vfprintf+0x390>
    4c14:	2f 2f       	mov	r18, r31
    4c16:	20 61       	ori	r18, 0x10	; 16
    4c18:	b2 2e       	mov	r11, r18
    4c1a:	b4 fe       	sbrs	r11, 4
    4c1c:	0d c0       	rjmp	.+26     	; 0x4c38 <vfprintf+0x256>
    4c1e:	8b 2d       	mov	r24, r11
    4c20:	84 60       	ori	r24, 0x04	; 4
    4c22:	b8 2e       	mov	r11, r24
    4c24:	09 c0       	rjmp	.+18     	; 0x4c38 <vfprintf+0x256>
    4c26:	24 ff       	sbrs	r18, 4
    4c28:	0a c0       	rjmp	.+20     	; 0x4c3e <vfprintf+0x25c>
    4c2a:	9f 2f       	mov	r25, r31
    4c2c:	96 60       	ori	r25, 0x06	; 6
    4c2e:	b9 2e       	mov	r11, r25
    4c30:	06 c0       	rjmp	.+12     	; 0x4c3e <vfprintf+0x25c>
    4c32:	28 e0       	ldi	r18, 0x08	; 8
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	05 c0       	rjmp	.+10     	; 0x4c42 <vfprintf+0x260>
    4c38:	20 e1       	ldi	r18, 0x10	; 16
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	02 c0       	rjmp	.+4      	; 0x4c42 <vfprintf+0x260>
    4c3e:	20 e1       	ldi	r18, 0x10	; 16
    4c40:	32 e0       	ldi	r19, 0x02	; 2
    4c42:	f8 01       	movw	r30, r16
    4c44:	b7 fe       	sbrs	r11, 7
    4c46:	07 c0       	rjmp	.+14     	; 0x4c56 <vfprintf+0x274>
    4c48:	60 81       	ld	r22, Z
    4c4a:	71 81       	ldd	r23, Z+1	; 0x01
    4c4c:	82 81       	ldd	r24, Z+2	; 0x02
    4c4e:	93 81       	ldd	r25, Z+3	; 0x03
    4c50:	0c 5f       	subi	r16, 0xFC	; 252
    4c52:	1f 4f       	sbci	r17, 0xFF	; 255
    4c54:	06 c0       	rjmp	.+12     	; 0x4c62 <vfprintf+0x280>
    4c56:	60 81       	ld	r22, Z
    4c58:	71 81       	ldd	r23, Z+1	; 0x01
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	0e 5f       	subi	r16, 0xFE	; 254
    4c60:	1f 4f       	sbci	r17, 0xFF	; 255
    4c62:	a4 01       	movw	r20, r8
    4c64:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__ultoa_invert>
    4c68:	a8 2e       	mov	r10, r24
    4c6a:	a8 18       	sub	r10, r8
    4c6c:	fb 2d       	mov	r31, r11
    4c6e:	ff 77       	andi	r31, 0x7F	; 127
    4c70:	bf 2e       	mov	r11, r31
    4c72:	b6 fe       	sbrs	r11, 6
    4c74:	0b c0       	rjmp	.+22     	; 0x4c8c <vfprintf+0x2aa>
    4c76:	2b 2d       	mov	r18, r11
    4c78:	2e 7f       	andi	r18, 0xFE	; 254
    4c7a:	a5 14       	cp	r10, r5
    4c7c:	50 f4       	brcc	.+20     	; 0x4c92 <vfprintf+0x2b0>
    4c7e:	b4 fe       	sbrs	r11, 4
    4c80:	0a c0       	rjmp	.+20     	; 0x4c96 <vfprintf+0x2b4>
    4c82:	b2 fc       	sbrc	r11, 2
    4c84:	08 c0       	rjmp	.+16     	; 0x4c96 <vfprintf+0x2b4>
    4c86:	2b 2d       	mov	r18, r11
    4c88:	2e 7e       	andi	r18, 0xEE	; 238
    4c8a:	05 c0       	rjmp	.+10     	; 0x4c96 <vfprintf+0x2b4>
    4c8c:	7a 2c       	mov	r7, r10
    4c8e:	2b 2d       	mov	r18, r11
    4c90:	03 c0       	rjmp	.+6      	; 0x4c98 <vfprintf+0x2b6>
    4c92:	7a 2c       	mov	r7, r10
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <vfprintf+0x2b6>
    4c96:	75 2c       	mov	r7, r5
    4c98:	24 ff       	sbrs	r18, 4
    4c9a:	0d c0       	rjmp	.+26     	; 0x4cb6 <vfprintf+0x2d4>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	ea 0d       	add	r30, r10
    4ca0:	f1 1d       	adc	r31, r1
    4ca2:	80 81       	ld	r24, Z
    4ca4:	80 33       	cpi	r24, 0x30	; 48
    4ca6:	11 f4       	brne	.+4      	; 0x4cac <vfprintf+0x2ca>
    4ca8:	29 7e       	andi	r18, 0xE9	; 233
    4caa:	09 c0       	rjmp	.+18     	; 0x4cbe <vfprintf+0x2dc>
    4cac:	22 ff       	sbrs	r18, 2
    4cae:	06 c0       	rjmp	.+12     	; 0x4cbc <vfprintf+0x2da>
    4cb0:	73 94       	inc	r7
    4cb2:	73 94       	inc	r7
    4cb4:	04 c0       	rjmp	.+8      	; 0x4cbe <vfprintf+0x2dc>
    4cb6:	82 2f       	mov	r24, r18
    4cb8:	86 78       	andi	r24, 0x86	; 134
    4cba:	09 f0       	breq	.+2      	; 0x4cbe <vfprintf+0x2dc>
    4cbc:	73 94       	inc	r7
    4cbe:	23 fd       	sbrc	r18, 3
    4cc0:	13 c0       	rjmp	.+38     	; 0x4ce8 <vfprintf+0x306>
    4cc2:	20 ff       	sbrs	r18, 0
    4cc4:	06 c0       	rjmp	.+12     	; 0x4cd2 <vfprintf+0x2f0>
    4cc6:	5a 2c       	mov	r5, r10
    4cc8:	73 14       	cp	r7, r3
    4cca:	18 f4       	brcc	.+6      	; 0x4cd2 <vfprintf+0x2f0>
    4ccc:	53 0c       	add	r5, r3
    4cce:	57 18       	sub	r5, r7
    4cd0:	73 2c       	mov	r7, r3
    4cd2:	73 14       	cp	r7, r3
    4cd4:	68 f4       	brcc	.+26     	; 0x4cf0 <vfprintf+0x30e>
    4cd6:	b7 01       	movw	r22, r14
    4cd8:	80 e2       	ldi	r24, 0x20	; 32
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	2c 87       	std	Y+12, r18	; 0x0c
    4cde:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4ce2:	73 94       	inc	r7
    4ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ce6:	f5 cf       	rjmp	.-22     	; 0x4cd2 <vfprintf+0x2f0>
    4ce8:	73 14       	cp	r7, r3
    4cea:	10 f4       	brcc	.+4      	; 0x4cf0 <vfprintf+0x30e>
    4cec:	37 18       	sub	r3, r7
    4cee:	01 c0       	rjmp	.+2      	; 0x4cf2 <vfprintf+0x310>
    4cf0:	31 2c       	mov	r3, r1
    4cf2:	24 ff       	sbrs	r18, 4
    4cf4:	12 c0       	rjmp	.+36     	; 0x4d1a <vfprintf+0x338>
    4cf6:	b7 01       	movw	r22, r14
    4cf8:	80 e3       	ldi	r24, 0x30	; 48
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	2c 87       	std	Y+12, r18	; 0x0c
    4cfe:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4d02:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d04:	22 ff       	sbrs	r18, 2
    4d06:	17 c0       	rjmp	.+46     	; 0x4d36 <vfprintf+0x354>
    4d08:	21 ff       	sbrs	r18, 1
    4d0a:	03 c0       	rjmp	.+6      	; 0x4d12 <vfprintf+0x330>
    4d0c:	88 e5       	ldi	r24, 0x58	; 88
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	02 c0       	rjmp	.+4      	; 0x4d16 <vfprintf+0x334>
    4d12:	88 e7       	ldi	r24, 0x78	; 120
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	b7 01       	movw	r22, r14
    4d18:	0c c0       	rjmp	.+24     	; 0x4d32 <vfprintf+0x350>
    4d1a:	82 2f       	mov	r24, r18
    4d1c:	86 78       	andi	r24, 0x86	; 134
    4d1e:	59 f0       	breq	.+22     	; 0x4d36 <vfprintf+0x354>
    4d20:	21 fd       	sbrc	r18, 1
    4d22:	02 c0       	rjmp	.+4      	; 0x4d28 <vfprintf+0x346>
    4d24:	80 e2       	ldi	r24, 0x20	; 32
    4d26:	01 c0       	rjmp	.+2      	; 0x4d2a <vfprintf+0x348>
    4d28:	8b e2       	ldi	r24, 0x2B	; 43
    4d2a:	27 fd       	sbrc	r18, 7
    4d2c:	8d e2       	ldi	r24, 0x2D	; 45
    4d2e:	b7 01       	movw	r22, r14
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4d36:	a5 14       	cp	r10, r5
    4d38:	38 f4       	brcc	.+14     	; 0x4d48 <vfprintf+0x366>
    4d3a:	b7 01       	movw	r22, r14
    4d3c:	80 e3       	ldi	r24, 0x30	; 48
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4d44:	5a 94       	dec	r5
    4d46:	f7 cf       	rjmp	.-18     	; 0x4d36 <vfprintf+0x354>
    4d48:	aa 94       	dec	r10
    4d4a:	f4 01       	movw	r30, r8
    4d4c:	ea 0d       	add	r30, r10
    4d4e:	f1 1d       	adc	r31, r1
    4d50:	80 81       	ld	r24, Z
    4d52:	b7 01       	movw	r22, r14
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4d5a:	a1 10       	cpse	r10, r1
    4d5c:	f5 cf       	rjmp	.-22     	; 0x4d48 <vfprintf+0x366>
    4d5e:	33 20       	and	r3, r3
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <vfprintf+0x382>
    4d62:	51 ce       	rjmp	.-862    	; 0x4a06 <vfprintf+0x24>
    4d64:	b7 01       	movw	r22, r14
    4d66:	80 e2       	ldi	r24, 0x20	; 32
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <fputc>
    4d6e:	3a 94       	dec	r3
    4d70:	f6 cf       	rjmp	.-20     	; 0x4d5e <vfprintf+0x37c>
    4d72:	f7 01       	movw	r30, r14
    4d74:	86 81       	ldd	r24, Z+6	; 0x06
    4d76:	97 81       	ldd	r25, Z+7	; 0x07
    4d78:	02 c0       	rjmp	.+4      	; 0x4d7e <vfprintf+0x39c>
    4d7a:	8f ef       	ldi	r24, 0xFF	; 255
    4d7c:	9f ef       	ldi	r25, 0xFF	; 255
    4d7e:	2c 96       	adiw	r28, 0x0c	; 12
    4d80:	e2 e1       	ldi	r30, 0x12	; 18
    4d82:	0c 94 85 27 	jmp	0x4f0a	; 0x4f0a <__epilogue_restores__>

00004d86 <strnlen_P>:
    4d86:	fc 01       	movw	r30, r24
    4d88:	05 90       	lpm	r0, Z+
    4d8a:	61 50       	subi	r22, 0x01	; 1
    4d8c:	70 40       	sbci	r23, 0x00	; 0
    4d8e:	01 10       	cpse	r0, r1
    4d90:	d8 f7       	brcc	.-10     	; 0x4d88 <strnlen_P+0x2>
    4d92:	80 95       	com	r24
    4d94:	90 95       	com	r25
    4d96:	8e 0f       	add	r24, r30
    4d98:	9f 1f       	adc	r25, r31
    4d9a:	08 95       	ret

00004d9c <strnlen>:
    4d9c:	fc 01       	movw	r30, r24
    4d9e:	61 50       	subi	r22, 0x01	; 1
    4da0:	70 40       	sbci	r23, 0x00	; 0
    4da2:	01 90       	ld	r0, Z+
    4da4:	01 10       	cpse	r0, r1
    4da6:	d8 f7       	brcc	.-10     	; 0x4d9e <strnlen+0x2>
    4da8:	80 95       	com	r24
    4daa:	90 95       	com	r25
    4dac:	8e 0f       	add	r24, r30
    4dae:	9f 1f       	adc	r25, r31
    4db0:	08 95       	ret

00004db2 <fputc>:
    4db2:	0f 93       	push	r16
    4db4:	1f 93       	push	r17
    4db6:	cf 93       	push	r28
    4db8:	df 93       	push	r29
    4dba:	18 2f       	mov	r17, r24
    4dbc:	09 2f       	mov	r16, r25
    4dbe:	eb 01       	movw	r28, r22
    4dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc2:	81 fd       	sbrc	r24, 1
    4dc4:	03 c0       	rjmp	.+6      	; 0x4dcc <fputc+0x1a>
    4dc6:	8f ef       	ldi	r24, 0xFF	; 255
    4dc8:	9f ef       	ldi	r25, 0xFF	; 255
    4dca:	20 c0       	rjmp	.+64     	; 0x4e0c <fputc+0x5a>
    4dcc:	82 ff       	sbrs	r24, 2
    4dce:	10 c0       	rjmp	.+32     	; 0x4df0 <fputc+0x3e>
    4dd0:	4e 81       	ldd	r20, Y+6	; 0x06
    4dd2:	5f 81       	ldd	r21, Y+7	; 0x07
    4dd4:	2c 81       	ldd	r18, Y+4	; 0x04
    4dd6:	3d 81       	ldd	r19, Y+5	; 0x05
    4dd8:	42 17       	cp	r20, r18
    4dda:	53 07       	cpc	r21, r19
    4ddc:	7c f4       	brge	.+30     	; 0x4dfc <fputc+0x4a>
    4dde:	e8 81       	ld	r30, Y
    4de0:	f9 81       	ldd	r31, Y+1	; 0x01
    4de2:	9f 01       	movw	r18, r30
    4de4:	2f 5f       	subi	r18, 0xFF	; 255
    4de6:	3f 4f       	sbci	r19, 0xFF	; 255
    4de8:	39 83       	std	Y+1, r19	; 0x01
    4dea:	28 83       	st	Y, r18
    4dec:	10 83       	st	Z, r17
    4dee:	06 c0       	rjmp	.+12     	; 0x4dfc <fputc+0x4a>
    4df0:	e8 85       	ldd	r30, Y+8	; 0x08
    4df2:	f9 85       	ldd	r31, Y+9	; 0x09
    4df4:	81 2f       	mov	r24, r17
    4df6:	09 95       	icall
    4df8:	89 2b       	or	r24, r25
    4dfa:	29 f7       	brne	.-54     	; 0x4dc6 <fputc+0x14>
    4dfc:	2e 81       	ldd	r18, Y+6	; 0x06
    4dfe:	3f 81       	ldd	r19, Y+7	; 0x07
    4e00:	2f 5f       	subi	r18, 0xFF	; 255
    4e02:	3f 4f       	sbci	r19, 0xFF	; 255
    4e04:	3f 83       	std	Y+7, r19	; 0x07
    4e06:	2e 83       	std	Y+6, r18	; 0x06
    4e08:	81 2f       	mov	r24, r17
    4e0a:	90 2f       	mov	r25, r16
    4e0c:	df 91       	pop	r29
    4e0e:	cf 91       	pop	r28
    4e10:	1f 91       	pop	r17
    4e12:	0f 91       	pop	r16
    4e14:	08 95       	ret

00004e16 <__ultoa_invert>:
    4e16:	fa 01       	movw	r30, r20
    4e18:	aa 27       	eor	r26, r26
    4e1a:	28 30       	cpi	r18, 0x08	; 8
    4e1c:	51 f1       	breq	.+84     	; 0x4e72 <__ultoa_invert+0x5c>
    4e1e:	20 31       	cpi	r18, 0x10	; 16
    4e20:	81 f1       	breq	.+96     	; 0x4e82 <__ultoa_invert+0x6c>
    4e22:	e8 94       	clt
    4e24:	6f 93       	push	r22
    4e26:	6e 7f       	andi	r22, 0xFE	; 254
    4e28:	6e 5f       	subi	r22, 0xFE	; 254
    4e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e30:	af 4f       	sbci	r26, 0xFF	; 255
    4e32:	b1 e0       	ldi	r27, 0x01	; 1
    4e34:	3e d0       	rcall	.+124    	; 0x4eb2 <__ultoa_invert+0x9c>
    4e36:	b4 e0       	ldi	r27, 0x04	; 4
    4e38:	3c d0       	rcall	.+120    	; 0x4eb2 <__ultoa_invert+0x9c>
    4e3a:	67 0f       	add	r22, r23
    4e3c:	78 1f       	adc	r23, r24
    4e3e:	89 1f       	adc	r24, r25
    4e40:	9a 1f       	adc	r25, r26
    4e42:	a1 1d       	adc	r26, r1
    4e44:	68 0f       	add	r22, r24
    4e46:	79 1f       	adc	r23, r25
    4e48:	8a 1f       	adc	r24, r26
    4e4a:	91 1d       	adc	r25, r1
    4e4c:	a1 1d       	adc	r26, r1
    4e4e:	6a 0f       	add	r22, r26
    4e50:	71 1d       	adc	r23, r1
    4e52:	81 1d       	adc	r24, r1
    4e54:	91 1d       	adc	r25, r1
    4e56:	a1 1d       	adc	r26, r1
    4e58:	20 d0       	rcall	.+64     	; 0x4e9a <__ultoa_invert+0x84>
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <__ultoa_invert+0x48>
    4e5c:	68 94       	set
    4e5e:	3f 91       	pop	r19
    4e60:	2a e0       	ldi	r18, 0x0A	; 10
    4e62:	26 9f       	mul	r18, r22
    4e64:	11 24       	eor	r1, r1
    4e66:	30 19       	sub	r19, r0
    4e68:	30 5d       	subi	r19, 0xD0	; 208
    4e6a:	31 93       	st	Z+, r19
    4e6c:	de f6       	brtc	.-74     	; 0x4e24 <__ultoa_invert+0xe>
    4e6e:	cf 01       	movw	r24, r30
    4e70:	08 95       	ret
    4e72:	46 2f       	mov	r20, r22
    4e74:	47 70       	andi	r20, 0x07	; 7
    4e76:	40 5d       	subi	r20, 0xD0	; 208
    4e78:	41 93       	st	Z+, r20
    4e7a:	b3 e0       	ldi	r27, 0x03	; 3
    4e7c:	0f d0       	rcall	.+30     	; 0x4e9c <__ultoa_invert+0x86>
    4e7e:	c9 f7       	brne	.-14     	; 0x4e72 <__ultoa_invert+0x5c>
    4e80:	f6 cf       	rjmp	.-20     	; 0x4e6e <__ultoa_invert+0x58>
    4e82:	46 2f       	mov	r20, r22
    4e84:	4f 70       	andi	r20, 0x0F	; 15
    4e86:	40 5d       	subi	r20, 0xD0	; 208
    4e88:	4a 33       	cpi	r20, 0x3A	; 58
    4e8a:	18 f0       	brcs	.+6      	; 0x4e92 <__ultoa_invert+0x7c>
    4e8c:	49 5d       	subi	r20, 0xD9	; 217
    4e8e:	31 fd       	sbrc	r19, 1
    4e90:	40 52       	subi	r20, 0x20	; 32
    4e92:	41 93       	st	Z+, r20
    4e94:	02 d0       	rcall	.+4      	; 0x4e9a <__ultoa_invert+0x84>
    4e96:	a9 f7       	brne	.-22     	; 0x4e82 <__ultoa_invert+0x6c>
    4e98:	ea cf       	rjmp	.-44     	; 0x4e6e <__ultoa_invert+0x58>
    4e9a:	b4 e0       	ldi	r27, 0x04	; 4
    4e9c:	a6 95       	lsr	r26
    4e9e:	97 95       	ror	r25
    4ea0:	87 95       	ror	r24
    4ea2:	77 95       	ror	r23
    4ea4:	67 95       	ror	r22
    4ea6:	ba 95       	dec	r27
    4ea8:	c9 f7       	brne	.-14     	; 0x4e9c <__ultoa_invert+0x86>
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	61 05       	cpc	r22, r1
    4eae:	71 05       	cpc	r23, r1
    4eb0:	08 95       	ret
    4eb2:	9b 01       	movw	r18, r22
    4eb4:	ac 01       	movw	r20, r24
    4eb6:	0a 2e       	mov	r0, r26
    4eb8:	06 94       	lsr	r0
    4eba:	57 95       	ror	r21
    4ebc:	47 95       	ror	r20
    4ebe:	37 95       	ror	r19
    4ec0:	27 95       	ror	r18
    4ec2:	ba 95       	dec	r27
    4ec4:	c9 f7       	brne	.-14     	; 0x4eb8 <__ultoa_invert+0xa2>
    4ec6:	62 0f       	add	r22, r18
    4ec8:	73 1f       	adc	r23, r19
    4eca:	84 1f       	adc	r24, r20
    4ecc:	95 1f       	adc	r25, r21
    4ece:	a0 1d       	adc	r26, r0
    4ed0:	08 95       	ret

00004ed2 <__prologue_saves__>:
    4ed2:	2f 92       	push	r2
    4ed4:	3f 92       	push	r3
    4ed6:	4f 92       	push	r4
    4ed8:	5f 92       	push	r5
    4eda:	6f 92       	push	r6
    4edc:	7f 92       	push	r7
    4ede:	8f 92       	push	r8
    4ee0:	9f 92       	push	r9
    4ee2:	af 92       	push	r10
    4ee4:	bf 92       	push	r11
    4ee6:	cf 92       	push	r12
    4ee8:	df 92       	push	r13
    4eea:	ef 92       	push	r14
    4eec:	ff 92       	push	r15
    4eee:	0f 93       	push	r16
    4ef0:	1f 93       	push	r17
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	cd b7       	in	r28, 0x3d	; 61
    4ef8:	de b7       	in	r29, 0x3e	; 62
    4efa:	ca 1b       	sub	r28, r26
    4efc:	db 0b       	sbc	r29, r27
    4efe:	0f b6       	in	r0, 0x3f	; 63
    4f00:	f8 94       	cli
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	09 94       	ijmp

00004f0a <__epilogue_restores__>:
    4f0a:	2a 88       	ldd	r2, Y+18	; 0x12
    4f0c:	39 88       	ldd	r3, Y+17	; 0x11
    4f0e:	48 88       	ldd	r4, Y+16	; 0x10
    4f10:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f12:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f14:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f16:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f18:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f1c:	b9 84       	ldd	r11, Y+9	; 0x09
    4f1e:	c8 84       	ldd	r12, Y+8	; 0x08
    4f20:	df 80       	ldd	r13, Y+7	; 0x07
    4f22:	ee 80       	ldd	r14, Y+6	; 0x06
    4f24:	fd 80       	ldd	r15, Y+5	; 0x05
    4f26:	0c 81       	ldd	r16, Y+4	; 0x04
    4f28:	1b 81       	ldd	r17, Y+3	; 0x03
    4f2a:	aa 81       	ldd	r26, Y+2	; 0x02
    4f2c:	b9 81       	ldd	r27, Y+1	; 0x01
    4f2e:	ce 0f       	add	r28, r30
    4f30:	d1 1d       	adc	r29, r1
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	ed 01       	movw	r28, r26
    4f3e:	08 95       	ret

00004f40 <_exit>:
    4f40:	f8 94       	cli

00004f42 <__stop_program>:
    4f42:	ff cf       	rjmp	.-2      	; 0x4f42 <__stop_program>
