
SynthLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f2  00800100  00005828  000058bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  008004f2  008004f2  00005cae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005cae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00005d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004700  00000000  00000000  00005d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000332  00000000  00000000  0000a492  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014fe  00000000  00000000  0000a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000334  00000000  00000000  0000bcc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6a  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005f1e  00000000  00000000  0000cb62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009c0  00000000  00000000  00012a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 03 	jmp	0x700	; 0x700 <__ctors_end>
       4:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       8:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      10:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      14:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      18:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      1c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      20:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      24:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <__vector_9>
      28:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      2c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      30:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      34:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      38:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      3c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      40:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      48:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__vector_18>
      4c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      50:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      54:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <__vector_21>
      58:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      5c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      60:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      64:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	01 01       	movw	r0, r2
      6e:	01 02       	muls	r16, r17
      70:	02 03       	mulsu	r16, r18
      72:	04 05       	cpc	r16, r4
      74:	05 06       	cpc	r0, r21
      76:	07 09       	sbc	r16, r7
      78:	0a 0b       	sbc	r16, r26
      7a:	0c 0e       	add	r0, r28
      7c:	0f 10       	cpse	r0, r15
      7e:	12 14       	cp	r1, r2
      80:	15 17       	cp	r17, r21
      82:	19 1b       	sub	r17, r25
      84:	1d 1f       	adc	r17, r29
      86:	21 23       	and	r18, r17
      88:	25 27       	eor	r18, r21
      8a:	2a 2c       	mov	r2, r10
      8c:	2e 31       	cpi	r18, 0x1E	; 30
      8e:	33 36       	cpi	r19, 0x63	; 99
      90:	38 3b       	cpi	r19, 0xB8	; 184
      92:	3e 40       	sbci	r19, 0x0E	; 14
      94:	43 46       	sbci	r20, 0x63	; 99
      96:	49 4c       	sbci	r20, 0xC9	; 201
      98:	4e 51       	subi	r20, 0x1E	; 30
      9a:	54 57       	subi	r21, 0x74	; 116
      9c:	5a 5d       	subi	r21, 0xDA	; 218
      9e:	60 63       	ori	r22, 0x30	; 48
      a0:	66 69       	ori	r22, 0x96	; 150
      a2:	6c 6f       	ori	r22, 0xFC	; 252
      a4:	73 76       	andi	r23, 0x63	; 99
      a6:	79 7c       	andi	r23, 0xC9	; 201
      a8:	7f 82       	std	Y+7, r7	; 0x07
      aa:	85 88       	ldd	r8, Z+21	; 0x15
      ac:	8b 8f       	std	Y+27, r24	; 0x1b
      ae:	92 95       	swap	r25
      b0:	98 9b       	sbis	0x13, 0	; 19
      b2:	9e a1       	ldd	r25, Y+38	; 0x26
      b4:	a4 a7       	std	Z+44, r26	; 0x2c
      b6:	aa ad       	ldd	r26, Y+58	; 0x3a
      b8:	b0 b2       	in	r11, 0x10	; 16
      ba:	b5 b8       	out	0x05, r11	; 5
      bc:	bb be       	out	0x3b, r11	; 59
      be:	c0 c3       	rjmp	.+1920   	; 0x840 <_Z10noteUpdatev+0x102>
      c0:	c6 c8       	rjmp	.-3700   	; 0xfffff24e <__eeprom_end+0xff7ef24e>
      c2:	cb cd       	rjmp	.-1130   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      c4:	d0 d2       	rcall	.+1440   	; 0x666 <__trampolines_end+0x5fe>
      c6:	d4 d7       	rcall	.+4008   	; 0x1070 <_Z14osc1MenuUpdatev+0x532>
      c8:	d9 db       	rcall	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	dd df       	rcall	.-70     	; 0x86 <__trampolines_end+0x1e>
      cc:	e1 e3       	ldi	r30, 0x31	; 49
      ce:	e5 e7       	ldi	r30, 0x75	; 117
      d0:	e9 ea       	ldi	r30, 0xA9	; 169
      d2:	ec ee       	ldi	r30, 0xEC	; 236
      d4:	ef f0       	brie	.+58     	; 0x110 <__trampolines_end+0xa8>
      d6:	f2 f3       	brmi	.-4      	; 0xd4 <__trampolines_end+0x6c>
      d8:	f4 f5       	brge	.+124    	; 0x156 <__trampolines_end+0xee>
      da:	f7 f8       	bld	r15, 7
      dc:	f9 f9       	.word	0xf9f9	; ????
      de:	fa fb       	.word	0xfbfa	; ????
      e0:	fc fc       	.word	0xfcfc	; ????
      e2:	fd fd       	.word	0xfdfd	; ????
      e4:	fd fe       	.word	0xfefd	; ????
      e6:	fe fe       	.word	0xfefe	; ????
      e8:	fe fe       	.word	0xfefe	; ????
      ea:	fe fe       	.word	0xfefe	; ????
      ec:	fd fd       	.word	0xfdfd	; ????
      ee:	fd fc       	.word	0xfcfd	; ????
      f0:	fc fb       	.word	0xfbfc	; ????
      f2:	fa f9       	.word	0xf9fa	; ????
      f4:	f9 f8       	.word	0xf8f9	; ????
      f6:	f7 f5       	brid	.+124    	; 0x174 <__trampolines_end+0x10c>
      f8:	f4 f3       	brlt	.-4      	; 0xf6 <__trampolines_end+0x8e>
      fa:	f2 f0       	brmi	.+60     	; 0x138 <__trampolines_end+0xd0>
      fc:	ef ee       	ldi	r30, 0xEF	; 239
      fe:	ec ea       	ldi	r30, 0xAC	; 172
     100:	e9 e7       	ldi	r30, 0x79	; 121
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e1 df       	rcall	.-62     	; 0xc8 <__trampolines_end+0x60>
     106:	dd db       	rcall	.-2118   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
     108:	d9 d7       	rcall	.+4018   	; 0x10bc <_Z14osc1MenuUpdatev+0x57e>
     10a:	d4 d2       	rcall	.+1448   	; 0x6b4 <_ZL15phase1RouteName+0x4>
     10c:	d0 cd       	rjmp	.-1120   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     10e:	cb c8       	rjmp	.-3690   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
     110:	c6 c3       	rjmp	.+1932   	; 0x89e <_Z10noteUpdatev+0x160>
     112:	c0 be       	out	0x30, r12	; 48
     114:	bb b8       	out	0x0b, r11	; 11
     116:	b5 b2       	in	r11, 0x15	; 21
     118:	b0 ad       	ldd	r27, Z+56	; 0x38
     11a:	aa a7       	std	Y+42, r26	; 0x2a
     11c:	a4 a1       	ldd	r26, Z+36	; 0x24
     11e:	9e 9b       	sbis	0x13, 6	; 19
     120:	98 95       	break
     122:	92 8f       	std	Z+26, r25	; 0x1a
     124:	8b 88       	ldd	r8, Y+19	; 0x13
     126:	85 82       	std	Z+5, r8	; 0x05
     128:	7f 7c       	andi	r23, 0xCF	; 207
     12a:	79 76       	andi	r23, 0x69	; 105
     12c:	73 6f       	ori	r23, 0xF3	; 243
     12e:	6c 69       	ori	r22, 0x9C	; 156
     130:	66 63       	ori	r22, 0x36	; 54
     132:	60 5d       	subi	r22, 0xD0	; 208
     134:	5a 57       	subi	r21, 0x7A	; 122
     136:	54 51       	subi	r21, 0x14	; 20
     138:	4e 4c       	sbci	r20, 0xCE	; 206
     13a:	49 46       	sbci	r20, 0x69	; 105
     13c:	43 40       	sbci	r20, 0x03	; 3
     13e:	3e 3b       	cpi	r19, 0xBE	; 190
     140:	38 36       	cpi	r19, 0x68	; 104
     142:	33 31       	cpi	r19, 0x13	; 19
     144:	2e 2c       	mov	r2, r14
     146:	2a 27       	eor	r18, r26
     148:	25 23       	and	r18, r21
     14a:	21 1f       	adc	r18, r17
     14c:	1d 1b       	sub	r17, r29
     14e:	19 17       	cp	r17, r25
     150:	15 14       	cp	r1, r5
     152:	12 10       	cpse	r1, r2
     154:	0f 0e       	add	r0, r31
     156:	0c 0b       	sbc	r16, r28
     158:	0a 09       	sbc	r16, r10
     15a:	07 06       	cpc	r0, r23
     15c:	05 05       	cpc	r16, r5
     15e:	04 03       	mulsu	r16, r20
     160:	02 02       	muls	r16, r18
     162:	01 01       	movw	r0, r2
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	80 81       	ld	r24, Z
     16a:	83 85       	ldd	r24, Z+11	; 0x0b
     16c:	87 89       	ldd	r24, Z+23	; 0x17
     16e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     170:	90 92 94 96 	sts	0x9694, r9
     174:	98 9a       	sbi	0x13, 0	; 19
     176:	9d 9f       	mul	r25, r29
     178:	a1 a4       	ldd	r10, Z+41	; 0x29
     17a:	a6 a8       	ldd	r10, Z+54	; 0x36
     17c:	aa ad       	ldd	r26, Y+58	; 0x3a
     17e:	af b1       	in	r26, 0x0f	; 15
     180:	b3 b5       	in	r27, 0x23	; 35
     182:	b7 b9       	out	0x07, r27	; 7
     184:	bb bd       	out	0x2b, r27	; 43
     186:	bf c1       	rjmp	.+894    	; 0x506 <__trampolines_end+0x49e>
     188:	c3 c5       	rjmp	.+2950   	; 0xd10 <_Z14osc1MenuUpdatev+0x1d2>
     18a:	c6 c8       	rjmp	.-3700   	; 0xfffff318 <__eeprom_end+0xff7ef318>
     18c:	ca cc       	rjmp	.-1644   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     18e:	ce d0       	rcall	.+412    	; 0x32c <__trampolines_end+0x2c4>
     190:	d2 d5       	rcall	.+2980   	; 0xd36 <_Z14osc1MenuUpdatev+0x1f8>
     192:	d7 d9       	rcall	.-3154   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     194:	dc de       	rcall	.-584    	; 0xffffff4e <__eeprom_end+0xff7eff4e>
     196:	e0 e3       	ldi	r30, 0x30	; 48
     198:	e5 e8       	ldi	r30, 0x85	; 133
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	ef f1       	brie	.+122    	; 0x218 <__trampolines_end+0x1b0>
     19e:	f4 f6       	brge	.-68     	; 0x15c <__trampolines_end+0xf4>
     1a0:	f8 f9       	.word	0xf9f8	; ????
     1a2:	fb fc       	.word	0xfcfb	; ????
     1a4:	fd fe       	.word	0xfefd	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff ff       	.word	0xffff	; ????
     1aa:	fe fe       	.word	0xfefe	; ????
     1ac:	fd fb       	.word	0xfbfd	; ????
     1ae:	fa f8       	.word	0xf8fa	; ????
     1b0:	f7 f5       	brid	.+124    	; 0x22e <__trampolines_end+0x1c6>
     1b2:	f3 f0       	brvs	.+60     	; 0x1f0 <__trampolines_end+0x188>
     1b4:	ee ec       	ldi	r30, 0xCE	; 206
     1b6:	e9 e7       	ldi	r30, 0x79	; 121
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	df dd       	rcall	.-1090   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     1bc:	da d8       	rcall	.-3660   	; 0xfffff372 <__eeprom_end+0xff7ef372>
     1be:	d6 d4       	rcall	.+2476   	; 0xb6c <_Z14osc1MenuUpdatev+0x2e>
     1c0:	d1 cf       	rjmp	.-94     	; 0x164 <__trampolines_end+0xfc>
     1c2:	cd cb       	rjmp	.-2150   	; 0xfffff95e <__eeprom_end+0xff7ef95e>
     1c4:	c9 c7       	rjmp	.+3986   	; 0x1158 <_Z14osc1MenuUpdatev+0x61a>
     1c6:	c5 c4       	rjmp	.+2442   	; 0xb52 <_Z14osc1MenuUpdatev+0x14>
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__trampolines_end+0x2e6>
     1ca:	be bc       	out	0x2e, r11	; 46
     1cc:	ba b8       	out	0x0a, r11	; 10
     1ce:	b6 b4       	in	r11, 0x26	; 38
     1d0:	b2 b0       	in	r11, 0x02	; 2
     1d2:	ae ab       	std	Y+54, r26	; 0x36
     1d4:	a9 a7       	std	Y+41, r26	; 0x29
     1d6:	a5 a2       	std	Z+37, r10	; 0x25
     1d8:	a0 9e       	mul	r10, r16
     1da:	9c 99       	sbic	0x13, 4	; 19
     1dc:	97 95       	ror	r25
     1de:	93 91       	.word	0x9193	; ????
     1e0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     1e2:	8a 88       	ldd	r8, Y+18	; 0x12
     1e4:	86 84       	ldd	r8, Z+14	; 0x0e
     1e6:	82 80       	ldd	r8, Z+2	; 0x02
     1e8:	7f 7d       	andi	r23, 0xDF	; 223
     1ea:	7b 79       	andi	r23, 0x9B	; 155
     1ec:	77 75       	andi	r23, 0x57	; 87
     1ee:	73 71       	andi	r23, 0x13	; 19
     1f0:	6e 6c       	ori	r22, 0xCE	; 206
     1f2:	6a 68       	ori	r22, 0x8A	; 138
     1f4:	66 63       	ori	r22, 0x36	; 54
     1f6:	61 5f       	subi	r22, 0xF1	; 241
     1f8:	5d 5a       	subi	r21, 0xAD	; 173
     1fa:	58 56       	subi	r21, 0x68	; 104
     1fc:	54 51       	subi	r21, 0x14	; 20
     1fe:	4f 4d       	sbci	r20, 0xDF	; 223
     200:	4b 49       	sbci	r20, 0x9B	; 155
     202:	47 45       	sbci	r20, 0x57	; 87
     204:	43 41       	sbci	r20, 0x13	; 19
     206:	3f 3d       	cpi	r19, 0xDF	; 223
     208:	3b 3a       	cpi	r19, 0xAB	; 171
     20a:	38 36       	cpi	r19, 0x68	; 104
     20c:	34 32       	cpi	r19, 0x24	; 36
     20e:	30 2e       	mov	r3, r16
     210:	2b 29       	or	r18, r11
     212:	27 25       	eor	r18, r7
     214:	22 20       	and	r2, r2
     216:	1d 1b       	sub	r17, r29
     218:	18 16       	cp	r1, r24
     21a:	13 11       	cpse	r17, r3
     21c:	0f 0c       	add	r0, r15
     21e:	0a 08       	sbc	r0, r10
     220:	07 05       	cpc	r16, r7
     222:	04 02       	muls	r16, r20
     224:	01 01       	movw	r0, r2
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 02       	muls	r16, r17
     22c:	03 04       	cpc	r0, r3
     22e:	06 07       	cpc	r16, r22
     230:	09 0b       	sbc	r16, r25
     232:	0e 10       	cpse	r0, r14
     234:	12 15       	cp	r17, r2
     236:	17 1a       	sub	r1, r23
     238:	1c 1f       	adc	r17, r28
     23a:	21 23       	and	r18, r17
     23c:	26 28       	or	r2, r6
     23e:	2a 2d       	mov	r18, r10
     240:	2f 31       	cpi	r18, 0x1F	; 31
     242:	33 35       	cpi	r19, 0x53	; 83
     244:	37 39       	cpi	r19, 0x97	; 151
     246:	3a 3c       	cpi	r19, 0xCA	; 202
     248:	3e 40       	sbci	r19, 0x0E	; 14
     24a:	42 44       	sbci	r20, 0x42	; 66
     24c:	46 48       	sbci	r20, 0x86	; 134
     24e:	4a 4c       	sbci	r20, 0xCA	; 202
     250:	4e 50       	subi	r20, 0x0E	; 14
     252:	52 55       	subi	r21, 0x52	; 82
     254:	57 59       	subi	r21, 0x97	; 151
     256:	5b 5e       	subi	r21, 0xEB	; 235
     258:	60 62       	ori	r22, 0x20	; 32
     25a:	65 67       	ori	r22, 0x75	; 117
     25c:	69 6b       	ori	r22, 0xB9	; 185
     25e:	6d 6f       	ori	r22, 0xFD	; 253
     260:	72 74       	andi	r23, 0x42	; 66
     262:	76 78       	andi	r23, 0x86	; 134
     264:	7a 7c       	andi	r23, 0xCA	; 202
     266:	7e 7f       	andi	r23, 0xFE	; 254
     268:	57 57       	subi	r21, 0x77	; 119
     26a:	57 57       	subi	r21, 0x77	; 119
     26c:	57 56       	subi	r21, 0x67	; 103
     26e:	56 55       	subi	r21, 0x56	; 86
     270:	54 53       	subi	r21, 0x34	; 52
     272:	51 50       	subi	r21, 0x01	; 1
     274:	4e 4d       	sbci	r20, 0xDE	; 222
     276:	4b 49       	sbci	r20, 0x9B	; 155
     278:	47 45       	sbci	r20, 0x57	; 87
     27a:	44 42       	sbci	r20, 0x24	; 36
     27c:	41 40       	sbci	r20, 0x01	; 1
     27e:	3f 3e       	cpi	r19, 0xEF	; 239
     280:	3d 3d       	cpi	r19, 0xDD	; 221
     282:	3d 3d       	cpi	r19, 0xDD	; 221
     284:	3d 3d       	cpi	r19, 0xDD	; 221
     286:	3d 3d       	cpi	r19, 0xDD	; 221
     288:	3d 3d       	cpi	r19, 0xDD	; 221
     28a:	3d 3d       	cpi	r19, 0xDD	; 221
     28c:	3c 3c       	cpi	r19, 0xCC	; 204
     28e:	3b 39       	cpi	r19, 0x9B	; 155
     290:	38 37       	cpi	r19, 0x78	; 120
     292:	35 33       	cpi	r19, 0x35	; 53
     294:	31 2f       	mov	r19, r17
     296:	2e 2c       	mov	r2, r14
     298:	2a 29       	or	r18, r10
     29a:	27 26       	eor	r2, r23
     29c:	25 25       	eor	r18, r5
     29e:	24 24       	eor	r2, r4
     2a0:	24 24       	eor	r2, r4
     2a2:	25 25       	eor	r18, r5
     2a4:	26 26       	eor	r2, r22
     2a6:	27 27       	eor	r18, r23
     2a8:	27 27       	eor	r18, r23
     2aa:	27 27       	eor	r18, r23
     2ac:	26 25       	eor	r18, r6
     2ae:	23 22       	and	r2, r19
     2b0:	20 1e       	adc	r2, r16
     2b2:	1c 1a       	sub	r1, r28
     2b4:	18 16       	cp	r1, r24
     2b6:	14 13       	cpse	r17, r20
     2b8:	11 10       	cpse	r1, r1
     2ba:	10 0f       	add	r17, r16
     2bc:	0f 10       	cpse	r0, r15
     2be:	11 12       	cpse	r1, r17
     2c0:	13 15       	cp	r17, r3
     2c2:	17 18       	sub	r1, r7
     2c4:	1a 1c       	adc	r1, r10
     2c6:	1d 1e       	adc	r1, r29
     2c8:	1e 1f       	adc	r17, r30
     2ca:	1e 1d       	adc	r17, r14
     2cc:	1c 1a       	sub	r1, r28
     2ce:	18 15       	cp	r17, r8
     2d0:	12 0f       	add	r17, r18
     2d2:	0c 08       	sbc	r0, r12
     2d4:	06 03       	mulsu	r16, r22
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	00 01       	movw	r0, r0
     2da:	03 06       	cpc	r0, r19
     2dc:	0b 11       	cpse	r16, r11
     2de:	18 21       	and	r17, r8
     2e0:	2b 36       	cpi	r18, 0x6B	; 107
     2e2:	42 50       	subi	r20, 0x02	; 2
     2e4:	5e 6c       	ori	r21, 0xCE	; 206
     2e6:	7b 8a       	std	Y+19, r7	; 0x13
     2e8:	99 a7       	std	Y+41, r25	; 0x29
     2ea:	b5 c2       	rjmp	.+1386   	; 0x856 <_Z10noteUpdatev+0x118>
     2ec:	cf da       	rcall	.-2658   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     2ee:	e3 ec       	ldi	r30, 0xC3	; 195
     2f0:	f3 f8       	bld	r15, 3
     2f2:	fc fe       	.word	0xfefc	; ????
     2f4:	ff ff       	.word	0xffff	; ????
     2f6:	fd fa       	.word	0xfafd	; ????
     2f8:	f6 f2       	brts	.-68     	; 0x2b6 <__trampolines_end+0x24e>
     2fa:	ed e8       	ldi	r30, 0x8D	; 141
     2fc:	e2 dc       	rcall	.-1596   	; 0xfffffcc2 <__eeprom_end+0xff7efcc2>
     2fe:	d7 d1       	rcall	.+942    	; 0x6ae <_ZL15phase2RouteName+0x5>
     300:	cc c8       	rjmp	.-3688   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     302:	c4 c1       	rjmp	.+904    	; 0x68c <_ZL13waveNameTable+0xc>
     304:	be bc       	out	0x2e, r11	; 46
     306:	ba b9       	out	0x0a, r27	; 10
     308:	b9 b9       	out	0x09, r27	; 9
     30a:	b9 b9       	out	0x09, r27	; 9
     30c:	ba ba       	out	0x1a, r11	; 26
     30e:	bb bb       	out	0x1b, r27	; 27
     310:	bb bb       	out	0x1b, r27	; 27
     312:	ba ba       	out	0x1a, r11	; 26
     314:	b8 b7       	in	r27, 0x38	; 56
     316:	b5 b3       	in	r27, 0x15	; 21
     318:	b0 ad       	ldd	r27, Z+56	; 0x38
     31a:	ab a8       	ldd	r10, Y+51	; 0x33
     31c:	a5 a2       	std	Z+37, r10	; 0x25
     31e:	9f 9d       	mul	r25, r15
     320:	9b 99       	sbic	0x13, 3	; 19
     322:	97 96       	adiw	r26, 0x27	; 39
     324:	94 94       	.word	0x9494	; ????
     326:	93 93       	.word	0x9393	; ????
     328:	93 93       	.word	0x9393	; ????
     32a:	93 93       	.word	0x9393	; ????
     32c:	93 93       	.word	0x9393	; ????
     32e:	93 93       	.word	0x9393	; ????
     330:	92 91       	ld	r25, -Z
     332:	90 8f       	std	Z+24, r25	; 0x18
     334:	8e 8c       	ldd	r8, Y+30	; 0x1e
     336:	8a 88       	ldd	r8, Y+18	; 0x12
     338:	86 84       	ldd	r8, Z+14	; 0x0e
     33a:	82 80       	ldd	r8, Z+2	; 0x02
     33c:	7e 7c       	andi	r23, 0xCE	; 206
     33e:	7a 79       	andi	r23, 0x9A	; 154
     340:	77 76       	andi	r23, 0x67	; 103
     342:	75 75       	andi	r23, 0x55	; 85
     344:	74 74       	andi	r23, 0x44	; 68
     346:	74 73       	andi	r23, 0x34	; 52
     348:	73 73       	andi	r23, 0x33	; 51
     34a:	73 73       	andi	r23, 0x33	; 51
     34c:	73 73       	andi	r23, 0x33	; 51
     34e:	72 72       	andi	r23, 0x22	; 34
     350:	71 70       	andi	r23, 0x01	; 1
     352:	6f 6d       	ori	r22, 0xDF	; 223
     354:	6c 6a       	ori	r22, 0xAC	; 172
     356:	68 66       	ori	r22, 0x68	; 104
     358:	64 62       	ori	r22, 0x24	; 36
     35a:	61 5f       	subi	r22, 0xF1	; 241
     35c:	5d 5c       	subi	r21, 0xCD	; 205
     35e:	5b 5a       	subi	r21, 0xAB	; 171
     360:	59 58       	subi	r21, 0x89	; 137
     362:	58 57       	subi	r21, 0x78	; 120
     364:	57 57       	subi	r21, 0x77	; 119
     366:	57 57       	subi	r21, 0x77	; 119
     368:	a8 a8       	ldd	r10, Y+48	; 0x30
     36a:	a8 a8       	ldd	r10, Y+48	; 0x30
     36c:	a8 a9       	ldd	r26, Y+48	; 0x30
     36e:	a9 aa       	std	Y+49, r10	; 0x31
     370:	ab ac       	ldd	r10, Y+59	; 0x3b
     372:	ae af       	std	Y+62, r26	; 0x3e
     374:	b1 b2       	in	r11, 0x11	; 17
     376:	b4 b6       	in	r11, 0x34	; 52
     378:	b8 ba       	out	0x18, r11	; 24
     37a:	bb bd       	out	0x2b, r27	; 43
     37c:	be bf       	out	0x3e, r27	; 62
     37e:	c0 c1       	rjmp	.+896    	; 0x700 <__ctors_end>
     380:	c2 c2       	rjmp	.+1412   	; 0x906 <__stack+0x7>
     382:	c2 c2       	rjmp	.+1412   	; 0x908 <__stack+0x9>
     384:	c2 c2       	rjmp	.+1412   	; 0x90a <__stack+0xb>
     386:	c2 c2       	rjmp	.+1412   	; 0x90c <__stack+0xd>
     388:	c2 c2       	rjmp	.+1412   	; 0x90e <__stack+0xf>
     38a:	c2 c2       	rjmp	.+1412   	; 0x910 <__stack+0x11>
     38c:	c3 c3       	rjmp	.+1926   	; 0xb14 <_Z9writeLinehPc+0x200>
     38e:	c4 c6       	rjmp	.+3464   	; 0x1118 <_Z14osc1MenuUpdatev+0x5da>
     390:	c7 c8       	rjmp	.-3698   	; 0xfffff520 <__eeprom_end+0xff7ef520>
     392:	ca cc       	rjmp	.-1644   	; 0xfffffd28 <__eeprom_end+0xff7efd28>
     394:	ce d0       	rcall	.+412    	; 0x532 <__trampolines_end+0x4ca>
     396:	d1 d3       	rcall	.+1954   	; 0xb3a <_Z9writeLinehPc+0x226>
     398:	d5 d6       	rcall	.+3498   	; 0x1144 <_Z14osc1MenuUpdatev+0x606>
     39a:	d8 d9       	rcall	.-3152   	; 0xfffff74c <__eeprom_end+0xff7ef74c>
     39c:	da da       	rcall	.-2636   	; 0xfffff952 <__eeprom_end+0xff7ef952>
     39e:	db db       	rcall	.-2122   	; 0xfffffb56 <__eeprom_end+0xff7efb56>
     3a0:	db db       	rcall	.-2122   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     3a2:	da da       	rcall	.-2636   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     3a4:	d9 d9       	rcall	.-3150   	; 0xfffff758 <__eeprom_end+0xff7ef758>
     3a6:	d8 d8       	rcall	.-3664   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3a8:	d8 d8       	rcall	.-3664   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     3aa:	d8 d8       	rcall	.-3664   	; 0xfffff55c <__eeprom_end+0xff7ef55c>
     3ac:	d9 da       	rcall	.-2638   	; 0xfffff960 <__eeprom_end+0xff7ef960>
     3ae:	dc dd       	rcall	.-1096   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     3b0:	df e1       	ldi	r29, 0x1F	; 31
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	e7 e9       	ldi	r30, 0x97	; 151
     3b6:	eb ec       	ldi	r30, 0xCB	; 203
     3b8:	ee ef       	ldi	r30, 0xFE	; 254
     3ba:	ef f0       	brie	.+58     	; 0x3f6 <__trampolines_end+0x38e>
     3bc:	f0 ef       	ldi	r31, 0xF0	; 240
     3be:	ee ed       	ldi	r30, 0xDE	; 222
     3c0:	ec ea       	ldi	r30, 0xAC	; 172
     3c2:	e8 e7       	ldi	r30, 0x78	; 120
     3c4:	e5 e3       	ldi	r30, 0x35	; 53
     3c6:	e2 e1       	ldi	r30, 0x12	; 18
     3c8:	e1 e0       	ldi	r30, 0x01	; 1
     3ca:	e1 e2       	ldi	r30, 0x21	; 33
     3cc:	e3 e5       	ldi	r30, 0x53	; 83
     3ce:	e7 ea       	ldi	r30, 0xA7	; 167
     3d0:	ed f0       	brhs	.+58     	; 0x40c <__trampolines_end+0x3a4>
     3d2:	f3 f7       	brvc	.-4      	; 0x3d0 <__trampolines_end+0x368>
     3d4:	f9 fc       	.word	0xfcf9	; ????
     3d6:	fe ff       	.word	0xfffe	; ????
     3d8:	ff fe       	.word	0xfeff	; ????
     3da:	fc f9       	.word	0xf9fc	; ????
     3dc:	f4 ee       	ldi	r31, 0xE4	; 228
     3de:	e7 de       	rcall	.-562    	; 0x1ae <__trampolines_end+0x146>
     3e0:	d4 c9       	rjmp	.-3160   	; 0xfffff78a <__eeprom_end+0xff7ef78a>
     3e2:	bd af       	std	Y+61, r27	; 0x3d
     3e4:	a1 93       	st	Z+, r26
     3e6:	84 75       	andi	r24, 0x54	; 84
     3e8:	66 58       	subi	r22, 0x86	; 134
     3ea:	4a 3d       	cpi	r20, 0xDA	; 218
     3ec:	30 25       	eor	r19, r0
     3ee:	1c 13       	cpse	r17, r28
     3f0:	0c 07       	cpc	r16, r28
     3f2:	03 01       	movw	r0, r6
     3f4:	00 00       	nop
     3f6:	02 05       	cpc	r16, r2
     3f8:	09 0d       	add	r16, r9
     3fa:	12 17       	cp	r17, r18
     3fc:	1d 23       	and	r17, r29
     3fe:	28 2e       	mov	r2, r24
     400:	33 37       	cpi	r19, 0x73	; 115
     402:	3b 3e       	cpi	r19, 0xEB	; 235
     404:	41 43       	sbci	r20, 0x31	; 49
     406:	45 46       	sbci	r20, 0x65	; 101
     408:	46 46       	sbci	r20, 0x66	; 102
     40a:	46 46       	sbci	r20, 0x66	; 102
     40c:	45 45       	sbci	r20, 0x55	; 85
     40e:	44 44       	sbci	r20, 0x44	; 68
     410:	44 44       	sbci	r20, 0x44	; 68
     412:	45 45       	sbci	r20, 0x55	; 85
     414:	47 48       	sbci	r20, 0x87	; 135
     416:	4a 4c       	sbci	r20, 0xCA	; 202
     418:	4f 52       	subi	r20, 0x2F	; 47
     41a:	54 57       	subi	r21, 0x74	; 116
     41c:	5a 5d       	subi	r21, 0xDA	; 218
     41e:	60 62       	ori	r22, 0x20	; 32
     420:	64 66       	ori	r22, 0x64	; 100
     422:	68 69       	ori	r22, 0x98	; 152
     424:	6b 6b       	ori	r22, 0xBB	; 187
     426:	6c 6c       	ori	r22, 0xCC	; 204
     428:	6c 6c       	ori	r22, 0xCC	; 204
     42a:	6c 6c       	ori	r22, 0xCC	; 204
     42c:	6c 6c       	ori	r22, 0xCC	; 204
     42e:	6c 6c       	ori	r22, 0xCC	; 204
     430:	6d 6e       	ori	r22, 0xED	; 237
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	71 73       	andi	r23, 0x31	; 49
     436:	75 77       	andi	r23, 0x75	; 117
     438:	79 7b       	andi	r23, 0xB9	; 185
     43a:	7d 7f       	andi	r23, 0xFD	; 253
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	85 86       	std	Z+13, r8	; 0x0d
     440:	88 89       	ldd	r24, Y+16	; 0x10
     442:	8a 8a       	std	Y+18, r8	; 0x12
     444:	8b 8b       	std	Y+19, r24	; 0x13
     446:	8b 8c       	ldd	r8, Y+27	; 0x1b
     448:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44a:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     450:	8e 8f       	std	Y+30, r24	; 0x1e
     452:	90 92 93 95 	sts	0x9593, r9
     456:	97 99       	sbic	0x12, 7	; 18
     458:	9b 9d       	mul	r25, r11
     45a:	9e a0       	ldd	r9, Y+38	; 0x26
     45c:	a2 a3       	std	Z+34, r26	; 0x22
     45e:	a4 a5       	ldd	r26, Z+44	; 0x2c
     460:	a6 a7       	std	Z+46, r26	; 0x2e
     462:	a7 a8       	ldd	r10, Z+55	; 0x37
     464:	a8 a8       	ldd	r10, Y+48	; 0x30
     466:	a8 a8       	ldd	r10, Y+48	; 0x30
     468:	7f 8d       	ldd	r23, Y+31	; 0x1f
     46a:	9a a7       	std	Y+42, r25	; 0x2a
     46c:	b4 c0       	rjmp	.+360    	; 0x5d6 <__trampolines_end+0x56e>
     46e:	cb d5       	rcall	.+2966   	; 0x1006 <_Z14osc1MenuUpdatev+0x4c8>
     470:	de e6       	ldi	r29, 0x6E	; 110
     472:	ed f3       	brhs	.-6      	; 0x46e <__trampolines_end+0x406>
     474:	f7 fb       	bst	r31, 7
     476:	fd ff       	.word	0xfffd	; ????
     478:	ff ff       	.word	0xffff	; ????
     47a:	fd fb       	.word	0xfbfd	; ????
     47c:	f9 f6       	brne	.-66     	; 0x43c <__trampolines_end+0x3d4>
     47e:	f3 f0       	brvs	.+60     	; 0x4bc <__trampolines_end+0x454>
     480:	ed ea       	ldi	r30, 0xAD	; 173
     482:	e8 e5       	ldi	r30, 0x58	; 88
     484:	e3 e2       	ldi	r30, 0x23	; 35
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	e1 e2       	ldi	r30, 0x21	; 33
     48c:	e3 e5       	ldi	r30, 0x53	; 83
     48e:	e7 e9       	ldi	r30, 0x97	; 151
     490:	eb ed       	ldi	r30, 0xDB	; 219
     492:	ef f0       	brie	.+58     	; 0x4ce <__trampolines_end+0x466>
     494:	f2 f3       	brmi	.-4      	; 0x492 <__trampolines_end+0x42a>
     496:	f4 f4       	brge	.+60     	; 0x4d4 <__trampolines_end+0x46c>
     498:	f4 f4       	brge	.+60     	; 0x4d6 <__trampolines_end+0x46e>
     49a:	f3 f3       	brvs	.-4      	; 0x498 <__trampolines_end+0x430>
     49c:	f1 f0       	breq	.+60     	; 0x4da <__trampolines_end+0x472>
     49e:	ee ed       	ldi	r30, 0xDE	; 222
     4a0:	eb e9       	ldi	r30, 0x9B	; 155
     4a2:	e8 e6       	ldi	r30, 0x68	; 104
     4a4:	e5 e4       	ldi	r30, 0x45	; 69
     4a6:	e3 e3       	ldi	r30, 0x33	; 51
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	e4 e4       	ldi	r30, 0x44	; 68
     4ac:	e6 e7       	ldi	r30, 0x76	; 118
     4ae:	e8 ea       	ldi	r30, 0xA8	; 168
     4b0:	ec ee       	ldi	r30, 0xEC	; 236
     4b2:	ef f1       	brie	.+122    	; 0x52e <__trampolines_end+0x4c6>
     4b4:	f2 f3       	brmi	.-4      	; 0x4b2 <__trampolines_end+0x44a>
     4b6:	f4 f4       	brge	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f4 f4       	brge	.+60     	; 0x4f6 <__trampolines_end+0x48e>
     4ba:	f3 f2       	brvs	.-68     	; 0x478 <__trampolines_end+0x410>
     4bc:	f1 ef       	ldi	r31, 0xF1	; 241
     4be:	ee ec       	ldi	r30, 0xCE	; 206
     4c0:	ea e8       	ldi	r30, 0x8A	; 138
     4c2:	e6 e4       	ldi	r30, 0x46	; 70
     4c4:	e2 e1       	ldi	r30, 0x12	; 18
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	e1 e2       	ldi	r30, 0x21	; 33
     4cc:	e4 e6       	ldi	r30, 0x64	; 100
     4ce:	e9 ec       	ldi	r30, 0xC9	; 201
     4d0:	ef f2       	brie	.-70     	; 0x48c <__trampolines_end+0x424>
     4d2:	f5 f8       	bld	r15, 5
     4d4:	fa fc       	.word	0xfcfa	; ????
     4d6:	fe ff       	.word	0xfffe	; ????
     4d8:	ff fe       	.word	0xfeff	; ????
     4da:	fc f9       	.word	0xf9fc	; ????
     4dc:	f5 f0       	brhs	.+60     	; 0x51a <__trampolines_end+0x4b2>
     4de:	ea e2       	ldi	r30, 0x2A	; 42
     4e0:	d9 d0       	rcall	.+434    	; 0x694 <_ZL19filterModeRouteName+0x6>
     4e2:	c5 ba       	out	0x15, r12	; 21
     4e4:	ae a1       	ldd	r26, Y+38	; 0x26
     4e6:	94 86       	std	Z+12, r9	; 0x0c
     4e8:	79 6b       	ori	r23, 0xB9	; 185
     4ea:	5e 51       	subi	r21, 0x1E	; 30
     4ec:	45 3a       	cpi	r20, 0xA5	; 165
     4ee:	2f 26       	eor	r2, r31
     4f0:	1d 15       	cp	r17, r13
     4f2:	0f 0a       	sbc	r0, r31
     4f4:	06 03       	mulsu	r16, r22
     4f6:	01 00       	.word	0x0001	; ????
     4f8:	00 01       	movw	r0, r0
     4fa:	03 05       	cpc	r16, r3
     4fc:	07 0a       	sbc	r0, r23
     4fe:	0d 10       	cpse	r0, r13
     500:	13 16       	cp	r1, r19
     502:	19 1b       	sub	r17, r25
     504:	1d 1e       	adc	r1, r29
     506:	1f 1f       	adc	r17, r31
     508:	1f 1f       	adc	r17, r31
     50a:	1e 1d       	adc	r17, r14
     50c:	1b 19       	sub	r17, r11
     50e:	17 15       	cp	r17, r7
     510:	13 11       	cpse	r17, r3
     512:	10 0e       	add	r1, r16
     514:	0d 0c       	add	r0, r13
     516:	0b 0b       	sbc	r16, r27
     518:	0b 0b       	sbc	r16, r27
     51a:	0c 0d       	add	r16, r12
     51c:	0e 10       	cpse	r0, r14
     51e:	11 13       	cpse	r17, r17
     520:	15 17       	cp	r17, r21
     522:	18 19       	sub	r17, r8
     524:	1b 1b       	sub	r17, r27
     526:	1c 1c       	adc	r1, r12
     528:	1c 1c       	adc	r1, r12
     52a:	1b 1a       	sub	r1, r27
     52c:	19 17       	cp	r17, r25
     52e:	16 14       	cp	r1, r6
     530:	12 11       	cpse	r17, r2
     532:	0f 0e       	add	r0, r31
     534:	0c 0c       	add	r0, r12
     536:	0b 0b       	sbc	r16, r27
     538:	0b 0b       	sbc	r16, r27
     53a:	0c 0d       	add	r16, r12
     53c:	0f 10       	cpse	r0, r15
     53e:	12 14       	cp	r1, r2
     540:	16 18       	sub	r1, r6
     542:	1a 1c       	adc	r1, r10
     544:	1d 1e       	adc	r1, r29
     546:	1f 1f       	adc	r17, r31
     548:	1f 1f       	adc	r17, r31
     54a:	1d 1c       	adc	r1, r13
     54c:	1a 17       	cp	r17, r26
     54e:	15 12       	cpse	r1, r21
     550:	0f 0c       	add	r0, r15
     552:	09 06       	cpc	r0, r25
     554:	04 02       	muls	r16, r20
     556:	00 00       	nop
     558:	00 02       	muls	r16, r16
     55a:	04 08       	sbc	r0, r4
     55c:	0c 12       	cpse	r0, r28
     55e:	19 21       	and	r17, r9
     560:	2a 34       	cpi	r18, 0x4A	; 74
     562:	3f 4b       	sbci	r19, 0xBF	; 191
     564:	58 65       	ori	r21, 0x58	; 88
     566:	72 7f       	andi	r23, 0xF2	; 242
	...

00000668 <_ZL14routeNameTable>:
     668:	d8 06 d3 06 cc 06 c5 06 be 06 b7 06 b0 06 a9 06     ................
     678:	a3 06 9d 06 96 06 8e 06                             ........

00000680 <_ZL13waveNameTable>:
     680:	fa 06 f6 06 f1 06 ec 06 e8 06 e2 06 dd 06           ..............

0000068e <_ZL19filterModeRouteName>:
     68e:	46 2e 20 4d 4f 44 45 00                             F. MODE.

00000696 <_ZL15cutoffRouteName>:
     696:	43 55 54 4f 46 46 00                                CUTOFF.

0000069d <_ZL17osc2WaveRouteName>:
     69d:	57 41 56 45 32 00                                   WAVE2.

000006a3 <_ZL17osc1WaveRouteName>:
     6a3:	57 41 56 45 31 00                                   WAVE1.

000006a9 <_ZL15phase2RouteName>:
     6a9:	50 48 41 53 45 32 00                                PHASE2.

000006b0 <_ZL15phase1RouteName>:
     6b0:	50 48 41 53 45 31 00                                PHASE1.

000006b7 <_ZL15semis2RouteName>:
     6b7:	53 45 4d 49 53 32 00                                SEMIS2.

000006be <_ZL15semis1RouteName>:
     6be:	53 45 4d 49 53 31 00                                SEMIS1.

000006c5 <_ZL15cents2RouteName>:
     6c5:	43 45 4e 54 53 32 00                                CENTS2.

000006cc <_ZL15cents1RouteName>:
     6cc:	43 45 4e 54 53 31 00                                CENTS1.

000006d3 <_ZL13osc2RouteName>:
     6d3:	4f 53 43 32 00                                      OSC2.

000006d8 <_ZL13osc1RouteName>:
     6d8:	4f 53 43 31 00                                      OSC1.

000006dd <_ZL12flatWaveName>:
     6dd:	46 4c 41 54 00                                      FLAT.

000006e2 <_ZL13noiseWaveName>:
     6e2:	4e 4f 49 53 45 00                                   NOISE.

000006e8 <_ZL10sqWaveName>:
     6e8:	53 51 55 00                                         SQU.

000006ec <_ZL12rsawWaveName>:
     6ec:	52 53 41 57 00                                      RSAW.

000006f1 <_ZL12lsawWaveName>:
     6f1:	4c 53 41 57 00                                      LSAW.

000006f6 <_ZL11triWaveName>:
     6f6:	54 52 49 00                                         TRI.

000006fa <_ZL12sineWaveName>:
     6fa:	53 49 4e 45 00 00                                   SINE..

00000700 <__ctors_end>:
     700:	11 24       	eor	r1, r1
     702:	1f be       	out	0x3f, r1	; 63
     704:	cf ef       	ldi	r28, 0xFF	; 255
     706:	d8 e0       	ldi	r29, 0x08	; 8
     708:	de bf       	out	0x3e, r29	; 62
     70a:	cd bf       	out	0x3d, r28	; 61

0000070c <__do_copy_data>:
     70c:	14 e0       	ldi	r17, 0x04	; 4
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b1 e0       	ldi	r27, 0x01	; 1
     712:	e8 e2       	ldi	r30, 0x28	; 40
     714:	f8 e5       	ldi	r31, 0x58	; 88
     716:	02 c0       	rjmp	.+4      	; 0x71c <__do_copy_data+0x10>
     718:	05 90       	lpm	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	a2 3f       	cpi	r26, 0xF2	; 242
     71e:	b1 07       	cpc	r27, r17
     720:	d9 f7       	brne	.-10     	; 0x718 <__do_copy_data+0xc>

00000722 <__do_clear_bss>:
     722:	26 e0       	ldi	r18, 0x06	; 6
     724:	a2 ef       	ldi	r26, 0xF2	; 242
     726:	b4 e0       	ldi	r27, 0x04	; 4
     728:	01 c0       	rjmp	.+2      	; 0x72c <.do_clear_bss_start>

0000072a <.do_clear_bss_loop>:
     72a:	1d 92       	st	X+, r1

0000072c <.do_clear_bss_start>:
     72c:	ab 30       	cpi	r26, 0x0B	; 11
     72e:	b2 07       	cpc	r27, r18
     730:	e1 f7       	brne	.-8      	; 0x72a <.do_clear_bss_loop>
     732:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <main>
     736:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <_exit>

0000073a <__bad_interrupt>:
     73a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073e <_Z10noteUpdatev>:
	cbi (TCCR2A, WGM21);
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
     73e:	4f 92       	push	r4
     740:	5f 92       	push	r5
     742:	6f 92       	push	r6
     744:	7f 92       	push	r7
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	28 97       	sbiw	r28, 0x08	; 8
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
     76c:	80 91 da 05 	lds	r24, 0x05DA
     770:	e0 91 e4 05 	lds	r30, 0x05E4
     774:	ff 27       	eor	r31, r31
     776:	e7 fd       	sbrc	r30, 7
     778:	f0 95       	com	r31
     77a:	e8 0f       	add	r30, r24
     77c:	f1 1d       	adc	r31, r1
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ec 55       	subi	r30, 0x5C	; 92
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	c0 80       	ld	r12, Z
     78c:	d1 80       	ldd	r13, Z+1	; 0x01
     78e:	e2 80       	ldd	r14, Z+2	; 0x02
     790:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
     792:	80 91 cb 05 	lds	r24, 0x05CB
     796:	90 91 c1 05 	lds	r25, 0x05C1
     79a:	e0 91 cc 05 	lds	r30, 0x05CC
     79e:	ff 27       	eor	r31, r31
     7a0:	e7 fd       	sbrc	r30, 7
     7a2:	f0 95       	com	r31
     7a4:	e9 0f       	add	r30, r25
     7a6:	f1 1d       	adc	r31, r1
     7a8:	9c e0       	ldi	r25, 0x0C	; 12
     7aa:	89 02       	muls	r24, r25
     7ac:	e0 0d       	add	r30, r0
     7ae:	f1 1d       	adc	r31, r1
     7b0:	11 24       	eor	r1, r1
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	ec 55       	subi	r30, 0x5C	; 92
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	80 80       	ld	r8, Z
     7c0:	91 80       	ldd	r9, Z+1	; 0x01
     7c2:	a2 80       	ldd	r10, Z+2	; 0x02
     7c4:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
     7c6:	60 91 e5 05 	lds	r22, 0x05E5
     7ca:	a7 e2       	ldi	r26, 0x27	; 39
     7cc:	6a 02       	muls	r22, r26
     7ce:	b0 01       	movw	r22, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	88 27       	eor	r24, r24
     7d4:	77 fd       	sbrc	r23, 7
     7d6:	80 95       	com	r24
     7d8:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     7da:	a7 01       	movw	r20, r14
     7dc:	96 01       	movw	r18, r12
     7de:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     7e2:	00 e1       	ldi	r16, 0x10	; 16
     7e4:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
     7e8:	29 83       	std	Y+1, r18	; 0x01
     7ea:	3a 83       	std	Y+2, r19	; 0x02
     7ec:	4b 83       	std	Y+3, r20	; 0x03
     7ee:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	ab 81       	ldd	r26, Y+3	; 0x03
     7f6:	bc 81       	ldd	r27, Y+4	; 0x04
     7f8:	c8 0e       	add	r12, r24
     7fa:	d9 1e       	adc	r13, r25
     7fc:	ea 1e       	adc	r14, r26
     7fe:	fb 1e       	adc	r15, r27
     800:	c0 92 f6 05 	sts	0x05F6, r12
     804:	d0 92 f7 05 	sts	0x05F7, r13
     808:	e0 92 f8 05 	sts	0x05F8, r14
     80c:	f0 92 f9 05 	sts	0x05F9, r15

	centsConst = 0x27*osc2CentsShift;
     810:	20 91 cd 05 	lds	r18, 0x05CD
     814:	97 e2       	ldi	r25, 0x27	; 39
     816:	29 02       	muls	r18, r25
     818:	90 01       	movw	r18, r0
     81a:	11 24       	eor	r1, r1
     81c:	44 27       	eor	r20, r20
     81e:	37 fd       	sbrc	r19, 7
     820:	40 95       	com	r20
     822:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     82c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
     830:	29 83       	std	Y+1, r18	; 0x01
     832:	3a 83       	std	Y+2, r19	; 0x02
     834:	4b 83       	std	Y+3, r20	; 0x03
     836:	5c 83       	std	Y+4, r21	; 0x04
     838:	6d 83       	std	Y+5, r22	; 0x05
     83a:	7e 83       	std	Y+6, r23	; 0x06
     83c:	8f 83       	std	Y+7, r24	; 0x07
     83e:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	ab 81       	ldd	r26, Y+3	; 0x03
     846:	bc 81       	ldd	r27, Y+4	; 0x04
     848:	88 0e       	add	r8, r24
     84a:	99 1e       	adc	r9, r25
     84c:	aa 1e       	adc	r10, r26
     84e:	bb 1e       	adc	r11, r27
     850:	80 92 d6 05 	sts	0x05D6, r8
     854:	90 92 d7 05 	sts	0x05D7, r9
     858:	a0 92 d8 05 	sts	0x05D8, r10
     85c:	b0 92 d9 05 	sts	0x05D9, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
     860:	40 90 67 05 	lds	r4, 0x0567
     864:	50 90 68 05 	lds	r5, 0x0568
     868:	60 90 69 05 	lds	r6, 0x0569
     86c:	70 90 6a 05 	lds	r7, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	a3 01       	movw	r20, r6
     876:	92 01       	movw	r18, r4
     878:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     87c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
     880:	c9 01       	movw	r24, r18
     882:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
     884:	80 93 e6 05 	sts	0x05E6, r24
     888:	90 93 e7 05 	sts	0x05E7, r25
     88c:	a0 93 e8 05 	sts	0x05E8, r26
     890:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     894:	c5 01       	movw	r24, r10
     896:	b4 01       	movw	r22, r8
     898:	a3 01       	movw	r20, r6
     89a:	92 01       	movw	r18, r4
     89c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     8a0:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
     8a4:	c9 01       	movw	r24, r18
     8a6:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
     8a8:	80 93 ce 05 	sts	0x05CE, r24
     8ac:	90 93 cf 05 	sts	0x05CF, r25
     8b0:	a0 93 d0 05 	sts	0x05D0, r26
     8b4:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     8b8:	60 91 b7 05 	lds	r22, 0x05B7
     8bc:	70 91 b8 05 	lds	r23, 0x05B8
     8c0:	80 91 b9 05 	lds	r24, 0x05B9
     8c4:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
     8c8:	a3 01       	movw	r20, r6
     8ca:	92 01       	movw	r18, r4
     8cc:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
     8d0:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
     8d4:	c9 01       	movw	r24, r18
     8d6:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
     8d8:	80 93 bb 05 	sts	0x05BB, r24
     8dc:	90 93 bc 05 	sts	0x05BC, r25
     8e0:	a0 93 bd 05 	sts	0x05BD, r26
     8e4:	b0 93 be 05 	sts	0x05BE, r27
}
     8e8:	28 96       	adiw	r28, 0x08	; 8
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	08 95       	ret

00000914 <_Z9writeLinehPc>:

inline void writeLine(unsigned char line, char* str)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	2d 97       	sbiw	r28, 0x0d	; 13
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	char buf[13];
	memcpy(buf, str, 12);
     928:	9c e0       	ldi	r25, 0x0C	; 12
     92a:	fb 01       	movw	r30, r22
     92c:	de 01       	movw	r26, r28
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	01 90       	ld	r0, Z+
     932:	0d 92       	st	X+, r0
     934:	9a 95       	dec	r25
     936:	e1 f7       	brne	.-8      	; 0x930 <_Z9writeLinehPc+0x1c>
	buf[12] = '\0';
     938:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     93a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     93c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     93e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     940:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     942:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     944:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     946:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     948:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     94a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     94c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     94e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     950:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     952:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     954:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     956:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     958:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     95a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     95c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     95e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     960:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     962:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     964:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     966:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     968:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     96a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     96c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     96e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     970:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     972:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     974:	44 98       	cbi	0x08, 4	; 8
}

inline void gotoXY(char x, char y)
{
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
     976:	80 64       	ori	r24, 0x40	; 64

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     978:	5c 98       	cbi	0x0b, 4	; 11
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     97e:	a9 01       	movw	r20, r18
     980:	44 0f       	add	r20, r20
     982:	45 2f       	mov	r20, r21
     984:	44 1f       	adc	r20, r20
     986:	55 0b       	sbc	r21, r21
     988:	45 2b       	or	r20, r21
     98a:	09 f0       	breq	.+2      	; 0x98e <_Z9writeLinehPc+0x7a>
     98c:	d6 c0       	rjmp	.+428    	; 0xb3a <_Z9writeLinehPc+0x226>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     98e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     990:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     992:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     994:	26 fd       	sbrc	r18, 6
     996:	cf c0       	rjmp	.+414    	; 0xb36 <_Z9writeLinehPc+0x222>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     998:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     99a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     99c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     99e:	25 fd       	sbrc	r18, 5
     9a0:	c8 c0       	rjmp	.+400    	; 0xb32 <_Z9writeLinehPc+0x21e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9a6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     9a8:	24 fd       	sbrc	r18, 4
     9aa:	c1 c0       	rjmp	.+386    	; 0xb2e <_Z9writeLinehPc+0x21a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     9b2:	23 fd       	sbrc	r18, 3
     9b4:	ba c0       	rjmp	.+372    	; 0xb2a <_Z9writeLinehPc+0x216>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ba:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     9bc:	22 fd       	sbrc	r18, 2
     9be:	b3 c0       	rjmp	.+358    	; 0xb26 <_Z9writeLinehPc+0x212>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9c4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     9c6:	21 fd       	sbrc	r18, 1
     9c8:	ac c0       	rjmp	.+344    	; 0xb22 <_Z9writeLinehPc+0x20e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ce:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     9d0:	80 ff       	sbrs	r24, 0
     9d2:	a5 c0       	rjmp	.+330    	; 0xb1e <_Z9writeLinehPc+0x20a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     9d4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9d8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     9da:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	88 23       	and	r24, r24
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <_Z9writeLinehPc+0xd0>
     9e2:	81 c0       	rjmp	.+258    	; 0xae6 <_Z9writeLinehPc+0x1d2>
     9e4:	de 01       	movw	r26, r28
     9e6:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     9e8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     9ea:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     9fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     9fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a00:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a02:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a04:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a10:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a12:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a14:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a16:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a18:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a1c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     a1e:	44 9a       	sbi	0x08, 4	; 8
     a20:	99 27       	eor	r25, r25
     a22:	87 fd       	sbrc	r24, 7
     a24:	90 95       	com	r25
     a26:	80 97       	sbiw	r24, 0x20	; 32
     a28:	fc 01       	movw	r30, r24
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	e8 0f       	add	r30, r24
     a34:	f9 1f       	adc	r31, r25
     a36:	ee 5e       	subi	r30, 0xEE	; 238
     a38:	fc 4f       	sbci	r31, 0xFC	; 252
     a3a:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     a3c:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     a3e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     a40:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a42:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a44:	82 2f       	mov	r24, r18
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	88 0f       	add	r24, r24
     a4a:	89 2f       	mov	r24, r25
     a4c:	88 1f       	adc	r24, r24
     a4e:	99 0b       	sbc	r25, r25
     a50:	89 2b       	or	r24, r25
     a52:	09 f0       	breq	.+2      	; 0xa56 <_Z9writeLinehPc+0x142>
     a54:	5d c0       	rjmp	.+186    	; 0xb10 <_Z9writeLinehPc+0x1fc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a56:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a58:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a5a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a5c:	26 fd       	sbrc	r18, 6
     a5e:	5d c0       	rjmp	.+186    	; 0xb1a <_Z9writeLinehPc+0x206>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a60:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a62:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a64:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a66:	25 fd       	sbrc	r18, 5
     a68:	51 c0       	rjmp	.+162    	; 0xb0c <_Z9writeLinehPc+0x1f8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a6e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a70:	24 fd       	sbrc	r18, 4
     a72:	4a c0       	rjmp	.+148    	; 0xb08 <_Z9writeLinehPc+0x1f4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a74:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a78:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a7a:	23 fd       	sbrc	r18, 3
     a7c:	43 c0       	rjmp	.+134    	; 0xb04 <_Z9writeLinehPc+0x1f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a7e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a80:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a82:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a84:	22 fd       	sbrc	r18, 2
     a86:	3c c0       	rjmp	.+120    	; 0xb00 <_Z9writeLinehPc+0x1ec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a8c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a8e:	21 fd       	sbrc	r18, 1
     a90:	35 c0       	rjmp	.+106    	; 0xafc <_Z9writeLinehPc+0x1e8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a92:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a94:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     a96:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     a98:	20 fd       	sbrc	r18, 0
     a9a:	2e c0       	rjmp	.+92     	; 0xaf8 <_Z9writeLinehPc+0x1e4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     a9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     a9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aa0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     aa2:	44 9a       	sbi	0x08, 4	; 8
     aa4:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     aa6:	51 f6       	brne	.-108    	; 0xa3c <_Z9writeLinehPc+0x128>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     aa8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     aaa:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ab4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ab8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     aba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     abc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     abe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ac0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ac6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ac8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     aca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     acc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ace:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ad2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ad6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ad8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ada:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     adc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ade:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ae0:	8d 91       	ld	r24, X+
     ae2:	81 11       	cpse	r24, r1
     ae4:	81 cf       	rjmp	.-254    	; 0x9e8 <_Z9writeLinehPc+0xd4>
	memcpy(buf, str, 12);
	buf[12] = '\0';
	
	gotoXY(0, line);
	lcdString(buf);
}
     ae6:	2d 96       	adiw	r28, 0x0d	; 13
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     af8:	5d 9a       	sbi	0x0b, 5	; 11
     afa:	d1 cf       	rjmp	.-94     	; 0xa9e <_Z9writeLinehPc+0x18a>
     afc:	5d 9a       	sbi	0x0b, 5	; 11
     afe:	ca cf       	rjmp	.-108    	; 0xa94 <_Z9writeLinehPc+0x180>
     b00:	5d 9a       	sbi	0x0b, 5	; 11
     b02:	c3 cf       	rjmp	.-122    	; 0xa8a <_Z9writeLinehPc+0x176>
     b04:	5d 9a       	sbi	0x0b, 5	; 11
     b06:	bc cf       	rjmp	.-136    	; 0xa80 <_Z9writeLinehPc+0x16c>
     b08:	5d 9a       	sbi	0x0b, 5	; 11
     b0a:	b5 cf       	rjmp	.-150    	; 0xa76 <_Z9writeLinehPc+0x162>
     b0c:	5d 9a       	sbi	0x0b, 5	; 11
     b0e:	ae cf       	rjmp	.-164    	; 0xa6c <_Z9writeLinehPc+0x158>
     b10:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b14:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     b16:	26 ff       	sbrs	r18, 6
     b18:	a3 cf       	rjmp	.-186    	; 0xa60 <_Z9writeLinehPc+0x14c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b1a:	5d 9a       	sbi	0x0b, 5	; 11
     b1c:	a2 cf       	rjmp	.-188    	; 0xa62 <_Z9writeLinehPc+0x14e>
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b1e:	5d 98       	cbi	0x0b, 5	; 11
     b20:	5a cf       	rjmp	.-332    	; 0x9d6 <_Z9writeLinehPc+0xc2>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b22:	5d 9a       	sbi	0x0b, 5	; 11
     b24:	53 cf       	rjmp	.-346    	; 0x9cc <_Z9writeLinehPc+0xb8>
     b26:	5d 9a       	sbi	0x0b, 5	; 11
     b28:	4c cf       	rjmp	.-360    	; 0x9c2 <_Z9writeLinehPc+0xae>
     b2a:	5d 9a       	sbi	0x0b, 5	; 11
     b2c:	45 cf       	rjmp	.-374    	; 0x9b8 <_Z9writeLinehPc+0xa4>
     b2e:	5d 9a       	sbi	0x0b, 5	; 11
     b30:	3e cf       	rjmp	.-388    	; 0x9ae <_Z9writeLinehPc+0x9a>
     b32:	5d 9a       	sbi	0x0b, 5	; 11
     b34:	37 cf       	rjmp	.-402    	; 0x9a4 <_Z9writeLinehPc+0x90>
     b36:	5d 9a       	sbi	0x0b, 5	; 11
     b38:	30 cf       	rjmp	.-416    	; 0x99a <_Z9writeLinehPc+0x86>
     b3a:	5d 9a       	sbi	0x0b, 5	; 11
     b3c:	29 cf       	rjmp	.-430    	; 0x990 <_Z9writeLinehPc+0x7c>

00000b3e <_Z14osc1MenuUpdatev>:
	lcdWrite(0, (0x80 | x));
	lcdWrite(0, (0x40 | y));
}

inline void osc1MenuUpdate()
{
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e5 97       	sbiw	r28, 0x35	; 53
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
     b5a:	8d e0       	ldi	r24, 0x0D	; 13
     b5c:	ea e0       	ldi	r30, 0x0A	; 10
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	de 01       	movw	r26, r28
     b62:	55 96       	adiw	r26, 0x15	; 21
     b64:	01 90       	ld	r0, Z+
     b66:	0d 92       	st	X+, r0
     b68:	8a 95       	dec	r24
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <_Z14osc1MenuUpdatev+0x26>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     b6c:	8c e0       	ldi	r24, 0x0C	; 12
     b6e:	fe 01       	movw	r30, r28
     b70:	75 96       	adiw	r30, 0x15	; 21
     b72:	8e 01       	movw	r16, r28
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	d8 01       	movw	r26, r16
     b7a:	01 90       	ld	r0, Z+
     b7c:	0d 92       	st	X+, r0
     b7e:	8a 95       	dec	r24
     b80:	e1 f7       	brne	.-8      	; 0xb7a <_Z14osc1MenuUpdatev+0x3c>
	buf[12] = '\0';
     b82:	1d 86       	std	Y+13, r1	; 0x0d

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     b84:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     b86:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b88:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     b8a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b8e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b90:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b94:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     b9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     b9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ba6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ba8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     baa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bb4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bb8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bba:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     bbc:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     bbe:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bc6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     bc8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bcc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     be0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     be4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     be6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     be8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     bec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     bee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     bf0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     bf2:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 23       	and	r24, r24
     bf8:	09 f4       	brne	.+2      	; 0xbfc <_Z14osc1MenuUpdatev+0xbe>
     bfa:	82 c0       	rjmp	.+260    	; 0xd00 <_Z14osc1MenuUpdatev+0x1c2>
     bfc:	de 01       	movw	r26, r28
     bfe:	12 96       	adiw	r26, 0x02	; 2
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     c00:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c02:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c04:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c10:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c12:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c14:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c16:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c18:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c1c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c1e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c20:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c22:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c24:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c26:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c28:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c2a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c2e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c30:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c32:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c34:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     c36:	44 9a       	sbi	0x08, 4	; 8
     c38:	99 27       	eor	r25, r25
     c3a:	87 fd       	sbrc	r24, 7
     c3c:	90 95       	com	r25
     c3e:	80 97       	sbiw	r24, 0x20	; 32
     c40:	fc 01       	movw	r30, r24
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	e8 0f       	add	r30, r24
     c4c:	f9 1f       	adc	r31, r25
     c4e:	ee 5e       	subi	r30, 0xEE	; 238
     c50:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     c52:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     c54:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     c56:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     c58:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c5a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c5c:	82 2f       	mov	r24, r18
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	88 0f       	add	r24, r24
     c62:	89 2f       	mov	r24, r25
     c64:	88 1f       	adc	r24, r24
     c66:	99 0b       	sbc	r25, r25
     c68:	89 2b       	or	r24, r25
     c6a:	09 f0       	breq	.+2      	; 0xc6e <_Z14osc1MenuUpdatev+0x130>
     c6c:	60 c4       	rjmp	.+2240   	; 0x152e <_Z14osc1MenuUpdatev+0x9f0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c6e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c70:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c72:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c74:	26 fd       	sbrc	r18, 6
     c76:	60 c4       	rjmp	.+2240   	; 0x1538 <_Z14osc1MenuUpdatev+0x9fa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c78:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c7a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c7c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c7e:	25 fd       	sbrc	r18, 5
     c80:	54 c4       	rjmp	.+2216   	; 0x152a <_Z14osc1MenuUpdatev+0x9ec>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c82:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c84:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c86:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c88:	24 fd       	sbrc	r18, 4
     c8a:	4d c4       	rjmp	.+2202   	; 0x1526 <_Z14osc1MenuUpdatev+0x9e8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c8c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c8e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c90:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c92:	23 fd       	sbrc	r18, 3
     c94:	46 c4       	rjmp	.+2188   	; 0x1522 <_Z14osc1MenuUpdatev+0x9e4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     c96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     c98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     c9a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     c9c:	22 fd       	sbrc	r18, 2
     c9e:	3f c4       	rjmp	.+2174   	; 0x151e <_Z14osc1MenuUpdatev+0x9e0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ca0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ca4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     ca6:	21 fd       	sbrc	r18, 1
     ca8:	38 c4       	rjmp	.+2160   	; 0x151a <_Z14osc1MenuUpdatev+0x9dc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     caa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cae:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     cb0:	20 fd       	sbrc	r18, 0
     cb2:	2f c4       	rjmp	.+2142   	; 0x1512 <_Z14osc1MenuUpdatev+0x9d4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cb4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cb8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cba:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     cbc:	3f 5f       	subi	r19, 0xFF	; 255
     cbe:	35 30       	cpi	r19, 0x05	; 5
     cc0:	49 f6       	brne	.-110    	; 0xc54 <_Z14osc1MenuUpdatev+0x116>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     cc2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     cc4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cc6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cc8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ccc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ce6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ce8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     cf2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     cf6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     cf8:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     cfa:	8d 91       	ld	r24, X+
     cfc:	81 11       	cpse	r24, r1
     cfe:	80 cf       	rjmp	.-256    	; 0xc00 <_Z14osc1MenuUpdatev+0xc2>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	e7 e1       	ldi	r30, 0x17	; 23
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	d8 01       	movw	r26, r16
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	8a 95       	dec	r24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <_Z14osc1MenuUpdatev+0x1ca>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
     d10:	e0 91 03 01 	lds	r30, 0x0103
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	e0 58       	subi	r30, 0x80	; 128
     d1c:	f9 4f       	sbci	r31, 0xF9	; 249
     d1e:	65 91       	lpm	r22, Z+
     d20:	74 91       	lpm	r23, Z
     d22:	8e 01       	movw	r16, r28
     d24:	0f 5f       	subi	r16, 0xFF	; 255
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	c8 01       	movw	r24, r16
     d2a:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "       ");
     d2e:	d8 01       	movw	r26, r16
     d30:	0d 90       	ld	r0, X+
     d32:	00 20       	and	r0, r0
     d34:	e9 f7       	brne	.-6      	; 0xd30 <_Z14osc1MenuUpdatev+0x1f2>
     d36:	11 97       	sbiw	r26, 0x01	; 1
     d38:	88 e0       	ldi	r24, 0x08	; 8
     d3a:	ed e3       	ldi	r30, 0x3D	; 61
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	8a 95       	dec	r24
     d44:	e1 f7       	brne	.-8      	; 0xd3e <_Z14osc1MenuUpdatev+0x200>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     d46:	8c e0       	ldi	r24, 0x0C	; 12
     d48:	f8 01       	movw	r30, r16
     d4a:	de 01       	movw	r26, r28
     d4c:	99 96       	adiw	r26, 0x29	; 41
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	8a 95       	dec	r24
     d54:	e1 f7       	brne	.-8      	; 0xd4e <_Z14osc1MenuUpdatev+0x210>
	buf[12] = '\0';
     d56:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d58:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d5a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d5c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d5e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d62:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d64:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d68:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d6e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d70:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d72:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d74:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d76:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d78:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d7c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d7e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d80:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d82:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d84:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d86:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d8c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     d8e:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     d90:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     d92:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d94:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     d96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     d9c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     d9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     da2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     da4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     da6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     da8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     daa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     db4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     db6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     db8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     dba:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dbe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dc0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dc4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     dc6:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     dc8:	89 a5       	ldd	r24, Y+41	; 0x29
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_Z14osc1MenuUpdatev+0x292>
     dce:	81 c0       	rjmp	.+258    	; 0xed2 <_Z14osc1MenuUpdatev+0x394>
     dd0:	de 01       	movw	r26, r28
     dd2:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     dd4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     dd6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ddc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     de0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     de2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     de4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     de6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     de8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     df4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     df6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     df8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     dfc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     dfe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e08:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e0a:	44 9a       	sbi	0x08, 4	; 8
     e0c:	99 27       	eor	r25, r25
     e0e:	87 fd       	sbrc	r24, 7
     e10:	90 95       	com	r25
     e12:	80 97       	sbiw	r24, 0x20	; 32
     e14:	fc 01       	movw	r30, r24
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	ee 5e       	subi	r30, 0xEE	; 238
     e24:	fc 4f       	sbci	r31, 0xFC	; 252
     e26:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
     e28:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e2a:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e2c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e2e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e30:	82 2f       	mov	r24, r18
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 0f       	add	r24, r24
     e36:	89 2f       	mov	r24, r25
     e38:	88 1f       	adc	r24, r24
     e3a:	99 0b       	sbc	r25, r25
     e3c:	89 2b       	or	r24, r25
     e3e:	09 f0       	breq	.+2      	; 0xe42 <_Z14osc1MenuUpdatev+0x304>
     e40:	6a c3       	rjmp	.+1748   	; 0x1516 <_Z14osc1MenuUpdatev+0x9d8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e42:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e44:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e46:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e48:	26 fd       	sbrc	r18, 6
     e4a:	61 c3       	rjmp	.+1730   	; 0x150e <_Z14osc1MenuUpdatev+0x9d0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e4c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e4e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e50:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e52:	25 fd       	sbrc	r18, 5
     e54:	5a c3       	rjmp	.+1716   	; 0x150a <_Z14osc1MenuUpdatev+0x9cc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e56:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e58:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e5a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e5c:	24 fd       	sbrc	r18, 4
     e5e:	53 c3       	rjmp	.+1702   	; 0x1506 <_Z14osc1MenuUpdatev+0x9c8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e60:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e62:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e64:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e66:	23 fd       	sbrc	r18, 3
     e68:	4c c3       	rjmp	.+1688   	; 0x1502 <_Z14osc1MenuUpdatev+0x9c4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e6a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e6e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e70:	22 fd       	sbrc	r18, 2
     e72:	45 c3       	rjmp	.+1674   	; 0x14fe <_Z14osc1MenuUpdatev+0x9c0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e74:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e78:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e7a:	21 fd       	sbrc	r18, 1
     e7c:	3e c3       	rjmp	.+1660   	; 0x14fa <_Z14osc1MenuUpdatev+0x9bc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e7e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e80:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e82:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
     e84:	20 fd       	sbrc	r18, 0
     e86:	37 c3       	rjmp	.+1646   	; 0x14f6 <_Z14osc1MenuUpdatev+0x9b8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e88:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e8a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e8c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     e8e:	44 9a       	sbi	0x08, 4	; 8
     e90:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
     e92:	51 f6       	brne	.-108    	; 0xe28 <_Z14osc1MenuUpdatev+0x2ea>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     e94:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     e96:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e98:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     e9a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     e9e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ea0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ea6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ea8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eaa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     eb6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     eb8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     eba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ebc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ebe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     ec4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ec8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     eca:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     ecc:	8d 91       	ld	r24, X+
     ece:	81 11       	cpse	r24, r1
     ed0:	81 cf       	rjmp	.-254    	; 0xdd4 <_Z14osc1MenuUpdatev+0x296>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
     ed2:	88 e0       	ldi	r24, 0x08	; 8
     ed4:	ee e1       	ldi	r30, 0x1E	; 30
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	d8 01       	movw	r26, r16
     eda:	01 90       	ld	r0, Z+
     edc:	0d 92       	st	X+, r0
     ede:	8a 95       	dec	r24
     ee0:	e1 f7       	brne	.-8      	; 0xeda <_Z14osc1MenuUpdatev+0x39c>
	sprintf(buf + 7, "%d", osc1CentsShift);
     ee2:	20 91 e5 05 	lds	r18, 0x05E5
     ee6:	82 2f       	mov	r24, r18
     ee8:	99 27       	eor	r25, r25
     eea:	87 fd       	sbrc	r24, 7
     eec:	90 95       	com	r25
     eee:	9f 93       	push	r25
     ef0:	2f 93       	push	r18
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	7e 01       	movw	r14, r28
     efc:	88 e0       	ldi	r24, 0x08	; 8
     efe:	e8 0e       	add	r14, r24
     f00:	f1 1c       	adc	r15, r1
     f02:	ff 92       	push	r15
     f04:	ef 92       	push	r14
     f06:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
     f0a:	d8 01       	movw	r26, r16
     f0c:	0d 90       	ld	r0, X+
     f0e:	00 20       	and	r0, r0
     f10:	e9 f7       	brne	.-6      	; 0xf0c <_Z14osc1MenuUpdatev+0x3ce>
     f12:	11 97       	sbiw	r26, 0x01	; 1
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	ed e3       	ldi	r30, 0x3D	; 61
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	01 90       	ld	r0, Z+
     f1c:	0d 92       	st	X+, r0
     f1e:	8a 95       	dec	r24
     f20:	e1 f7       	brne	.-8      	; 0xf1a <_Z14osc1MenuUpdatev+0x3dc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
     f22:	8c e0       	ldi	r24, 0x0C	; 12
     f24:	f8 01       	movw	r30, r16
     f26:	de 01       	movw	r26, r28
     f28:	99 96       	adiw	r26, 0x29	; 41
     f2a:	01 90       	ld	r0, Z+
     f2c:	0d 92       	st	X+, r0
     f2e:	8a 95       	dec	r24
     f30:	e1 f7       	brne	.-8      	; 0xf2a <_Z14osc1MenuUpdatev+0x3ec>
	buf[12] = '\0';
     f32:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f34:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f36:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f38:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f3a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f3c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f3e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f40:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f42:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f44:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f46:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f4c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f4e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f50:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f52:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f54:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f56:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f58:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f5c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f5e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f60:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f62:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f64:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f68:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     f6a:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
     f6c:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     f6e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f70:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f72:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f74:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f76:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f78:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f7c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f7e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f80:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f82:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f84:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f86:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f88:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f8a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f8e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
     f90:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f92:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f94:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f96:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f98:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     f9c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     f9e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fa0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     fa2:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
     fa4:	89 a5       	ldd	r24, Y+41	; 0x29
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <_Z14osc1MenuUpdatev+0x47a>
     fb6:	82 c0       	rjmp	.+260    	; 0x10bc <_Z14osc1MenuUpdatev+0x57e>
     fb8:	de 01       	movw	r26, r28
     fba:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
     fbc:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
     fbe:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fc2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fc6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fc8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fcc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fd4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fdc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fe6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fe8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     fea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
     fec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
     fee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
     ff0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
     ff2:	44 9a       	sbi	0x08, 4	; 8
     ff4:	99 27       	eor	r25, r25
     ff6:	87 fd       	sbrc	r24, 7
     ff8:	90 95       	com	r25
     ffa:	80 97       	sbiw	r24, 0x20	; 32
     ffc:	fc 01       	movw	r30, r24
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	ee 5e       	subi	r30, 0xEE	; 238
    100c:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    100e:	30 e0       	ldi	r19, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    1010:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1012:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1014:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1016:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1018:	82 2f       	mov	r24, r18
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	88 0f       	add	r24, r24
    101e:	89 2f       	mov	r24, r25
    1020:	88 1f       	adc	r24, r24
    1022:	99 0b       	sbc	r25, r25
    1024:	89 2b       	or	r24, r25
    1026:	09 f0       	breq	.+2      	; 0x102a <_Z14osc1MenuUpdatev+0x4ec>
    1028:	5a c2       	rjmp	.+1204   	; 0x14de <_Z14osc1MenuUpdatev+0x9a0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    102a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    102c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    102e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1030:	26 fd       	sbrc	r18, 6
    1032:	5a c2       	rjmp	.+1204   	; 0x14e8 <_Z14osc1MenuUpdatev+0x9aa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1034:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1036:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1038:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    103a:	25 fd       	sbrc	r18, 5
    103c:	5a c2       	rjmp	.+1204   	; 0x14f2 <_Z14osc1MenuUpdatev+0x9b4>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    103e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1040:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1042:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1044:	24 fd       	sbrc	r18, 4
    1046:	49 c2       	rjmp	.+1170   	; 0x14da <_Z14osc1MenuUpdatev+0x99c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1048:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    104a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    104c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    104e:	23 fd       	sbrc	r18, 3
    1050:	42 c2       	rjmp	.+1156   	; 0x14d6 <_Z14osc1MenuUpdatev+0x998>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1052:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1054:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1056:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1058:	22 fd       	sbrc	r18, 2
    105a:	3b c2       	rjmp	.+1142   	; 0x14d2 <_Z14osc1MenuUpdatev+0x994>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    105c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    105e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1060:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1062:	21 fd       	sbrc	r18, 1
    1064:	34 c2       	rjmp	.+1128   	; 0x14ce <_Z14osc1MenuUpdatev+0x990>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1066:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1068:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    106a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    106c:	20 fd       	sbrc	r18, 0
    106e:	29 c2       	rjmp	.+1106   	; 0x14c2 <_Z14osc1MenuUpdatev+0x984>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1070:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1072:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1074:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1076:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    1078:	3f 5f       	subi	r19, 0xFF	; 255
    107a:	35 30       	cpi	r19, 0x05	; 5
    107c:	49 f6       	brne	.-110    	; 0x1010 <_Z14osc1MenuUpdatev+0x4d2>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    107e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1080:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1082:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1084:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1086:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1088:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    108a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    108c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    108e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1090:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1092:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1094:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1096:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1098:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    109a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    109c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    109e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    10ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    10b2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    10b4:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    10b6:	8d 91       	ld	r24, X+
    10b8:	81 11       	cpse	r24, r1
    10ba:	80 cf       	rjmp	.-256    	; 0xfbc <_Z14osc1MenuUpdatev+0x47e>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    10bc:	88 e0       	ldi	r24, 0x08	; 8
    10be:	e6 e2       	ldi	r30, 0x26	; 38
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	d8 01       	movw	r26, r16
    10c4:	01 90       	ld	r0, Z+
    10c6:	0d 92       	st	X+, r0
    10c8:	8a 95       	dec	r24
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <_Z14osc1MenuUpdatev+0x586>
	sprintf(buf + 7, "%d", osc1SemisShift);
    10cc:	20 91 e4 05 	lds	r18, 0x05E4
    10d0:	82 2f       	mov	r24, r18
    10d2:	99 27       	eor	r25, r25
    10d4:	87 fd       	sbrc	r24, 7
    10d6:	90 95       	com	r25
    10d8:	9f 93       	push	r25
    10da:	2f 93       	push	r18
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	9f 93       	push	r25
    10e2:	8f 93       	push	r24
    10e4:	ff 92       	push	r15
    10e6:	ef 92       	push	r14
    10e8:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    10ec:	d8 01       	movw	r26, r16
    10ee:	0d 90       	ld	r0, X+
    10f0:	00 20       	and	r0, r0
    10f2:	e9 f7       	brne	.-6      	; 0x10ee <_Z14osc1MenuUpdatev+0x5b0>
    10f4:	11 97       	sbiw	r26, 0x01	; 1
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	ed e3       	ldi	r30, 0x3D	; 61
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	01 90       	ld	r0, Z+
    10fe:	0d 92       	st	X+, r0
    1100:	8a 95       	dec	r24
    1102:	e1 f7       	brne	.-8      	; 0x10fc <_Z14osc1MenuUpdatev+0x5be>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1104:	8c e0       	ldi	r24, 0x0C	; 12
    1106:	f8 01       	movw	r30, r16
    1108:	de 01       	movw	r26, r28
    110a:	99 96       	adiw	r26, 0x29	; 41
    110c:	01 90       	ld	r0, Z+
    110e:	0d 92       	st	X+, r0
    1110:	8a 95       	dec	r24
    1112:	e1 f7       	brne	.-8      	; 0x110c <_Z14osc1MenuUpdatev+0x5ce>
	buf[12] = '\0';
    1114:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1116:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1118:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    111a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    111c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    111e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1120:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1122:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1124:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1126:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1128:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    112a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    112c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    112e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1130:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1132:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1134:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1136:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1138:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    113a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    113c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    113e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1140:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1142:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1144:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1146:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1148:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    114a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    114c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    114e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1150:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1152:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1154:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1156:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1158:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    115a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    115c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    115e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1160:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1162:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1164:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1166:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1168:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    116a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    116c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    116e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1170:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1172:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1174:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1176:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1178:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    117a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    117c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    117e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1180:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1182:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1184:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1186:	89 a5       	ldd	r24, Y+41	; 0x29
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <_Z14osc1MenuUpdatev+0x65c>
    1198:	82 c0       	rjmp	.+260    	; 0x129e <_Z14osc1MenuUpdatev+0x760>
    119a:	de 01       	movw	r26, r28
    119c:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    119e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    11a0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ba:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11bc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    11ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    11d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11d2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    11d4:	44 9a       	sbi	0x08, 4	; 8
    11d6:	99 27       	eor	r25, r25
    11d8:	87 fd       	sbrc	r24, 7
    11da:	90 95       	com	r25
    11dc:	80 97       	sbiw	r24, 0x20	; 32
    11de:	fc 01       	movw	r30, r24
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e8 0f       	add	r30, r24
    11ea:	f9 1f       	adc	r31, r25
    11ec:	ee 5e       	subi	r30, 0xEE	; 238
    11ee:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    11f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    11f2:	81 91       	ld	r24, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    11f4:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    11f6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    11f8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	22 0f       	add	r18, r18
    1200:	23 2f       	mov	r18, r19
    1202:	22 1f       	adc	r18, r18
    1204:	33 0b       	sbc	r19, r19
    1206:	23 2b       	or	r18, r19
    1208:	09 f0       	breq	.+2      	; 0x120c <_Z14osc1MenuUpdatev+0x6ce>
    120a:	5f c1       	rjmp	.+702    	; 0x14ca <_Z14osc1MenuUpdatev+0x98c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    120c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    120e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1210:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1212:	86 fd       	sbrc	r24, 6
    1214:	58 c1       	rjmp	.+688    	; 0x14c6 <_Z14osc1MenuUpdatev+0x988>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1216:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1218:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    121a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    121c:	85 fd       	sbrc	r24, 5
    121e:	4f c1       	rjmp	.+670    	; 0x14be <_Z14osc1MenuUpdatev+0x980>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1220:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1222:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1224:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1226:	84 fd       	sbrc	r24, 4
    1228:	48 c1       	rjmp	.+656    	; 0x14ba <_Z14osc1MenuUpdatev+0x97c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    122a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    122c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    122e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1230:	83 fd       	sbrc	r24, 3
    1232:	41 c1       	rjmp	.+642    	; 0x14b6 <_Z14osc1MenuUpdatev+0x978>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1234:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1236:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1238:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    123a:	82 fd       	sbrc	r24, 2
    123c:	3a c1       	rjmp	.+628    	; 0x14b2 <_Z14osc1MenuUpdatev+0x974>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    123e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1240:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1242:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1244:	81 fd       	sbrc	r24, 1
    1246:	33 c1       	rjmp	.+614    	; 0x14ae <_Z14osc1MenuUpdatev+0x970>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1248:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    124a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    124c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    124e:	80 fd       	sbrc	r24, 0
    1250:	2c c1       	rjmp	.+600    	; 0x14aa <_Z14osc1MenuUpdatev+0x96c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1252:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1254:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1256:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1258:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    125a:	9f 5f       	subi	r25, 0xFF	; 255
    125c:	95 30       	cpi	r25, 0x05	; 5
    125e:	49 f6       	brne	.-110    	; 0x11f2 <_Z14osc1MenuUpdatev+0x6b4>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1260:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1262:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1264:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1266:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1268:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    126a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    126c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    126e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1270:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1272:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1274:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1276:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1278:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    127a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    127c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    127e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1280:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1282:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1284:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1286:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1288:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    128a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    128c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    128e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1290:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1292:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1294:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1296:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1298:	8d 91       	ld	r24, X+
    129a:	81 11       	cpse	r24, r1
    129c:	80 cf       	rjmp	.-256    	; 0x119e <_Z14osc1MenuUpdatev+0x660>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	ee e2       	ldi	r30, 0x2E	; 46
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	d8 01       	movw	r26, r16
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	8a 95       	dec	r24
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <_Z14osc1MenuUpdatev+0x768>
	if(osc1NoteSync != false)
    12ae:	80 91 dc 05 	lds	r24, 0x05DC
    12b2:	81 11       	cpse	r24, r1
    12b4:	43 c1       	rjmp	.+646    	; 0x153c <_Z14osc1MenuUpdatev+0x9fe>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    12b6:	4f e4       	ldi	r20, 0x4F	; 79
    12b8:	56 e4       	ldi	r21, 0x46	; 70
    12ba:	66 e4       	ldi	r22, 0x46	; 70
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	4f 83       	std	Y+7, r20	; 0x07
    12c0:	58 87       	std	Y+8, r21	; 0x08
    12c2:	69 87       	std	Y+9, r22	; 0x09
    12c4:	7a 87       	std	Y+10, r23	; 0x0a
	}
	strcat(buf, "       ");
    12c6:	d8 01       	movw	r26, r16
    12c8:	0d 90       	ld	r0, X+
    12ca:	00 20       	and	r0, r0
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <_Z14osc1MenuUpdatev+0x78a>
    12ce:	11 97       	sbiw	r26, 0x01	; 1
    12d0:	88 e0       	ldi	r24, 0x08	; 8
    12d2:	ed e3       	ldi	r30, 0x3D	; 61
    12d4:	f1 e0       	ldi	r31, 0x01	; 1
    12d6:	01 90       	ld	r0, Z+
    12d8:	0d 92       	st	X+, r0
    12da:	8a 95       	dec	r24
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <_Z14osc1MenuUpdatev+0x798>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    12de:	8c e0       	ldi	r24, 0x0C	; 12
    12e0:	f8 01       	movw	r30, r16
    12e2:	de 01       	movw	r26, r28
    12e4:	99 96       	adiw	r26, 0x29	; 41
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	8a 95       	dec	r24
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <_Z14osc1MenuUpdatev+0x7a8>
	buf[12] = '\0';
    12ee:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    12f0:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    12f2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12f4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    12f6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    12fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    12fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    12fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1300:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1302:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1304:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1306:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1308:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    130a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    130c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    130e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1310:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1312:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1314:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1316:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1318:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    131a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    131c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    131e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1320:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1322:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1324:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1326:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1328:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    132a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    132c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    132e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1330:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1332:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1334:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1336:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1338:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    133a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    133c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    133e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1340:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1342:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1344:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1346:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1348:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    134a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    134c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    134e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1350:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1352:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1354:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1356:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1358:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    135a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    135c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    135e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1360:	89 a5       	ldd	r24, Y+41	; 0x29
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <_Z14osc1MenuUpdatev+0x82a>
    1366:	81 c0       	rjmp	.+258    	; 0x146a <_Z14osc1MenuUpdatev+0x92c>
    1368:	de 01       	movw	r26, r28
    136a:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    136c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    136e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1370:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1372:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1374:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1376:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1378:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    137a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    137c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    137e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1380:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1382:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1384:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1386:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1388:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    138a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    138c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    138e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1390:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1392:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1394:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1396:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1398:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    139a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    139c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    139e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13a0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    13a2:	44 9a       	sbi	0x08, 4	; 8
    13a4:	99 27       	eor	r25, r25
    13a6:	87 fd       	sbrc	r24, 7
    13a8:	90 95       	com	r25
    13aa:	80 97       	sbiw	r24, 0x20	; 32
    13ac:	fc 01       	movw	r30, r24
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	e8 0f       	add	r30, r24
    13b8:	f9 1f       	adc	r31, r25
    13ba:	ee 5e       	subi	r30, 0xEE	; 238
    13bc:	fc 4f       	sbci	r31, 0xFC	; 252
    13be:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    13c0:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    13c2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    13c4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13c6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    13c8:	82 2f       	mov	r24, r18
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	88 0f       	add	r24, r24
    13ce:	89 2f       	mov	r24, r25
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	89 2b       	or	r24, r25
    13d6:	09 f0       	breq	.+2      	; 0x13da <_Z14osc1MenuUpdatev+0x89c>
    13d8:	61 c0       	rjmp	.+194    	; 0x149c <_Z14osc1MenuUpdatev+0x95e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13de:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    13e0:	26 fd       	sbrc	r18, 6
    13e2:	61 c0       	rjmp	.+194    	; 0x14a6 <_Z14osc1MenuUpdatev+0x968>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13e4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13e8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    13ea:	25 fd       	sbrc	r18, 5
    13ec:	55 c0       	rjmp	.+170    	; 0x1498 <_Z14osc1MenuUpdatev+0x95a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13f2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    13f4:	24 fd       	sbrc	r18, 4
    13f6:	4e c0       	rjmp	.+156    	; 0x1494 <_Z14osc1MenuUpdatev+0x956>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    13f8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    13fc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    13fe:	23 fd       	sbrc	r18, 3
    1400:	47 c0       	rjmp	.+142    	; 0x1490 <_Z14osc1MenuUpdatev+0x952>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1402:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1404:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1406:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1408:	22 fd       	sbrc	r18, 2
    140a:	40 c0       	rjmp	.+128    	; 0x148c <_Z14osc1MenuUpdatev+0x94e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    140c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    140e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1410:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1412:	21 fd       	sbrc	r18, 1
    1414:	39 c0       	rjmp	.+114    	; 0x1488 <_Z14osc1MenuUpdatev+0x94a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1416:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1418:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    141a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    141c:	20 fd       	sbrc	r18, 0
    141e:	32 c0       	rjmp	.+100    	; 0x1484 <_Z14osc1MenuUpdatev+0x946>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1420:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1422:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1424:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1426:	44 9a       	sbi	0x08, 4	; 8
    1428:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    142a:	51 f6       	brne	.-108    	; 0x13c0 <_Z14osc1MenuUpdatev+0x882>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    142c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    142e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1430:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1432:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1434:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1436:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1438:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    143a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    143c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    143e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1440:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1442:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1444:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1446:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1448:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    144a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    144c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    144e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1450:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1452:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1454:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1456:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1458:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    145a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    145c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    145e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1460:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1462:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1464:	8d 91       	ld	r24, X+
    1466:	81 11       	cpse	r24, r1
    1468:	81 cf       	rjmp	.-254    	; 0x136c <_Z14osc1MenuUpdatev+0x82e>
	
	osc1MenuWaveformUpdate();
	osc1MenuCentsUpdate();
	osc1MenuSemisUpdate();
	osc1MenuSyncUpdate();
}
    146a:	e5 96       	adiw	r28, 0x35	; 53
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1484:	5d 9a       	sbi	0x0b, 5	; 11
    1486:	cd cf       	rjmp	.-102    	; 0x1422 <_Z14osc1MenuUpdatev+0x8e4>
    1488:	5d 9a       	sbi	0x0b, 5	; 11
    148a:	c6 cf       	rjmp	.-116    	; 0x1418 <_Z14osc1MenuUpdatev+0x8da>
    148c:	5d 9a       	sbi	0x0b, 5	; 11
    148e:	bf cf       	rjmp	.-130    	; 0x140e <_Z14osc1MenuUpdatev+0x8d0>
    1490:	5d 9a       	sbi	0x0b, 5	; 11
    1492:	b8 cf       	rjmp	.-144    	; 0x1404 <_Z14osc1MenuUpdatev+0x8c6>
    1494:	5d 9a       	sbi	0x0b, 5	; 11
    1496:	b1 cf       	rjmp	.-158    	; 0x13fa <_Z14osc1MenuUpdatev+0x8bc>
    1498:	5d 9a       	sbi	0x0b, 5	; 11
    149a:	aa cf       	rjmp	.-172    	; 0x13f0 <_Z14osc1MenuUpdatev+0x8b2>
    149c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    149e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14a0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14a2:	26 ff       	sbrs	r18, 6
    14a4:	9f cf       	rjmp	.-194    	; 0x13e4 <_Z14osc1MenuUpdatev+0x8a6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    14a6:	5d 9a       	sbi	0x0b, 5	; 11
    14a8:	9e cf       	rjmp	.-196    	; 0x13e6 <_Z14osc1MenuUpdatev+0x8a8>
    14aa:	5d 9a       	sbi	0x0b, 5	; 11
    14ac:	d3 ce       	rjmp	.-602    	; 0x1254 <_Z14osc1MenuUpdatev+0x716>
    14ae:	5d 9a       	sbi	0x0b, 5	; 11
    14b0:	cc ce       	rjmp	.-616    	; 0x124a <_Z14osc1MenuUpdatev+0x70c>
    14b2:	5d 9a       	sbi	0x0b, 5	; 11
    14b4:	c5 ce       	rjmp	.-630    	; 0x1240 <_Z14osc1MenuUpdatev+0x702>
    14b6:	5d 9a       	sbi	0x0b, 5	; 11
    14b8:	be ce       	rjmp	.-644    	; 0x1236 <_Z14osc1MenuUpdatev+0x6f8>
    14ba:	5d 9a       	sbi	0x0b, 5	; 11
    14bc:	b7 ce       	rjmp	.-658    	; 0x122c <_Z14osc1MenuUpdatev+0x6ee>
    14be:	5d 9a       	sbi	0x0b, 5	; 11
    14c0:	b0 ce       	rjmp	.-672    	; 0x1222 <_Z14osc1MenuUpdatev+0x6e4>
    14c2:	5d 9a       	sbi	0x0b, 5	; 11
    14c4:	d6 cd       	rjmp	.-1108   	; 0x1072 <_Z14osc1MenuUpdatev+0x534>
    14c6:	5d 9a       	sbi	0x0b, 5	; 11
    14c8:	a7 ce       	rjmp	.-690    	; 0x1218 <_Z14osc1MenuUpdatev+0x6da>
    14ca:	5d 9a       	sbi	0x0b, 5	; 11
    14cc:	a0 ce       	rjmp	.-704    	; 0x120e <_Z14osc1MenuUpdatev+0x6d0>
    14ce:	5d 9a       	sbi	0x0b, 5	; 11
    14d0:	cb cd       	rjmp	.-1130   	; 0x1068 <_Z14osc1MenuUpdatev+0x52a>
    14d2:	5d 9a       	sbi	0x0b, 5	; 11
    14d4:	c4 cd       	rjmp	.-1144   	; 0x105e <_Z14osc1MenuUpdatev+0x520>
    14d6:	5d 9a       	sbi	0x0b, 5	; 11
    14d8:	bd cd       	rjmp	.-1158   	; 0x1054 <_Z14osc1MenuUpdatev+0x516>
    14da:	5d 9a       	sbi	0x0b, 5	; 11
    14dc:	b6 cd       	rjmp	.-1172   	; 0x104a <_Z14osc1MenuUpdatev+0x50c>
    14de:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14e2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14e4:	26 ff       	sbrs	r18, 6
    14e6:	a6 cd       	rjmp	.-1204   	; 0x1034 <_Z14osc1MenuUpdatev+0x4f6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    14e8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    14ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    14ec:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    14ee:	25 ff       	sbrs	r18, 5
    14f0:	a6 cd       	rjmp	.-1204   	; 0x103e <_Z14osc1MenuUpdatev+0x500>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    14f2:	5d 9a       	sbi	0x0b, 5	; 11
    14f4:	a5 cd       	rjmp	.-1206   	; 0x1040 <_Z14osc1MenuUpdatev+0x502>
    14f6:	5d 9a       	sbi	0x0b, 5	; 11
    14f8:	c8 cc       	rjmp	.-1648   	; 0xe8a <_Z14osc1MenuUpdatev+0x34c>
    14fa:	5d 9a       	sbi	0x0b, 5	; 11
    14fc:	c1 cc       	rjmp	.-1662   	; 0xe80 <_Z14osc1MenuUpdatev+0x342>
    14fe:	5d 9a       	sbi	0x0b, 5	; 11
    1500:	ba cc       	rjmp	.-1676   	; 0xe76 <_Z14osc1MenuUpdatev+0x338>
    1502:	5d 9a       	sbi	0x0b, 5	; 11
    1504:	b3 cc       	rjmp	.-1690   	; 0xe6c <_Z14osc1MenuUpdatev+0x32e>
    1506:	5d 9a       	sbi	0x0b, 5	; 11
    1508:	ac cc       	rjmp	.-1704   	; 0xe62 <_Z14osc1MenuUpdatev+0x324>
    150a:	5d 9a       	sbi	0x0b, 5	; 11
    150c:	a5 cc       	rjmp	.-1718   	; 0xe58 <_Z14osc1MenuUpdatev+0x31a>
    150e:	5d 9a       	sbi	0x0b, 5	; 11
    1510:	9e cc       	rjmp	.-1732   	; 0xe4e <_Z14osc1MenuUpdatev+0x310>
    1512:	5d 9a       	sbi	0x0b, 5	; 11
    1514:	d0 cb       	rjmp	.-2144   	; 0xcb6 <_Z14osc1MenuUpdatev+0x178>
    1516:	5d 9a       	sbi	0x0b, 5	; 11
    1518:	95 cc       	rjmp	.-1750   	; 0xe44 <_Z14osc1MenuUpdatev+0x306>
    151a:	5d 9a       	sbi	0x0b, 5	; 11
    151c:	c7 cb       	rjmp	.-2162   	; 0xcac <_Z14osc1MenuUpdatev+0x16e>
    151e:	5d 9a       	sbi	0x0b, 5	; 11
    1520:	c0 cb       	rjmp	.-2176   	; 0xca2 <_Z14osc1MenuUpdatev+0x164>
    1522:	5d 9a       	sbi	0x0b, 5	; 11
    1524:	b9 cb       	rjmp	.-2190   	; 0xc98 <_Z14osc1MenuUpdatev+0x15a>
    1526:	5d 9a       	sbi	0x0b, 5	; 11
    1528:	b2 cb       	rjmp	.-2204   	; 0xc8e <_Z14osc1MenuUpdatev+0x150>
    152a:	5d 9a       	sbi	0x0b, 5	; 11
    152c:	ab cb       	rjmp	.-2218   	; 0xc84 <_Z14osc1MenuUpdatev+0x146>
    152e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1530:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1532:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1534:	26 ff       	sbrs	r18, 6
    1536:	a0 cb       	rjmp	.-2240   	; 0xc78 <_Z14osc1MenuUpdatev+0x13a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1538:	5d 9a       	sbi	0x0b, 5	; 11
    153a:	9f cb       	rjmp	.-2242   	; 0xc7a <_Z14osc1MenuUpdatev+0x13c>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    153c:	2f e4       	ldi	r18, 0x4F	; 79
    153e:	3e e4       	ldi	r19, 0x4E	; 78
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	2f 83       	std	Y+7, r18	; 0x07
    1544:	38 87       	std	Y+8, r19	; 0x08
    1546:	49 87       	std	Y+9, r20	; 0x09
    1548:	be ce       	rjmp	.-644    	; 0x12c6 <_Z14osc1MenuUpdatev+0x788>

0000154a <_Z18lfoMenuRouteUpdatev>:
	strcat(buf, "    ");
	writeLine(4, buf);
}

inline void lfoMenuRouteUpdate()
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	a1 97       	sbiw	r28, 0x21	; 33
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	de 01       	movw	r26, r28
    156a:	11 96       	adiw	r26, 0x01	; 1
    156c:	01 90       	ld	r0, Z+
    156e:	0d 92       	st	X+, r0
    1570:	8a 95       	dec	r24
    1572:	e1 f7       	brne	.-8      	; 0x156c <_Z18lfoMenuRouteUpdatev+0x22>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    1574:	e0 91 b6 05 	lds	r30, 0x05B6
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	e8 59       	subi	r30, 0x98	; 152
    1580:	f9 4f       	sbci	r31, 0xF9	; 249
    1582:	65 91       	lpm	r22, Z+
    1584:	74 91       	lpm	r23, Z
    1586:	8e 01       	movw	r16, r28
    1588:	0f 5f       	subi	r16, 0xFF	; 255
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	c8 01       	movw	r24, r16
    158e:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "    ");
    1592:	d8 01       	movw	r26, r16
    1594:	0d 90       	ld	r0, X+
    1596:	00 20       	and	r0, r0
    1598:	e9 f7       	brne	.-6      	; 0x1594 <_Z18lfoMenuRouteUpdatev+0x4a>
    159a:	11 97       	sbiw	r26, 0x01	; 1
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	e0 e4       	ldi	r30, 0x40	; 64
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	8a 95       	dec	r24
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <_Z18lfoMenuRouteUpdatev+0x58>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    15aa:	8c e0       	ldi	r24, 0x0C	; 12
    15ac:	f8 01       	movw	r30, r16
    15ae:	de 01       	movw	r26, r28
    15b0:	55 96       	adiw	r26, 0x15	; 21
    15b2:	01 90       	ld	r0, Z+
    15b4:	0d 92       	st	X+, r0
    15b6:	8a 95       	dec	r24
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <_Z18lfoMenuRouteUpdatev+0x68>
	buf[12] = '\0';
    15ba:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15bc:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15be:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15cc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15d4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15d8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15da:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15dc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15de:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15e6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15e8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    15f2:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    15f4:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    15f6:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    15fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    15fe:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1600:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1602:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1604:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1606:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1608:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    160a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    160c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    160e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1610:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1612:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1614:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1616:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1618:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    161a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    161c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    161e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1620:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1622:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1624:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1626:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1628:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    162a:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    162c:	8d 89       	ldd	r24, Y+21	; 0x15
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <_Z18lfoMenuRouteUpdatev+0xea>
    1632:	81 c0       	rjmp	.+258    	; 0x1736 <_Z18lfoMenuRouteUpdatev+0x1ec>
    1634:	de 01       	movw	r26, r28
    1636:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1638:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    163a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    163c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    163e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1640:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1642:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1644:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1646:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1648:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    164a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    164c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    164e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1650:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1652:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1654:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1656:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1658:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    165a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    165c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    165e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1660:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1662:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1664:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1666:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1668:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    166a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    166c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    166e:	44 9a       	sbi	0x08, 4	; 8
    1670:	99 27       	eor	r25, r25
    1672:	87 fd       	sbrc	r24, 7
    1674:	90 95       	com	r25
    1676:	80 97       	sbiw	r24, 0x20	; 32
    1678:	fc 01       	movw	r30, r24
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	e8 0f       	add	r30, r24
    1684:	f9 1f       	adc	r31, r25
    1686:	ee 5e       	subi	r30, 0xEE	; 238
    1688:	fc 4f       	sbci	r31, 0xFC	; 252
    168a:	35 e0       	ldi	r19, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    168c:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    168e:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1690:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1692:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    1694:	82 2f       	mov	r24, r18
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	88 0f       	add	r24, r24
    169a:	89 2f       	mov	r24, r25
    169c:	88 1f       	adc	r24, r24
    169e:	99 0b       	sbc	r25, r25
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <_Z18lfoMenuRouteUpdatev+0x15c>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <_Z18lfoMenuRouteUpdatev+0x21a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16aa:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16ac:	26 fd       	sbrc	r18, 6
    16ae:	5f c0       	rjmp	.+190    	; 0x176e <_Z18lfoMenuRouteUpdatev+0x224>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16b4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16b6:	25 fd       	sbrc	r18, 5
    16b8:	53 c0       	rjmp	.+166    	; 0x1760 <_Z18lfoMenuRouteUpdatev+0x216>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16be:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16c0:	24 fd       	sbrc	r18, 4
    16c2:	4c c0       	rjmp	.+152    	; 0x175c <_Z18lfoMenuRouteUpdatev+0x212>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16c8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16ca:	23 fd       	sbrc	r18, 3
    16cc:	45 c0       	rjmp	.+138    	; 0x1758 <_Z18lfoMenuRouteUpdatev+0x20e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ce:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16d2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16d4:	22 fd       	sbrc	r18, 2
    16d6:	3e c0       	rjmp	.+124    	; 0x1754 <_Z18lfoMenuRouteUpdatev+0x20a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16d8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16da:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16dc:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16de:	21 fd       	sbrc	r18, 1
    16e0:	37 c0       	rjmp	.+110    	; 0x1750 <_Z18lfoMenuRouteUpdatev+0x206>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16e6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    16e8:	20 fd       	sbrc	r18, 0
    16ea:	30 c0       	rjmp	.+96     	; 0x174c <_Z18lfoMenuRouteUpdatev+0x202>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16ec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    16ee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16f0:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    16f2:	44 9a       	sbi	0x08, 4	; 8
    16f4:	31 50       	subi	r19, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    16f6:	51 f6       	brne	.-108    	; 0x168c <_Z18lfoMenuRouteUpdatev+0x142>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    16f8:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    16fa:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    16fc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    16fe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1700:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1702:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1704:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1706:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1708:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    170a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    170c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    170e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1710:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1712:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1714:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1716:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1718:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    171a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    171c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    171e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1720:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1722:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1724:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1726:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1728:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    172a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    172c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    172e:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    1730:	8d 91       	ld	r24, X+
    1732:	81 11       	cpse	r24, r1
    1734:	81 cf       	rjmp	.-254    	; 0x1638 <_Z18lfoMenuRouteUpdatev+0xee>
	
	sprintf(buf, "%s", routeLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
	strcat(buf, "    ");
	writeLine(5, buf);
}
    1736:	a1 96       	adiw	r28, 0x21	; 33
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	08 95       	ret
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    174c:	5d 9a       	sbi	0x0b, 5	; 11
    174e:	cf cf       	rjmp	.-98     	; 0x16ee <_Z18lfoMenuRouteUpdatev+0x1a4>
    1750:	5d 9a       	sbi	0x0b, 5	; 11
    1752:	c8 cf       	rjmp	.-112    	; 0x16e4 <_Z18lfoMenuRouteUpdatev+0x19a>
    1754:	5d 9a       	sbi	0x0b, 5	; 11
    1756:	c1 cf       	rjmp	.-126    	; 0x16da <_Z18lfoMenuRouteUpdatev+0x190>
    1758:	5d 9a       	sbi	0x0b, 5	; 11
    175a:	ba cf       	rjmp	.-140    	; 0x16d0 <_Z18lfoMenuRouteUpdatev+0x186>
    175c:	5d 9a       	sbi	0x0b, 5	; 11
    175e:	b3 cf       	rjmp	.-154    	; 0x16c6 <_Z18lfoMenuRouteUpdatev+0x17c>
    1760:	5d 9a       	sbi	0x0b, 5	; 11
    1762:	ac cf       	rjmp	.-168    	; 0x16bc <_Z18lfoMenuRouteUpdatev+0x172>
    1764:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1766:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1768:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    176a:	26 ff       	sbrs	r18, 6
    176c:	a1 cf       	rjmp	.-190    	; 0x16b0 <_Z18lfoMenuRouteUpdatev+0x166>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    176e:	5d 9a       	sbi	0x0b, 5	; 11
    1770:	a0 cf       	rjmp	.-192    	; 0x16b2 <_Z18lfoMenuRouteUpdatev+0x168>

00001772 <_Z7initLCDv>:
	writeLine(5, buf);
}

void initLCD()
{
	sbi(LCD_SCE_DIR, LCD_SCE_PIN);
    1772:	3c 9a       	sbi	0x07, 4	; 7
	sbi(LCD_RST_DIR, LCD_RST_PIN);
    1774:	3d 9a       	sbi	0x07, 5	; 7
	sbi(LCD_DC_DIR, LCD_DC_PIN);
    1776:	25 9a       	sbi	0x04, 5	; 4
	sbi(LCD_DATA_DIR, LCD_DATA_PIN);
    1778:	55 9a       	sbi	0x0a, 5	; 10
	sbi(LCD_CLK_DIR, LCD_CLK_PIN);
    177a:	54 9a       	sbi	0x0a, 4	; 10
	
	cbi(LCD_RST_WR, LCD_RST_PIN);
    177c:	45 98       	cbi	0x08, 5	; 8
	sbi(LCD_RST_WR, LCD_RST_PIN);
    177e:	45 9a       	sbi	0x08, 5	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1780:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1782:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1784:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1786:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1788:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    178a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    178c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    178e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1790:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1792:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1794:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1796:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1798:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    179a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    179c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    179e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17ae:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    17b0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17b4:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    17b6:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    17b8:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    17ba:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17bc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    17be:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17c2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17c4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17c6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17c8:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    17ca:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17cc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17ce:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    17d0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17d2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17d4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17d6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17d8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17da:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17dc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17de:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17ec:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    17ee:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    17f0:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    17f2:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17f4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17f6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17f8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    17fa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    17fc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    17fe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1800:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1802:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1804:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1806:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1808:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    180a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    180c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    180e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1810:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1812:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1814:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1816:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1818:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    181a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    181c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    181e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1820:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1822:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1824:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1826:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1828:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    182a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    182c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    182e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1830:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1832:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1834:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1836:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1838:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    183a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    183c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    183e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1840:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1842:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1844:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1846:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1848:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    184a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    184c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    184e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1850:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1852:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1854:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1856:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1858:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    185a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    185c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    185e:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1860:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1862:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1864:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1866:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1868:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    186a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    186c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    186e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1870:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1872:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1874:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1876:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1878:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    187a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    187c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    187e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1880:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1882:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1884:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1886:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1888:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    188a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    188c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    188e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1890:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1892:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1894:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1896:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1898:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    189a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    189c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    189e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18a2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    18a4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    18aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    18b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18b4:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    18b6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18ba:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    18bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    18c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18c6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    18c8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    18ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    18cc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    18ce:	44 9a       	sbi	0x08, 4	; 8
    18d0:	08 95       	ret

000018d2 <_Z5setupv>:
		}
	}
}

void setup()
{
    18d2:	2f 92       	push	r2
    18d4:	3f 92       	push	r3
    18d6:	4f 92       	push	r4
    18d8:	5f 92       	push	r5
    18da:	6f 92       	push	r6
    18dc:	7f 92       	push	r7
    18de:	8f 92       	push	r8
    18e0:	9f 92       	push	r9
    18e2:	af 92       	push	r10
    18e4:	bf 92       	push	r11
    18e6:	cf 92       	push	r12
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	2f 97       	sbiw	r28, 0x0f	; 15
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e8       	ldi	r25, 0x80	; 128
    190a:	ac e8       	ldi	r26, 0x8C	; 140
    190c:	ba e7       	ldi	r27, 0x7A	; 122
    190e:	80 93 63 05 	sts	0x0563, r24
    1912:	90 93 64 05 	sts	0x0564, r25
    1916:	a0 93 65 05 	sts	0x0565, r26
    191a:	b0 93 66 05 	sts	0x0566, r27
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
	*((unsigned short*)&(b)) = 0;
    1926:	1a 82       	std	Y+2, r1	; 0x02
    1928:	19 82       	std	Y+1, r1	; 0x01
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    192a:	89 80       	ldd	r8, Y+1	; 0x01
    192c:	9a 80       	ldd	r9, Y+2	; 0x02
    192e:	ab 80       	ldd	r10, Y+3	; 0x03
    1930:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    1932:	94 01       	movw	r18, r8
    1934:	a5 01       	movw	r20, r10
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	00 e1       	ldi	r16, 0x10	; 16
    1940:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    1944:	a1 2c       	mov	r10, r1
    1946:	e0 e8       	ldi	r30, 0x80	; 128
    1948:	be 2e       	mov	r11, r30
    194a:	fc e8       	ldi	r31, 0x8C	; 140
    194c:	cf 2e       	mov	r12, r31
    194e:	aa e7       	ldi	r26, 0x7A	; 122
    1950:	da 2e       	mov	r13, r26
    1952:	e1 2c       	mov	r14, r1
    1954:	f1 2c       	mov	r15, r1
    1956:	00 e0       	ldi	r16, 0x00	; 0
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	0e 94 81 28 	call	0x5102	; 0x5102 <__udivdi3>
    195e:	20 93 5f 05 	sts	0x055F, r18
    1962:	30 93 60 05 	sts	0x0560, r19
    1966:	40 93 61 05 	sts	0x0561, r20
    196a:	50 93 62 05 	sts	0x0562, r21
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
	return fixedMultiply(rhs, temp);
}

inline unsigned long fixedDivide(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    1976:	89 80       	ldd	r8, Y+1	; 0x01
    1978:	9a 80       	ldd	r9, Y+2	; 0x02
    197a:	ab 80       	ldd	r10, Y+3	; 0x03
    197c:	bc 80       	ldd	r11, Y+4	; 0x04
	temp = temp << 16;
    197e:	94 01       	movw	r18, r8
    1980:	a5 01       	movw	r20, r10
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	00 e1       	ldi	r16, 0x10	; 16
    198c:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
	
	return (unsigned long)(temp/rhs);
    1990:	a1 2c       	mov	r10, r1
    1992:	b0 e8       	ldi	r27, 0x80	; 128
    1994:	bb 2e       	mov	r11, r27
    1996:	0c e8       	ldi	r16, 0x8C	; 140
    1998:	c0 2e       	mov	r12, r16
    199a:	ea e7       	ldi	r30, 0x7A	; 122
    199c:	de 2e       	mov	r13, r30
    199e:	e1 2c       	mov	r14, r1
    19a0:	f1 2c       	mov	r15, r1
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	0e 94 81 28 	call	0x5102	; 0x5102 <__udivdi3>
    19a8:	39 01       	movw	r6, r18
    19aa:	4a 01       	movw	r8, r20
    19ac:	1b 01       	movw	r2, r22
    19ae:	2c 01       	movw	r4, r24
    19b0:	32 2f       	mov	r19, r18
    19b2:	30 93 67 05 	sts	0x0567, r19
    19b6:	70 92 68 05 	sts	0x0568, r7
    19ba:	80 92 69 05 	sts	0x0569, r8
    19be:	90 92 6a 05 	sts	0x056A, r9
}

//Fixed Lib
inline void toFixed(int a, unsigned long &b)
{
	*((unsigned short*)&(b) + 1) = a;
    19c2:	88 eb       	ldi	r24, 0xB8	; 184
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	90 93 f9 05 	sts	0x05F9, r25
    19ca:	80 93 f8 05 	sts	0x05F8, r24
	*((unsigned short*)&(b)) = 0;
    19ce:	10 92 f7 05 	sts	0x05F7, r1
    19d2:	10 92 f6 05 	sts	0x05F6, r1
	return ret;
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
    19d6:	00 91 f6 05 	lds	r16, 0x05F6
    19da:	10 91 f7 05 	lds	r17, 0x05F7
    19de:	20 91 f8 05 	lds	r18, 0x05F8
    19e2:	30 91 f9 05 	lds	r19, 0x05F9
	temp *= rhs;
    19e6:	58 01       	movw	r10, r16
    19e8:	69 01       	movw	r12, r18
    19ea:	00 e0       	ldi	r16, 0x00	; 0
    19ec:	10 e0       	ldi	r17, 0x00	; 0
    19ee:	93 01       	movw	r18, r6
    19f0:	a4 01       	movw	r20, r8
    19f2:	b1 01       	movw	r22, r2
    19f4:	c2 01       	movw	r24, r4
    19f6:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <__muldi3>
	
	return (unsigned long)(temp >> 16);
    19fa:	00 e1       	ldi	r16, 0x10	; 16
    19fc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1a00:	c9 01       	movw	r24, r18
    1a02:	da 01       	movw	r26, r20
	toFixed(31372.550, refclk);
	reftime = fixedDivide(1, refclk);
	stepConst = fixedDivide(256, refclk);

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1a04:	80 93 e6 05 	sts	0x05E6, r24
    1a08:	90 93 e7 05 	sts	0x05E7, r25
    1a0c:	a0 93 e8 05 	sts	0x05E8, r26
    1a10:	b0 93 e9 05 	sts	0x05E9, r27
	{
		b = b >> ((int)exponent - 127);
	}
	else
	{
		b = b << ((int)exponent - 127);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e8       	ldi	r25, 0x80	; 128
    1a18:	a8 eb       	ldi	r26, 0xB8	; 184
    1a1a:	b1 e0       	ldi	r27, 0x01	; 1
    1a1c:	80 93 d6 05 	sts	0x05D6, r24
    1a20:	90 93 d7 05 	sts	0x05D7, r25
    1a24:	a0 93 d8 05 	sts	0x05D8, r26
    1a28:	b0 93 d9 05 	sts	0x05D9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1a2c:	93 01       	movw	r18, r6
    1a2e:	a4 01       	movw	r20, r8
    1a30:	b1 01       	movw	r22, r2
    1a32:	c2 01       	movw	r24, r4
    1a34:	03 e0       	ldi	r16, 0x03	; 3
    1a36:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1a3a:	53 01       	movw	r10, r6
    1a3c:	64 01       	movw	r12, r8
    1a3e:	71 01       	movw	r14, r2
    1a40:	82 01       	movw	r16, r4
    1a42:	0e 94 1e 29 	call	0x523c	; 0x523c <__subdi3>
    1a46:	07 e0       	ldi	r16, 0x07	; 7
    1a48:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1a4c:	04 2d       	mov	r16, r4
    1a4e:	0e 94 1e 29 	call	0x523c	; 0x523c <__subdi3>
    1a52:	06 e0       	ldi	r16, 0x06	; 6
    1a54:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1a58:	04 2d       	mov	r16, r4
    1a5a:	0e 94 1e 29 	call	0x523c	; 0x523c <__subdi3>
    1a5e:	59 01       	movw	r10, r18
    1a60:	6a 01       	movw	r12, r20
    1a62:	7b 01       	movw	r14, r22
    1a64:	e8 2f       	mov	r30, r24
    1a66:	19 2f       	mov	r17, r25
    1a68:	03 e0       	ldi	r16, 0x03	; 3
    1a6a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1a6e:	0e 2f       	mov	r16, r30
    1a70:	0e 94 1e 29 	call	0x523c	; 0x523c <__subdi3>
    1a74:	03 e0       	ldi	r16, 0x03	; 3
    1a76:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1a7a:	53 01       	movw	r10, r6
    1a7c:	64 01       	movw	r12, r8
    1a7e:	71 01       	movw	r14, r2
    1a80:	82 01       	movw	r16, r4
    1a82:	0e 94 1e 29 	call	0x523c	; 0x523c <__subdi3>
    1a86:	2d 83       	std	Y+5, r18	; 0x05
    1a88:	3d 87       	std	Y+13, r19	; 0x0d
    1a8a:	4e 87       	std	Y+14, r20	; 0x0e
    1a8c:	5f 87       	std	Y+15, r21	; 0x0f
    1a8e:	b6 2f       	mov	r27, r22
    1a90:	a7 2f       	mov	r26, r23
    1a92:	f8 2f       	mov	r31, r24
    1a94:	e9 2f       	mov	r30, r25
    1a96:	7a 2f       	mov	r23, r26
    1a98:	8f 2f       	mov	r24, r31
    1a9a:	9e 2f       	mov	r25, r30
    1a9c:	03 e0       	ldi	r16, 0x03	; 3
    1a9e:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ashldi3>
    1aa2:	59 01       	movw	r10, r18
    1aa4:	6a 01       	movw	r12, r20
    1aa6:	7b 01       	movw	r14, r22
    1aa8:	8c 01       	movw	r16, r24
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aae:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ab0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ab2:	6b 2f       	mov	r22, r27
    1ab4:	7a 2f       	mov	r23, r26
    1ab6:	8f 2f       	mov	r24, r31
    1ab8:	9e 2f       	mov	r25, r30
    1aba:	0e 94 15 29 	call	0x522a	; 0x522a <__adddi3>
    1abe:	53 01       	movw	r10, r6
    1ac0:	64 01       	movw	r12, r8
    1ac2:	71 01       	movw	r14, r2
    1ac4:	82 01       	movw	r16, r4
    1ac6:	0e 94 15 29 	call	0x522a	; 0x522a <__adddi3>
	
	return (unsigned long)(temp >> 16);
    1aca:	00 e1       	ldi	r16, 0x10	; 16
    1acc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	da 01       	movw	r26, r20

	toFixed(440, osc1Freq);
	osc1TWord = fixedMultiply(osc1Freq, stepConst);

	toFixed(440.5, osc2Freq);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    1ad4:	80 93 ce 05 	sts	0x05CE, r24
    1ad8:	90 93 cf 05 	sts	0x05CF, r25
    1adc:	a0 93 d0 05 	sts	0x05D0, r26
    1ae0:	b0 93 d1 05 	sts	0x05D1, r27
	
	initLCD();
    1ae4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_Z7initLCDv>
    1ae8:	88 ef       	ldi	r24, 0xF8	; 248
    1aea:	91 e0       	ldi	r25, 0x01	; 1
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    1aec:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1aee:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1af0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1af2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1af4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1af6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1af8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1afa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1afc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1afe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b20:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1b22:	44 9a       	sbi	0x08, 4	; 8
    1b24:	01 97       	sbiw	r24, 0x01	; 1
		lcdCharacter(*str++);
}

inline void lcdClear()
{
	for(int index = 0; index < (LCD_X*LCD_Y)/8; index++)
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	09 f7       	brne	.-62     	; 0x1aec <_Z5setupv+0x21a>

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1b2a:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1b2c:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b2e:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b30:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b32:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b34:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b36:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b38:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b3a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b3c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b3e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b40:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b42:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b44:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b46:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b48:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b4a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b4c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b4e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b50:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b52:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b54:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b56:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b58:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b5a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b5c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b5e:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1b60:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    1b62:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    1b64:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b66:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b6c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b6e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b70:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b72:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b74:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b78:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b7a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b7c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b7e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b84:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b8a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b8c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b8e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b90:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    1b92:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b94:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    1b96:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1b98:	44 9a       	sbi	0x08, 4	; 8
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
}

void adcInit()
{
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D) | (1 << ADC3D);
    1b9a:	8f e0       	ldi	r24, 0x0F	; 15
    1b9c:	80 93 7e 00 	sts	0x007E, r24
	
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1);
    1ba0:	8a e8       	ldi	r24, 0x8A	; 138
    1ba2:	80 93 7a 00 	sts	0x007A, r24
	gotoXY(0,0);
}

void uartInit()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    1ba6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    1baa:	8f e1       	ldi	r24, 0x1F	; 31
    1bac:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1bb0:	88 e9       	ldi	r24, 0x98	; 152
    1bb2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    1bb6:	86 e0       	ldi	r24, 0x06	; 6
    1bb8:	80 93 c2 00 	sts	0x00C2, r24
}

void oscInit() {

	// Timer2 Clock Prescaler to : 1
	sbi (TCCR2B, CS20);
    1bbc:	80 91 b1 00 	lds	r24, 0x00B1
    1bc0:	81 60       	ori	r24, 0x01	; 1
    1bc2:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS21);
    1bc6:	80 91 b1 00 	lds	r24, 0x00B1
    1bca:	8d 7f       	andi	r24, 0xFD	; 253
    1bcc:	80 93 b1 00 	sts	0x00B1, r24
	cbi (TCCR2B, CS22);
    1bd0:	80 91 b1 00 	lds	r24, 0x00B1
    1bd4:	8b 7f       	andi	r24, 0xFB	; 251
    1bd6:	80 93 b1 00 	sts	0x00B1, r24

	// Timer2 PWM Mode set to Phase Correct PWM
	cbi (TCCR2A, COM2A0);  // clear Compare Match
    1bda:	80 91 b0 00 	lds	r24, 0x00B0
    1bde:	8f 7b       	andi	r24, 0xBF	; 191
    1be0:	80 93 b0 00 	sts	0x00B0, r24
	sbi (TCCR2A, COM2A1);
    1be4:	80 91 b0 00 	lds	r24, 0x00B0
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	80 93 b0 00 	sts	0x00B0, r24

	sbi (TCCR2A, WGM20);  // Mode 1  / Phase Correct PWM
    1bee:	80 91 b0 00 	lds	r24, 0x00B0
    1bf2:	81 60       	ori	r24, 0x01	; 1
    1bf4:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2A, WGM21);
    1bf8:	80 91 b0 00 	lds	r24, 0x00B0
    1bfc:	8d 7f       	andi	r24, 0xFD	; 253
    1bfe:	80 93 b0 00 	sts	0x00B0, r24
	cbi (TCCR2B, WGM22);
    1c02:	80 91 b1 00 	lds	r24, 0x00B1
    1c06:	87 7f       	andi	r24, 0xF7	; 247
    1c08:	80 93 b1 00 	sts	0x00B1, r24
	noteUpdate();
}

void btnInit()
{
	cbi(OSC1_BTN_DIR, OSC1_BTN_PIN);
    1c0c:	56 98       	cbi	0x0a, 6	; 10
	sbi(OSC1_BTN_WR, OSC1_BTN_PIN);
    1c0e:	5e 9a       	sbi	0x0b, 6	; 11
	
	cbi(OSC2_BTN_DIR, OSC2_BTN_PIN); //Set OSC2_BTN as an input
    1c10:	57 98       	cbi	0x0a, 7	; 10
	sbi(OSC2_BTN_WR, OSC2_BTN_PIN); //Set the internal pull-up
    1c12:	5f 9a       	sbi	0x0b, 7	; 11
	
	cbi(SAVE_BTN_DIR, SAVE_BTN_PIN); //Set SAVE_BTN as an input
    1c14:	20 98       	cbi	0x04, 0	; 4
	sbi(SAVE_BTN_WR, SAVE_BTN_PIN);	//Set the internal pull-up
    1c16:	28 9a       	sbi	0x05, 0	; 5
	
	cbi(BANK_BTN_DIR, BANK_BTN_PIN);
    1c18:	24 98       	cbi	0x04, 4	; 4
	sbi(BANK_BTN_WR, BANK_BTN_PIN);
    1c1a:	2c 9a       	sbi	0x05, 4	; 5
	
	cbi(LOCK_BTN_DIR, LOCK_BTN_PIN);
    1c1c:	22 98       	cbi	0x04, 2	; 4
	sbi(LOCK_BTN_WR, LOCK_BTN_PIN);
    1c1e:	2a 9a       	sbi	0x05, 2	; 5
	
	cbi(EXTRA_BTN_DIR, EXTRA_BTN_PIN);
    1c20:	21 98       	cbi	0x04, 1	; 4
	sbi(EXTRA_BTN_WR, EXTRA_BTN_PIN);	
    1c22:	29 9a       	sbi	0x05, 1	; 5
	adcInit();
	uartInit();
	oscInit();
	btnInit();
	
	sbi(OSC_OUT_DIR, OSC_OUT_PIN);
    1c24:	23 9a       	sbi	0x04, 3	; 4
	
	sbi (TIMSK2,TOIE2);
    1c26:	80 91 70 00 	lds	r24, 0x0070
    1c2a:	81 60       	ori	r24, 0x01	; 1
    1c2c:	80 93 70 00 	sts	0x0070, r24
	sei();
    1c30:	78 94       	sei
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    1c32:	80 91 da 05 	lds	r24, 0x05DA
    1c36:	e0 91 e4 05 	lds	r30, 0x05E4
    1c3a:	ff 27       	eor	r31, r31
    1c3c:	e7 fd       	sbrc	r30, 7
    1c3e:	f0 95       	com	r31
    1c40:	e8 0f       	add	r30, r24
    1c42:	f1 1d       	adc	r31, r1
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	ee 0f       	add	r30, r30
    1c4a:	ff 1f       	adc	r31, r31
    1c4c:	ec 55       	subi	r30, 0x5C	; 92
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	c0 80       	ld	r12, Z
    1c52:	d1 80       	ldd	r13, Z+1	; 0x01
    1c54:	e2 80       	ldd	r14, Z+2	; 0x02
    1c56:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    1c58:	80 91 cb 05 	lds	r24, 0x05CB
    1c5c:	90 91 c1 05 	lds	r25, 0x05C1
    1c60:	e0 91 cc 05 	lds	r30, 0x05CC
    1c64:	ff 27       	eor	r31, r31
    1c66:	e7 fd       	sbrc	r30, 7
    1c68:	f0 95       	com	r31
    1c6a:	e9 0f       	add	r30, r25
    1c6c:	f1 1d       	adc	r31, r1
    1c6e:	9c e0       	ldi	r25, 0x0C	; 12
    1c70:	89 02       	muls	r24, r25
    1c72:	e0 0d       	add	r30, r0
    1c74:	f1 1d       	adc	r31, r1
    1c76:	11 24       	eor	r1, r1
    1c78:	ee 0f       	add	r30, r30
    1c7a:	ff 1f       	adc	r31, r31
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	ec 55       	subi	r30, 0x5C	; 92
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	80 80       	ld	r8, Z
    1c86:	91 80       	ldd	r9, Z+1	; 0x01
    1c88:	a2 80       	ldd	r10, Z+2	; 0x02
    1c8a:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    1c8c:	60 91 e5 05 	lds	r22, 0x05E5
    1c90:	a7 e2       	ldi	r26, 0x27	; 39
    1c92:	6a 02       	muls	r22, r26
    1c94:	b0 01       	movw	r22, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	88 27       	eor	r24, r24
    1c9a:	77 fd       	sbrc	r23, 7
    1c9c:	80 95       	com	r24
    1c9e:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1ca0:	a7 01       	movw	r20, r14
    1ca2:	96 01       	movw	r18, r12
    1ca4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1ca8:	00 e1       	ldi	r16, 0x10	; 16
    1caa:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1cae:	2d 83       	std	Y+5, r18	; 0x05
    1cb0:	3e 83       	std	Y+6, r19	; 0x06
    1cb2:	4f 83       	std	Y+7, r20	; 0x07
    1cb4:	58 87       	std	Y+8, r21	; 0x08
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	af 81       	ldd	r26, Y+7	; 0x07
    1cbc:	b8 85       	ldd	r27, Y+8	; 0x08
    1cbe:	c8 0e       	add	r12, r24
    1cc0:	d9 1e       	adc	r13, r25
    1cc2:	ea 1e       	adc	r14, r26
    1cc4:	fb 1e       	adc	r15, r27
    1cc6:	c0 92 f6 05 	sts	0x05F6, r12
    1cca:	d0 92 f7 05 	sts	0x05F7, r13
    1cce:	e0 92 f8 05 	sts	0x05F8, r14
    1cd2:	f0 92 f9 05 	sts	0x05F9, r15

	centsConst = 0x27*osc2CentsShift;
    1cd6:	20 91 cd 05 	lds	r18, 0x05CD
    1cda:	97 e2       	ldi	r25, 0x27	; 39
    1cdc:	29 02       	muls	r18, r25
    1cde:	90 01       	movw	r18, r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	44 27       	eor	r20, r20
    1ce4:	37 fd       	sbrc	r19, 7
    1ce6:	40 95       	com	r20
    1ce8:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1cea:	c5 01       	movw	r24, r10
    1cec:	b4 01       	movw	r22, r8
    1cee:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1cf2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1cf6:	2d 83       	std	Y+5, r18	; 0x05
    1cf8:	3e 83       	std	Y+6, r19	; 0x06
    1cfa:	4f 83       	std	Y+7, r20	; 0x07
    1cfc:	58 87       	std	Y+8, r21	; 0x08
    1cfe:	69 87       	std	Y+9, r22	; 0x09
    1d00:	7a 87       	std	Y+10, r23	; 0x0a
    1d02:	8b 87       	std	Y+11, r24	; 0x0b
    1d04:	9c 87       	std	Y+12, r25	; 0x0c

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	af 81       	ldd	r26, Y+7	; 0x07
    1d0c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d0e:	88 0e       	add	r8, r24
    1d10:	99 1e       	adc	r9, r25
    1d12:	aa 1e       	adc	r10, r26
    1d14:	bb 1e       	adc	r11, r27
    1d16:	80 92 d6 05 	sts	0x05D6, r8
    1d1a:	90 92 d7 05 	sts	0x05D7, r9
    1d1e:	a0 92 d8 05 	sts	0x05D8, r10
    1d22:	b0 92 d9 05 	sts	0x05D9, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1d26:	40 90 67 05 	lds	r4, 0x0567
    1d2a:	50 90 68 05 	lds	r5, 0x0568
    1d2e:	60 90 69 05 	lds	r6, 0x0569
    1d32:	70 90 6a 05 	lds	r7, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1d36:	c7 01       	movw	r24, r14
    1d38:	b6 01       	movw	r22, r12
    1d3a:	a3 01       	movw	r20, r6
    1d3c:	92 01       	movw	r18, r4
    1d3e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1d42:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1d46:	c9 01       	movw	r24, r18
    1d48:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    1d4a:	80 93 e6 05 	sts	0x05E6, r24
    1d4e:	90 93 e7 05 	sts	0x05E7, r25
    1d52:	a0 93 e8 05 	sts	0x05E8, r26
    1d56:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	b4 01       	movw	r22, r8
    1d5e:	a3 01       	movw	r20, r6
    1d60:	92 01       	movw	r18, r4
    1d62:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1d66:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1d6a:	c9 01       	movw	r24, r18
    1d6c:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    1d6e:	80 93 ce 05 	sts	0x05CE, r24
    1d72:	90 93 cf 05 	sts	0x05CF, r25
    1d76:	a0 93 d0 05 	sts	0x05D0, r26
    1d7a:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    1d7e:	60 91 b7 05 	lds	r22, 0x05B7
    1d82:	70 91 b8 05 	lds	r23, 0x05B8
    1d86:	80 91 b9 05 	lds	r24, 0x05B9
    1d8a:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    1d8e:	a3 01       	movw	r20, r6
    1d90:	92 01       	movw	r18, r4
    1d92:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    1d96:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    1d9a:	c9 01       	movw	r24, r18
    1d9c:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    1d9e:	80 93 bb 05 	sts	0x05BB, r24
    1da2:	90 93 bc 05 	sts	0x05BC, r25
    1da6:	a0 93 bd 05 	sts	0x05BD, r26
    1daa:	b0 93 be 05 	sts	0x05BE, r27
	
	sbi (TIMSK2,TOIE2);
	sei();

	noteUpdate();
}
    1dae:	2f 96       	adiw	r28, 0x0f	; 15
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	5f 90       	pop	r5
    1dd8:	4f 90       	pop	r4
    1dda:	3f 90       	pop	r3
    1ddc:	2f 90       	pop	r2
    1dde:	08 95       	ret

00001de0 <main>:
void setup(void);

void noteUpdate(void);

int main(void)
{
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	c3 55       	subi	r28, 0x53	; 83
    1dea:	d1 09       	sbc	r29, r1
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
	setup();
    1df6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_Z5setupv>
	
	osc1MenuUpdate();
    1dfa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z14osc1MenuUpdatev>
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	90 93 84 05 	sts	0x0584, r25
    1e06:	80 93 83 05 	sts	0x0583, r24
		menuKnobPos[i][1] = 512;
    1e0a:	90 93 86 05 	sts	0x0586, r25
    1e0e:	80 93 85 05 	sts	0x0585, r24
		menuKnobPos[i][2] = 512;
    1e12:	90 93 88 05 	sts	0x0588, r25
    1e16:	80 93 87 05 	sts	0x0587, r24
		menuKnobPos[i][3] = 512;
    1e1a:	90 93 8a 05 	sts	0x058A, r25
    1e1e:	80 93 89 05 	sts	0x0589, r24
		
		menuChange[i][0] = 0;
    1e22:	10 92 6b 05 	sts	0x056B, r1
		menuChange[i][1] = 0;
    1e26:	10 92 6c 05 	sts	0x056C, r1
		menuChange[i][2] = 0;
    1e2a:	10 92 6d 05 	sts	0x056D, r1
		menuChange[i][3] = 0;
    1e2e:	10 92 6e 05 	sts	0x056E, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1e32:	90 93 8c 05 	sts	0x058C, r25
    1e36:	80 93 8b 05 	sts	0x058B, r24
		menuKnobPos[i][1] = 512;
    1e3a:	90 93 8e 05 	sts	0x058E, r25
    1e3e:	80 93 8d 05 	sts	0x058D, r24
		menuKnobPos[i][2] = 512;
    1e42:	90 93 90 05 	sts	0x0590, r25
    1e46:	80 93 8f 05 	sts	0x058F, r24
		menuKnobPos[i][3] = 512;
    1e4a:	90 93 92 05 	sts	0x0592, r25
    1e4e:	80 93 91 05 	sts	0x0591, r24
		
		menuChange[i][0] = 0;
    1e52:	10 92 6f 05 	sts	0x056F, r1
		menuChange[i][1] = 0;
    1e56:	10 92 70 05 	sts	0x0570, r1
		menuChange[i][2] = 0;
    1e5a:	10 92 71 05 	sts	0x0571, r1
		menuChange[i][3] = 0;
    1e5e:	10 92 72 05 	sts	0x0572, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1e62:	90 93 94 05 	sts	0x0594, r25
    1e66:	80 93 93 05 	sts	0x0593, r24
		menuKnobPos[i][1] = 512;
    1e6a:	90 93 96 05 	sts	0x0596, r25
    1e6e:	80 93 95 05 	sts	0x0595, r24
		menuKnobPos[i][2] = 512;
    1e72:	90 93 98 05 	sts	0x0598, r25
    1e76:	80 93 97 05 	sts	0x0597, r24
		menuKnobPos[i][3] = 512;
    1e7a:	90 93 9a 05 	sts	0x059A, r25
    1e7e:	80 93 99 05 	sts	0x0599, r24
		
		menuChange[i][0] = 0;
    1e82:	10 92 73 05 	sts	0x0573, r1
		menuChange[i][1] = 0;
    1e86:	10 92 74 05 	sts	0x0574, r1
		menuChange[i][2] = 0;
    1e8a:	10 92 75 05 	sts	0x0575, r1
		menuChange[i][3] = 0;
    1e8e:	10 92 76 05 	sts	0x0576, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1e92:	90 93 9c 05 	sts	0x059C, r25
    1e96:	80 93 9b 05 	sts	0x059B, r24
		menuKnobPos[i][1] = 512;
    1e9a:	90 93 9e 05 	sts	0x059E, r25
    1e9e:	80 93 9d 05 	sts	0x059D, r24
		menuKnobPos[i][2] = 512;
    1ea2:	90 93 a0 05 	sts	0x05A0, r25
    1ea6:	80 93 9f 05 	sts	0x059F, r24
		menuKnobPos[i][3] = 512;
    1eaa:	90 93 a2 05 	sts	0x05A2, r25
    1eae:	80 93 a1 05 	sts	0x05A1, r24
		
		menuChange[i][0] = 0;
    1eb2:	10 92 77 05 	sts	0x0577, r1
		menuChange[i][1] = 0;
    1eb6:	10 92 78 05 	sts	0x0578, r1
		menuChange[i][2] = 0;
    1eba:	10 92 79 05 	sts	0x0579, r1
		menuChange[i][3] = 0;
    1ebe:	10 92 7a 05 	sts	0x057A, r1
	
	osc1MenuUpdate();
	
	for(int i = 0; i < MENU_ARP; i++)
	{
		menuKnobPos[i][0] = 512;
    1ec2:	90 93 a4 05 	sts	0x05A4, r25
    1ec6:	80 93 a3 05 	sts	0x05A3, r24
		menuKnobPos[i][1] = 512;
    1eca:	90 93 a6 05 	sts	0x05A6, r25
    1ece:	80 93 a5 05 	sts	0x05A5, r24
		menuKnobPos[i][2] = 512;
    1ed2:	90 93 a8 05 	sts	0x05A8, r25
    1ed6:	80 93 a7 05 	sts	0x05A7, r24
		menuKnobPos[i][3] = 512;
    1eda:	90 93 aa 05 	sts	0x05AA, r25
    1ede:	80 93 a9 05 	sts	0x05A9, r24
		
		menuChange[i][0] = 0;
    1ee2:	10 92 7b 05 	sts	0x057B, r1
		menuChange[i][1] = 0;
    1ee6:	10 92 7c 05 	sts	0x057C, r1
		menuChange[i][2] = 0;
    1eea:	10 92 7d 05 	sts	0x057D, r1
		menuChange[i][3] = 0;
    1eee:	10 92 7e 05 	sts	0x057E, r1
    1ef2:	ae 01       	movw	r20, r28
    1ef4:	4b 5e       	subi	r20, 0xEB	; 235
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	5f af       	std	Y+63, r21	; 0x3f
    1efa:	4e af       	std	Y+62, r20	; 0x3e
    1efc:	ce 01       	movw	r24, r28
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	5c 01       	movw	r10, r24
    1f02:	de 01       	movw	r26, r28
    1f04:	18 96       	adiw	r26, 0x08	; 8
    1f06:	bb af       	std	Y+59, r27	; 0x3b
    1f08:	aa af       	std	Y+58, r26	; 0x3a
    1f0a:	4f 50       	subi	r20, 0x0F	; 15
    1f0c:	51 09       	sbc	r21, r1
    1f0e:	5f ab       	std	Y+55, r21	; 0x37
    1f10:	4e ab       	std	Y+54, r20	; 0x36
    1f12:	06 96       	adiw	r24, 0x06	; 6
    1f14:	99 af       	std	Y+57, r25	; 0x39
    1f16:	88 af       	std	Y+56, r24	; 0x38
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	bd af       	std	Y+61, r27	; 0x3d
    1f1c:	ac af       	std	Y+60, r26	; 0x3c

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1f1e:	be ad       	ldd	r27, Y+62	; 0x3e
    1f20:	61 96       	adiw	r28, 0x11	; 17
    1f22:	bf af       	std	Y+63, r27	; 0x3f
    1f24:	61 97       	sbiw	r28, 0x11	; 17
    1f26:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f28:	62 96       	adiw	r28, 0x12	; 18
    1f2a:	2f af       	std	Y+63, r18	; 0x3f
    1f2c:	62 97       	sbiw	r28, 0x12	; 18
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1f2e:	45 01       	movw	r8, r10
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    1f30:	b5 e0       	ldi	r27, 0x05	; 5
    1f32:	2b 2e       	mov	r2, r27
inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    1f34:	1a 2d       	mov	r17, r10
    1f36:	3b 2c       	mov	r3, r11
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
    1f38:	01 e0       	ldi	r16, 0x01	; 1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    1f3a:	2d e0       	ldi	r18, 0x0D	; 13

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1f3c:	f7 e0       	ldi	r31, 0x07	; 7
    1f3e:	ef 2e       	mov	r14, r31
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
	strcat(buf, "       ");
    1f40:	a8 e0       	ldi	r26, 0x08	; 8
    1f42:	fa 2e       	mov	r15, r26
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    1f44:	3c e0       	ldi	r19, 0x0C	; 12
		menuChange[i][3] = 0;
	}
	
	while(1)
	{
		adcUpdate++;
    1f46:	80 91 f2 04 	lds	r24, 0x04F2
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	80 93 f2 04 	sts	0x04F2, r24
		//Refresh analog conversion
		if(adcUpdate > 10)
    1f50:	8b 30       	cpi	r24, 0x0B	; 11
    1f52:	38 f0       	brcs	.+14     	; 0x1f62 <main+0x182>
		{
			sbi(ADCSRA, ADSC);
    1f54:	80 91 7a 00 	lds	r24, 0x007A
    1f58:	80 64       	ori	r24, 0x40	; 64
    1f5a:	80 93 7a 00 	sts	0x007A, r24
			adcUpdate = 0;
    1f5e:	10 92 f2 04 	sts	0x04F2, r1
		}
		
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
    1f62:	99 b1       	in	r25, 0x09	; 9
    1f64:	89 2f       	mov	r24, r25
    1f66:	80 74       	andi	r24, 0x40	; 64
    1f68:	96 fd       	sbrc	r25, 6
    1f6a:	ff c5       	rjmp	.+3070   	; 0x2b6a <main+0xd8a>
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
    1f6c:	90 91 ff 04 	lds	r25, 0x04FF
    1f70:	91 11       	cpse	r25, r1
    1f72:	0b c6       	rjmp	.+3094   	; 0x2b8a <main+0xdaa>
    1f74:	90 91 f9 04 	lds	r25, 0x04F9
    1f78:	99 23       	and	r25, r25
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <main+0x19e>
    1f7c:	06 c6       	rjmp	.+3084   	; 0x2b8a <main+0xdaa>
    1f7e:	90 91 b3 05 	lds	r25, 0x05B3
    1f82:	91 11       	cpse	r25, r1
    1f84:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <main+0x1eea>
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC1] = true;
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    1f88:	4f 99       	sbic	0x09, 7	; 9
    1f8a:	03 c6       	rjmp	.+3078   	; 0x2b92 <main+0xdb2>
		{
			if(!btnPressed[MENU_OSC2] && btnCanPress[MENU_OSC2] && menuSelect != MENU_OSC2)
    1f8c:	90 91 00 05 	lds	r25, 0x0500
    1f90:	91 11       	cpse	r25, r1
    1f92:	a8 c1       	rjmp	.+848    	; 0x22e4 <main+0x504>
    1f94:	90 91 fa 04 	lds	r25, 0x04FA
    1f98:	99 23       	and	r25, r25
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <main+0x1be>
    1f9c:	a3 c1       	rjmp	.+838    	; 0x22e4 <main+0x504>
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <main+0x1c4>
    1fa2:	a0 c1       	rjmp	.+832    	; 0x22e4 <main+0x504>
			{
				btnLastPressed[MENU_OSC2] = 0;			
    1fa4:	10 92 f4 04 	sts	0x04F4, r1
				
				menuSelect = MENU_OSC2;				
    1fa8:	00 93 b3 05 	sts	0x05B3, r16
				
				menuChange[menuSelect][0] = 0;
    1fac:	10 92 6f 05 	sts	0x056F, r1
				menuChange[menuSelect][1] = 0;
    1fb0:	10 92 70 05 	sts	0x0570, r1
				menuChange[menuSelect][2] = 0;
    1fb4:	10 92 71 05 	sts	0x0571, r1
				menuChange[menuSelect][3] = 0;	
    1fb8:	10 92 72 05 	sts	0x0572, r1

inline void osc2MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2MenuTitle);
    1fbc:	e5 e4       	ldi	r30, 0x45	; 69
    1fbe:	f1 e0       	ldi	r31, 0x01	; 1
    1fc0:	61 96       	adiw	r28, 0x11	; 17
    1fc2:	af ad       	ldd	r26, Y+63	; 0x3f
    1fc4:	61 97       	sbiw	r28, 0x11	; 17
    1fc6:	62 96       	adiw	r28, 0x12	; 18
    1fc8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fca:	62 97       	sbiw	r28, 0x12	; 18
    1fcc:	82 2f       	mov	r24, r18
    1fce:	01 90       	ld	r0, Z+
    1fd0:	0d 92       	st	X+, r0
    1fd2:	8a 95       	dec	r24
    1fd4:	e1 f7       	brne	.-8      	; 0x1fce <main+0x1ee>
	writeLine(0, buf);
    1fd6:	be 01       	movw	r22, r28
    1fd8:	6b 5e       	subi	r22, 0xEB	; 235
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	63 96       	adiw	r28, 0x13	; 19
    1fe0:	2f af       	std	Y+63, r18	; 0x3f
    1fe2:	63 97       	sbiw	r28, 0x13	; 19
    1fe4:	64 96       	adiw	r28, 0x14	; 20
    1fe6:	3f af       	std	Y+63, r19	; 0x3f
    1fe8:	64 97       	sbiw	r28, 0x14	; 20
    1fea:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    1fee:	e7 e1       	ldi	r30, 0x17	; 23
    1ff0:	f1 e0       	ldi	r31, 0x01	; 1
    1ff2:	d5 01       	movw	r26, r10
    1ff4:	8e 2d       	mov	r24, r14
    1ff6:	01 90       	ld	r0, Z+
    1ff8:	0d 92       	st	X+, r0
    1ffa:	8a 95       	dec	r24
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <main+0x216>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    1ffe:	e0 91 02 01 	lds	r30, 0x0102
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	e0 58       	subi	r30, 0x80	; 128
    200a:	f9 4f       	sbci	r31, 0xF9	; 249
    200c:	65 91       	lpm	r22, Z+
    200e:	74 91       	lpm	r23, Z
    2010:	a1 2e       	mov	r10, r17
    2012:	b3 2c       	mov	r11, r3
    2014:	81 2f       	mov	r24, r17
    2016:	93 2d       	mov	r25, r3
    2018:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "       ");
    201c:	d4 01       	movw	r26, r8
    201e:	0d 90       	ld	r0, X+
    2020:	00 20       	and	r0, r0
    2022:	e9 f7       	brne	.-6      	; 0x201e <main+0x23e>
    2024:	11 97       	sbiw	r26, 0x01	; 1
    2026:	ed e3       	ldi	r30, 0x3D	; 61
    2028:	f1 e0       	ldi	r31, 0x01	; 1
    202a:	8f 2d       	mov	r24, r15
    202c:	01 90       	ld	r0, Z+
    202e:	0d 92       	st	X+, r0
    2030:	8a 95       	dec	r24
    2032:	e1 f7       	brne	.-8      	; 0x202c <main+0x24c>
	writeLine(2, buf);	
    2034:	61 2f       	mov	r22, r17
    2036:	73 2d       	mov	r23, r3
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    203e:	e6 e2       	ldi	r30, 0x26	; 38
    2040:	f1 e0       	ldi	r31, 0x01	; 1
    2042:	a1 2f       	mov	r26, r17
    2044:	b3 2d       	mov	r27, r3
    2046:	8f 2d       	mov	r24, r15
    2048:	01 90       	ld	r0, Z+
    204a:	0d 92       	st	X+, r0
    204c:	8a 95       	dec	r24
    204e:	e1 f7       	brne	.-8      	; 0x2048 <main+0x268>
	sprintf(buf + 7, "%d", osc2SemisShift);
    2050:	40 91 cc 05 	lds	r20, 0x05CC
    2054:	84 2f       	mov	r24, r20
    2056:	99 27       	eor	r25, r25
    2058:	87 fd       	sbrc	r24, 7
    205a:	90 95       	com	r25
    205c:	9f 93       	push	r25
    205e:	4f 93       	push	r20
    2060:	a7 e0       	ldi	r26, 0x07	; 7
    2062:	b1 e0       	ldi	r27, 0x01	; 1
    2064:	bf 93       	push	r27
    2066:	af 93       	push	r26
    2068:	5b ad       	ldd	r21, Y+59	; 0x3b
    206a:	5f 93       	push	r21
    206c:	8a ad       	ldd	r24, Y+58	; 0x3a
    206e:	8f 93       	push	r24
    2070:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    2074:	d4 01       	movw	r26, r8
    2076:	0d 90       	ld	r0, X+
    2078:	00 20       	and	r0, r0
    207a:	e9 f7       	brne	.-6      	; 0x2076 <main+0x296>
    207c:	11 97       	sbiw	r26, 0x01	; 1
    207e:	ed e3       	ldi	r30, 0x3D	; 61
    2080:	f1 e0       	ldi	r31, 0x01	; 1
    2082:	8f 2d       	mov	r24, r15
    2084:	01 90       	ld	r0, Z+
    2086:	0d 92       	st	X+, r0
    2088:	8a 95       	dec	r24
    208a:	e1 f7       	brne	.-8      	; 0x2084 <main+0x2a4>
	writeLine(3, buf);
    208c:	61 2f       	mov	r22, r17
    208e:	73 2d       	mov	r23, r3
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2096:	ee e1       	ldi	r30, 0x1E	; 30
    2098:	f1 e0       	ldi	r31, 0x01	; 1
    209a:	a1 2f       	mov	r26, r17
    209c:	b3 2d       	mov	r27, r3
    209e:	8f 2d       	mov	r24, r15
    20a0:	01 90       	ld	r0, Z+
    20a2:	0d 92       	st	X+, r0
    20a4:	8a 95       	dec	r24
    20a6:	e1 f7       	brne	.-8      	; 0x20a0 <main+0x2c0>
	sprintf(buf + 7, "%d", osc2CentsShift);
    20a8:	40 91 cd 05 	lds	r20, 0x05CD
    20ac:	84 2f       	mov	r24, r20
    20ae:	99 27       	eor	r25, r25
    20b0:	87 fd       	sbrc	r24, 7
    20b2:	90 95       	com	r25
    20b4:	9f 93       	push	r25
    20b6:	4f 93       	push	r20
    20b8:	a7 e0       	ldi	r26, 0x07	; 7
    20ba:	b1 e0       	ldi	r27, 0x01	; 1
    20bc:	bf 93       	push	r27
    20be:	af 93       	push	r26
    20c0:	5b ad       	ldd	r21, Y+59	; 0x3b
    20c2:	5f 93       	push	r21
    20c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    20c6:	8f 93       	push	r24
    20c8:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    20cc:	d4 01       	movw	r26, r8
    20ce:	0d 90       	ld	r0, X+
    20d0:	00 20       	and	r0, r0
    20d2:	e9 f7       	brne	.-6      	; 0x20ce <main+0x2ee>
    20d4:	11 97       	sbiw	r26, 0x01	; 1
    20d6:	ed e3       	ldi	r30, 0x3D	; 61
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	8f 2d       	mov	r24, r15
    20dc:	01 90       	ld	r0, Z+
    20de:	0d 92       	st	X+, r0
    20e0:	8a 95       	dec	r24
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <main+0x2fc>
	writeLine(4, buf);
    20e4:	61 2f       	mov	r22, r17
    20e6:	73 2d       	mov	r23, r3
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    20ee:	86 e0       	ldi	r24, 0x06	; 6
    20f0:	e2 e5       	ldi	r30, 0x52	; 82
    20f2:	f1 e0       	ldi	r31, 0x01	; 1
    20f4:	a1 2f       	mov	r26, r17
    20f6:	b3 2d       	mov	r27, r3
    20f8:	01 90       	ld	r0, Z+
    20fa:	0d 92       	st	X+, r0
    20fc:	8a 95       	dec	r24
    20fe:	e1 f7       	brne	.-8      	; 0x20f8 <main+0x318>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    2100:	40 91 cb 05 	lds	r20, 0x05CB
    2104:	84 2f       	mov	r24, r20
    2106:	99 27       	eor	r25, r25
    2108:	87 fd       	sbrc	r24, 7
    210a:	90 95       	com	r25
    210c:	9f 93       	push	r25
    210e:	4f 93       	push	r20
    2110:	a7 e0       	ldi	r26, 0x07	; 7
    2112:	b1 e0       	ldi	r27, 0x01	; 1
    2114:	bf 93       	push	r27
    2116:	af 93       	push	r26
    2118:	5f a9       	ldd	r21, Y+55	; 0x37
    211a:	5f 93       	push	r21
    211c:	8e a9       	ldd	r24, Y+54	; 0x36
    211e:	8f 93       	push	r24
    2120:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "        ");
    2124:	d4 01       	movw	r26, r8
    2126:	0d 90       	ld	r0, X+
    2128:	00 20       	and	r0, r0
    212a:	e9 f7       	brne	.-6      	; 0x2126 <main+0x346>
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	89 e0       	ldi	r24, 0x09	; 9
    2130:	ec e3       	ldi	r30, 0x3C	; 60
    2132:	f1 e0       	ldi	r31, 0x01	; 1
    2134:	01 90       	ld	r0, Z+
    2136:	0d 92       	st	X+, r0
    2138:	8a 95       	dec	r24
    213a:	e1 f7       	brne	.-8      	; 0x2134 <main+0x354>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    213c:	e1 2f       	mov	r30, r17
    213e:	f3 2d       	mov	r31, r3
    2140:	de 01       	movw	r26, r28
    2142:	99 96       	adiw	r26, 0x29	; 41
    2144:	64 96       	adiw	r28, 0x14	; 20
    2146:	3f ad       	ldd	r19, Y+63	; 0x3f
    2148:	64 97       	sbiw	r28, 0x14	; 20
    214a:	83 2f       	mov	r24, r19
    214c:	01 90       	ld	r0, Z+
    214e:	0d 92       	st	X+, r0
    2150:	8a 95       	dec	r24
    2152:	e1 f7       	brne	.-8      	; 0x214c <main+0x36c>
	buf[12] = '\0';
    2154:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2156:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2158:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    215a:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    215c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    215e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2160:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2162:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2164:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2166:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2168:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    216a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    216c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    216e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2170:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2172:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2174:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2176:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2178:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    217a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    217c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    217e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2180:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2182:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2184:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2186:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2188:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    218a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    218c:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    218e:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2190:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2192:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2194:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2196:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2198:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    219a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    219c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    219e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21a0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21a6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21a8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21aa:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ac:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ae:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b0:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    21b2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21b6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21b8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ba:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21bc:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    21be:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21c2:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    21c4:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    21c6:	89 a5       	ldd	r24, Y+41	; 0x29
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	63 96       	adiw	r28, 0x13	; 19
    21d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    21d6:	63 97       	sbiw	r28, 0x13	; 19
    21d8:	88 23       	and	r24, r24
    21da:	09 f4       	brne	.+2      	; 0x21de <main+0x3fe>
    21dc:	81 c0       	rjmp	.+258    	; 0x22e0 <main+0x500>
    21de:	de 01       	movw	r26, r28
    21e0:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    21e2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    21e4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    21fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    21fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    21fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2200:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2202:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2204:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2206:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2208:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    220a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    220c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    220e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2210:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2212:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2214:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2216:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2218:	44 9a       	sbi	0x08, 4	; 8
    221a:	99 27       	eor	r25, r25
    221c:	87 fd       	sbrc	r24, 7
    221e:	90 95       	com	r25
    2220:	80 97       	sbiw	r24, 0x20	; 32
    2222:	fc 01       	movw	r30, r24
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	e8 0f       	add	r30, r24
    222e:	f9 1f       	adc	r31, r25
    2230:	ee 5e       	subi	r30, 0xEE	; 238
    2232:	fc 4f       	sbci	r31, 0xFC	; 252
    2234:	55 e0       	ldi	r21, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    2236:	41 91       	ld	r20, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2238:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    223a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    223c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    223e:	84 2f       	mov	r24, r20
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	88 0f       	add	r24, r24
    2244:	89 2f       	mov	r24, r25
    2246:	88 1f       	adc	r24, r24
    2248:	99 0b       	sbc	r25, r25
    224a:	89 2b       	or	r24, r25
    224c:	09 f0       	breq	.+2      	; 0x2250 <main+0x470>
    224e:	8b c4       	rjmp	.+2326   	; 0x2b66 <main+0xd86>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2250:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2252:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2254:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2256:	46 fd       	sbrc	r20, 6
    2258:	70 c4       	rjmp	.+2272   	; 0x2b3a <main+0xd5a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    225a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    225c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    225e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2260:	45 fd       	sbrc	r20, 5
    2262:	70 c4       	rjmp	.+2272   	; 0x2b44 <main+0xd64>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2264:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2266:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2268:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    226a:	44 fd       	sbrc	r20, 4
    226c:	70 c4       	rjmp	.+2272   	; 0x2b4e <main+0xd6e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    226e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2270:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2272:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2274:	43 fd       	sbrc	r20, 3
    2276:	70 c4       	rjmp	.+2272   	; 0x2b58 <main+0xd78>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2278:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    227a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    227c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    227e:	42 fd       	sbrc	r20, 2
    2280:	70 c4       	rjmp	.+2272   	; 0x2b62 <main+0xd82>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2282:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2284:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2286:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2288:	41 fd       	sbrc	r20, 1
    228a:	55 c4       	rjmp	.+2218   	; 0x2b36 <main+0xd56>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    228c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    228e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2290:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2292:	40 fd       	sbrc	r20, 0
    2294:	4e c4       	rjmp	.+2204   	; 0x2b32 <main+0xd52>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2296:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2298:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    229a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    229c:	44 9a       	sbi	0x08, 4	; 8
    229e:	51 50       	subi	r21, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    22a0:	51 f6       	brne	.-108    	; 0x2236 <main+0x456>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    22a2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    22a4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22a6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22a8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22aa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ac:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22ae:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22b4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22b8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22ba:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22bc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22be:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22c0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22c2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22c4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22c6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22c8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ca:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22cc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22ce:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    22d2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    22d6:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    22d8:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    22da:	8d 91       	ld	r24, X+
    22dc:	81 11       	cpse	r24, r1
    22de:	81 cf       	rjmp	.-254    	; 0x21e2 <main+0x402>
    22e0:	80 91 b3 05 	lds	r24, 0x05B3
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
			btnCanPress[MENU_OSC2] = true;
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    22e4:	18 99       	sbic	0x03, 0	; 3
    22e6:	69 c4       	rjmp	.+2258   	; 0x2bba <main+0xdda>
		{
			if(!btnPressed[MENU_LFO] && btnCanPress[MENU_LFO] && menuSelect != MENU_LFO)
    22e8:	90 91 01 05 	lds	r25, 0x0501
    22ec:	91 11       	cpse	r25, r1
    22ee:	dc c0       	rjmp	.+440    	; 0x24a8 <main+0x6c8>
    22f0:	90 91 fb 04 	lds	r25, 0x04FB
    22f4:	99 23       	and	r25, r25
    22f6:	09 f4       	brne	.+2      	; 0x22fa <main+0x51a>
    22f8:	d7 c0       	rjmp	.+430    	; 0x24a8 <main+0x6c8>
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	09 f4       	brne	.+2      	; 0x2300 <main+0x520>
    22fe:	d4 c0       	rjmp	.+424    	; 0x24a8 <main+0x6c8>
			{
				btnLastPressed[MENU_LFO] = 0;
    2300:	10 92 f5 04 	sts	0x04F5, r1
				
				menuSelect = MENU_LFO;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	80 93 b3 05 	sts	0x05B3, r24
				
				menuChange[menuSelect][0] = 0;
    230a:	10 92 73 05 	sts	0x0573, r1
				menuChange[menuSelect][1] = 0;
    230e:	10 92 74 05 	sts	0x0574, r1
				menuChange[menuSelect][2] = 0;
    2312:	10 92 75 05 	sts	0x0575, r1
				menuChange[menuSelect][3] = 0;
    2316:	10 92 76 05 	sts	0x0576, r1

inline void lfoMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", lfoMenuTitle);
    231a:	e8 e5       	ldi	r30, 0x58	; 88
    231c:	f1 e0       	ldi	r31, 0x01	; 1
    231e:	61 96       	adiw	r28, 0x11	; 17
    2320:	af ad       	ldd	r26, Y+63	; 0x3f
    2322:	61 97       	sbiw	r28, 0x11	; 17
    2324:	62 96       	adiw	r28, 0x12	; 18
    2326:	bf ad       	ldd	r27, Y+63	; 0x3f
    2328:	62 97       	sbiw	r28, 0x12	; 18
    232a:	82 2f       	mov	r24, r18
    232c:	01 90       	ld	r0, Z+
    232e:	0d 92       	st	X+, r0
    2330:	8a 95       	dec	r24
    2332:	e1 f7       	brne	.-8      	; 0x232c <main+0x54c>
	writeLine(0, buf);
    2334:	be 01       	movw	r22, r28
    2336:	6b 5e       	subi	r22, 0xEB	; 235
    2338:	7f 4f       	sbci	r23, 0xFF	; 255
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	63 96       	adiw	r28, 0x13	; 19
    233e:	2f af       	std	Y+63, r18	; 0x3f
    2340:	63 97       	sbiw	r28, 0x13	; 19
    2342:	64 96       	adiw	r28, 0x14	; 20
    2344:	3f af       	std	Y+63, r19	; 0x3f
    2346:	64 97       	sbiw	r28, 0x14	; 20
    2348:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    234c:	e7 e1       	ldi	r30, 0x17	; 23
    234e:	f1 e0       	ldi	r31, 0x01	; 1
    2350:	d5 01       	movw	r26, r10
    2352:	8e 2d       	mov	r24, r14
    2354:	01 90       	ld	r0, Z+
    2356:	0d 92       	st	X+, r0
    2358:	8a 95       	dec	r24
    235a:	e1 f7       	brne	.-8      	; 0x2354 <main+0x574>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    235c:	80 91 04 01 	lds	r24, 0x0104
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	80 58       	subi	r24, 0x80	; 128
    2368:	99 4f       	sbci	r25, 0xF9	; 249
    236a:	fc 01       	movw	r30, r24
    236c:	65 91       	lpm	r22, Z+
    236e:	74 91       	lpm	r23, Z
    2370:	81 2f       	mov	r24, r17
    2372:	93 2d       	mov	r25, r3
    2374:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "    ");
    2378:	d4 01       	movw	r26, r8
    237a:	0d 90       	ld	r0, X+
    237c:	00 20       	and	r0, r0
    237e:	e9 f7       	brne	.-6      	; 0x237a <main+0x59a>
    2380:	11 97       	sbiw	r26, 0x01	; 1
    2382:	e0 e4       	ldi	r30, 0x40	; 64
    2384:	f1 e0       	ldi	r31, 0x01	; 1
    2386:	82 2d       	mov	r24, r2
    2388:	01 90       	ld	r0, Z+
    238a:	0d 92       	st	X+, r0
    238c:	8a 95       	dec	r24
    238e:	e1 f7       	brne	.-8      	; 0x2388 <main+0x5a8>
	writeLine(2, buf);
    2390:	61 2f       	mov	r22, r17
    2392:	73 2d       	mov	r23, r3
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    239a:	e5 e6       	ldi	r30, 0x65	; 101
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	a1 2f       	mov	r26, r17
    23a0:	b3 2d       	mov	r27, r3
    23a2:	8e 2d       	mov	r24, r14
    23a4:	01 90       	ld	r0, Z+
    23a6:	0d 92       	st	X+, r0
    23a8:	8a 95       	dec	r24
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <main+0x5c4>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    23ac:	80 91 b5 05 	lds	r24, 0x05B5
    23b0:	1f 92       	push	r1
    23b2:	8f 93       	push	r24
    23b4:	a7 e0       	ldi	r26, 0x07	; 7
    23b6:	b1 e0       	ldi	r27, 0x01	; 1
    23b8:	bf 93       	push	r27
    23ba:	af 93       	push	r26
    23bc:	59 ad       	ldd	r21, Y+57	; 0x39
    23be:	5f 93       	push	r21
    23c0:	88 ad       	ldd	r24, Y+56	; 0x38
    23c2:	8f 93       	push	r24
    23c4:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    23c8:	d4 01       	movw	r26, r8
    23ca:	0d 90       	ld	r0, X+
    23cc:	00 20       	and	r0, r0
    23ce:	e9 f7       	brne	.-6      	; 0x23ca <main+0x5ea>
    23d0:	11 97       	sbiw	r26, 0x01	; 1
    23d2:	e0 e4       	ldi	r30, 0x40	; 64
    23d4:	f1 e0       	ldi	r31, 0x01	; 1
    23d6:	82 2d       	mov	r24, r2
    23d8:	01 90       	ld	r0, Z+
    23da:	0d 92       	st	X+, r0
    23dc:	8a 95       	dec	r24
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <main+0x5f8>
	writeLine(3, buf);
    23e0:	61 2f       	mov	r22, r17
    23e2:	73 2d       	mov	r23, r3
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    23ea:	ec e6       	ldi	r30, 0x6C	; 108
    23ec:	f1 e0       	ldi	r31, 0x01	; 1
    23ee:	a1 2f       	mov	r26, r17
    23f0:	b3 2d       	mov	r27, r3
    23f2:	8e 2d       	mov	r24, r14
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <main+0x614>
	sprintf(buf + 6, "%d", lfoDepth);
    23fc:	80 91 b4 05 	lds	r24, 0x05B4
    2400:	1f 92       	push	r1
    2402:	8f 93       	push	r24
    2404:	a7 e0       	ldi	r26, 0x07	; 7
    2406:	b1 e0       	ldi	r27, 0x01	; 1
    2408:	bf 93       	push	r27
    240a:	af 93       	push	r26
    240c:	59 ad       	ldd	r21, Y+57	; 0x39
    240e:	5f 93       	push	r21
    2410:	88 ad       	ldd	r24, Y+56	; 0x38
    2412:	8f 93       	push	r24
    2414:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    2418:	d4 01       	movw	r26, r8
    241a:	0d 90       	ld	r0, X+
    241c:	00 20       	and	r0, r0
    241e:	e9 f7       	brne	.-6      	; 0x241a <main+0x63a>
    2420:	11 97       	sbiw	r26, 0x01	; 1
    2422:	e0 e4       	ldi	r30, 0x40	; 64
    2424:	f1 e0       	ldi	r31, 0x01	; 1
    2426:	82 2d       	mov	r24, r2
    2428:	01 90       	ld	r0, Z+
    242a:	0d 92       	st	X+, r0
    242c:	8a 95       	dec	r24
    242e:	e1 f7       	brne	.-8      	; 0x2428 <main+0x648>
	writeLine(4, buf);
    2430:	61 2f       	mov	r22, r17
    2432:	73 2d       	mov	r23, r3
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    243a:	e5 e3       	ldi	r30, 0x35	; 53
    243c:	f1 e0       	ldi	r31, 0x01	; 1
    243e:	a1 2f       	mov	r26, r17
    2440:	b3 2d       	mov	r27, r3
    2442:	8e 2d       	mov	r24, r14
    2444:	01 90       	ld	r0, Z+
    2446:	0d 92       	st	X+, r0
    2448:	8a 95       	dec	r24
    244a:	e1 f7       	brne	.-8      	; 0x2444 <main+0x664>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    244c:	80 91 b6 05 	lds	r24, 0x05B6
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 59       	subi	r24, 0x98	; 152
    2458:	99 4f       	sbci	r25, 0xF9	; 249
    245a:	fc 01       	movw	r30, r24
    245c:	65 91       	lpm	r22, Z+
    245e:	74 91       	lpm	r23, Z
    2460:	a1 2e       	mov	r10, r17
    2462:	b3 2c       	mov	r11, r3
    2464:	81 2f       	mov	r24, r17
    2466:	93 2d       	mov	r25, r3
    2468:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "    ");
    246c:	d4 01       	movw	r26, r8
    246e:	0d 90       	ld	r0, X+
    2470:	00 20       	and	r0, r0
    2472:	e9 f7       	brne	.-6      	; 0x246e <main+0x68e>
    2474:	11 97       	sbiw	r26, 0x01	; 1
    2476:	e0 e4       	ldi	r30, 0x40	; 64
    2478:	f1 e0       	ldi	r31, 0x01	; 1
    247a:	82 2d       	mov	r24, r2
    247c:	01 90       	ld	r0, Z+
    247e:	0d 92       	st	X+, r0
    2480:	8a 95       	dec	r24
    2482:	e1 f7       	brne	.-8      	; 0x247c <main+0x69c>
	writeLine(5, buf);
    2484:	61 2f       	mov	r22, r17
    2486:	73 2d       	mov	r23, r3
    2488:	85 e0       	ldi	r24, 0x05	; 5
    248a:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    248e:	80 91 b3 05 	lds	r24, 0x05B3
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	63 96       	adiw	r28, 0x13	; 19
    249e:	2f ad       	ldd	r18, Y+63	; 0x3f
    24a0:	63 97       	sbiw	r28, 0x13	; 19
    24a2:	64 96       	adiw	r28, 0x14	; 20
    24a4:	3f ad       	ldd	r19, Y+63	; 0x3f
    24a6:	64 97       	sbiw	r28, 0x14	; 20
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
			btnCanPress[MENU_LFO] = true;
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    24a8:	1c 99       	sbic	0x03, 4	; 3
    24aa:	9a c3       	rjmp	.+1844   	; 0x2be0 <main+0xe00>
		{
			if(!btnPressed[MENU_MIX] && btnCanPress[MENU_MIX] && menuSelect != MENU_MIX)
    24ac:	90 91 02 05 	lds	r25, 0x0502
    24b0:	91 11       	cpse	r25, r1
    24b2:	e9 c0       	rjmp	.+466    	; 0x2686 <main+0x8a6>
    24b4:	90 91 fc 04 	lds	r25, 0x04FC
    24b8:	99 23       	and	r25, r25
    24ba:	09 f4       	brne	.+2      	; 0x24be <main+0x6de>
    24bc:	e4 c0       	rjmp	.+456    	; 0x2686 <main+0x8a6>
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <main+0x6e4>
    24c2:	ee c0       	rjmp	.+476    	; 0x26a0 <main+0x8c0>
			{
				btnLastPressed[MENU_MIX] = 0;
    24c4:	10 92 f6 04 	sts	0x04F6, r1
				
				menuSelect = MENU_MIX;
    24c8:	83 e0       	ldi	r24, 0x03	; 3
    24ca:	80 93 b3 05 	sts	0x05B3, r24
				
				menuChange[menuSelect][0] = 0;
    24ce:	10 92 77 05 	sts	0x0577, r1
				menuChange[menuSelect][1] = 0;
    24d2:	10 92 78 05 	sts	0x0578, r1
				menuChange[menuSelect][2] = 0;
    24d6:	10 92 79 05 	sts	0x0579, r1
				menuChange[menuSelect][3] = 0;
    24da:	10 92 7a 05 	sts	0x057A, r1

inline void mixerMenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", mixingMenuTitle);
    24de:	e3 e7       	ldi	r30, 0x73	; 115
    24e0:	f1 e0       	ldi	r31, 0x01	; 1
    24e2:	61 96       	adiw	r28, 0x11	; 17
    24e4:	af ad       	ldd	r26, Y+63	; 0x3f
    24e6:	61 97       	sbiw	r28, 0x11	; 17
    24e8:	62 96       	adiw	r28, 0x12	; 18
    24ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    24ec:	62 97       	sbiw	r28, 0x12	; 18
    24ee:	82 2f       	mov	r24, r18
    24f0:	01 90       	ld	r0, Z+
    24f2:	0d 92       	st	X+, r0
    24f4:	8a 95       	dec	r24
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <main+0x710>
	writeLine(0, buf);
    24f8:	be 01       	movw	r22, r28
    24fa:	6b 5e       	subi	r22, 0xEB	; 235
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	63 96       	adiw	r28, 0x13	; 19
    2502:	2f af       	std	Y+63, r18	; 0x3f
    2504:	63 97       	sbiw	r28, 0x13	; 19
    2506:	64 96       	adiw	r28, 0x14	; 20
    2508:	3f af       	std	Y+63, r19	; 0x3f
    250a:	64 97       	sbiw	r28, 0x14	; 20
    250c:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	e0 e8       	ldi	r30, 0x80	; 128
    2514:	f1 e0       	ldi	r31, 0x01	; 1
    2516:	d5 01       	movw	r26, r10
    2518:	01 90       	ld	r0, Z+
    251a:	0d 92       	st	X+, r0
    251c:	8a 95       	dec	r24
    251e:	e1 f7       	brne	.-8      	; 0x2518 <main+0x738>
	sprintf(buf + 9, "%d", osc1Weight);
    2520:	80 91 06 01 	lds	r24, 0x0106
    2524:	1f 92       	push	r1
    2526:	8f 93       	push	r24
    2528:	a7 e0       	ldi	r26, 0x07	; 7
    252a:	b1 e0       	ldi	r27, 0x01	; 1
    252c:	bf 93       	push	r27
    252e:	af 93       	push	r26
    2530:	5d ad       	ldd	r21, Y+61	; 0x3d
    2532:	5f 93       	push	r21
    2534:	8c ad       	ldd	r24, Y+60	; 0x3c
    2536:	8f 93       	push	r24
    2538:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    253c:	d5 01       	movw	r26, r10
    253e:	0d 90       	ld	r0, X+
    2540:	00 20       	and	r0, r0
    2542:	e9 f7       	brne	.-6      	; 0x253e <main+0x75e>
    2544:	11 97       	sbiw	r26, 0x01	; 1
    2546:	e0 e4       	ldi	r30, 0x40	; 64
    2548:	f1 e0       	ldi	r31, 0x01	; 1
    254a:	82 2d       	mov	r24, r2
    254c:	01 90       	ld	r0, Z+
    254e:	0d 92       	st	X+, r0
    2550:	8a 95       	dec	r24
    2552:	e1 f7       	brne	.-8      	; 0x254c <main+0x76c>
	writeLine(2, buf);
    2554:	b5 01       	movw	r22, r10
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    255c:	8a e0       	ldi	r24, 0x0A	; 10
    255e:	ea e8       	ldi	r30, 0x8A	; 138
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	d5 01       	movw	r26, r10
    2564:	01 90       	ld	r0, Z+
    2566:	0d 92       	st	X+, r0
    2568:	8a 95       	dec	r24
    256a:	e1 f7       	brne	.-8      	; 0x2564 <main+0x784>
	sprintf(buf + 9, "%d", osc2Weight);
    256c:	80 91 c9 05 	lds	r24, 0x05C9
    2570:	1f 92       	push	r1
    2572:	8f 93       	push	r24
    2574:	a7 e0       	ldi	r26, 0x07	; 7
    2576:	b1 e0       	ldi	r27, 0x01	; 1
    2578:	bf 93       	push	r27
    257a:	af 93       	push	r26
    257c:	5d ad       	ldd	r21, Y+61	; 0x3d
    257e:	5f 93       	push	r21
    2580:	8c ad       	ldd	r24, Y+60	; 0x3c
    2582:	8f 93       	push	r24
    2584:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    2588:	d5 01       	movw	r26, r10
    258a:	0d 90       	ld	r0, X+
    258c:	00 20       	and	r0, r0
    258e:	e9 f7       	brne	.-6      	; 0x258a <main+0x7aa>
    2590:	11 97       	sbiw	r26, 0x01	; 1
    2592:	e0 e4       	ldi	r30, 0x40	; 64
    2594:	f1 e0       	ldi	r31, 0x01	; 1
    2596:	82 2d       	mov	r24, r2
    2598:	01 90       	ld	r0, Z+
    259a:	0d 92       	st	X+, r0
    259c:	8a 95       	dec	r24
    259e:	e1 f7       	brne	.-8      	; 0x2598 <main+0x7b8>
	writeLine(3, buf);
    25a0:	b5 01       	movw	r22, r10
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    25a8:	89 e0       	ldi	r24, 0x09	; 9
    25aa:	e4 e9       	ldi	r30, 0x94	; 148
    25ac:	f1 e0       	ldi	r31, 0x01	; 1
    25ae:	d5 01       	movw	r26, r10
    25b0:	01 90       	ld	r0, Z+
    25b2:	0d 92       	st	X+, r0
    25b4:	8a 95       	dec	r24
    25b6:	e1 f7       	brne	.-8      	; 0x25b0 <main+0x7d0>
	if(osc2Sync != false)
    25b8:	80 91 c2 05 	lds	r24, 0x05C2
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	63 96       	adiw	r28, 0x13	; 19
    25c8:	2f ad       	ldd	r18, Y+63	; 0x3f
    25ca:	63 97       	sbiw	r28, 0x13	; 19
    25cc:	64 96       	adiw	r28, 0x14	; 20
    25ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    25d0:	64 97       	sbiw	r28, 0x14	; 20
    25d2:	81 11       	cpse	r24, r1
    25d4:	0c 94 37 20 	jmp	0x406e	; 0x406e <main+0x228e>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    25d8:	8f e4       	ldi	r24, 0x4F	; 79
    25da:	96 e4       	ldi	r25, 0x46	; 70
    25dc:	a6 e4       	ldi	r26, 0x46	; 70
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	89 87       	std	Y+9, r24	; 0x09
    25e2:	9a 87       	std	Y+10, r25	; 0x0a
    25e4:	ab 87       	std	Y+11, r26	; 0x0b
    25e6:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    25e8:	d5 01       	movw	r26, r10
    25ea:	0d 90       	ld	r0, X+
    25ec:	00 20       	and	r0, r0
    25ee:	e9 f7       	brne	.-6      	; 0x25ea <main+0x80a>
    25f0:	11 97       	sbiw	r26, 0x01	; 1
    25f2:	e0 e4       	ldi	r30, 0x40	; 64
    25f4:	f1 e0       	ldi	r31, 0x01	; 1
    25f6:	82 2d       	mov	r24, r2
    25f8:	01 90       	ld	r0, Z+
    25fa:	0d 92       	st	X+, r0
    25fc:	8a 95       	dec	r24
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <main+0x818>
	writeLine(4, buf);
    2600:	b5 01       	movw	r22, r10
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	63 96       	adiw	r28, 0x13	; 19
    2606:	2f af       	std	Y+63, r18	; 0x3f
    2608:	63 97       	sbiw	r28, 0x13	; 19
    260a:	64 96       	adiw	r28, 0x14	; 20
    260c:	3f af       	std	Y+63, r19	; 0x3f
    260e:	64 97       	sbiw	r28, 0x14	; 20
    2610:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    2614:	ed e9       	ldi	r30, 0x9D	; 157
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	d5 01       	movw	r26, r10
    261a:	8e 2d       	mov	r24, r14
    261c:	01 90       	ld	r0, Z+
    261e:	0d 92       	st	X+, r0
    2620:	8a 95       	dec	r24
    2622:	e1 f7       	brne	.-8      	; 0x261c <main+0x83c>
	if(ringMod != false)
    2624:	80 91 bf 05 	lds	r24, 0x05BF
    2628:	63 96       	adiw	r28, 0x13	; 19
    262a:	2f ad       	ldd	r18, Y+63	; 0x3f
    262c:	63 97       	sbiw	r28, 0x13	; 19
    262e:	64 96       	adiw	r28, 0x14	; 20
    2630:	3f ad       	ldd	r19, Y+63	; 0x3f
    2632:	64 97       	sbiw	r28, 0x14	; 20
    2634:	81 11       	cpse	r24, r1
    2636:	0c 94 3f 20 	jmp	0x407e	; 0x407e <main+0x229e>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    263a:	8f e4       	ldi	r24, 0x4F	; 79
    263c:	96 e4       	ldi	r25, 0x46	; 70
    263e:	a6 e4       	ldi	r26, 0x46	; 70
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	a9 87       	std	Y+9, r26	; 0x09
    2648:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "    ");
    264a:	d5 01       	movw	r26, r10
    264c:	0d 90       	ld	r0, X+
    264e:	00 20       	and	r0, r0
    2650:	e9 f7       	brne	.-6      	; 0x264c <main+0x86c>
    2652:	11 97       	sbiw	r26, 0x01	; 1
    2654:	e0 e4       	ldi	r30, 0x40	; 64
    2656:	f1 e0       	ldi	r31, 0x01	; 1
    2658:	82 2d       	mov	r24, r2
    265a:	01 90       	ld	r0, Z+
    265c:	0d 92       	st	X+, r0
    265e:	8a 95       	dec	r24
    2660:	e1 f7       	brne	.-8      	; 0x265a <main+0x87a>
	writeLine(5, buf);
    2662:	b5 01       	movw	r22, r10
    2664:	85 e0       	ldi	r24, 0x05	; 5
    2666:	63 96       	adiw	r28, 0x13	; 19
    2668:	2f af       	std	Y+63, r18	; 0x3f
    266a:	63 97       	sbiw	r28, 0x13	; 19
    266c:	64 96       	adiw	r28, 0x14	; 20
    266e:	3f af       	std	Y+63, r19	; 0x3f
    2670:	64 97       	sbiw	r28, 0x14	; 20
    2672:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    2676:	80 91 b3 05 	lds	r24, 0x05B3
    267a:	63 96       	adiw	r28, 0x13	; 19
    267c:	2f ad       	ldd	r18, Y+63	; 0x3f
    267e:	63 97       	sbiw	r28, 0x13	; 19
    2680:	64 96       	adiw	r28, 0x14	; 20
    2682:	3f ad       	ldd	r19, Y+63	; 0x3f
    2684:	64 97       	sbiw	r28, 0x14	; 20
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
			btnCanPress[MENU_MIX] = true;
		}

		//Menu Updates
		switch(menuSelect)
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	09 f4       	brne	.+2      	; 0x268c <main+0x8ac>
    268a:	be c2       	rjmp	.+1404   	; 0x2c08 <main+0xe28>
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	08 f4       	brcc	.+2      	; 0x2692 <main+0x8b2>
    2690:	21 c5       	rjmp	.+2626   	; 0x30d4 <main+0x12f4>
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	11 f4       	brne	.+4      	; 0x269a <main+0x8ba>
    2696:	0c 94 af 1b 	jmp	0x375e	; 0x375e <main+0x197e>
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	09 f0       	breq	.+2      	; 0x26a0 <main+0x8c0>
    269e:	53 cc       	rjmp	.-1882   	; 0x1f46 <main+0x166>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    26a0:	80 91 fe 05 	lds	r24, 0x05FE
    26a4:	88 23       	and	r24, r24
    26a6:	e1 f0       	breq	.+56     	; 0x26e0 <main+0x900>
    26a8:	80 91 9b 05 	lds	r24, 0x059B
    26ac:	90 91 9c 05 	lds	r25, 0x059C
    26b0:	20 91 02 06 	lds	r18, 0x0602
    26b4:	30 91 03 06 	lds	r19, 0x0603
    26b8:	ac 01       	movw	r20, r24
    26ba:	47 5f       	subi	r20, 0xF7	; 247
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255
    26be:	42 17       	cp	r20, r18
    26c0:	53 07       	cpc	r21, r19
    26c2:	74 f0       	brlt	.+28     	; 0x26e0 <main+0x900>
    26c4:	8b 30       	cpi	r24, 0x0B	; 11
    26c6:	91 05       	cpc	r25, r1
    26c8:	14 f4       	brge	.+4      	; 0x26ce <main+0x8ee>
    26ca:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <main+0x2302>
    26ce:	0a 97       	sbiw	r24, 0x0a	; 10
    26d0:	82 17       	cp	r24, r18
    26d2:	93 07       	cpc	r25, r19
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <main+0x900>
			{
				menuChange[MENU_MIX][0] = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 77 05 	sts	0x0577, r24
				updateADC[0] = false;
    26dc:	10 92 fe 05 	sts	0x05FE, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    26e0:	80 91 ff 05 	lds	r24, 0x05FF
    26e4:	88 23       	and	r24, r24
    26e6:	e1 f0       	breq	.+56     	; 0x2720 <main+0x940>
    26e8:	80 91 9d 05 	lds	r24, 0x059D
    26ec:	90 91 9e 05 	lds	r25, 0x059E
    26f0:	20 91 04 06 	lds	r18, 0x0604
    26f4:	30 91 05 06 	lds	r19, 0x0605
    26f8:	ac 01       	movw	r20, r24
    26fa:	47 5f       	subi	r20, 0xF7	; 247
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	42 17       	cp	r20, r18
    2700:	53 07       	cpc	r21, r19
    2702:	74 f0       	brlt	.+28     	; 0x2720 <main+0x940>
    2704:	8b 30       	cpi	r24, 0x0B	; 11
    2706:	91 05       	cpc	r25, r1
    2708:	14 f4       	brge	.+4      	; 0x270e <main+0x92e>
    270a:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <main+0x22f2>
    270e:	0a 97       	sbiw	r24, 0x0a	; 10
    2710:	82 17       	cp	r24, r18
    2712:	93 07       	cpc	r25, r19
    2714:	2c f4       	brge	.+10     	; 0x2720 <main+0x940>
			{
				menuChange[MENU_MIX][1] = 1;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	80 93 78 05 	sts	0x0578, r24
				updateADC[1] = false;
    271c:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    2720:	80 91 00 06 	lds	r24, 0x0600
    2724:	88 23       	and	r24, r24
    2726:	e1 f0       	breq	.+56     	; 0x2760 <main+0x980>
    2728:	80 91 9f 05 	lds	r24, 0x059F
    272c:	90 91 a0 05 	lds	r25, 0x05A0
    2730:	20 91 06 06 	lds	r18, 0x0606
    2734:	30 91 07 06 	lds	r19, 0x0607
    2738:	ac 01       	movw	r20, r24
    273a:	47 5f       	subi	r20, 0xF7	; 247
    273c:	5f 4f       	sbci	r21, 0xFF	; 255
    273e:	42 17       	cp	r20, r18
    2740:	53 07       	cpc	r21, r19
    2742:	74 f0       	brlt	.+28     	; 0x2760 <main+0x980>
    2744:	8b 30       	cpi	r24, 0x0B	; 11
    2746:	91 05       	cpc	r25, r1
    2748:	14 f4       	brge	.+4      	; 0x274e <main+0x96e>
    274a:	0c 94 6d 20 	jmp	0x40da	; 0x40da <main+0x22fa>
    274e:	0a 97       	sbiw	r24, 0x0a	; 10
    2750:	82 17       	cp	r24, r18
    2752:	93 07       	cpc	r25, r19
    2754:	2c f4       	brge	.+10     	; 0x2760 <main+0x980>
			{
				menuChange[MENU_MIX][2] = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 79 05 	sts	0x0579, r24
				updateADC[2] = false;
    275c:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    2760:	80 91 01 06 	lds	r24, 0x0601
    2764:	88 23       	and	r24, r24
    2766:	11 f4       	brne	.+4      	; 0x276c <main+0x98c>
    2768:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <main+0x1dc0>
    276c:	20 91 a1 05 	lds	r18, 0x05A1
    2770:	30 91 a2 05 	lds	r19, 0x05A2
    2774:	80 91 08 06 	lds	r24, 0x0608
    2778:	90 91 09 06 	lds	r25, 0x0609
    277c:	a9 01       	movw	r20, r18
    277e:	47 5f       	subi	r20, 0xF7	; 247
    2780:	5f 4f       	sbci	r21, 0xFF	; 255
    2782:	48 17       	cp	r20, r24
    2784:	59 07       	cpc	r21, r25
    2786:	14 f4       	brge	.+4      	; 0x278c <main+0x9ac>
    2788:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <main+0x1dc0>
    278c:	2b 30       	cpi	r18, 0x0B	; 11
    278e:	31 05       	cpc	r19, r1
    2790:	14 f4       	brge	.+4      	; 0x2796 <main+0x9b6>
    2792:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <main+0x22ea>
    2796:	2a 50       	subi	r18, 0x0A	; 10
    2798:	31 09       	sbc	r19, r1
    279a:	28 17       	cp	r18, r24
    279c:	39 07       	cpc	r19, r25
    279e:	14 f0       	brlt	.+4      	; 0x27a4 <main+0x9c4>
    27a0:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <main+0x1dc0>
			{
				menuChange[MENU_MIX][3] = 1;
    27a4:	21 e0       	ldi	r18, 0x01	; 1
    27a6:	20 93 7a 05 	sts	0x057A, r18
				updateADC[3] = false;
    27aa:	10 92 01 06 	sts	0x0601, r1
			}

			if(menuChange[MENU_MIX][3] != 0)
			{
				if((adcValue[3] >> 2) != osc1Weight)
    27ae:	9c 01       	movw	r18, r24
    27b0:	35 95       	asr	r19
    27b2:	27 95       	ror	r18
    27b4:	35 95       	asr	r19
    27b6:	27 95       	ror	r18
    27b8:	40 91 06 01 	lds	r20, 0x0106
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	24 17       	cp	r18, r20
    27c0:	35 07       	cpc	r19, r21
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <main+0x9e6>
    27c4:	5a c0       	rjmp	.+180    	; 0x287a <main+0xa9a>
				{
					osc1Weight = adcValue[3] >> 2;
    27c6:	20 93 06 01 	sts	0x0106, r18
					osc2Weight = ~osc1Weight;
    27ca:	42 2f       	mov	r20, r18
    27cc:	40 95       	com	r20
    27ce:	40 93 c9 05 	sts	0x05C9, r20

					menuKnobPos[MENU_MIX][3] = adcValue[3];
    27d2:	90 93 a2 05 	sts	0x05A2, r25
    27d6:	80 93 a1 05 	sts	0x05A1, r24

inline void mixerMenuOsc1WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1WeightLine);
    27da:	8a e0       	ldi	r24, 0x0A	; 10
    27dc:	e0 e8       	ldi	r30, 0x80	; 128
    27de:	f1 e0       	ldi	r31, 0x01	; 1
    27e0:	d5 01       	movw	r26, r10
    27e2:	01 90       	ld	r0, Z+
    27e4:	0d 92       	st	X+, r0
    27e6:	8a 95       	dec	r24
    27e8:	e1 f7       	brne	.-8      	; 0x27e2 <main+0xa02>
	sprintf(buf + 9, "%d", osc1Weight);
    27ea:	33 27       	eor	r19, r19
    27ec:	3f 93       	push	r19
    27ee:	2f 93       	push	r18
    27f0:	a7 e0       	ldi	r26, 0x07	; 7
    27f2:	b1 e0       	ldi	r27, 0x01	; 1
    27f4:	bf 93       	push	r27
    27f6:	af 93       	push	r26
    27f8:	4d ad       	ldd	r20, Y+61	; 0x3d
    27fa:	4f 93       	push	r20
    27fc:	5c ad       	ldd	r21, Y+60	; 0x3c
    27fe:	5f 93       	push	r21
    2800:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    2804:	d5 01       	movw	r26, r10
    2806:	0d 90       	ld	r0, X+
    2808:	00 20       	and	r0, r0
    280a:	e9 f7       	brne	.-6      	; 0x2806 <main+0xa26>
    280c:	11 97       	sbiw	r26, 0x01	; 1
    280e:	e0 e4       	ldi	r30, 0x40	; 64
    2810:	f1 e0       	ldi	r31, 0x01	; 1
    2812:	82 2d       	mov	r24, r2
    2814:	01 90       	ld	r0, Z+
    2816:	0d 92       	st	X+, r0
    2818:	8a 95       	dec	r24
    281a:	e1 f7       	brne	.-8      	; 0x2814 <main+0xa34>
	writeLine(2, buf);
    281c:	b5 01       	movw	r22, r10
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void mixerMenuOsc2WeightUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2WeightLine);
    2824:	8a e0       	ldi	r24, 0x0A	; 10
    2826:	ea e8       	ldi	r30, 0x8A	; 138
    2828:	f1 e0       	ldi	r31, 0x01	; 1
    282a:	d5 01       	movw	r26, r10
    282c:	01 90       	ld	r0, Z+
    282e:	0d 92       	st	X+, r0
    2830:	8a 95       	dec	r24
    2832:	e1 f7       	brne	.-8      	; 0x282c <main+0xa4c>
	sprintf(buf + 9, "%d", osc2Weight);
    2834:	80 91 c9 05 	lds	r24, 0x05C9
    2838:	1f 92       	push	r1
    283a:	8f 93       	push	r24
    283c:	a7 e0       	ldi	r26, 0x07	; 7
    283e:	b1 e0       	ldi	r27, 0x01	; 1
    2840:	bf 93       	push	r27
    2842:	af 93       	push	r26
    2844:	4d ad       	ldd	r20, Y+61	; 0x3d
    2846:	4f 93       	push	r20
    2848:	5c ad       	ldd	r21, Y+60	; 0x3c
    284a:	5f 93       	push	r21
    284c:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    2850:	d5 01       	movw	r26, r10
    2852:	0d 90       	ld	r0, X+
    2854:	00 20       	and	r0, r0
    2856:	e9 f7       	brne	.-6      	; 0x2852 <main+0xa72>
    2858:	11 97       	sbiw	r26, 0x01	; 1
    285a:	e0 e4       	ldi	r30, 0x40	; 64
    285c:	f1 e0       	ldi	r31, 0x01	; 1
    285e:	82 2d       	mov	r24, r2
    2860:	01 90       	ld	r0, Z+
    2862:	0d 92       	st	X+, r0
    2864:	8a 95       	dec	r24
    2866:	e1 f7       	brne	.-8      	; 0x2860 <main+0xa80>
	writeLine(3, buf);
    2868:	b5 01       	movw	r22, r10
    286a:	83 e0       	ldi	r24, 0x03	; 3
    286c:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
					mixerMenuOsc1WeightUpdate();
					mixerMenuOsc2WeightUpdate();
				}
			}

			if(menuChange[MENU_MIX][1] != 0)
    287a:	80 91 78 05 	lds	r24, 0x0578
    287e:	88 23       	and	r24, r24
    2880:	b1 f1       	breq	.+108    	; 0x28ee <main+0xb0e>
			{
				if(adcValue[1] > 512 && osc2Sync != true)
    2882:	80 91 04 06 	lds	r24, 0x0604
    2886:	90 91 05 06 	lds	r25, 0x0605
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	a2 e0       	ldi	r26, 0x02	; 2
    288e:	9a 07       	cpc	r25, r26
    2890:	14 f4       	brge	.+4      	; 0x2896 <main+0xab6>
    2892:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <main+0x1de6>
    2896:	80 91 c2 05 	lds	r24, 0x05C2
    289a:	81 11       	cpse	r24, r1
    289c:	28 c0       	rjmp	.+80     	; 0x28ee <main+0xb0e>
				{
					osc2Sync = true;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	80 93 c2 05 	sts	0x05C2, r24

inline void mixerMenuOsc2SyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
    28a4:	89 e0       	ldi	r24, 0x09	; 9
    28a6:	e4 e9       	ldi	r30, 0x94	; 148
    28a8:	f1 e0       	ldi	r31, 0x01	; 1
    28aa:	d5 01       	movw	r26, r10
    28ac:	01 90       	ld	r0, Z+
    28ae:	0d 92       	st	X+, r0
    28b0:	8a 95       	dec	r24
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <main+0xacc>
	if(osc2Sync != false)
    28b4:	80 91 c2 05 	lds	r24, 0x05C2
    28b8:	81 11       	cpse	r24, r1
    28ba:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <main+0x23f6>
	{
		sprintf(buf + 8, "%s", onString);
	}
	else
	{
		sprintf(buf + 8, "%s", offstring);
    28be:	8f e4       	ldi	r24, 0x4F	; 79
    28c0:	96 e4       	ldi	r25, 0x46	; 70
    28c2:	a6 e4       	ldi	r26, 0x46	; 70
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	89 87       	std	Y+9, r24	; 0x09
    28c8:	9a 87       	std	Y+10, r25	; 0x0a
    28ca:	ab 87       	std	Y+11, r26	; 0x0b
    28cc:	bc 87       	std	Y+12, r27	; 0x0c
	}
	strcat(buf, "    ");
    28ce:	d5 01       	movw	r26, r10
    28d0:	0d 90       	ld	r0, X+
    28d2:	00 20       	and	r0, r0
    28d4:	e9 f7       	brne	.-6      	; 0x28d0 <main+0xaf0>
    28d6:	11 97       	sbiw	r26, 0x01	; 1
    28d8:	e0 e4       	ldi	r30, 0x40	; 64
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	82 2d       	mov	r24, r2
    28de:	01 90       	ld	r0, Z+
    28e0:	0d 92       	st	X+, r0
    28e2:	8a 95       	dec	r24
    28e4:	e1 f7       	brne	.-8      	; 0x28de <main+0xafe>
	writeLine(4, buf);
    28e6:	b5 01       	movw	r22, r10
    28e8:	84 e0       	ldi	r24, 0x04	; 4
    28ea:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
					osc2Sync = false;
					mixerMenuOsc2SyncUpdate();
				}
			}

			if(menuChange[MENU_MIX][0] != 0)
    28ee:	80 91 77 05 	lds	r24, 0x0577
    28f2:	88 23       	and	r24, r24
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <main+0xb18>
    28f6:	20 cb       	rjmp	.-2496   	; 0x1f38 <main+0x158>
			{
				if(adcValue[0] > 512 && ringMod != true)
    28f8:	80 91 02 06 	lds	r24, 0x0602
    28fc:	90 91 03 06 	lds	r25, 0x0603
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	a2 e0       	ldi	r26, 0x02	; 2
    2904:	9a 07       	cpc	r25, r26
    2906:	14 f4       	brge	.+4      	; 0x290c <main+0xb2c>
    2908:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <main+0x1e8c>
    290c:	80 91 bf 05 	lds	r24, 0x05BF
    2910:	81 11       	cpse	r24, r1
    2912:	12 cb       	rjmp	.-2524   	; 0x1f38 <main+0x158>
				{
					ringMod = true;
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	80 93 bf 05 	sts	0x05BF, r24

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    291a:	87 e0       	ldi	r24, 0x07	; 7
    291c:	ed e9       	ldi	r30, 0x9D	; 157
    291e:	f1 e0       	ldi	r31, 0x01	; 1
    2920:	d5 01       	movw	r26, r10
    2922:	01 90       	ld	r0, Z+
    2924:	0d 92       	st	X+, r0
    2926:	8a 95       	dec	r24
    2928:	e1 f7       	brne	.-8      	; 0x2922 <main+0xb42>
	if(ringMod != false)
	{
		sprintf(buf + 6, "%s", onString);
    292a:	8f e4       	ldi	r24, 0x4F	; 79
    292c:	9e e4       	ldi	r25, 0x4E	; 78
    292e:	a0 e0       	ldi	r26, 0x00	; 0
    2930:	8f 83       	std	Y+7, r24	; 0x07
    2932:	98 87       	std	Y+8, r25	; 0x08
    2934:	a9 87       	std	Y+9, r26	; 0x09
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
	}
	strcat(buf, "    ");
    2936:	d5 01       	movw	r26, r10
    2938:	0d 90       	ld	r0, X+
    293a:	00 20       	and	r0, r0
    293c:	e9 f7       	brne	.-6      	; 0x2938 <main+0xb58>
    293e:	11 97       	sbiw	r26, 0x01	; 1
    2940:	e0 e4       	ldi	r30, 0x40	; 64
    2942:	f1 e0       	ldi	r31, 0x01	; 1
    2944:	82 2d       	mov	r24, r2
    2946:	01 90       	ld	r0, Z+
    2948:	0d 92       	st	X+, r0
    294a:	8a 95       	dec	r24
    294c:	e1 f7       	brne	.-8      	; 0x2946 <main+0xb66>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    294e:	8c e0       	ldi	r24, 0x0C	; 12
    2950:	f5 01       	movw	r30, r10
    2952:	de 01       	movw	r26, r28
    2954:	55 96       	adiw	r26, 0x15	; 21
    2956:	01 90       	ld	r0, Z+
    2958:	0d 92       	st	X+, r0
    295a:	8a 95       	dec	r24
    295c:	e1 f7       	brne	.-8      	; 0x2956 <main+0xb76>
	buf[12] = '\0';
    295e:	19 a2       	std	Y+33, r1	; 0x21

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2960:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2962:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2964:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2966:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2968:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    296a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    296c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    296e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2970:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2972:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2974:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2976:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2978:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    297a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    297c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    297e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2980:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2982:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2984:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2986:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2988:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    298a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    298c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    298e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2990:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2992:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2994:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2996:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    2998:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    299a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    299c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    299e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29a0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29a2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    29a4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29a6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29a8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29aa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ac:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ae:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29b0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29b2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29b4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29b6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29b8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ba:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    29bc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29be:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29c0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29c2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29c4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29c6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    29c8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ca:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29cc:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    29ce:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    29d0:	8d 89       	ldd	r24, Y+21	; 0x15
    29d2:	88 23       	and	r24, r24
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <main+0xbf8>
    29d6:	b0 ca       	rjmp	.-2720   	; 0x1f38 <main+0x158>
    29d8:	de 01       	movw	r26, r28
    29da:	56 96       	adiw	r26, 0x16	; 22
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    29dc:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    29de:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29e0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29e2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29e4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29e6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29e8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29ec:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29ee:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29f0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29f2:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29f4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29f6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29f8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    29fa:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    29fc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    29fe:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a00:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a02:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a04:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a10:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2a12:	44 9a       	sbi	0x08, 4	; 8
    2a14:	99 27       	eor	r25, r25
    2a16:	87 fd       	sbrc	r24, 7
    2a18:	90 95       	com	r25
    2a1a:	80 97       	sbiw	r24, 0x20	; 32
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	e8 0f       	add	r30, r24
    2a28:	f9 1f       	adc	r31, r25
    2a2a:	ee 5e       	subi	r30, 0xEE	; 238
    2a2c:	fc 4f       	sbci	r31, 0xFC	; 252

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	2a c0       	rjmp	.+84     	; 0x2a86 <main+0xca6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a32:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a34:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a36:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a38:	26 fd       	sbrc	r18, 6
    2a3a:	36 c0       	rjmp	.+108    	; 0x2aa8 <main+0xcc8>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a3c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a3e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a40:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a42:	25 fd       	sbrc	r18, 5
    2a44:	36 c0       	rjmp	.+108    	; 0x2ab2 <main+0xcd2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a46:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a4a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a4c:	24 fd       	sbrc	r18, 4
    2a4e:	36 c0       	rjmp	.+108    	; 0x2abc <main+0xcdc>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a50:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a52:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a54:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a56:	23 fd       	sbrc	r18, 3
    2a58:	36 c0       	rjmp	.+108    	; 0x2ac6 <main+0xce6>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a5a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a5c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a5e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a60:	22 fd       	sbrc	r18, 2
    2a62:	36 c0       	rjmp	.+108    	; 0x2ad0 <main+0xcf0>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a64:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a66:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a68:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a6a:	21 fd       	sbrc	r18, 1
    2a6c:	36 c0       	rjmp	.+108    	; 0x2ada <main+0xcfa>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a6e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a70:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a72:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a74:	20 fd       	sbrc	r18, 0
    2a76:	36 c0       	rjmp	.+108    	; 0x2ae4 <main+0xd04>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a78:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a7a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a7c:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2a7e:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2a80:	3f 5f       	subi	r19, 0xFF	; 255
    2a82:	35 30       	cpi	r19, 0x05	; 5
    2a84:	b1 f1       	breq	.+108    	; 0x2af2 <main+0xd12>
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    2a86:	21 91       	ld	r18, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2a88:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2a8a:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2a8c:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2a8e:	82 2f       	mov	r24, r18
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	88 0f       	add	r24, r24
    2a94:	89 2f       	mov	r24, r25
    2a96:	88 1f       	adc	r24, r24
    2a98:	99 0b       	sbc	r25, r25
    2a9a:	89 2b       	or	r24, r25
    2a9c:	51 f2       	breq	.-108    	; 0x2a32 <main+0xc52>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2a9e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2aa0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2aa2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2aa4:	26 ff       	sbrs	r18, 6
    2aa6:	ca cf       	rjmp	.-108    	; 0x2a3c <main+0xc5c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2aa8:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2aaa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2aac:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2aae:	25 ff       	sbrs	r18, 5
    2ab0:	ca cf       	rjmp	.-108    	; 0x2a46 <main+0xc66>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ab2:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ab4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ab6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2ab8:	24 ff       	sbrs	r18, 4
    2aba:	ca cf       	rjmp	.-108    	; 0x2a50 <main+0xc70>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2abc:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2abe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ac0:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2ac2:	23 ff       	sbrs	r18, 3
    2ac4:	ca cf       	rjmp	.-108    	; 0x2a5a <main+0xc7a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ac6:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ac8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2aca:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2acc:	22 ff       	sbrs	r18, 2
    2ace:	ca cf       	rjmp	.-108    	; 0x2a64 <main+0xc84>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ad0:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ad2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ad4:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2ad6:	21 ff       	sbrs	r18, 1
    2ad8:	ca cf       	rjmp	.-108    	; 0x2a6e <main+0xc8e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ada:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2adc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ade:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2ae0:	20 ff       	sbrs	r18, 0
    2ae2:	ca cf       	rjmp	.-108    	; 0x2a78 <main+0xc98>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2ae4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ae6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2ae8:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2aea:	44 9a       	sbi	0x08, 4	; 8

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    2aec:	3f 5f       	subi	r19, 0xFF	; 255
    2aee:	35 30       	cpi	r19, 0x05	; 5
    2af0:	51 f6       	brne	.-108    	; 0x2a86 <main+0xca6>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    2af2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    2af4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2af6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2af8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2afa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2afc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2afe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b02:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b04:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b06:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b08:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b0a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b0c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b0e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b14:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b16:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b18:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b1a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b1c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b1e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b20:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b22:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b24:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b26:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    2b28:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    2b2a:	8d 91       	ld	r24, X+
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	56 cf       	rjmp	.-340    	; 0x29dc <main+0xbfc>
    2b30:	03 ca       	rjmp	.-3066   	; 0x1f38 <main+0x158>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b32:	5d 9a       	sbi	0x0b, 5	; 11
    2b34:	b1 cb       	rjmp	.-2206   	; 0x2298 <main+0x4b8>
    2b36:	5d 9a       	sbi	0x0b, 5	; 11
    2b38:	aa cb       	rjmp	.-2220   	; 0x228e <main+0x4ae>
    2b3a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b3c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b3e:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2b40:	45 ff       	sbrs	r20, 5
    2b42:	90 cb       	rjmp	.-2272   	; 0x2264 <main+0x484>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b44:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b46:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b48:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2b4a:	44 ff       	sbrs	r20, 4
    2b4c:	90 cb       	rjmp	.-2272   	; 0x226e <main+0x48e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b4e:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b50:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b52:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2b54:	43 ff       	sbrs	r20, 3
    2b56:	90 cb       	rjmp	.-2272   	; 0x2278 <main+0x498>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b58:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b5a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    2b5c:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    2b5e:	42 ff       	sbrs	r20, 2
    2b60:	90 cb       	rjmp	.-2272   	; 0x2282 <main+0x4a2>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    2b62:	5d 9a       	sbi	0x0b, 5	; 11
    2b64:	8f cb       	rjmp	.-2274   	; 0x2284 <main+0x4a4>
    2b66:	5d 9a       	sbi	0x0b, 5	; 11
    2b68:	74 cb       	rjmp	.-2328   	; 0x2252 <main+0x472>
				osc1MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC1])
    2b6a:	80 91 ff 04 	lds	r24, 0x04FF
    2b6e:	81 11       	cpse	r24, r1
			btnPressed[MENU_OSC1] = false;
    2b70:	10 92 ff 04 	sts	0x04FF, r1
			
			if(!btnCanPress[MENU_OSC1])
    2b74:	80 91 f9 04 	lds	r24, 0x04F9
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <main+0xd9e>
    2b7c:	a5 c2       	rjmp	.+1354   	; 0x30c8 <main+0x12e8>
    2b7e:	80 91 f3 04 	lds	r24, 0x04F3
			btnLastPressed[MENU_OSC1]++;
			
			if(btnLastPressed[MENU_OSC1] > TIME_DEBOUNCE)
    2b82:	85 36       	cpi	r24, 0x65	; 101
    2b84:	10 f0       	brcs	.+4      	; 0x2b8a <main+0xdaa>
			btnCanPress[MENU_OSC1] = true;
    2b86:	00 93 f9 04 	sts	0x04F9, r16
    2b8a:	80 91 b3 05 	lds	r24, 0x05B3
		}
		
		if(!(OSC2_BTN_RD & (1 << OSC2_BTN_PIN)))
    2b8e:	4f 9b       	sbis	0x09, 7	; 9
    2b90:	fd c9       	rjmp	.-3078   	; 0x1f8c <main+0x1ac>
				osc2MenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_OSC2])
    2b92:	90 91 00 05 	lds	r25, 0x0500
    2b96:	91 11       	cpse	r25, r1
			btnPressed[MENU_OSC2] = false;
    2b98:	10 92 00 05 	sts	0x0500, r1
					
			if(!btnCanPress[MENU_OSC2])
    2b9c:	90 91 fa 04 	lds	r25, 0x04FA
    2ba0:	99 23       	and	r25, r25
    2ba2:	11 f4       	brne	.+4      	; 0x2ba8 <main+0xdc8>
    2ba4:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <main+0x1dd8>
    2ba8:	90 91 f4 04 	lds	r25, 0x04F4
			btnLastPressed[MENU_OSC2]++;
					
			if(btnLastPressed[MENU_OSC2] > TIME_DEBOUNCE)
    2bac:	95 36       	cpi	r25, 0x65	; 101
    2bae:	08 f4       	brcc	.+2      	; 0x2bb2 <main+0xdd2>
    2bb0:	99 cb       	rjmp	.-2254   	; 0x22e4 <main+0x504>
			btnCanPress[MENU_OSC2] = true;
    2bb2:	00 93 fa 04 	sts	0x04FA, r16
		}
		
		if(!(SAVE_BTN_RD & (1 << SAVE_BTN_PIN)))
    2bb6:	18 9b       	sbis	0x03, 0	; 3
    2bb8:	97 cb       	rjmp	.-2258   	; 0x22e8 <main+0x508>
				lfoMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_LFO])
    2bba:	90 91 01 05 	lds	r25, 0x0501
    2bbe:	91 11       	cpse	r25, r1
			btnPressed[MENU_LFO] = false;
    2bc0:	10 92 01 05 	sts	0x0501, r1
			
			if(!btnCanPress[MENU_LFO])
    2bc4:	90 91 fb 04 	lds	r25, 0x04FB
    2bc8:	99 23       	and	r25, r25
    2bca:	09 f4       	brne	.+2      	; 0x2bce <main+0xdee>
    2bcc:	71 c2       	rjmp	.+1250   	; 0x30b0 <main+0x12d0>
    2bce:	90 91 f5 04 	lds	r25, 0x04F5
			btnLastPressed[MENU_LFO]++;
			
			if(btnLastPressed[MENU_LFO] > TIME_DEBOUNCE)
    2bd2:	95 36       	cpi	r25, 0x65	; 101
    2bd4:	08 f4       	brcc	.+2      	; 0x2bd8 <main+0xdf8>
    2bd6:	68 cc       	rjmp	.-1840   	; 0x24a8 <main+0x6c8>
			btnCanPress[MENU_LFO] = true;
    2bd8:	00 93 fb 04 	sts	0x04FB, r16
		}
		
		if(!(BANK_BTN_RD & (1 << BANK_BTN_PIN)))
    2bdc:	1c 9b       	sbis	0x03, 4	; 3
    2bde:	66 cc       	rjmp	.-1844   	; 0x24ac <main+0x6cc>
				mixerMenuUpdate();
			}
		}
		else
		{
			if(btnPressed[MENU_MIX])
    2be0:	90 91 02 05 	lds	r25, 0x0502
    2be4:	91 11       	cpse	r25, r1
			btnPressed[MENU_MIX] = false;
    2be6:	10 92 02 05 	sts	0x0502, r1
			
			if(!btnCanPress[MENU_MIX])
    2bea:	90 91 fc 04 	lds	r25, 0x04FC
    2bee:	99 23       	and	r25, r25
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <main+0xe14>
    2bf2:	64 c2       	rjmp	.+1224   	; 0x30bc <main+0x12dc>
    2bf4:	90 91 f6 04 	lds	r25, 0x04F6
			btnLastPressed[MENU_MIX]++;
			
			if(btnLastPressed[MENU_MIX] > TIME_DEBOUNCE)
    2bf8:	95 36       	cpi	r25, 0x65	; 101
    2bfa:	08 f4       	brcc	.+2      	; 0x2bfe <main+0xe1e>
    2bfc:	44 cd       	rjmp	.-1400   	; 0x2686 <main+0x8a6>
			btnCanPress[MENU_MIX] = true;
    2bfe:	00 93 fc 04 	sts	0x04FC, r16
		}

		//Menu Updates
		switch(menuSelect)
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <main+0xe28>
    2c06:	42 cd       	rjmp	.-1404   	; 0x268c <main+0x8ac>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    2c08:	80 91 fe 05 	lds	r24, 0x05FE
    2c0c:	88 23       	and	r24, r24
    2c0e:	e1 f0       	breq	.+56     	; 0x2c48 <main+0xe68>
    2c10:	80 91 8b 05 	lds	r24, 0x058B
    2c14:	90 91 8c 05 	lds	r25, 0x058C
    2c18:	20 91 02 06 	lds	r18, 0x0602
    2c1c:	30 91 03 06 	lds	r19, 0x0603
    2c20:	ac 01       	movw	r20, r24
    2c22:	47 5f       	subi	r20, 0xF7	; 247
    2c24:	5f 4f       	sbci	r21, 0xFF	; 255
    2c26:	42 17       	cp	r20, r18
    2c28:	53 07       	cpc	r21, r19
    2c2a:	74 f0       	brlt	.+28     	; 0x2c48 <main+0xe68>
    2c2c:	8b 30       	cpi	r24, 0x0B	; 11
    2c2e:	91 05       	cpc	r25, r1
    2c30:	14 f4       	brge	.+4      	; 0x2c36 <main+0xe56>
    2c32:	0c 94 b5 20 	jmp	0x416a	; 0x416a <main+0x238a>
    2c36:	0a 97       	sbiw	r24, 0x0a	; 10
    2c38:	82 17       	cp	r24, r18
    2c3a:	93 07       	cpc	r25, r19
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <main+0xe68>
			{
				menuChange[MENU_OSC2][0] = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 6f 05 	sts	0x056F, r24
				updateADC[0] = false;
    2c44:	10 92 fe 05 	sts	0x05FE, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC2][1] + 10 && adcValue[1] > menuKnobPos[MENU_OSC2][1] - 10)
    2c48:	80 91 ff 05 	lds	r24, 0x05FF
    2c4c:	88 23       	and	r24, r24
    2c4e:	c1 f0       	breq	.+48     	; 0x2c80 <main+0xea0>
    2c50:	20 91 8d 05 	lds	r18, 0x058D
    2c54:	30 91 8e 05 	lds	r19, 0x058E
    2c58:	80 91 04 06 	lds	r24, 0x0604
    2c5c:	90 91 05 06 	lds	r25, 0x0605
    2c60:	a9 01       	movw	r20, r18
    2c62:	47 5f       	subi	r20, 0xF7	; 247
    2c64:	5f 4f       	sbci	r21, 0xFF	; 255
    2c66:	48 17       	cp	r20, r24
    2c68:	59 07       	cpc	r21, r25
    2c6a:	54 f0       	brlt	.+20     	; 0x2c80 <main+0xea0>
    2c6c:	29 50       	subi	r18, 0x09	; 9
    2c6e:	31 09       	sbc	r19, r1
    2c70:	82 17       	cp	r24, r18
    2c72:	93 07       	cpc	r25, r19
    2c74:	2c f0       	brlt	.+10     	; 0x2c80 <main+0xea0>
			{
				menuChange[MENU_OSC2][1] = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	80 93 70 05 	sts	0x0570, r24
				updateADC[1] = false;
    2c7c:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC2][2] + 10 && adcValue[2] > menuKnobPos[MENU_OSC2][2] - 10)
    2c80:	80 91 00 06 	lds	r24, 0x0600
    2c84:	88 23       	and	r24, r24
    2c86:	c1 f0       	breq	.+48     	; 0x2cb8 <main+0xed8>
    2c88:	20 91 8f 05 	lds	r18, 0x058F
    2c8c:	30 91 90 05 	lds	r19, 0x0590
    2c90:	80 91 06 06 	lds	r24, 0x0606
    2c94:	90 91 07 06 	lds	r25, 0x0607
    2c98:	a9 01       	movw	r20, r18
    2c9a:	47 5f       	subi	r20, 0xF7	; 247
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	48 17       	cp	r20, r24
    2ca0:	59 07       	cpc	r21, r25
    2ca2:	54 f0       	brlt	.+20     	; 0x2cb8 <main+0xed8>
    2ca4:	29 50       	subi	r18, 0x09	; 9
    2ca6:	31 09       	sbc	r19, r1
    2ca8:	82 17       	cp	r24, r18
    2caa:	93 07       	cpc	r25, r19
    2cac:	2c f0       	brlt	.+10     	; 0x2cb8 <main+0xed8>
			{
				menuChange[MENU_OSC2][2] = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 71 05 	sts	0x0571, r24
				updateADC[2] = false;
    2cb4:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC2][3] + 10 && adcValue[3] > menuKnobPos[MENU_OSC2][3] - 10)
    2cb8:	80 91 01 06 	lds	r24, 0x0601
    2cbc:	88 23       	and	r24, r24
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <main+0xee2>
    2cc0:	9a c6       	rjmp	.+3380   	; 0x39f6 <main+0x1c16>
    2cc2:	20 91 91 05 	lds	r18, 0x0591
    2cc6:	30 91 92 05 	lds	r19, 0x0592
    2cca:	80 91 08 06 	lds	r24, 0x0608
    2cce:	90 91 09 06 	lds	r25, 0x0609
    2cd2:	a9 01       	movw	r20, r18
    2cd4:	47 5f       	subi	r20, 0xF7	; 247
    2cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd8:	48 17       	cp	r20, r24
    2cda:	59 07       	cpc	r21, r25
    2cdc:	0c f4       	brge	.+2      	; 0x2ce0 <main+0xf00>
    2cde:	8b c6       	rjmp	.+3350   	; 0x39f6 <main+0x1c16>
    2ce0:	29 50       	subi	r18, 0x09	; 9
    2ce2:	31 09       	sbc	r19, r1
    2ce4:	82 17       	cp	r24, r18
    2ce6:	93 07       	cpc	r25, r19
    2ce8:	0c f4       	brge	.+2      	; 0x2cec <main+0xf0c>
    2cea:	85 c6       	rjmp	.+3338   	; 0x39f6 <main+0x1c16>
			{
				menuChange[MENU_OSC2][3] = 1;
    2cec:	21 e0       	ldi	r18, 0x01	; 1
    2cee:	20 93 72 05 	sts	0x0572, r18
				updateADC[3] = false;
    2cf2:	10 92 01 06 	sts	0x0601, r1
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
			{
				if(adcValue[3] < 146)
    2cf6:	82 39       	cpi	r24, 0x92	; 146
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	0c f0       	brlt	.+2      	; 0x2cfe <main+0xf1e>
    2cfc:	89 c6       	rjmp	.+3346   	; 0x3a10 <main+0x1c30>
				{
					if(osc2WaveForm != WAVE_SINE)
    2cfe:	80 91 02 01 	lds	r24, 0x0102
    2d02:	81 11       	cpse	r24, r1
    2d04:	0c 94 15 21 	jmp	0x422a	; 0x422a <main+0x244a>
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
						osc2MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC2][2] != 0)
    2d08:	80 91 71 05 	lds	r24, 0x0571
    2d0c:	88 23       	and	r24, r24
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <main+0xf32>
    2d10:	3e c1       	rjmp	.+636    	; 0x2f8e <main+0x11ae>
			{
				if(osc2SemisShift != (adcValue[2] >> 4) - 32)
    2d12:	80 91 06 06 	lds	r24, 0x0606
    2d16:	90 91 07 06 	lds	r25, 0x0607
    2d1a:	9c 01       	movw	r18, r24
    2d1c:	35 95       	asr	r19
    2d1e:	27 95       	ror	r18
    2d20:	35 95       	asr	r19
    2d22:	27 95       	ror	r18
    2d24:	35 95       	asr	r19
    2d26:	27 95       	ror	r18
    2d28:	35 95       	asr	r19
    2d2a:	27 95       	ror	r18
    2d2c:	60 91 cc 05 	lds	r22, 0x05CC
    2d30:	77 27       	eor	r23, r23
    2d32:	67 fd       	sbrc	r22, 7
    2d34:	70 95       	com	r23
    2d36:	a9 01       	movw	r20, r18
    2d38:	40 52       	subi	r20, 0x20	; 32
    2d3a:	51 09       	sbc	r21, r1
    2d3c:	64 17       	cp	r22, r20
    2d3e:	75 07       	cpc	r23, r21
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <main+0xf64>
    2d42:	25 c1       	rjmp	.+586    	; 0x2f8e <main+0x11ae>
				{
					osc2SemisShift = (adcValue[2] >> 4) - 32;
    2d44:	20 52       	subi	r18, 0x20	; 32
    2d46:	20 93 cc 05 	sts	0x05CC, r18
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
    2d4a:	90 93 90 05 	sts	0x0590, r25
    2d4e:	80 93 8f 05 	sts	0x058F, r24

inline void osc2MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    2d52:	88 e0       	ldi	r24, 0x08	; 8
    2d54:	e6 e2       	ldi	r30, 0x26	; 38
    2d56:	f1 e0       	ldi	r31, 0x01	; 1
    2d58:	d5 01       	movw	r26, r10
    2d5a:	01 90       	ld	r0, Z+
    2d5c:	0d 92       	st	X+, r0
    2d5e:	8a 95       	dec	r24
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <main+0xf7a>
	sprintf(buf + 7, "%d", osc2SemisShift);
    2d62:	82 2f       	mov	r24, r18
    2d64:	99 27       	eor	r25, r25
    2d66:	87 fd       	sbrc	r24, 7
    2d68:	90 95       	com	r25
    2d6a:	9f 93       	push	r25
    2d6c:	2f 93       	push	r18
    2d6e:	a7 e0       	ldi	r26, 0x07	; 7
    2d70:	b1 e0       	ldi	r27, 0x01	; 1
    2d72:	bf 93       	push	r27
    2d74:	af 93       	push	r26
    2d76:	4b ad       	ldd	r20, Y+59	; 0x3b
    2d78:	4f 93       	push	r20
    2d7a:	5a ad       	ldd	r21, Y+58	; 0x3a
    2d7c:	5f 93       	push	r21
    2d7e:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    2d82:	d5 01       	movw	r26, r10
    2d84:	0d 90       	ld	r0, X+
    2d86:	00 20       	and	r0, r0
    2d88:	e9 f7       	brne	.-6      	; 0x2d84 <main+0xfa4>
    2d8a:	11 97       	sbiw	r26, 0x01	; 1
    2d8c:	88 e0       	ldi	r24, 0x08	; 8
    2d8e:	ed e3       	ldi	r30, 0x3D	; 61
    2d90:	f1 e0       	ldi	r31, 0x01	; 1
    2d92:	01 90       	ld	r0, Z+
    2d94:	0d 92       	st	X+, r0
    2d96:	8a 95       	dec	r24
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <main+0xfb2>
	writeLine(3, buf);
    2d9a:	b5 01       	movw	r22, r10
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    2da2:	80 91 da 05 	lds	r24, 0x05DA
    2da6:	e0 91 e4 05 	lds	r30, 0x05E4
    2daa:	ff 27       	eor	r31, r31
    2dac:	e7 fd       	sbrc	r30, 7
    2dae:	f0 95       	com	r31
    2db0:	e8 0f       	add	r30, r24
    2db2:	f1 1d       	adc	r31, r1
    2db4:	ee 0f       	add	r30, r30
    2db6:	ff 1f       	adc	r31, r31
    2db8:	ee 0f       	add	r30, r30
    2dba:	ff 1f       	adc	r31, r31
    2dbc:	ec 55       	subi	r30, 0x5C	; 92
    2dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc0:	40 80       	ld	r4, Z
    2dc2:	51 80       	ldd	r5, Z+1	; 0x01
    2dc4:	62 80       	ldd	r6, Z+2	; 0x02
    2dc6:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    2dc8:	80 91 cb 05 	lds	r24, 0x05CB
    2dcc:	90 91 c1 05 	lds	r25, 0x05C1
    2dd0:	e0 91 cc 05 	lds	r30, 0x05CC
    2dd4:	ff 27       	eor	r31, r31
    2dd6:	e7 fd       	sbrc	r30, 7
    2dd8:	f0 95       	com	r31
    2dda:	e9 0f       	add	r30, r25
    2ddc:	f1 1d       	adc	r31, r1
    2dde:	9c e0       	ldi	r25, 0x0C	; 12
    2de0:	89 02       	muls	r24, r25
    2de2:	e0 0d       	add	r30, r0
    2de4:	f1 1d       	adc	r31, r1
    2de6:	11 24       	eor	r1, r1
    2de8:	ee 0f       	add	r30, r30
    2dea:	ff 1f       	adc	r31, r31
    2dec:	ee 0f       	add	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	ec 55       	subi	r30, 0x5C	; 92
    2df2:	fe 4f       	sbci	r31, 0xFE	; 254
    2df4:	c0 80       	ld	r12, Z
    2df6:	d1 80       	ldd	r13, Z+1	; 0x01
    2df8:	e2 80       	ldd	r14, Z+2	; 0x02
    2dfa:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    2dfc:	60 91 e5 05 	lds	r22, 0x05E5
    2e00:	a7 e2       	ldi	r26, 0x27	; 39
    2e02:	6a 02       	muls	r22, r26
    2e04:	b0 01       	movw	r22, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	88 27       	eor	r24, r24
    2e0a:	77 fd       	sbrc	r23, 7
    2e0c:	80 95       	com	r24
    2e0e:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2e10:	a3 01       	movw	r20, r6
    2e12:	92 01       	movw	r18, r4
    2e14:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2e18:	00 e1       	ldi	r16, 0x10	; 16
    2e1a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    2e1e:	21 96       	adiw	r28, 0x01	; 1
    2e20:	2f af       	std	Y+63, r18	; 0x3f
    2e22:	21 97       	sbiw	r28, 0x01	; 1
    2e24:	22 96       	adiw	r28, 0x02	; 2
    2e26:	3f af       	std	Y+63, r19	; 0x3f
    2e28:	22 97       	sbiw	r28, 0x02	; 2
    2e2a:	23 96       	adiw	r28, 0x03	; 3
    2e2c:	4f af       	std	Y+63, r20	; 0x3f
    2e2e:	23 97       	sbiw	r28, 0x03	; 3
    2e30:	24 96       	adiw	r28, 0x04	; 4
    2e32:	5f af       	std	Y+63, r21	; 0x3f
    2e34:	24 97       	sbiw	r28, 0x04	; 4
    2e36:	25 96       	adiw	r28, 0x05	; 5
    2e38:	6f af       	std	Y+63, r22	; 0x3f
    2e3a:	25 97       	sbiw	r28, 0x05	; 5
    2e3c:	26 96       	adiw	r28, 0x06	; 6
    2e3e:	7f af       	std	Y+63, r23	; 0x3f
    2e40:	26 97       	sbiw	r28, 0x06	; 6
    2e42:	27 96       	adiw	r28, 0x07	; 7
    2e44:	8f af       	std	Y+63, r24	; 0x3f
    2e46:	27 97       	sbiw	r28, 0x07	; 7
    2e48:	28 96       	adiw	r28, 0x08	; 8
    2e4a:	9f af       	std	Y+63, r25	; 0x3f
    2e4c:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    2e4e:	24 96       	adiw	r28, 0x04	; 4
    2e50:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e52:	9d ad       	ldd	r25, Y+61	; 0x3d
    2e54:	ae ad       	ldd	r26, Y+62	; 0x3e
    2e56:	bf ad       	ldd	r27, Y+63	; 0x3f
    2e58:	24 97       	sbiw	r28, 0x04	; 4
    2e5a:	84 0d       	add	r24, r4
    2e5c:	95 1d       	adc	r25, r5
    2e5e:	a6 1d       	adc	r26, r6
    2e60:	b7 1d       	adc	r27, r7
    2e62:	24 96       	adiw	r28, 0x04	; 4
    2e64:	8c af       	std	Y+60, r24	; 0x3c
    2e66:	9d af       	std	Y+61, r25	; 0x3d
    2e68:	ae af       	std	Y+62, r26	; 0x3e
    2e6a:	bf af       	std	Y+63, r27	; 0x3f
    2e6c:	24 97       	sbiw	r28, 0x04	; 4
    2e6e:	80 93 f6 05 	sts	0x05F6, r24
    2e72:	90 93 f7 05 	sts	0x05F7, r25
    2e76:	a0 93 f8 05 	sts	0x05F8, r26
    2e7a:	b0 93 f9 05 	sts	0x05F9, r27

	centsConst = 0x27*osc2CentsShift;
    2e7e:	20 91 cd 05 	lds	r18, 0x05CD
    2e82:	97 e2       	ldi	r25, 0x27	; 39
    2e84:	29 02       	muls	r18, r25
    2e86:	90 01       	movw	r18, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	44 27       	eor	r20, r20
    2e8c:	37 fd       	sbrc	r19, 7
    2e8e:	40 95       	com	r20
    2e90:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2e92:	c7 01       	movw	r24, r14
    2e94:	b6 01       	movw	r22, r12
    2e96:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2e9a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    2e9e:	29 96       	adiw	r28, 0x09	; 9
    2ea0:	2f af       	std	Y+63, r18	; 0x3f
    2ea2:	29 97       	sbiw	r28, 0x09	; 9
    2ea4:	2a 96       	adiw	r28, 0x0a	; 10
    2ea6:	3f af       	std	Y+63, r19	; 0x3f
    2ea8:	2a 97       	sbiw	r28, 0x0a	; 10
    2eaa:	2b 96       	adiw	r28, 0x0b	; 11
    2eac:	4f af       	std	Y+63, r20	; 0x3f
    2eae:	2b 97       	sbiw	r28, 0x0b	; 11
    2eb0:	2c 96       	adiw	r28, 0x0c	; 12
    2eb2:	5f af       	std	Y+63, r21	; 0x3f
    2eb4:	2c 97       	sbiw	r28, 0x0c	; 12
    2eb6:	2d 96       	adiw	r28, 0x0d	; 13
    2eb8:	6f af       	std	Y+63, r22	; 0x3f
    2eba:	2d 97       	sbiw	r28, 0x0d	; 13
    2ebc:	2e 96       	adiw	r28, 0x0e	; 14
    2ebe:	7f af       	std	Y+63, r23	; 0x3f
    2ec0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec2:	2f 96       	adiw	r28, 0x0f	; 15
    2ec4:	8f af       	std	Y+63, r24	; 0x3f
    2ec6:	2f 97       	sbiw	r28, 0x0f	; 15
    2ec8:	60 96       	adiw	r28, 0x10	; 16
    2eca:	9f af       	std	Y+63, r25	; 0x3f
    2ecc:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    2ece:	2c 96       	adiw	r28, 0x0c	; 12
    2ed0:	4c ac       	ldd	r4, Y+60	; 0x3c
    2ed2:	5d ac       	ldd	r5, Y+61	; 0x3d
    2ed4:	6e ac       	ldd	r6, Y+62	; 0x3e
    2ed6:	7f ac       	ldd	r7, Y+63	; 0x3f
    2ed8:	2c 97       	sbiw	r28, 0x0c	; 12
    2eda:	4c 0c       	add	r4, r12
    2edc:	5d 1c       	adc	r5, r13
    2ede:	6e 1c       	adc	r6, r14
    2ee0:	7f 1c       	adc	r7, r15
    2ee2:	40 92 d6 05 	sts	0x05D6, r4
    2ee6:	50 92 d7 05 	sts	0x05D7, r5
    2eea:	60 92 d8 05 	sts	0x05D8, r6
    2eee:	70 92 d9 05 	sts	0x05D9, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2ef2:	c0 90 67 05 	lds	r12, 0x0567
    2ef6:	d0 90 68 05 	lds	r13, 0x0568
    2efa:	e0 90 69 05 	lds	r14, 0x0569
    2efe:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2f02:	24 96       	adiw	r28, 0x04	; 4
    2f04:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f06:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f0c:	24 97       	sbiw	r28, 0x04	; 4
    2f0e:	a7 01       	movw	r20, r14
    2f10:	96 01       	movw	r18, r12
    2f12:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2f16:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    2f1e:	80 93 e6 05 	sts	0x05E6, r24
    2f22:	90 93 e7 05 	sts	0x05E7, r25
    2f26:	a0 93 e8 05 	sts	0x05E8, r26
    2f2a:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2f2e:	c3 01       	movw	r24, r6
    2f30:	b2 01       	movw	r22, r4
    2f32:	a7 01       	movw	r20, r14
    2f34:	96 01       	movw	r18, r12
    2f36:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2f3a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    2f3e:	c9 01       	movw	r24, r18
    2f40:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    2f42:	80 93 ce 05 	sts	0x05CE, r24
    2f46:	90 93 cf 05 	sts	0x05CF, r25
    2f4a:	a0 93 d0 05 	sts	0x05D0, r26
    2f4e:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    2f52:	60 91 b7 05 	lds	r22, 0x05B7
    2f56:	70 91 b8 05 	lds	r23, 0x05B8
    2f5a:	80 91 b9 05 	lds	r24, 0x05B9
    2f5e:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    2f62:	a7 01       	movw	r20, r14
    2f64:	96 01       	movw	r18, r12
    2f66:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    2f6a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    2f6e:	c9 01       	movw	r24, r18
    2f70:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    2f72:	80 93 bb 05 	sts	0x05BB, r24
    2f76:	90 93 bc 05 	sts	0x05BC, r25
    2f7a:	a0 93 bd 05 	sts	0x05BD, r26
    2f7e:	b0 93 be 05 	sts	0x05BE, r27
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC2][2] = adcValue[2];
					osc2MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC2][1] != 0)
    2f8e:	80 91 70 05 	lds	r24, 0x0570
    2f92:	88 23       	and	r24, r24
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <main+0x11b8>
    2f96:	42 c0       	rjmp	.+132    	; 0x301c <main+0x123c>
			{
				if(osc2CentsShift != (adcValue[1] >> 2) - 128)
    2f98:	60 91 cd 05 	lds	r22, 0x05CD
    2f9c:	86 2f       	mov	r24, r22
    2f9e:	99 27       	eor	r25, r25
    2fa0:	87 fd       	sbrc	r24, 7
    2fa2:	90 95       	com	r25
    2fa4:	20 91 04 06 	lds	r18, 0x0604
    2fa8:	30 91 05 06 	lds	r19, 0x0605
    2fac:	a9 01       	movw	r20, r18
    2fae:	55 95       	asr	r21
    2fb0:	47 95       	ror	r20
    2fb2:	55 95       	asr	r21
    2fb4:	47 95       	ror	r20
    2fb6:	40 58       	subi	r20, 0x80	; 128
    2fb8:	51 09       	sbc	r21, r1
    2fba:	84 17       	cp	r24, r20
    2fbc:	95 07       	cpc	r25, r21
    2fbe:	71 f1       	breq	.+92     	; 0x301c <main+0x123c>
				{
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
    2fc0:	30 93 8e 05 	sts	0x058E, r19
    2fc4:	20 93 8d 05 	sts	0x058D, r18

inline void osc2MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    2fc8:	88 e0       	ldi	r24, 0x08	; 8
    2fca:	ee e1       	ldi	r30, 0x1E	; 30
    2fcc:	f1 e0       	ldi	r31, 0x01	; 1
    2fce:	d5 01       	movw	r26, r10
    2fd0:	01 90       	ld	r0, Z+
    2fd2:	0d 92       	st	X+, r0
    2fd4:	8a 95       	dec	r24
    2fd6:	e1 f7       	brne	.-8      	; 0x2fd0 <main+0x11f0>
	sprintf(buf + 7, "%d", osc2CentsShift);
    2fd8:	9f 93       	push	r25
    2fda:	6f 93       	push	r22
    2fdc:	a7 e0       	ldi	r26, 0x07	; 7
    2fde:	b1 e0       	ldi	r27, 0x01	; 1
    2fe0:	bf 93       	push	r27
    2fe2:	af 93       	push	r26
    2fe4:	4b ad       	ldd	r20, Y+59	; 0x3b
    2fe6:	4f 93       	push	r20
    2fe8:	5a ad       	ldd	r21, Y+58	; 0x3a
    2fea:	5f 93       	push	r21
    2fec:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    2ff0:	d5 01       	movw	r26, r10
    2ff2:	0d 90       	ld	r0, X+
    2ff4:	00 20       	and	r0, r0
    2ff6:	e9 f7       	brne	.-6      	; 0x2ff2 <main+0x1212>
    2ff8:	11 97       	sbiw	r26, 0x01	; 1
    2ffa:	88 e0       	ldi	r24, 0x08	; 8
    2ffc:	ed e3       	ldi	r30, 0x3D	; 61
    2ffe:	f1 e0       	ldi	r31, 0x01	; 1
    3000:	01 90       	ld	r0, Z+
    3002:	0d 92       	st	X+, r0
    3004:	8a 95       	dec	r24
    3006:	e1 f7       	brne	.-8      	; 0x3000 <main+0x1220>
	writeLine(4, buf);
    3008:	b5 01       	movw	r22, r10
    300a:	84 e0       	ldi	r24, 0x04	; 4
    300c:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
					//osc2CentsShift = (adcValue[1] >> 2) - 128;
					menuKnobPos[MENU_OSC2][1] = adcValue[1];
					osc2MenuCentsUpdate();
				}
			}
			if(menuChange[MENU_OSC2][0] != 0)
    301c:	80 91 6f 05 	lds	r24, 0x056F
    3020:	88 23       	and	r24, r24
    3022:	11 f4       	brne	.+4      	; 0x3028 <main+0x1248>
    3024:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
			{
				if(adcValue[0] < 205)
    3028:	80 91 02 06 	lds	r24, 0x0602
    302c:	90 91 03 06 	lds	r25, 0x0603
    3030:	8d 3c       	cpi	r24, 0xCD	; 205
    3032:	91 05       	cpc	r25, r1
    3034:	0c f0       	brlt	.+2      	; 0x3038 <main+0x1258>
    3036:	fc c5       	rjmp	.+3064   	; 0x3c30 <main+0x1e50>
				{
					if(osc2OctaveShift != -2)
    3038:	80 91 cb 05 	lds	r24, 0x05CB
    303c:	8e 3f       	cpi	r24, 0xFE	; 254
    303e:	11 f4       	brne	.+4      	; 0x3044 <main+0x1264>
    3040:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc2OctaveShift = -2;
    3044:	2e ef       	ldi	r18, 0xFE	; 254
    3046:	20 93 cb 05 	sts	0x05CB, r18
						menuKnobPos[MENU_OSC2][0] = 102;
    304a:	86 e6       	ldi	r24, 0x66	; 102
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	90 93 8c 05 	sts	0x058C, r25
    3052:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3056:	86 e0       	ldi	r24, 0x06	; 6
    3058:	e2 e5       	ldi	r30, 0x52	; 82
    305a:	f1 e0       	ldi	r31, 0x01	; 1
    305c:	d5 01       	movw	r26, r10
    305e:	01 90       	ld	r0, Z+
    3060:	0d 92       	st	X+, r0
    3062:	8a 95       	dec	r24
    3064:	e1 f7       	brne	.-8      	; 0x305e <main+0x127e>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3066:	8f ef       	ldi	r24, 0xFF	; 255
    3068:	8f 93       	push	r24
    306a:	2f 93       	push	r18
    306c:	a7 e0       	ldi	r26, 0x07	; 7
    306e:	b1 e0       	ldi	r27, 0x01	; 1
    3070:	bf 93       	push	r27
    3072:	af 93       	push	r26
    3074:	4f a9       	ldd	r20, Y+55	; 0x37
    3076:	4f 93       	push	r20
    3078:	5e a9       	ldd	r21, Y+54	; 0x36
    307a:	5f 93       	push	r21
    307c:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "        ");
    3080:	d5 01       	movw	r26, r10
    3082:	0d 90       	ld	r0, X+
    3084:	00 20       	and	r0, r0
    3086:	e9 f7       	brne	.-6      	; 0x3082 <main+0x12a2>
    3088:	11 97       	sbiw	r26, 0x01	; 1
    308a:	89 e0       	ldi	r24, 0x09	; 9
    308c:	ec e3       	ldi	r30, 0x3C	; 60
    308e:	f1 e0       	ldi	r31, 0x01	; 1
    3090:	01 90       	ld	r0, Z+
    3092:	0d 92       	st	X+, r0
    3094:	8a 95       	dec	r24
    3096:	e1 f7       	brne	.-8      	; 0x3090 <main+0x12b0>
	writeLine(5, buf);
    3098:	b5 01       	movw	r22, r10
    309a:	85 e0       	ldi	r24, 0x05	; 5
    309c:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
		{
			if(btnPressed[MENU_LFO])
			btnPressed[MENU_LFO] = false;
			
			if(!btnCanPress[MENU_LFO])
			btnLastPressed[MENU_LFO]++;
    30b0:	90 91 f5 04 	lds	r25, 0x04F5
    30b4:	9f 5f       	subi	r25, 0xFF	; 255
    30b6:	90 93 f5 04 	sts	0x04F5, r25
    30ba:	8b cd       	rjmp	.-1258   	; 0x2bd2 <main+0xdf2>
		{
			if(btnPressed[MENU_MIX])
			btnPressed[MENU_MIX] = false;
			
			if(!btnCanPress[MENU_MIX])
			btnLastPressed[MENU_MIX]++;
    30bc:	90 91 f6 04 	lds	r25, 0x04F6
    30c0:	9f 5f       	subi	r25, 0xFF	; 255
    30c2:	90 93 f6 04 	sts	0x04F6, r25
    30c6:	98 cd       	rjmp	.-1232   	; 0x2bf8 <main+0xe18>
		{
			if(btnPressed[MENU_OSC1])
			btnPressed[MENU_OSC1] = false;
			
			if(!btnCanPress[MENU_OSC1])
			btnLastPressed[MENU_OSC1]++;
    30c8:	80 91 f3 04 	lds	r24, 0x04F3
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	80 93 f3 04 	sts	0x04F3, r24
    30d2:	57 cd       	rjmp	.-1362   	; 0x2b82 <main+0xda2>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    30d4:	80 91 fe 05 	lds	r24, 0x05FE
    30d8:	88 23       	and	r24, r24
    30da:	e1 f0       	breq	.+56     	; 0x3114 <main+0x1334>
    30dc:	80 91 83 05 	lds	r24, 0x0583
    30e0:	90 91 84 05 	lds	r25, 0x0584
    30e4:	20 91 02 06 	lds	r18, 0x0602
    30e8:	30 91 03 06 	lds	r19, 0x0603
    30ec:	ac 01       	movw	r20, r24
    30ee:	47 5f       	subi	r20, 0xF7	; 247
    30f0:	5f 4f       	sbci	r21, 0xFF	; 255
    30f2:	42 17       	cp	r20, r18
    30f4:	53 07       	cpc	r21, r19
    30f6:	74 f0       	brlt	.+28     	; 0x3114 <main+0x1334>
    30f8:	8b 30       	cpi	r24, 0x0B	; 11
    30fa:	91 05       	cpc	r25, r1
    30fc:	14 f4       	brge	.+4      	; 0x3102 <main+0x1322>
    30fe:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <main+0x2382>
    3102:	0a 97       	sbiw	r24, 0x0a	; 10
    3104:	82 17       	cp	r24, r18
    3106:	93 07       	cpc	r25, r19
    3108:	2c f4       	brge	.+10     	; 0x3114 <main+0x1334>
			{
				menuChange[MENU_OSC1][0] = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	80 93 6b 05 	sts	0x056B, r24
				updateADC[0] = false;
    3110:	10 92 fe 05 	sts	0x05FE, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    3114:	80 91 ff 05 	lds	r24, 0x05FF
    3118:	88 23       	and	r24, r24
    311a:	d9 f0       	breq	.+54     	; 0x3152 <main+0x1372>
    311c:	80 91 85 05 	lds	r24, 0x0585
    3120:	90 91 86 05 	lds	r25, 0x0586
    3124:	20 91 04 06 	lds	r18, 0x0604
    3128:	30 91 05 06 	lds	r19, 0x0605
    312c:	ac 01       	movw	r20, r24
    312e:	47 5f       	subi	r20, 0xF7	; 247
    3130:	5f 4f       	sbci	r21, 0xFF	; 255
    3132:	42 17       	cp	r20, r18
    3134:	53 07       	cpc	r21, r19
    3136:	6c f0       	brlt	.+26     	; 0x3152 <main+0x1372>
    3138:	8b 30       	cpi	r24, 0x0B	; 11
    313a:	91 05       	cpc	r25, r1
    313c:	0c f4       	brge	.+2      	; 0x3140 <main+0x1360>
    313e:	db c7       	rjmp	.+4022   	; 0x40f6 <main+0x2316>
    3140:	0a 97       	sbiw	r24, 0x0a	; 10
    3142:	82 17       	cp	r24, r18
    3144:	93 07       	cpc	r25, r19
    3146:	2c f4       	brge	.+10     	; 0x3152 <main+0x1372>
			{
				menuChange[MENU_OSC1][1] = 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	80 93 6c 05 	sts	0x056C, r24
				updateADC[1] = false;
    314e:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    3152:	80 91 00 06 	lds	r24, 0x0600
    3156:	88 23       	and	r24, r24
    3158:	d9 f0       	breq	.+54     	; 0x3190 <main+0x13b0>
    315a:	80 91 87 05 	lds	r24, 0x0587
    315e:	90 91 88 05 	lds	r25, 0x0588
    3162:	20 91 06 06 	lds	r18, 0x0606
    3166:	30 91 07 06 	lds	r19, 0x0607
    316a:	ac 01       	movw	r20, r24
    316c:	47 5f       	subi	r20, 0xF7	; 247
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	42 17       	cp	r20, r18
    3172:	53 07       	cpc	r21, r19
    3174:	6c f0       	brlt	.+26     	; 0x3190 <main+0x13b0>
    3176:	8b 30       	cpi	r24, 0x0B	; 11
    3178:	91 05       	cpc	r25, r1
    317a:	0c f4       	brge	.+2      	; 0x317e <main+0x139e>
    317c:	bf c7       	rjmp	.+3966   	; 0x40fc <main+0x231c>
    317e:	0a 97       	sbiw	r24, 0x0a	; 10
    3180:	82 17       	cp	r24, r18
    3182:	93 07       	cpc	r25, r19
    3184:	2c f4       	brge	.+10     	; 0x3190 <main+0x13b0>
			{
				menuChange[MENU_OSC1][2] = 1;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	80 93 6d 05 	sts	0x056D, r24
				updateADC[2] = false;
    318c:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    3190:	80 91 01 06 	lds	r24, 0x0601
    3194:	88 23       	and	r24, r24
    3196:	09 f4       	brne	.+2      	; 0x319a <main+0x13ba>
    3198:	ba c4       	rjmp	.+2420   	; 0x3b0e <main+0x1d2e>
    319a:	20 91 89 05 	lds	r18, 0x0589
    319e:	30 91 8a 05 	lds	r19, 0x058A
    31a2:	80 91 08 06 	lds	r24, 0x0608
    31a6:	90 91 09 06 	lds	r25, 0x0609
    31aa:	a9 01       	movw	r20, r18
    31ac:	47 5f       	subi	r20, 0xF7	; 247
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	48 17       	cp	r20, r24
    31b2:	59 07       	cpc	r21, r25
    31b4:	0c f4       	brge	.+2      	; 0x31b8 <main+0x13d8>
    31b6:	ab c4       	rjmp	.+2390   	; 0x3b0e <main+0x1d2e>
    31b8:	2b 30       	cpi	r18, 0x0B	; 11
    31ba:	31 05       	cpc	r19, r1
    31bc:	0c f4       	brge	.+2      	; 0x31c0 <main+0x13e0>
    31be:	98 c7       	rjmp	.+3888   	; 0x40f0 <main+0x2310>
    31c0:	2a 50       	subi	r18, 0x0A	; 10
    31c2:	31 09       	sbc	r19, r1
    31c4:	28 17       	cp	r18, r24
    31c6:	39 07       	cpc	r19, r25
    31c8:	0c f0       	brlt	.+2      	; 0x31cc <main+0x13ec>
    31ca:	a1 c4       	rjmp	.+2370   	; 0x3b0e <main+0x1d2e>
			{
				menuChange[MENU_OSC1][3] = 1;
    31cc:	21 e0       	ldi	r18, 0x01	; 1
    31ce:	20 93 6e 05 	sts	0x056E, r18
				updateADC[3] = false;
    31d2:	10 92 01 06 	sts	0x0601, r1
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
			{
				if(adcValue[3] < 146)
    31d6:	82 39       	cpi	r24, 0x92	; 146
    31d8:	91 05       	cpc	r25, r1
    31da:	0c f0       	brlt	.+2      	; 0x31de <main+0x13fe>
    31dc:	a5 c4       	rjmp	.+2378   	; 0x3b28 <main+0x1d48>
				{
					if(osc1WaveForm != WAVE_SINE)
    31de:	80 91 03 01 	lds	r24, 0x0103
    31e2:	81 11       	cpse	r24, r1
    31e4:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <main+0x2500>
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
						osc1MenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_OSC1][2] != 0)
    31e8:	80 91 6d 05 	lds	r24, 0x056D
    31ec:	88 23       	and	r24, r24
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <main+0x1412>
    31f0:	3e c1       	rjmp	.+636    	; 0x346e <main+0x168e>
			{
				if(osc1SemisShift != (adcValue[2] >> 4) - 32)
    31f2:	80 91 06 06 	lds	r24, 0x0606
    31f6:	90 91 07 06 	lds	r25, 0x0607
    31fa:	9c 01       	movw	r18, r24
    31fc:	35 95       	asr	r19
    31fe:	27 95       	ror	r18
    3200:	35 95       	asr	r19
    3202:	27 95       	ror	r18
    3204:	35 95       	asr	r19
    3206:	27 95       	ror	r18
    3208:	35 95       	asr	r19
    320a:	27 95       	ror	r18
    320c:	60 91 e4 05 	lds	r22, 0x05E4
    3210:	77 27       	eor	r23, r23
    3212:	67 fd       	sbrc	r22, 7
    3214:	70 95       	com	r23
    3216:	a9 01       	movw	r20, r18
    3218:	40 52       	subi	r20, 0x20	; 32
    321a:	51 09       	sbc	r21, r1
    321c:	64 17       	cp	r22, r20
    321e:	75 07       	cpc	r23, r21
    3220:	09 f4       	brne	.+2      	; 0x3224 <main+0x1444>
    3222:	25 c1       	rjmp	.+586    	; 0x346e <main+0x168e>
				{
					osc1SemisShift = (adcValue[2] >> 4) - 32;
    3224:	20 52       	subi	r18, 0x20	; 32
    3226:	20 93 e4 05 	sts	0x05E4, r18
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
    322a:	90 93 88 05 	sts	0x0588, r25
    322e:	80 93 87 05 	sts	0x0587, r24

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    3232:	88 e0       	ldi	r24, 0x08	; 8
    3234:	e6 e2       	ldi	r30, 0x26	; 38
    3236:	f1 e0       	ldi	r31, 0x01	; 1
    3238:	d5 01       	movw	r26, r10
    323a:	01 90       	ld	r0, Z+
    323c:	0d 92       	st	X+, r0
    323e:	8a 95       	dec	r24
    3240:	e1 f7       	brne	.-8      	; 0x323a <main+0x145a>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3242:	82 2f       	mov	r24, r18
    3244:	99 27       	eor	r25, r25
    3246:	87 fd       	sbrc	r24, 7
    3248:	90 95       	com	r25
    324a:	9f 93       	push	r25
    324c:	2f 93       	push	r18
    324e:	a7 e0       	ldi	r26, 0x07	; 7
    3250:	b1 e0       	ldi	r27, 0x01	; 1
    3252:	bf 93       	push	r27
    3254:	af 93       	push	r26
    3256:	4b ad       	ldd	r20, Y+59	; 0x3b
    3258:	4f 93       	push	r20
    325a:	5a ad       	ldd	r21, Y+58	; 0x3a
    325c:	5f 93       	push	r21
    325e:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    3262:	d5 01       	movw	r26, r10
    3264:	0d 90       	ld	r0, X+
    3266:	00 20       	and	r0, r0
    3268:	e9 f7       	brne	.-6      	; 0x3264 <main+0x1484>
    326a:	11 97       	sbiw	r26, 0x01	; 1
    326c:	88 e0       	ldi	r24, 0x08	; 8
    326e:	ed e3       	ldi	r30, 0x3D	; 61
    3270:	f1 e0       	ldi	r31, 0x01	; 1
    3272:	01 90       	ld	r0, Z+
    3274:	0d 92       	st	X+, r0
    3276:	8a 95       	dec	r24
    3278:	e1 f7       	brne	.-8      	; 0x3272 <main+0x1492>
	writeLine(3, buf);
    327a:	b5 01       	movw	r22, r10
    327c:	83 e0       	ldi	r24, 0x03	; 3
    327e:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    3282:	80 91 da 05 	lds	r24, 0x05DA
    3286:	e0 91 e4 05 	lds	r30, 0x05E4
    328a:	ff 27       	eor	r31, r31
    328c:	e7 fd       	sbrc	r30, 7
    328e:	f0 95       	com	r31
    3290:	e8 0f       	add	r30, r24
    3292:	f1 1d       	adc	r31, r1
    3294:	ee 0f       	add	r30, r30
    3296:	ff 1f       	adc	r31, r31
    3298:	ee 0f       	add	r30, r30
    329a:	ff 1f       	adc	r31, r31
    329c:	ec 55       	subi	r30, 0x5C	; 92
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	40 80       	ld	r4, Z
    32a2:	51 80       	ldd	r5, Z+1	; 0x01
    32a4:	62 80       	ldd	r6, Z+2	; 0x02
    32a6:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    32a8:	80 91 cb 05 	lds	r24, 0x05CB
    32ac:	90 91 c1 05 	lds	r25, 0x05C1
    32b0:	e0 91 cc 05 	lds	r30, 0x05CC
    32b4:	ff 27       	eor	r31, r31
    32b6:	e7 fd       	sbrc	r30, 7
    32b8:	f0 95       	com	r31
    32ba:	e9 0f       	add	r30, r25
    32bc:	f1 1d       	adc	r31, r1
    32be:	9c e0       	ldi	r25, 0x0C	; 12
    32c0:	89 02       	muls	r24, r25
    32c2:	e0 0d       	add	r30, r0
    32c4:	f1 1d       	adc	r31, r1
    32c6:	11 24       	eor	r1, r1
    32c8:	ee 0f       	add	r30, r30
    32ca:	ff 1f       	adc	r31, r31
    32cc:	ee 0f       	add	r30, r30
    32ce:	ff 1f       	adc	r31, r31
    32d0:	ec 55       	subi	r30, 0x5C	; 92
    32d2:	fe 4f       	sbci	r31, 0xFE	; 254
    32d4:	c0 80       	ld	r12, Z
    32d6:	d1 80       	ldd	r13, Z+1	; 0x01
    32d8:	e2 80       	ldd	r14, Z+2	; 0x02
    32da:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    32dc:	60 91 e5 05 	lds	r22, 0x05E5
    32e0:	a7 e2       	ldi	r26, 0x27	; 39
    32e2:	6a 02       	muls	r22, r26
    32e4:	b0 01       	movw	r22, r0
    32e6:	11 24       	eor	r1, r1
    32e8:	88 27       	eor	r24, r24
    32ea:	77 fd       	sbrc	r23, 7
    32ec:	80 95       	com	r24
    32ee:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    32f0:	a3 01       	movw	r20, r6
    32f2:	92 01       	movw	r18, r4
    32f4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    32f8:	00 e1       	ldi	r16, 0x10	; 16
    32fa:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    32fe:	21 96       	adiw	r28, 0x01	; 1
    3300:	2f af       	std	Y+63, r18	; 0x3f
    3302:	21 97       	sbiw	r28, 0x01	; 1
    3304:	22 96       	adiw	r28, 0x02	; 2
    3306:	3f af       	std	Y+63, r19	; 0x3f
    3308:	22 97       	sbiw	r28, 0x02	; 2
    330a:	23 96       	adiw	r28, 0x03	; 3
    330c:	4f af       	std	Y+63, r20	; 0x3f
    330e:	23 97       	sbiw	r28, 0x03	; 3
    3310:	24 96       	adiw	r28, 0x04	; 4
    3312:	5f af       	std	Y+63, r21	; 0x3f
    3314:	24 97       	sbiw	r28, 0x04	; 4
    3316:	25 96       	adiw	r28, 0x05	; 5
    3318:	6f af       	std	Y+63, r22	; 0x3f
    331a:	25 97       	sbiw	r28, 0x05	; 5
    331c:	26 96       	adiw	r28, 0x06	; 6
    331e:	7f af       	std	Y+63, r23	; 0x3f
    3320:	26 97       	sbiw	r28, 0x06	; 6
    3322:	27 96       	adiw	r28, 0x07	; 7
    3324:	8f af       	std	Y+63, r24	; 0x3f
    3326:	27 97       	sbiw	r28, 0x07	; 7
    3328:	28 96       	adiw	r28, 0x08	; 8
    332a:	9f af       	std	Y+63, r25	; 0x3f
    332c:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    332e:	24 96       	adiw	r28, 0x04	; 4
    3330:	8c ad       	ldd	r24, Y+60	; 0x3c
    3332:	9d ad       	ldd	r25, Y+61	; 0x3d
    3334:	ae ad       	ldd	r26, Y+62	; 0x3e
    3336:	bf ad       	ldd	r27, Y+63	; 0x3f
    3338:	24 97       	sbiw	r28, 0x04	; 4
    333a:	84 0d       	add	r24, r4
    333c:	95 1d       	adc	r25, r5
    333e:	a6 1d       	adc	r26, r6
    3340:	b7 1d       	adc	r27, r7
    3342:	24 96       	adiw	r28, 0x04	; 4
    3344:	8c af       	std	Y+60, r24	; 0x3c
    3346:	9d af       	std	Y+61, r25	; 0x3d
    3348:	ae af       	std	Y+62, r26	; 0x3e
    334a:	bf af       	std	Y+63, r27	; 0x3f
    334c:	24 97       	sbiw	r28, 0x04	; 4
    334e:	80 93 f6 05 	sts	0x05F6, r24
    3352:	90 93 f7 05 	sts	0x05F7, r25
    3356:	a0 93 f8 05 	sts	0x05F8, r26
    335a:	b0 93 f9 05 	sts	0x05F9, r27

	centsConst = 0x27*osc2CentsShift;
    335e:	20 91 cd 05 	lds	r18, 0x05CD
    3362:	97 e2       	ldi	r25, 0x27	; 39
    3364:	29 02       	muls	r18, r25
    3366:	90 01       	movw	r18, r0
    3368:	11 24       	eor	r1, r1
    336a:	44 27       	eor	r20, r20
    336c:	37 fd       	sbrc	r19, 7
    336e:	40 95       	com	r20
    3370:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3372:	c7 01       	movw	r24, r14
    3374:	b6 01       	movw	r22, r12
    3376:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    337a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    337e:	29 96       	adiw	r28, 0x09	; 9
    3380:	2f af       	std	Y+63, r18	; 0x3f
    3382:	29 97       	sbiw	r28, 0x09	; 9
    3384:	2a 96       	adiw	r28, 0x0a	; 10
    3386:	3f af       	std	Y+63, r19	; 0x3f
    3388:	2a 97       	sbiw	r28, 0x0a	; 10
    338a:	2b 96       	adiw	r28, 0x0b	; 11
    338c:	4f af       	std	Y+63, r20	; 0x3f
    338e:	2b 97       	sbiw	r28, 0x0b	; 11
    3390:	2c 96       	adiw	r28, 0x0c	; 12
    3392:	5f af       	std	Y+63, r21	; 0x3f
    3394:	2c 97       	sbiw	r28, 0x0c	; 12
    3396:	2d 96       	adiw	r28, 0x0d	; 13
    3398:	6f af       	std	Y+63, r22	; 0x3f
    339a:	2d 97       	sbiw	r28, 0x0d	; 13
    339c:	2e 96       	adiw	r28, 0x0e	; 14
    339e:	7f af       	std	Y+63, r23	; 0x3f
    33a0:	2e 97       	sbiw	r28, 0x0e	; 14
    33a2:	2f 96       	adiw	r28, 0x0f	; 15
    33a4:	8f af       	std	Y+63, r24	; 0x3f
    33a6:	2f 97       	sbiw	r28, 0x0f	; 15
    33a8:	60 96       	adiw	r28, 0x10	; 16
    33aa:	9f af       	std	Y+63, r25	; 0x3f
    33ac:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    33ae:	2c 96       	adiw	r28, 0x0c	; 12
    33b0:	4c ac       	ldd	r4, Y+60	; 0x3c
    33b2:	5d ac       	ldd	r5, Y+61	; 0x3d
    33b4:	6e ac       	ldd	r6, Y+62	; 0x3e
    33b6:	7f ac       	ldd	r7, Y+63	; 0x3f
    33b8:	2c 97       	sbiw	r28, 0x0c	; 12
    33ba:	4c 0c       	add	r4, r12
    33bc:	5d 1c       	adc	r5, r13
    33be:	6e 1c       	adc	r6, r14
    33c0:	7f 1c       	adc	r7, r15
    33c2:	40 92 d6 05 	sts	0x05D6, r4
    33c6:	50 92 d7 05 	sts	0x05D7, r5
    33ca:	60 92 d8 05 	sts	0x05D8, r6
    33ce:	70 92 d9 05 	sts	0x05D9, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    33d2:	c0 90 67 05 	lds	r12, 0x0567
    33d6:	d0 90 68 05 	lds	r13, 0x0568
    33da:	e0 90 69 05 	lds	r14, 0x0569
    33de:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    33e2:	24 96       	adiw	r28, 0x04	; 4
    33e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    33e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    33e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    33ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    33ec:	24 97       	sbiw	r28, 0x04	; 4
    33ee:	a7 01       	movw	r20, r14
    33f0:	96 01       	movw	r18, r12
    33f2:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    33f6:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    33fa:	c9 01       	movw	r24, r18
    33fc:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    33fe:	80 93 e6 05 	sts	0x05E6, r24
    3402:	90 93 e7 05 	sts	0x05E7, r25
    3406:	a0 93 e8 05 	sts	0x05E8, r26
    340a:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    340e:	c3 01       	movw	r24, r6
    3410:	b2 01       	movw	r22, r4
    3412:	a7 01       	movw	r20, r14
    3414:	96 01       	movw	r18, r12
    3416:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    341a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    341e:	c9 01       	movw	r24, r18
    3420:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    3422:	80 93 ce 05 	sts	0x05CE, r24
    3426:	90 93 cf 05 	sts	0x05CF, r25
    342a:	a0 93 d0 05 	sts	0x05D0, r26
    342e:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    3432:	60 91 b7 05 	lds	r22, 0x05B7
    3436:	70 91 b8 05 	lds	r23, 0x05B8
    343a:	80 91 b9 05 	lds	r24, 0x05B9
    343e:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3442:	a7 01       	movw	r20, r14
    3444:	96 01       	movw	r18, r12
    3446:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    344a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    344e:	c9 01       	movw	r24, r18
    3450:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    3452:	80 93 bb 05 	sts	0x05BB, r24
    3456:	90 93 bc 05 	sts	0x05BC, r25
    345a:	a0 93 bd 05 	sts	0x05BD, r26
    345e:	b0 93 be 05 	sts	0x05BE, r27
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][2] = adcValue[2];
					osc1MenuSemisUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][1] != 0)
    346e:	80 91 6c 05 	lds	r24, 0x056C
    3472:	88 23       	and	r24, r24
    3474:	09 f4       	brne	.+2      	; 0x3478 <main+0x1698>
    3476:	36 c1       	rjmp	.+620    	; 0x36e4 <main+0x1904>
			{
				if(osc1CentsShift != (adcValue[1] >> 4) - 32)
    3478:	60 91 e5 05 	lds	r22, 0x05E5
    347c:	26 2f       	mov	r18, r22
    347e:	33 27       	eor	r19, r19
    3480:	27 fd       	sbrc	r18, 7
    3482:	30 95       	com	r19
    3484:	40 91 04 06 	lds	r20, 0x0604
    3488:	50 91 05 06 	lds	r21, 0x0605
    348c:	ca 01       	movw	r24, r20
    348e:	95 95       	asr	r25
    3490:	87 95       	ror	r24
    3492:	95 95       	asr	r25
    3494:	87 95       	ror	r24
    3496:	95 95       	asr	r25
    3498:	87 95       	ror	r24
    349a:	95 95       	asr	r25
    349c:	87 95       	ror	r24
    349e:	80 97       	sbiw	r24, 0x20	; 32
    34a0:	28 17       	cp	r18, r24
    34a2:	39 07       	cpc	r19, r25
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <main+0x16c8>
    34a6:	1e c1       	rjmp	.+572    	; 0x36e4 <main+0x1904>
				{
					//osc1CentsShift = (adcValue[1] >> 4) - 32;
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
    34a8:	50 93 86 05 	sts	0x0586, r21
    34ac:	40 93 85 05 	sts	0x0585, r20

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	ee e1       	ldi	r30, 0x1E	; 30
    34b4:	f1 e0       	ldi	r31, 0x01	; 1
    34b6:	d5 01       	movw	r26, r10
    34b8:	01 90       	ld	r0, Z+
    34ba:	0d 92       	st	X+, r0
    34bc:	8a 95       	dec	r24
    34be:	e1 f7       	brne	.-8      	; 0x34b8 <main+0x16d8>
	sprintf(buf + 7, "%d", osc1CentsShift);
    34c0:	3f 93       	push	r19
    34c2:	6f 93       	push	r22
    34c4:	a7 e0       	ldi	r26, 0x07	; 7
    34c6:	b1 e0       	ldi	r27, 0x01	; 1
    34c8:	bf 93       	push	r27
    34ca:	af 93       	push	r26
    34cc:	4b ad       	ldd	r20, Y+59	; 0x3b
    34ce:	4f 93       	push	r20
    34d0:	5a ad       	ldd	r21, Y+58	; 0x3a
    34d2:	5f 93       	push	r21
    34d4:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    34d8:	d5 01       	movw	r26, r10
    34da:	0d 90       	ld	r0, X+
    34dc:	00 20       	and	r0, r0
    34de:	e9 f7       	brne	.-6      	; 0x34da <main+0x16fa>
    34e0:	11 97       	sbiw	r26, 0x01	; 1
    34e2:	88 e0       	ldi	r24, 0x08	; 8
    34e4:	ed e3       	ldi	r30, 0x3D	; 61
    34e6:	f1 e0       	ldi	r31, 0x01	; 1
    34e8:	01 90       	ld	r0, Z+
    34ea:	0d 92       	st	X+, r0
    34ec:	8a 95       	dec	r24
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <main+0x1708>
	writeLine(4, buf);
    34f0:	b5 01       	movw	r22, r10
    34f2:	84 e0       	ldi	r24, 0x04	; 4
    34f4:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    34f8:	80 91 da 05 	lds	r24, 0x05DA
    34fc:	e0 91 e4 05 	lds	r30, 0x05E4
    3500:	ff 27       	eor	r31, r31
    3502:	e7 fd       	sbrc	r30, 7
    3504:	f0 95       	com	r31
    3506:	e8 0f       	add	r30, r24
    3508:	f1 1d       	adc	r31, r1
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	ec 55       	subi	r30, 0x5C	; 92
    3514:	fe 4f       	sbci	r31, 0xFE	; 254
    3516:	40 80       	ld	r4, Z
    3518:	51 80       	ldd	r5, Z+1	; 0x01
    351a:	62 80       	ldd	r6, Z+2	; 0x02
    351c:	73 80       	ldd	r7, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    351e:	80 91 cb 05 	lds	r24, 0x05CB
    3522:	90 91 c1 05 	lds	r25, 0x05C1
    3526:	e0 91 cc 05 	lds	r30, 0x05CC
    352a:	ff 27       	eor	r31, r31
    352c:	e7 fd       	sbrc	r30, 7
    352e:	f0 95       	com	r31
    3530:	e9 0f       	add	r30, r25
    3532:	f1 1d       	adc	r31, r1
    3534:	9c e0       	ldi	r25, 0x0C	; 12
    3536:	89 02       	muls	r24, r25
    3538:	e0 0d       	add	r30, r0
    353a:	f1 1d       	adc	r31, r1
    353c:	11 24       	eor	r1, r1
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	ec 55       	subi	r30, 0x5C	; 92
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	c0 80       	ld	r12, Z
    354c:	d1 80       	ldd	r13, Z+1	; 0x01
    354e:	e2 80       	ldd	r14, Z+2	; 0x02
    3550:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    3552:	60 91 e5 05 	lds	r22, 0x05E5
    3556:	a7 e2       	ldi	r26, 0x27	; 39
    3558:	6a 02       	muls	r22, r26
    355a:	b0 01       	movw	r22, r0
    355c:	11 24       	eor	r1, r1
    355e:	88 27       	eor	r24, r24
    3560:	77 fd       	sbrc	r23, 7
    3562:	80 95       	com	r24
    3564:	98 2f       	mov	r25, r24
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3566:	a3 01       	movw	r20, r6
    3568:	92 01       	movw	r18, r4
    356a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    356e:	00 e1       	ldi	r16, 0x10	; 16
    3570:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    3574:	21 96       	adiw	r28, 0x01	; 1
    3576:	2f af       	std	Y+63, r18	; 0x3f
    3578:	21 97       	sbiw	r28, 0x01	; 1
    357a:	22 96       	adiw	r28, 0x02	; 2
    357c:	3f af       	std	Y+63, r19	; 0x3f
    357e:	22 97       	sbiw	r28, 0x02	; 2
    3580:	23 96       	adiw	r28, 0x03	; 3
    3582:	4f af       	std	Y+63, r20	; 0x3f
    3584:	23 97       	sbiw	r28, 0x03	; 3
    3586:	24 96       	adiw	r28, 0x04	; 4
    3588:	5f af       	std	Y+63, r21	; 0x3f
    358a:	24 97       	sbiw	r28, 0x04	; 4
    358c:	25 96       	adiw	r28, 0x05	; 5
    358e:	6f af       	std	Y+63, r22	; 0x3f
    3590:	25 97       	sbiw	r28, 0x05	; 5
    3592:	26 96       	adiw	r28, 0x06	; 6
    3594:	7f af       	std	Y+63, r23	; 0x3f
    3596:	26 97       	sbiw	r28, 0x06	; 6
    3598:	27 96       	adiw	r28, 0x07	; 7
    359a:	8f af       	std	Y+63, r24	; 0x3f
    359c:	27 97       	sbiw	r28, 0x07	; 7
    359e:	28 96       	adiw	r28, 0x08	; 8
    35a0:	9f af       	std	Y+63, r25	; 0x3f
    35a2:	28 97       	sbiw	r28, 0x08	; 8
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    35a4:	24 96       	adiw	r28, 0x04	; 4
    35a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    35a8:	9d ad       	ldd	r25, Y+61	; 0x3d
    35aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    35ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    35ae:	24 97       	sbiw	r28, 0x04	; 4
    35b0:	84 0d       	add	r24, r4
    35b2:	95 1d       	adc	r25, r5
    35b4:	a6 1d       	adc	r26, r6
    35b6:	b7 1d       	adc	r27, r7
    35b8:	24 96       	adiw	r28, 0x04	; 4
    35ba:	8c af       	std	Y+60, r24	; 0x3c
    35bc:	9d af       	std	Y+61, r25	; 0x3d
    35be:	ae af       	std	Y+62, r26	; 0x3e
    35c0:	bf af       	std	Y+63, r27	; 0x3f
    35c2:	24 97       	sbiw	r28, 0x04	; 4
    35c4:	80 93 f6 05 	sts	0x05F6, r24
    35c8:	90 93 f7 05 	sts	0x05F7, r25
    35cc:	a0 93 f8 05 	sts	0x05F8, r26
    35d0:	b0 93 f9 05 	sts	0x05F9, r27

	centsConst = 0x27*osc2CentsShift;
    35d4:	20 91 cd 05 	lds	r18, 0x05CD
    35d8:	97 e2       	ldi	r25, 0x27	; 39
    35da:	29 02       	muls	r18, r25
    35dc:	90 01       	movw	r18, r0
    35de:	11 24       	eor	r1, r1
    35e0:	44 27       	eor	r20, r20
    35e2:	37 fd       	sbrc	r19, 7
    35e4:	40 95       	com	r20
    35e6:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    35e8:	c7 01       	movw	r24, r14
    35ea:	b6 01       	movw	r22, r12
    35ec:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    35f0:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    35f4:	29 96       	adiw	r28, 0x09	; 9
    35f6:	2f af       	std	Y+63, r18	; 0x3f
    35f8:	29 97       	sbiw	r28, 0x09	; 9
    35fa:	2a 96       	adiw	r28, 0x0a	; 10
    35fc:	3f af       	std	Y+63, r19	; 0x3f
    35fe:	2a 97       	sbiw	r28, 0x0a	; 10
    3600:	2b 96       	adiw	r28, 0x0b	; 11
    3602:	4f af       	std	Y+63, r20	; 0x3f
    3604:	2b 97       	sbiw	r28, 0x0b	; 11
    3606:	2c 96       	adiw	r28, 0x0c	; 12
    3608:	5f af       	std	Y+63, r21	; 0x3f
    360a:	2c 97       	sbiw	r28, 0x0c	; 12
    360c:	2d 96       	adiw	r28, 0x0d	; 13
    360e:	6f af       	std	Y+63, r22	; 0x3f
    3610:	2d 97       	sbiw	r28, 0x0d	; 13
    3612:	2e 96       	adiw	r28, 0x0e	; 14
    3614:	7f af       	std	Y+63, r23	; 0x3f
    3616:	2e 97       	sbiw	r28, 0x0e	; 14
    3618:	2f 96       	adiw	r28, 0x0f	; 15
    361a:	8f af       	std	Y+63, r24	; 0x3f
    361c:	2f 97       	sbiw	r28, 0x0f	; 15
    361e:	60 96       	adiw	r28, 0x10	; 16
    3620:	9f af       	std	Y+63, r25	; 0x3f
    3622:	60 97       	sbiw	r28, 0x10	; 16

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    3624:	2c 96       	adiw	r28, 0x0c	; 12
    3626:	4c ac       	ldd	r4, Y+60	; 0x3c
    3628:	5d ac       	ldd	r5, Y+61	; 0x3d
    362a:	6e ac       	ldd	r6, Y+62	; 0x3e
    362c:	7f ac       	ldd	r7, Y+63	; 0x3f
    362e:	2c 97       	sbiw	r28, 0x0c	; 12
    3630:	4c 0c       	add	r4, r12
    3632:	5d 1c       	adc	r5, r13
    3634:	6e 1c       	adc	r6, r14
    3636:	7f 1c       	adc	r7, r15
    3638:	40 92 d6 05 	sts	0x05D6, r4
    363c:	50 92 d7 05 	sts	0x05D7, r5
    3640:	60 92 d8 05 	sts	0x05D8, r6
    3644:	70 92 d9 05 	sts	0x05D9, r7

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3648:	c0 90 67 05 	lds	r12, 0x0567
    364c:	d0 90 68 05 	lds	r13, 0x0568
    3650:	e0 90 69 05 	lds	r14, 0x0569
    3654:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3658:	24 96       	adiw	r28, 0x04	; 4
    365a:	6c ad       	ldd	r22, Y+60	; 0x3c
    365c:	7d ad       	ldd	r23, Y+61	; 0x3d
    365e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3660:	9f ad       	ldd	r25, Y+63	; 0x3f
    3662:	24 97       	sbiw	r28, 0x04	; 4
    3664:	a7 01       	movw	r20, r14
    3666:	96 01       	movw	r18, r12
    3668:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    366c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    3670:	c9 01       	movw	r24, r18
    3672:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    3674:	80 93 e6 05 	sts	0x05E6, r24
    3678:	90 93 e7 05 	sts	0x05E7, r25
    367c:	a0 93 e8 05 	sts	0x05E8, r26
    3680:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    3684:	c3 01       	movw	r24, r6
    3686:	b2 01       	movw	r22, r4
    3688:	a7 01       	movw	r20, r14
    368a:	96 01       	movw	r18, r12
    368c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    3690:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    3694:	c9 01       	movw	r24, r18
    3696:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    3698:	80 93 ce 05 	sts	0x05CE, r24
    369c:	90 93 cf 05 	sts	0x05CF, r25
    36a0:	a0 93 d0 05 	sts	0x05D0, r26
    36a4:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    36a8:	60 91 b7 05 	lds	r22, 0x05B7
    36ac:	70 91 b8 05 	lds	r23, 0x05B8
    36b0:	80 91 b9 05 	lds	r24, 0x05B9
    36b4:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    36b8:	a7 01       	movw	r20, r14
    36ba:	96 01       	movw	r18, r12
    36bc:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    36c0:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    36c4:	c9 01       	movw	r24, r18
    36c6:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    36c8:	80 93 bb 05 	sts	0x05BB, r24
    36cc:	90 93 bc 05 	sts	0x05BC, r25
    36d0:	a0 93 bd 05 	sts	0x05BD, r26
    36d4:	b0 93 be 05 	sts	0x05BE, r27
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
					menuKnobPos[MENU_OSC1][1] = adcValue[1];
					osc1MenuCentsUpdate();
					noteUpdate();
				}
			}
			if(menuChange[MENU_OSC1][0] != 0)
    36e4:	80 91 6b 05 	lds	r24, 0x056B
    36e8:	88 23       	and	r24, r24
    36ea:	11 f4       	brne	.+4      	; 0x36f0 <main+0x1910>
    36ec:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
			{
				if(adcValue[0] < 512)
    36f0:	80 91 02 06 	lds	r24, 0x0602
    36f4:	90 91 03 06 	lds	r25, 0x0603
    36f8:	81 15       	cp	r24, r1
    36fa:	a2 e0       	ldi	r26, 0x02	; 2
    36fc:	9a 07       	cpc	r25, r26
    36fe:	0c f0       	brlt	.+2      	; 0x3702 <main+0x1922>
    3700:	89 c2       	rjmp	.+1298   	; 0x3c14 <main+0x1e34>
				{
					if(osc1NoteSync != false)
    3702:	80 91 dc 05 	lds	r24, 0x05DC
    3706:	88 23       	and	r24, r24
    3708:	11 f4       	brne	.+4      	; 0x370e <main+0x192e>
    370a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc1NoteSync = false;
    370e:	10 92 dc 05 	sts	0x05DC, r1

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3712:	87 e0       	ldi	r24, 0x07	; 7
    3714:	ee e2       	ldi	r30, 0x2E	; 46
    3716:	f1 e0       	ldi	r31, 0x01	; 1
    3718:	d5 01       	movw	r26, r10
    371a:	01 90       	ld	r0, Z+
    371c:	0d 92       	st	X+, r0
    371e:	8a 95       	dec	r24
    3720:	e1 f7       	brne	.-8      	; 0x371a <main+0x193a>
	if(osc1NoteSync != false)
    3722:	80 91 dc 05 	lds	r24, 0x05DC
    3726:	81 11       	cpse	r24, r1
    3728:	f9 c5       	rjmp	.+3058   	; 0x431c <main+0x253c>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    372a:	8f e4       	ldi	r24, 0x4F	; 79
    372c:	96 e4       	ldi	r25, 0x46	; 70
    372e:	a6 e4       	ldi	r26, 0x46	; 70
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	8f 83       	std	Y+7, r24	; 0x07
    3734:	98 87       	std	Y+8, r25	; 0x08
    3736:	a9 87       	std	Y+9, r26	; 0x09
    3738:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    373a:	d5 01       	movw	r26, r10
    373c:	0d 90       	ld	r0, X+
    373e:	00 20       	and	r0, r0
    3740:	e9 f7       	brne	.-6      	; 0x373c <main+0x195c>
    3742:	11 97       	sbiw	r26, 0x01	; 1
    3744:	88 e0       	ldi	r24, 0x08	; 8
    3746:	ed e3       	ldi	r30, 0x3D	; 61
    3748:	f1 e0       	ldi	r31, 0x01	; 1
    374a:	01 90       	ld	r0, Z+
    374c:	0d 92       	st	X+, r0
    374e:	8a 95       	dec	r24
    3750:	e1 f7       	brne	.-8      	; 0x374a <main+0x196a>
	writeLine(5, buf);
    3752:	b5 01       	movw	r22, r10
    3754:	85 e0       	ldi	r24, 0x05	; 5
    3756:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    375a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    375e:	80 91 fe 05 	lds	r24, 0x05FE
    3762:	88 23       	and	r24, r24
    3764:	d9 f0       	breq	.+54     	; 0x379c <main+0x19bc>
    3766:	80 91 93 05 	lds	r24, 0x0593
    376a:	90 91 94 05 	lds	r25, 0x0594
    376e:	20 91 02 06 	lds	r18, 0x0602
    3772:	30 91 03 06 	lds	r19, 0x0603
    3776:	ac 01       	movw	r20, r24
    3778:	47 5f       	subi	r20, 0xF7	; 247
    377a:	5f 4f       	sbci	r21, 0xFF	; 255
    377c:	42 17       	cp	r20, r18
    377e:	53 07       	cpc	r21, r19
    3780:	6c f0       	brlt	.+26     	; 0x379c <main+0x19bc>
    3782:	8b 30       	cpi	r24, 0x0B	; 11
    3784:	91 05       	cpc	r25, r1
    3786:	0c f4       	brge	.+2      	; 0x378a <main+0x19aa>
    3788:	d5 c4       	rjmp	.+2474   	; 0x4134 <main+0x2354>
    378a:	0a 97       	sbiw	r24, 0x0a	; 10
    378c:	82 17       	cp	r24, r18
    378e:	93 07       	cpc	r25, r19
    3790:	2c f4       	brge	.+10     	; 0x379c <main+0x19bc>
			{
				menuChange[MENU_LFO][0] = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	80 93 73 05 	sts	0x0573, r24
				updateADC[0] = false;
    3798:	10 92 fe 05 	sts	0x05FE, r1
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    379c:	80 91 ff 05 	lds	r24, 0x05FF
    37a0:	88 23       	and	r24, r24
    37a2:	d9 f0       	breq	.+54     	; 0x37da <main+0x19fa>
    37a4:	80 91 95 05 	lds	r24, 0x0595
    37a8:	90 91 96 05 	lds	r25, 0x0596
    37ac:	20 91 04 06 	lds	r18, 0x0604
    37b0:	30 91 05 06 	lds	r19, 0x0605
    37b4:	ac 01       	movw	r20, r24
    37b6:	47 5f       	subi	r20, 0xF7	; 247
    37b8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ba:	42 17       	cp	r20, r18
    37bc:	53 07       	cpc	r21, r19
    37be:	6c f0       	brlt	.+26     	; 0x37da <main+0x19fa>
    37c0:	8b 30       	cpi	r24, 0x0B	; 11
    37c2:	91 05       	cpc	r25, r1
    37c4:	0c f4       	brge	.+2      	; 0x37c8 <main+0x19e8>
    37c6:	ca c4       	rjmp	.+2452   	; 0x415c <main+0x237c>
    37c8:	0a 97       	sbiw	r24, 0x0a	; 10
    37ca:	82 17       	cp	r24, r18
    37cc:	93 07       	cpc	r25, r19
    37ce:	2c f4       	brge	.+10     	; 0x37da <main+0x19fa>
			{
				menuChange[MENU_LFO][1] = 1;
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	80 93 74 05 	sts	0x0574, r24
				updateADC[1] = false;
    37d6:	10 92 ff 05 	sts	0x05FF, r1
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    37da:	80 91 00 06 	lds	r24, 0x0600
    37de:	88 23       	and	r24, r24
    37e0:	d9 f0       	breq	.+54     	; 0x3818 <main+0x1a38>
    37e2:	80 91 97 05 	lds	r24, 0x0597
    37e6:	90 91 98 05 	lds	r25, 0x0598
    37ea:	20 91 06 06 	lds	r18, 0x0606
    37ee:	30 91 07 06 	lds	r19, 0x0607
    37f2:	ac 01       	movw	r20, r24
    37f4:	47 5f       	subi	r20, 0xF7	; 247
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255
    37f8:	42 17       	cp	r20, r18
    37fa:	53 07       	cpc	r21, r19
    37fc:	6c f0       	brlt	.+26     	; 0x3818 <main+0x1a38>
    37fe:	8b 30       	cpi	r24, 0x0B	; 11
    3800:	91 05       	cpc	r25, r1
    3802:	0c f4       	brge	.+2      	; 0x3806 <main+0x1a26>
    3804:	e5 c4       	rjmp	.+2506   	; 0x41d0 <main+0x23f0>
    3806:	0a 97       	sbiw	r24, 0x0a	; 10
    3808:	82 17       	cp	r24, r18
    380a:	93 07       	cpc	r25, r19
    380c:	2c f4       	brge	.+10     	; 0x3818 <main+0x1a38>
			{
				menuChange[MENU_LFO][2] = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	80 93 75 05 	sts	0x0575, r24
				updateADC[2] = false;
    3814:	10 92 00 06 	sts	0x0600, r1
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    3818:	80 91 01 06 	lds	r24, 0x0601
    381c:	88 23       	and	r24, r24
    381e:	09 f4       	brne	.+2      	; 0x3822 <main+0x1a42>
    3820:	33 c1       	rjmp	.+614    	; 0x3a88 <main+0x1ca8>
    3822:	20 91 99 05 	lds	r18, 0x0599
    3826:	30 91 9a 05 	lds	r19, 0x059A
    382a:	80 91 08 06 	lds	r24, 0x0608
    382e:	90 91 09 06 	lds	r25, 0x0609
    3832:	a9 01       	movw	r20, r18
    3834:	47 5f       	subi	r20, 0xF7	; 247
    3836:	5f 4f       	sbci	r21, 0xFF	; 255
    3838:	48 17       	cp	r20, r24
    383a:	59 07       	cpc	r21, r25
    383c:	0c f4       	brge	.+2      	; 0x3840 <main+0x1a60>
    383e:	24 c1       	rjmp	.+584    	; 0x3a88 <main+0x1ca8>
    3840:	2b 30       	cpi	r18, 0x0B	; 11
    3842:	31 05       	cpc	r19, r1
    3844:	0c f4       	brge	.+2      	; 0x3848 <main+0x1a68>
    3846:	51 c4       	rjmp	.+2210   	; 0x40ea <main+0x230a>
    3848:	2a 50       	subi	r18, 0x0A	; 10
    384a:	31 09       	sbc	r19, r1
    384c:	28 17       	cp	r18, r24
    384e:	39 07       	cpc	r19, r25
    3850:	0c f0       	brlt	.+2      	; 0x3854 <main+0x1a74>
    3852:	1a c1       	rjmp	.+564    	; 0x3a88 <main+0x1ca8>
			{
				menuChange[MENU_LFO][3] = 1;
    3854:	21 e0       	ldi	r18, 0x01	; 1
    3856:	20 93 76 05 	sts	0x0576, r18
				updateADC[3] = false;
    385a:	10 92 01 06 	sts	0x0601, r1
			}
						
			if(menuChange[MENU_LFO][3] != 0)
			{
				if(adcValue[3] < 171)
    385e:	8b 3a       	cpi	r24, 0xAB	; 171
    3860:	91 05       	cpc	r25, r1
    3862:	0c f0       	brlt	.+2      	; 0x3866 <main+0x1a86>
    3864:	1e c1       	rjmp	.+572    	; 0x3aa2 <main+0x1cc2>
				{
					if(lfoWaveForm != WAVE_SINE)
    3866:	80 91 04 01 	lds	r24, 0x0104
    386a:	81 11       	cpse	r24, r1
    386c:	02 c5       	rjmp	.+2564   	; 0x4272 <main+0x2492>
						menuKnobPos[MENU_LFO][3] = 852 + 85;
						lfoMenuWaveformUpdate();
					}
				}
			}
			if(menuChange[MENU_LFO][2] != 0)
    386e:	80 91 75 05 	lds	r24, 0x0575
    3872:	88 23       	and	r24, r24
    3874:	09 f4       	brne	.+2      	; 0x3878 <main+0x1a98>
    3876:	40 c0       	rjmp	.+128    	; 0x38f8 <main+0x1b18>
			{
				if((adcValue[2] >> 2) != lfoPrintFreq)
    3878:	20 91 06 06 	lds	r18, 0x0606
    387c:	30 91 07 06 	lds	r19, 0x0607
    3880:	c9 01       	movw	r24, r18
    3882:	95 95       	asr	r25
    3884:	87 95       	ror	r24
    3886:	95 95       	asr	r25
    3888:	87 95       	ror	r24
    388a:	40 91 b5 05 	lds	r20, 0x05B5
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	84 17       	cp	r24, r20
    3892:	95 07       	cpc	r25, r21
    3894:	89 f1       	breq	.+98     	; 0x38f8 <main+0x1b18>
				{
					lfoPrintFreq = adcValue[2] >> 2;
    3896:	80 93 b5 05 	sts	0x05B5, r24
					menuKnobPos[MENU_LFO][2] = adcValue[2];
    389a:	30 93 98 05 	sts	0x0598, r19
    389e:	20 93 97 05 	sts	0x0597, r18

inline void lfoMenuFrequencyUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", frequencyLine);
    38a2:	27 e0       	ldi	r18, 0x07	; 7
    38a4:	e5 e6       	ldi	r30, 0x65	; 101
    38a6:	f1 e0       	ldi	r31, 0x01	; 1
    38a8:	d5 01       	movw	r26, r10
    38aa:	01 90       	ld	r0, Z+
    38ac:	0d 92       	st	X+, r0
    38ae:	2a 95       	dec	r18
    38b0:	e1 f7       	brne	.-8      	; 0x38aa <main+0x1aca>
	sprintf(buf + 6, "%d", lfoPrintFreq);
    38b2:	99 27       	eor	r25, r25
    38b4:	9f 93       	push	r25
    38b6:	8f 93       	push	r24
    38b8:	a7 e0       	ldi	r26, 0x07	; 7
    38ba:	b1 e0       	ldi	r27, 0x01	; 1
    38bc:	bf 93       	push	r27
    38be:	af 93       	push	r26
    38c0:	49 ad       	ldd	r20, Y+57	; 0x39
    38c2:	4f 93       	push	r20
    38c4:	58 ad       	ldd	r21, Y+56	; 0x38
    38c6:	5f 93       	push	r21
    38c8:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    38cc:	d5 01       	movw	r26, r10
    38ce:	0d 90       	ld	r0, X+
    38d0:	00 20       	and	r0, r0
    38d2:	e9 f7       	brne	.-6      	; 0x38ce <main+0x1aee>
    38d4:	11 97       	sbiw	r26, 0x01	; 1
    38d6:	e0 e4       	ldi	r30, 0x40	; 64
    38d8:	f1 e0       	ldi	r31, 0x01	; 1
    38da:	82 2d       	mov	r24, r2
    38dc:	01 90       	ld	r0, Z+
    38de:	0d 92       	st	X+, r0
    38e0:	8a 95       	dec	r24
    38e2:	e1 f7       	brne	.-8      	; 0x38dc <main+0x1afc>
	writeLine(3, buf);
    38e4:	b5 01       	movw	r22, r10
    38e6:	83 e0       	ldi	r24, 0x03	; 3
    38e8:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
					lfoPrintFreq = adcValue[2] >> 2;
					menuKnobPos[MENU_LFO][2] = adcValue[2];
					lfoMenuFrequencyUpdate();
				}
			}
			if(menuChange[MENU_LFO][1] != 0)
    38f8:	80 91 74 05 	lds	r24, 0x0574
    38fc:	88 23       	and	r24, r24
    38fe:	09 f4       	brne	.+2      	; 0x3902 <main+0x1b22>
    3900:	40 c0       	rjmp	.+128    	; 0x3982 <main+0x1ba2>
			{
				if((adcValue[1] >> 2) != lfoDepth)
    3902:	20 91 04 06 	lds	r18, 0x0604
    3906:	30 91 05 06 	lds	r19, 0x0605
    390a:	c9 01       	movw	r24, r18
    390c:	95 95       	asr	r25
    390e:	87 95       	ror	r24
    3910:	95 95       	asr	r25
    3912:	87 95       	ror	r24
    3914:	40 91 b4 05 	lds	r20, 0x05B4
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	84 17       	cp	r24, r20
    391c:	95 07       	cpc	r25, r21
    391e:	89 f1       	breq	.+98     	; 0x3982 <main+0x1ba2>
				{
					lfoDepth = adcValue[1] >> 2;
    3920:	80 93 b4 05 	sts	0x05B4, r24
					menuKnobPos[MENU_LFO][1] = adcValue[1];
    3924:	30 93 96 05 	sts	0x0596, r19
    3928:	20 93 95 05 	sts	0x0595, r18

inline void lfoMenuDepthUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", depthLine);
    392c:	27 e0       	ldi	r18, 0x07	; 7
    392e:	ec e6       	ldi	r30, 0x6C	; 108
    3930:	f1 e0       	ldi	r31, 0x01	; 1
    3932:	d5 01       	movw	r26, r10
    3934:	01 90       	ld	r0, Z+
    3936:	0d 92       	st	X+, r0
    3938:	2a 95       	dec	r18
    393a:	e1 f7       	brne	.-8      	; 0x3934 <main+0x1b54>
	sprintf(buf + 6, "%d", lfoDepth);
    393c:	99 27       	eor	r25, r25
    393e:	9f 93       	push	r25
    3940:	8f 93       	push	r24
    3942:	a7 e0       	ldi	r26, 0x07	; 7
    3944:	b1 e0       	ldi	r27, 0x01	; 1
    3946:	bf 93       	push	r27
    3948:	af 93       	push	r26
    394a:	49 ad       	ldd	r20, Y+57	; 0x39
    394c:	4f 93       	push	r20
    394e:	58 ad       	ldd	r21, Y+56	; 0x38
    3950:	5f 93       	push	r21
    3952:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "    ");
    3956:	d5 01       	movw	r26, r10
    3958:	0d 90       	ld	r0, X+
    395a:	00 20       	and	r0, r0
    395c:	e9 f7       	brne	.-6      	; 0x3958 <main+0x1b78>
    395e:	11 97       	sbiw	r26, 0x01	; 1
    3960:	e0 e4       	ldi	r30, 0x40	; 64
    3962:	f1 e0       	ldi	r31, 0x01	; 1
    3964:	82 2d       	mov	r24, r2
    3966:	01 90       	ld	r0, Z+
    3968:	0d 92       	st	X+, r0
    396a:	8a 95       	dec	r24
    396c:	e1 f7       	brne	.-8      	; 0x3966 <main+0x1b86>
	writeLine(4, buf);
    396e:	b5 01       	movw	r22, r10
    3970:	84 e0       	ldi	r24, 0x04	; 4
    3972:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
					lfoDepth = adcValue[1] >> 2;
					menuKnobPos[MENU_LFO][1] = adcValue[1];
					lfoMenuDepthUpdate();
				}
			}
			if(menuChange[MENU_LFO][0] != 0)
    3982:	80 91 73 05 	lds	r24, 0x0573
    3986:	88 23       	and	r24, r24
    3988:	11 f4       	brne	.+4      	; 0x398e <main+0x1bae>
    398a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
			{
				if(adcValue[0] < 93)
    398e:	80 91 02 06 	lds	r24, 0x0602
    3992:	90 91 03 06 	lds	r25, 0x0603
    3996:	8d 35       	cpi	r24, 0x5D	; 93
    3998:	91 05       	cpc	r25, r1
    399a:	0c f0       	brlt	.+2      	; 0x399e <main+0x1bbe>
    399c:	23 c1       	rjmp	.+582    	; 0x3be4 <main+0x1e04>
				{
					if(lfoRoute != ROUTE_OSC1)
    399e:	80 91 b6 05 	lds	r24, 0x05B6
    39a2:	88 23       	and	r24, r24
    39a4:	11 f4       	brne	.+4      	; 0x39aa <main+0x1bca>
    39a6:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_OSC1;
    39aa:	10 92 b6 05 	sts	0x05B6, r1

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    39ae:	87 e0       	ldi	r24, 0x07	; 7
    39b0:	e5 e3       	ldi	r30, 0x35	; 53
    39b2:	f1 e0       	ldi	r31, 0x01	; 1
    39b4:	d5 01       	movw	r26, r10
    39b6:	01 90       	ld	r0, Z+
    39b8:	0d 92       	st	X+, r0
    39ba:	8a 95       	dec	r24
    39bc:	e1 f7       	brne	.-8      	; 0x39b6 <main+0x1bd6>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    39be:	e8 e6       	ldi	r30, 0x68	; 104
    39c0:	f6 e0       	ldi	r31, 0x06	; 6
    39c2:	65 91       	lpm	r22, Z+
    39c4:	74 91       	lpm	r23, Z
    39c6:	54 01       	movw	r10, r8
    39c8:	81 2f       	mov	r24, r17
    39ca:	93 2d       	mov	r25, r3
    39cc:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "    ");
    39d0:	d4 01       	movw	r26, r8
    39d2:	0d 90       	ld	r0, X+
    39d4:	00 20       	and	r0, r0
    39d6:	e9 f7       	brne	.-6      	; 0x39d2 <main+0x1bf2>
    39d8:	11 97       	sbiw	r26, 0x01	; 1
    39da:	e0 e4       	ldi	r30, 0x40	; 64
    39dc:	f1 e0       	ldi	r31, 0x01	; 1
    39de:	82 2d       	mov	r24, r2
    39e0:	01 90       	ld	r0, Z+
    39e2:	0d 92       	st	X+, r0
    39e4:	8a 95       	dec	r24
    39e6:	e1 f7       	brne	.-8      	; 0x39e0 <main+0x1c00>
	writeLine(5, buf);
    39e8:	61 2f       	mov	r22, r17
    39ea:	73 2d       	mov	r23, r3
    39ec:	85 e0       	ldi	r24, 0x05	; 5
    39ee:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    39f2:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
			{
				menuChange[MENU_OSC2][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC2][3] != 0)
    39f6:	80 91 72 05 	lds	r24, 0x0572
    39fa:	88 23       	and	r24, r24
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <main+0x1c20>
    39fe:	84 c9       	rjmp	.-3320   	; 0x2d08 <main+0xf28>
    3a00:	80 91 08 06 	lds	r24, 0x0608
    3a04:	90 91 09 06 	lds	r25, 0x0609
			{
				if(adcValue[3] < 146)
    3a08:	82 39       	cpi	r24, 0x92	; 146
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	0c f4       	brge	.+2      	; 0x3a10 <main+0x1c30>
    3a0e:	77 c9       	rjmp	.-3346   	; 0x2cfe <main+0xf1e>
						osc2WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC2][3] = 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    3a10:	84 32       	cpi	r24, 0x24	; 36
    3a12:	a1 e0       	ldi	r26, 0x01	; 1
    3a14:	9a 07       	cpc	r25, r26
    3a16:	0c f0       	brlt	.+2      	; 0x3a1a <main+0x1c3a>
    3a18:	90 c3       	rjmp	.+1824   	; 0x413a <main+0x235a>
				{
					if(osc2WaveForm != WAVE_TRI)
    3a1a:	80 91 02 01 	lds	r24, 0x0102
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <main+0x1c44>
    3a22:	72 c9       	rjmp	.-3356   	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_TRI;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 219;
    3a2a:	8b ed       	ldi	r24, 0xDB	; 219
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc2WaveForm != WAVE_FLAT)
					{
						osc2WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    3a2e:	90 93 92 05 	sts	0x0592, r25
    3a32:	80 93 91 05 	sts	0x0591, r24

inline void osc2MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3a36:	87 e0       	ldi	r24, 0x07	; 7
    3a38:	e7 e1       	ldi	r30, 0x17	; 23
    3a3a:	f1 e0       	ldi	r31, 0x01	; 1
    3a3c:	d5 01       	movw	r26, r10
    3a3e:	01 90       	ld	r0, Z+
    3a40:	0d 92       	st	X+, r0
    3a42:	8a 95       	dec	r24
    3a44:	e1 f7       	brne	.-8      	; 0x3a3e <main+0x1c5e>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc2WaveForm]));
    3a46:	80 91 02 01 	lds	r24, 0x0102
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	80 58       	subi	r24, 0x80	; 128
    3a52:	99 4f       	sbci	r25, 0xF9	; 249
    3a54:	fc 01       	movw	r30, r24
    3a56:	65 91       	lpm	r22, Z+
    3a58:	74 91       	lpm	r23, Z
    3a5a:	54 01       	movw	r10, r8
    3a5c:	81 2f       	mov	r24, r17
    3a5e:	93 2d       	mov	r25, r3
    3a60:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "       ");
    3a64:	d4 01       	movw	r26, r8
    3a66:	0d 90       	ld	r0, X+
    3a68:	00 20       	and	r0, r0
    3a6a:	e9 f7       	brne	.-6      	; 0x3a66 <main+0x1c86>
    3a6c:	11 97       	sbiw	r26, 0x01	; 1
    3a6e:	88 e0       	ldi	r24, 0x08	; 8
    3a70:	ed e3       	ldi	r30, 0x3D	; 61
    3a72:	f1 e0       	ldi	r31, 0x01	; 1
    3a74:	01 90       	ld	r0, Z+
    3a76:	0d 92       	st	X+, r0
    3a78:	8a 95       	dec	r24
    3a7a:	e1 f7       	brne	.-8      	; 0x3a74 <main+0x1c94>
	writeLine(2, buf);	
    3a7c:	61 2f       	mov	r22, r17
    3a7e:	73 2d       	mov	r23, r3
    3a80:	82 e0       	ldi	r24, 0x02	; 2
    3a82:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3a86:	40 c9       	rjmp	.-3456   	; 0x2d08 <main+0xf28>
			{
				menuChange[MENU_LFO][3] = 1;
				updateADC[3] = false;
			}
						
			if(menuChange[MENU_LFO][3] != 0)
    3a88:	80 91 76 05 	lds	r24, 0x0576
    3a8c:	88 23       	and	r24, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <main+0x1cb2>
    3a90:	ee ce       	rjmp	.-548    	; 0x386e <main+0x1a8e>
    3a92:	80 91 08 06 	lds	r24, 0x0608
    3a96:	90 91 09 06 	lds	r25, 0x0609
			{
				if(adcValue[3] < 171)
    3a9a:	8b 3a       	cpi	r24, 0xAB	; 171
    3a9c:	91 05       	cpc	r25, r1
    3a9e:	0c f4       	brge	.+2      	; 0x3aa2 <main+0x1cc2>
    3aa0:	e2 ce       	rjmp	.-572    	; 0x3866 <main+0x1a86>
						lfoWaveForm = WAVE_SINE;
						menuKnobPos[MENU_LFO][3] = 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 341)
    3aa2:	85 35       	cpi	r24, 0x55	; 85
    3aa4:	a1 e0       	ldi	r26, 0x01	; 1
    3aa6:	9a 07       	cpc	r25, r26
    3aa8:	0c f0       	brlt	.+2      	; 0x3aac <main+0x1ccc>
    3aaa:	f1 c2       	rjmp	.+1506   	; 0x408e <main+0x22ae>
				{
					if(lfoWaveForm != WAVE_TRI)
    3aac:	80 91 04 01 	lds	r24, 0x0104
    3ab0:	81 30       	cpi	r24, 0x01	; 1
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <main+0x1cd6>
    3ab4:	dc ce       	rjmp	.-584    	; 0x386e <main+0x1a8e>
					{
						lfoWaveForm = WAVE_TRI;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 171 + 85;
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	91 e0       	ldi	r25, 0x01	; 1
    3ac0:	90 93 9a 05 	sts	0x059A, r25
    3ac4:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3ac8:	87 e0       	ldi	r24, 0x07	; 7
    3aca:	e7 e1       	ldi	r30, 0x17	; 23
    3acc:	f1 e0       	ldi	r31, 0x01	; 1
    3ace:	d5 01       	movw	r26, r10
    3ad0:	01 90       	ld	r0, Z+
    3ad2:	0d 92       	st	X+, r0
    3ad4:	8a 95       	dec	r24
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <main+0x1cf0>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    3ad8:	e2 e8       	ldi	r30, 0x82	; 130
    3ada:	f6 e0       	ldi	r31, 0x06	; 6
    3adc:	65 91       	lpm	r22, Z+
    3ade:	74 91       	lpm	r23, Z
    3ae0:	54 01       	movw	r10, r8
    3ae2:	81 2f       	mov	r24, r17
    3ae4:	93 2d       	mov	r25, r3
    3ae6:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "    ");
    3aea:	d4 01       	movw	r26, r8
    3aec:	0d 90       	ld	r0, X+
    3aee:	00 20       	and	r0, r0
    3af0:	e9 f7       	brne	.-6      	; 0x3aec <main+0x1d0c>
    3af2:	11 97       	sbiw	r26, 0x01	; 1
    3af4:	e0 e4       	ldi	r30, 0x40	; 64
    3af6:	f1 e0       	ldi	r31, 0x01	; 1
    3af8:	82 2d       	mov	r24, r2
    3afa:	01 90       	ld	r0, Z+
    3afc:	0d 92       	st	X+, r0
    3afe:	8a 95       	dec	r24
    3b00:	e1 f7       	brne	.-8      	; 0x3afa <main+0x1d1a>
	writeLine(2, buf);
    3b02:	61 2f       	mov	r22, r17
    3b04:	73 2d       	mov	r23, r3
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3b0c:	b0 ce       	rjmp	.-672    	; 0x386e <main+0x1a8e>
			{
				menuChange[MENU_OSC1][3] = 1;
				updateADC[3] = false;
			}
			
			if(menuChange[MENU_OSC1][3] != 0)
    3b0e:	80 91 6e 05 	lds	r24, 0x056E
    3b12:	88 23       	and	r24, r24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <main+0x1d38>
    3b16:	68 cb       	rjmp	.-2352   	; 0x31e8 <main+0x1408>
    3b18:	80 91 08 06 	lds	r24, 0x0608
    3b1c:	90 91 09 06 	lds	r25, 0x0609
			{
				if(adcValue[3] < 146)
    3b20:	82 39       	cpi	r24, 0x92	; 146
    3b22:	91 05       	cpc	r25, r1
    3b24:	0c f4       	brge	.+2      	; 0x3b28 <main+0x1d48>
    3b26:	5b cb       	rjmp	.-2378   	; 0x31de <main+0x13fe>
						osc1WaveForm = WAVE_SINE;
						menuKnobPos[MENU_OSC1][3] = 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 292)
    3b28:	84 32       	cpi	r24, 0x24	; 36
    3b2a:	a1 e0       	ldi	r26, 0x01	; 1
    3b2c:	9a 07       	cpc	r25, r26
    3b2e:	0c f0       	brlt	.+2      	; 0x3b32 <main+0x1d52>
    3b30:	3f c3       	rjmp	.+1662   	; 0x41b0 <main+0x23d0>
				{
					if(osc1WaveForm != WAVE_TRI)
    3b32:	80 91 03 01 	lds	r24, 0x0103
    3b36:	81 30       	cpi	r24, 0x01	; 1
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <main+0x1d5c>
    3b3a:	56 cb       	rjmp	.-2388   	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_TRI;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 219;
    3b42:	8b ed       	ldi	r24, 0xDB	; 219
    3b44:	90 e0       	ldi	r25, 0x00	; 0
				else if(adcValue[3] < 1023)
				{
					if(osc1WaveForm != WAVE_FLAT)
					{
						osc1WaveForm = WAVE_FLAT;
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    3b46:	90 93 8a 05 	sts	0x058A, r25
    3b4a:	80 93 89 05 	sts	0x0589, r24

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3b4e:	87 e0       	ldi	r24, 0x07	; 7
    3b50:	e7 e1       	ldi	r30, 0x17	; 23
    3b52:	f1 e0       	ldi	r31, 0x01	; 1
    3b54:	d5 01       	movw	r26, r10
    3b56:	01 90       	ld	r0, Z+
    3b58:	0d 92       	st	X+, r0
    3b5a:	8a 95       	dec	r24
    3b5c:	e1 f7       	brne	.-8      	; 0x3b56 <main+0x1d76>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3b5e:	80 91 03 01 	lds	r24, 0x0103
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	80 58       	subi	r24, 0x80	; 128
    3b6a:	99 4f       	sbci	r25, 0xF9	; 249
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	65 91       	lpm	r22, Z+
    3b70:	74 91       	lpm	r23, Z
    3b72:	54 01       	movw	r10, r8
    3b74:	81 2f       	mov	r24, r17
    3b76:	93 2d       	mov	r25, r3
    3b78:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "       ");
    3b7c:	d4 01       	movw	r26, r8
    3b7e:	0d 90       	ld	r0, X+
    3b80:	00 20       	and	r0, r0
    3b82:	e9 f7       	brne	.-6      	; 0x3b7e <main+0x1d9e>
    3b84:	11 97       	sbiw	r26, 0x01	; 1
    3b86:	88 e0       	ldi	r24, 0x08	; 8
    3b88:	ed e3       	ldi	r30, 0x3D	; 61
    3b8a:	f1 e0       	ldi	r31, 0x01	; 1
    3b8c:	01 90       	ld	r0, Z+
    3b8e:	0d 92       	st	X+, r0
    3b90:	8a 95       	dec	r24
    3b92:	e1 f7       	brne	.-8      	; 0x3b8c <main+0x1dac>
	writeLine(2, buf);	
    3b94:	61 2f       	mov	r22, r17
    3b96:	73 2d       	mov	r23, r3
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3b9e:	24 cb       	rjmp	.-2488   	; 0x31e8 <main+0x1408>
			{
				menuChange[MENU_MIX][3] = 1;
				updateADC[3] = false;
			}

			if(menuChange[MENU_MIX][3] != 0)
    3ba0:	80 91 7a 05 	lds	r24, 0x057A
    3ba4:	88 23       	and	r24, r24
    3ba6:	11 f4       	brne	.+4      	; 0x3bac <main+0x1dcc>
    3ba8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <main+0xa9a>
    3bac:	80 91 08 06 	lds	r24, 0x0608
    3bb0:	90 91 09 06 	lds	r25, 0x0609
    3bb4:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <main+0x9ce>
		{
			if(btnPressed[MENU_OSC2])
			btnPressed[MENU_OSC2] = false;
					
			if(!btnCanPress[MENU_OSC2])
			btnLastPressed[MENU_OSC2]++;
    3bb8:	90 91 f4 04 	lds	r25, 0x04F4
    3bbc:	9f 5f       	subi	r25, 0xFF	; 255
    3bbe:	90 93 f4 04 	sts	0x04F4, r25
    3bc2:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <main+0xdcc>
				if(adcValue[1] > 512 && osc2Sync != true)
				{
					osc2Sync = true;
					mixerMenuOsc2SyncUpdate();
				}
				else if(adcValue[1] < 512 && osc2Sync != false)
    3bc6:	81 15       	cp	r24, r1
    3bc8:	92 40       	sbci	r25, 0x02	; 2
    3bca:	14 f0       	brlt	.+4      	; 0x3bd0 <main+0x1df0>
    3bcc:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <main+0xb0e>
    3bd0:	80 91 c2 05 	lds	r24, 0x05C2
    3bd4:	88 23       	and	r24, r24
    3bd6:	11 f4       	brne	.+4      	; 0x3bdc <main+0x1dfc>
    3bd8:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <main+0xb0e>
				{
					osc2Sync = false;
    3bdc:	10 92 c2 05 	sts	0x05C2, r1
    3be0:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <main+0xac4>
					{
						lfoRoute = ROUTE_OSC1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 186)
    3be4:	8a 3b       	cpi	r24, 0xBA	; 186
    3be6:	91 05       	cpc	r25, r1
    3be8:	0c f0       	brlt	.+2      	; 0x3bec <main+0x1e0c>
    3bea:	8b c2       	rjmp	.+1302   	; 0x4102 <main+0x2322>
				{
					if(lfoRoute != ROUTE_OSC2)
    3bec:	80 91 b6 05 	lds	r24, 0x05B6
    3bf0:	81 30       	cpi	r24, 0x01	; 1
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <main+0x1e18>
    3bf4:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_OSC2;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    3bfe:	87 e0       	ldi	r24, 0x07	; 7
    3c00:	e5 e3       	ldi	r30, 0x35	; 53
    3c02:	f1 e0       	ldi	r31, 0x01	; 1
    3c04:	d5 01       	movw	r26, r10
    3c06:	01 90       	ld	r0, Z+
    3c08:	0d 92       	st	X+, r0
    3c0a:	8a 95       	dec	r24
    3c0c:	e1 f7       	brne	.-8      	; 0x3c06 <main+0x1e26>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    3c0e:	ea e6       	ldi	r30, 0x6A	; 106
    3c10:	f6 e0       	ldi	r31, 0x06	; 6
    3c12:	d7 ce       	rjmp	.-594    	; 0x39c2 <main+0x1be2>
					{
						osc1NoteSync = false;
						osc1MenuSyncUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    3c14:	8f 3f       	cpi	r24, 0xFF	; 255
    3c16:	93 40       	sbci	r25, 0x03	; 3
    3c18:	14 f0       	brlt	.+4      	; 0x3c1e <main+0x1e3e>
    3c1a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
				{
					if(osc1NoteSync != true)
    3c1e:	80 91 dc 05 	lds	r24, 0x05DC
    3c22:	81 11       	cpse	r24, r1
    3c24:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc1NoteSync = true;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	80 93 dc 05 	sts	0x05DC, r24
    3c2e:	71 cd       	rjmp	.-1310   	; 0x3712 <main+0x1932>
						osc2OctaveShift = -2;
						menuKnobPos[MENU_OSC2][0] = 102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 410)
    3c30:	8a 39       	cpi	r24, 0x9A	; 154
    3c32:	a1 e0       	ldi	r26, 0x01	; 1
    3c34:	9a 07       	cpc	r25, r26
    3c36:	0c f0       	brlt	.+2      	; 0x3c3a <main+0x1e5a>
    3c38:	9c c2       	rjmp	.+1336   	; 0x4172 <main+0x2392>
				{
					if(osc2OctaveShift != -1)
    3c3a:	80 91 cb 05 	lds	r24, 0x05CB
    3c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c40:	11 f4       	brne	.+4      	; 0x3c46 <main+0x1e66>
    3c42:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc2OctaveShift = -1;
    3c46:	2f ef       	ldi	r18, 0xFF	; 255
    3c48:	20 93 cb 05 	sts	0x05CB, r18
						menuKnobPos[MENU_OSC2][0] = 205+102;
    3c4c:	83 e3       	ldi	r24, 0x33	; 51
    3c4e:	91 e0       	ldi	r25, 0x01	; 1
    3c50:	90 93 8c 05 	sts	0x058C, r25
    3c54:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    3c58:	86 e0       	ldi	r24, 0x06	; 6
    3c5a:	e2 e5       	ldi	r30, 0x52	; 82
    3c5c:	f1 e0       	ldi	r31, 0x01	; 1
    3c5e:	d5 01       	movw	r26, r10
    3c60:	01 90       	ld	r0, Z+
    3c62:	0d 92       	st	X+, r0
    3c64:	8a 95       	dec	r24
    3c66:	e1 f7       	brne	.-8      	; 0x3c60 <main+0x1e80>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    3c68:	2f 93       	push	r18
    3c6a:	ff c9       	rjmp	.-3074   	; 0x306a <main+0x128a>
				if(adcValue[0] > 512 && ringMod != true)
				{
					ringMod = true;
					mixerMenuRingModUpdate();
				}
				else if(adcValue[0] < 512 && ringMod != false)
    3c6c:	81 15       	cp	r24, r1
    3c6e:	92 40       	sbci	r25, 0x02	; 2
    3c70:	11 f4       	brne	.+4      	; 0x3c76 <main+0x1e96>
    3c72:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
    3c76:	80 91 bf 05 	lds	r24, 0x05BF
    3c7a:	88 23       	and	r24, r24
    3c7c:	11 f4       	brne	.+4      	; 0x3c82 <main+0x1ea2>
    3c7e:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
				{
					ringMod = false;
    3c82:	10 92 bf 05 	sts	0x05BF, r1

inline void mixerMenuRingModUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
    3c86:	87 e0       	ldi	r24, 0x07	; 7
    3c88:	ed e9       	ldi	r30, 0x9D	; 157
    3c8a:	f1 e0       	ldi	r31, 0x01	; 1
    3c8c:	d5 01       	movw	r26, r10
    3c8e:	01 90       	ld	r0, Z+
    3c90:	0d 92       	st	X+, r0
    3c92:	8a 95       	dec	r24
    3c94:	e1 f7       	brne	.-8      	; 0x3c8e <main+0x1eae>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3c96:	8f e4       	ldi	r24, 0x4F	; 79
    3c98:	96 e4       	ldi	r25, 0x46	; 70
    3c9a:	a6 e4       	ldi	r26, 0x46	; 70
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	8f 83       	std	Y+7, r24	; 0x07
    3ca0:	98 87       	std	Y+8, r25	; 0x08
    3ca2:	a9 87       	std	Y+9, r26	; 0x09
    3ca4:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "    ");
    3ca6:	d5 01       	movw	r26, r10
    3ca8:	0d 90       	ld	r0, X+
    3caa:	00 20       	and	r0, r0
    3cac:	e9 f7       	brne	.-6      	; 0x3ca8 <main+0x1ec8>
    3cae:	11 97       	sbiw	r26, 0x01	; 1
    3cb0:	e0 e4       	ldi	r30, 0x40	; 64
    3cb2:	f1 e0       	ldi	r31, 0x01	; 1
    3cb4:	82 2d       	mov	r24, r2
    3cb6:	01 90       	ld	r0, Z+
    3cb8:	0d 92       	st	X+, r0
    3cba:	8a 95       	dec	r24
    3cbc:	e1 f7       	brne	.-8      	; 0x3cb6 <main+0x1ed6>
	writeLine(5, buf);
    3cbe:	b5 01       	movw	r22, r10
    3cc0:	85 e0       	ldi	r24, 0x05	; 5
    3cc2:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    3cc6:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
		//Button Reading
		if(!(OSC1_BTN_RD & (1 << OSC1_BTN_PIN)))
		{
			if(!btnPressed[MENU_OSC1] && btnCanPress[MENU_OSC1] && menuSelect != MENU_OSC1)
			{		
				btnLastPressed[MENU_OSC1] = 0;
    3cca:	10 92 f3 04 	sts	0x04F3, r1
				
				menuSelect = MENU_OSC1;
    3cce:	10 92 b3 05 	sts	0x05B3, r1

				menuChange[menuSelect][0] = 0;
    3cd2:	10 92 6b 05 	sts	0x056B, r1
				menuChange[menuSelect][1] = 0;
    3cd6:	10 92 6c 05 	sts	0x056C, r1
				menuChange[menuSelect][2] = 0;
    3cda:	10 92 6d 05 	sts	0x056D, r1
				menuChange[menuSelect][3] = 0;
    3cde:	10 92 6e 05 	sts	0x056E, r1

inline void osc1MenuUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", osc1MenuTitle);
    3ce2:	ea e0       	ldi	r30, 0x0A	; 10
    3ce4:	f1 e0       	ldi	r31, 0x01	; 1
    3ce6:	61 96       	adiw	r28, 0x11	; 17
    3ce8:	af ad       	ldd	r26, Y+63	; 0x3f
    3cea:	61 97       	sbiw	r28, 0x11	; 17
    3cec:	62 96       	adiw	r28, 0x12	; 18
    3cee:	bf ad       	ldd	r27, Y+63	; 0x3f
    3cf0:	62 97       	sbiw	r28, 0x12	; 18
    3cf2:	82 2f       	mov	r24, r18
    3cf4:	01 90       	ld	r0, Z+
    3cf6:	0d 92       	st	X+, r0
    3cf8:	8a 95       	dec	r24
    3cfa:	e1 f7       	brne	.-8      	; 0x3cf4 <main+0x1f14>
	writeLine(0, buf);
    3cfc:	be 01       	movw	r22, r28
    3cfe:	6b 5e       	subi	r22, 0xEB	; 235
    3d00:	7f 4f       	sbci	r23, 0xFF	; 255
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	63 96       	adiw	r28, 0x13	; 19
    3d06:	2f af       	std	Y+63, r18	; 0x3f
    3d08:	63 97       	sbiw	r28, 0x13	; 19
    3d0a:	64 96       	adiw	r28, 0x14	; 20
    3d0c:	3f af       	std	Y+63, r19	; 0x3f
    3d0e:	64 97       	sbiw	r28, 0x14	; 20
    3d10:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc1MenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    3d14:	e7 e1       	ldi	r30, 0x17	; 23
    3d16:	f1 e0       	ldi	r31, 0x01	; 1
    3d18:	d5 01       	movw	r26, r10
    3d1a:	8e 2d       	mov	r24, r14
    3d1c:	01 90       	ld	r0, Z+
    3d1e:	0d 92       	st	X+, r0
    3d20:	8a 95       	dec	r24
    3d22:	e1 f7       	brne	.-8      	; 0x3d1c <main+0x1f3c>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[osc1WaveForm]));
    3d24:	80 91 03 01 	lds	r24, 0x0103
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	80 58       	subi	r24, 0x80	; 128
    3d30:	99 4f       	sbci	r25, 0xF9	; 249
    3d32:	fc 01       	movw	r30, r24
    3d34:	65 91       	lpm	r22, Z+
    3d36:	74 91       	lpm	r23, Z
    3d38:	a1 2e       	mov	r10, r17
    3d3a:	b3 2c       	mov	r11, r3
    3d3c:	81 2f       	mov	r24, r17
    3d3e:	93 2d       	mov	r25, r3
    3d40:	0e 94 36 29 	call	0x526c	; 0x526c <strcat_P>
	strcat(buf, "       ");
    3d44:	d4 01       	movw	r26, r8
    3d46:	0d 90       	ld	r0, X+
    3d48:	00 20       	and	r0, r0
    3d4a:	e9 f7       	brne	.-6      	; 0x3d46 <main+0x1f66>
    3d4c:	11 97       	sbiw	r26, 0x01	; 1
    3d4e:	ed e3       	ldi	r30, 0x3D	; 61
    3d50:	f1 e0       	ldi	r31, 0x01	; 1
    3d52:	8f 2d       	mov	r24, r15
    3d54:	01 90       	ld	r0, Z+
    3d56:	0d 92       	st	X+, r0
    3d58:	8a 95       	dec	r24
    3d5a:	e1 f7       	brne	.-8      	; 0x3d54 <main+0x1f74>
	writeLine(2, buf);	
    3d5c:	61 2f       	mov	r22, r17
    3d5e:	73 2d       	mov	r23, r3
    3d60:	82 e0       	ldi	r24, 0x02	; 2
    3d62:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc1MenuCentsUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", centsLine);
    3d66:	ee e1       	ldi	r30, 0x1E	; 30
    3d68:	f1 e0       	ldi	r31, 0x01	; 1
    3d6a:	a1 2f       	mov	r26, r17
    3d6c:	b3 2d       	mov	r27, r3
    3d6e:	8f 2d       	mov	r24, r15
    3d70:	01 90       	ld	r0, Z+
    3d72:	0d 92       	st	X+, r0
    3d74:	8a 95       	dec	r24
    3d76:	e1 f7       	brne	.-8      	; 0x3d70 <main+0x1f90>
	sprintf(buf + 7, "%d", osc1CentsShift);
    3d78:	40 91 e5 05 	lds	r20, 0x05E5
    3d7c:	84 2f       	mov	r24, r20
    3d7e:	99 27       	eor	r25, r25
    3d80:	87 fd       	sbrc	r24, 7
    3d82:	90 95       	com	r25
    3d84:	9f 93       	push	r25
    3d86:	4f 93       	push	r20
    3d88:	a7 e0       	ldi	r26, 0x07	; 7
    3d8a:	b1 e0       	ldi	r27, 0x01	; 1
    3d8c:	bf 93       	push	r27
    3d8e:	af 93       	push	r26
    3d90:	5b ad       	ldd	r21, Y+59	; 0x3b
    3d92:	5f 93       	push	r21
    3d94:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d96:	8f 93       	push	r24
    3d98:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    3d9c:	d4 01       	movw	r26, r8
    3d9e:	0d 90       	ld	r0, X+
    3da0:	00 20       	and	r0, r0
    3da2:	e9 f7       	brne	.-6      	; 0x3d9e <main+0x1fbe>
    3da4:	11 97       	sbiw	r26, 0x01	; 1
    3da6:	ed e3       	ldi	r30, 0x3D	; 61
    3da8:	f1 e0       	ldi	r31, 0x01	; 1
    3daa:	8f 2d       	mov	r24, r15
    3dac:	01 90       	ld	r0, Z+
    3dae:	0d 92       	st	X+, r0
    3db0:	8a 95       	dec	r24
    3db2:	e1 f7       	brne	.-8      	; 0x3dac <main+0x1fcc>
}

inline void writeLine(unsigned char line, char* str)
{
	char buf[13];
	memcpy(buf, str, 12);
    3db4:	e1 2f       	mov	r30, r17
    3db6:	f3 2d       	mov	r31, r3
    3db8:	de 01       	movw	r26, r28
    3dba:	99 96       	adiw	r26, 0x29	; 41
    3dbc:	64 96       	adiw	r28, 0x14	; 20
    3dbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    3dc0:	64 97       	sbiw	r28, 0x14	; 20
    3dc2:	83 2f       	mov	r24, r19
    3dc4:	01 90       	ld	r0, Z+
    3dc6:	0d 92       	st	X+, r0
    3dc8:	8a 95       	dec	r24
    3dca:	e1 f7       	brne	.-8      	; 0x3dc4 <main+0x1fe4>
	buf[12] = '\0';
    3dcc:	1d aa       	std	Y+53, r1	; 0x35

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    3dce:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3dd0:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dd2:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3dd4:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dd6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dd8:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3dda:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ddc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dde:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3de0:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3de2:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3de4:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3de6:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3de8:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dea:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3dec:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dee:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3df0:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3df2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3df4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3df6:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3df8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dfa:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3dfc:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3dfe:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e00:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e02:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3e04:	44 9a       	sbi	0x08, 4	; 8

inline void lcdWrite(char control, char data)
{
	if(control == 0)
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
    3e06:	2d 98       	cbi	0x05, 5	; 5
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3e08:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e0a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e0c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e0e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e10:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e12:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e14:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e16:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e18:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e1a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e1c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e1e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e20:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e22:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e24:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e26:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e28:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e2a:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e2c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e2e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e30:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e32:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e34:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e36:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e38:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e3a:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3e3c:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	63 96       	adiw	r28, 0x13	; 19
    3e4e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e50:	63 97       	sbiw	r28, 0x13	; 19
    3e52:	88 23       	and	r24, r24
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <main+0x2078>
    3e56:	81 c0       	rjmp	.+258    	; 0x3f5a <main+0x217a>
    3e58:	de 01       	movw	r26, r28
    3e5a:	9a 96       	adiw	r26, 0x2a	; 42
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3e5c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3e5e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e60:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e62:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e64:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e66:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e68:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e6a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e6c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e6e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e70:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e72:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e74:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e76:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e78:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e7a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e7c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e7e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e80:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e82:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e84:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e86:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e88:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e8a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3e8c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e8e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3e90:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3e92:	44 9a       	sbi	0x08, 4	; 8
    3e94:	99 27       	eor	r25, r25
    3e96:	87 fd       	sbrc	r24, 7
    3e98:	90 95       	com	r25
    3e9a:	80 97       	sbiw	r24, 0x20	; 32
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	ee 0f       	add	r30, r30
    3ea0:	ff 1f       	adc	r31, r31
    3ea2:	ee 0f       	add	r30, r30
    3ea4:	ff 1f       	adc	r31, r31
    3ea6:	e8 0f       	add	r30, r24
    3ea8:	f9 1f       	adc	r31, r25
    3eaa:	ee 5e       	subi	r30, 0xEE	; 238
    3eac:	fc 4f       	sbci	r31, 0xFC	; 252
    3eae:	55 e0       	ldi	r21, 0x05	; 5
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
	{
		lcdWrite(LCD_DATA, ASCII[character - 0x20][index]);
    3eb0:	41 91       	ld	r20, Z+
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3eb2:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3eb4:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3eb6:	5c 98       	cbi	0x0b, 4	; 11
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3eb8:	84 2f       	mov	r24, r20
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	88 0f       	add	r24, r24
    3ebe:	89 2f       	mov	r24, r25
    3ec0:	88 1f       	adc	r24, r24
    3ec2:	99 0b       	sbc	r25, r25
    3ec4:	89 2b       	or	r24, r25
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <main+0x20ea>
    3ec8:	d0 c0       	rjmp	.+416    	; 0x406a <main+0x228a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3eca:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ecc:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ece:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3ed0:	46 fd       	sbrc	r20, 6
    3ed2:	bf c0       	rjmp	.+382    	; 0x4052 <main+0x2272>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ed4:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ed6:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ed8:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3eda:	45 fd       	sbrc	r20, 5
    3edc:	bf c0       	rjmp	.+382    	; 0x405c <main+0x227c>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ede:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ee0:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ee2:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3ee4:	44 fd       	sbrc	r20, 4
    3ee6:	bf c0       	rjmp	.+382    	; 0x4066 <main+0x2286>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ee8:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3eea:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3eec:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3eee:	43 fd       	sbrc	r20, 3
    3ef0:	ae c0       	rjmp	.+348    	; 0x404e <main+0x226e>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3ef2:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ef4:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3ef6:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3ef8:	42 fd       	sbrc	r20, 2
    3efa:	a7 c0       	rjmp	.+334    	; 0x404a <main+0x226a>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3efc:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3efe:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f00:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3f02:	41 fd       	sbrc	r20, 1
    3f04:	a0 c0       	rjmp	.+320    	; 0x4046 <main+0x2266>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f06:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f08:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f0a:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    3f0c:	40 fd       	sbrc	r20, 0
    3f0e:	99 c0       	rjmp	.+306    	; 0x4042 <main+0x2262>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f10:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f12:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f14:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3f16:	44 9a       	sbi	0x08, 4	; 8
    3f18:	51 50       	subi	r21, 0x01	; 1

inline void lcdCharacter(char character)
{
	lcdWrite(LCD_DATA, 0x00);
	
	for(unsigned char index = 0; index < 5; index++)
    3f1a:	51 f6       	brne	.-108    	; 0x3eb0 <main+0x20d0>
	{
		cbi(LCD_DC_WR, LCD_DC_PIN);
	}
	else
	{
		sbi(LCD_DC_WR, LCD_DC_PIN);
    3f1c:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
    3f1e:	44 98       	cbi	0x08, 4	; 8

void lcdShift(unsigned char data)
{
	int i = 0;
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f20:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f22:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f24:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f26:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f28:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f2a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f2c:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f2e:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f30:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f32:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f34:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f36:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f38:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f3a:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f3c:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f3e:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f40:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f42:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f44:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f46:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f48:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f4a:	5c 98       	cbi	0x0b, 4	; 11
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
    3f4c:	5d 98       	cbi	0x0b, 5	; 11
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f4e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    3f50:	5c 98       	cbi	0x0b, 4	; 11
		sbi(LCD_DC_WR, LCD_DC_PIN);
	}
	
	cbi(LCD_SCE_WR, LCD_SCE_PIN);
	lcdShift(data);
	sbi(LCD_SCE_WR, LCD_SCE_PIN);
    3f52:	44 9a       	sbi	0x08, 4	; 8
	lcdWrite(LCD_DATA, 0x00);
}

inline void lcdString(char* str)
{
	while(*str)
    3f54:	8d 91       	ld	r24, X+
    3f56:	81 11       	cpse	r24, r1
    3f58:	81 cf       	rjmp	.-254    	; 0x3e5c <main+0x207c>

inline void osc1MenuSemisUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", semisLine);
    3f5a:	e6 e2       	ldi	r30, 0x26	; 38
    3f5c:	f1 e0       	ldi	r31, 0x01	; 1
    3f5e:	a1 2f       	mov	r26, r17
    3f60:	b3 2d       	mov	r27, r3
    3f62:	8f 2d       	mov	r24, r15
    3f64:	01 90       	ld	r0, Z+
    3f66:	0d 92       	st	X+, r0
    3f68:	8a 95       	dec	r24
    3f6a:	e1 f7       	brne	.-8      	; 0x3f64 <main+0x2184>
	sprintf(buf + 7, "%d", osc1SemisShift);
    3f6c:	40 91 e4 05 	lds	r20, 0x05E4
    3f70:	84 2f       	mov	r24, r20
    3f72:	99 27       	eor	r25, r25
    3f74:	87 fd       	sbrc	r24, 7
    3f76:	90 95       	com	r25
    3f78:	9f 93       	push	r25
    3f7a:	4f 93       	push	r20
    3f7c:	a7 e0       	ldi	r26, 0x07	; 7
    3f7e:	b1 e0       	ldi	r27, 0x01	; 1
    3f80:	bf 93       	push	r27
    3f82:	af 93       	push	r26
    3f84:	5b ad       	ldd	r21, Y+59	; 0x3b
    3f86:	5f 93       	push	r21
    3f88:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f8a:	8f 93       	push	r24
    3f8c:	63 96       	adiw	r28, 0x13	; 19
    3f8e:	2f af       	std	Y+63, r18	; 0x3f
    3f90:	63 97       	sbiw	r28, 0x13	; 19
    3f92:	64 96       	adiw	r28, 0x14	; 20
    3f94:	3f af       	std	Y+63, r19	; 0x3f
    3f96:	64 97       	sbiw	r28, 0x14	; 20
    3f98:	0e 94 41 29 	call	0x5282	; 0x5282 <sprintf>
	strcat(buf, "       ");
    3f9c:	d4 01       	movw	r26, r8
    3f9e:	0d 90       	ld	r0, X+
    3fa0:	00 20       	and	r0, r0
    3fa2:	e9 f7       	brne	.-6      	; 0x3f9e <main+0x21be>
    3fa4:	11 97       	sbiw	r26, 0x01	; 1
    3fa6:	ed e3       	ldi	r30, 0x3D	; 61
    3fa8:	f1 e0       	ldi	r31, 0x01	; 1
    3faa:	8f 2d       	mov	r24, r15
    3fac:	01 90       	ld	r0, Z+
    3fae:	0d 92       	st	X+, r0
    3fb0:	8a 95       	dec	r24
    3fb2:	e1 f7       	brne	.-8      	; 0x3fac <main+0x21cc>
	writeLine(3, buf);
    3fb4:	61 2f       	mov	r22, r17
    3fb6:	73 2d       	mov	r23, r3
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>

inline void osc1MenuSyncUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
    3fbe:	ee e2       	ldi	r30, 0x2E	; 46
    3fc0:	f1 e0       	ldi	r31, 0x01	; 1
    3fc2:	a1 2f       	mov	r26, r17
    3fc4:	b3 2d       	mov	r27, r3
    3fc6:	8e 2d       	mov	r24, r14
    3fc8:	01 90       	ld	r0, Z+
    3fca:	0d 92       	st	X+, r0
    3fcc:	8a 95       	dec	r24
    3fce:	e1 f7       	brne	.-8      	; 0x3fc8 <main+0x21e8>
	if(osc1NoteSync != false)
    3fd0:	80 91 dc 05 	lds	r24, 0x05DC
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
    3fde:	0f 90       	pop	r0
    3fe0:	63 96       	adiw	r28, 0x13	; 19
    3fe2:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fe4:	63 97       	sbiw	r28, 0x13	; 19
    3fe6:	64 96       	adiw	r28, 0x14	; 20
    3fe8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3fea:	64 97       	sbiw	r28, 0x14	; 20
    3fec:	81 11       	cpse	r24, r1
    3fee:	54 c1       	rjmp	.+680    	; 0x4298 <main+0x24b8>
	{
		sprintf(buf + 6, "%s", onString);
	}
	else
	{
		sprintf(buf + 6, "%s", offstring);
    3ff0:	8f e4       	ldi	r24, 0x4F	; 79
    3ff2:	96 e4       	ldi	r25, 0x46	; 70
    3ff4:	a6 e4       	ldi	r26, 0x46	; 70
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	8f 83       	std	Y+7, r24	; 0x07
    3ffa:	98 87       	std	Y+8, r25	; 0x08
    3ffc:	a9 87       	std	Y+9, r26	; 0x09
    3ffe:	ba 87       	std	Y+10, r27	; 0x0a
	}
	strcat(buf, "       ");
    4000:	d4 01       	movw	r26, r8
    4002:	0d 90       	ld	r0, X+
    4004:	00 20       	and	r0, r0
    4006:	e9 f7       	brne	.-6      	; 0x4002 <main+0x2222>
    4008:	11 97       	sbiw	r26, 0x01	; 1
    400a:	ed e3       	ldi	r30, 0x3D	; 61
    400c:	f1 e0       	ldi	r31, 0x01	; 1
    400e:	8f 2d       	mov	r24, r15
    4010:	01 90       	ld	r0, Z+
    4012:	0d 92       	st	X+, r0
    4014:	8a 95       	dec	r24
    4016:	e1 f7       	brne	.-8      	; 0x4010 <main+0x2230>
	writeLine(5, buf);
    4018:	61 2f       	mov	r22, r17
    401a:	73 2d       	mov	r23, r3
    401c:	85 e0       	ldi	r24, 0x05	; 5
    401e:	63 96       	adiw	r28, 0x13	; 19
    4020:	2f af       	std	Y+63, r18	; 0x3f
    4022:	63 97       	sbiw	r28, 0x13	; 19
    4024:	64 96       	adiw	r28, 0x14	; 20
    4026:	3f af       	std	Y+63, r19	; 0x3f
    4028:	64 97       	sbiw	r28, 0x14	; 20
    402a:	0e 94 8a 04 	call	0x914	; 0x914 <_Z9writeLinehPc>
    402e:	80 91 b3 05 	lds	r24, 0x05B3
    4032:	63 96       	adiw	r28, 0x13	; 19
    4034:	2f ad       	ldd	r18, Y+63	; 0x3f
    4036:	63 97       	sbiw	r28, 0x13	; 19
    4038:	64 96       	adiw	r28, 0x14	; 20
    403a:	3f ad       	ldd	r19, Y+63	; 0x3f
    403c:	64 97       	sbiw	r28, 0x14	; 20
    403e:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <main+0x1a8>
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    4042:	5d 9a       	sbi	0x0b, 5	; 11
    4044:	66 cf       	rjmp	.-308    	; 0x3f12 <main+0x2132>
    4046:	5d 9a       	sbi	0x0b, 5	; 11
    4048:	5f cf       	rjmp	.-322    	; 0x3f08 <main+0x2128>
    404a:	5d 9a       	sbi	0x0b, 5	; 11
    404c:	58 cf       	rjmp	.-336    	; 0x3efe <main+0x211e>
    404e:	5d 9a       	sbi	0x0b, 5	; 11
    4050:	51 cf       	rjmp	.-350    	; 0x3ef4 <main+0x2114>
    4052:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    4054:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    4056:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    4058:	45 ff       	sbrs	r20, 5
    405a:	41 cf       	rjmp	.-382    	; 0x3ede <main+0x20fe>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    405c:	5d 9a       	sbi	0x0b, 5	; 11
		else
		{
			cbi(LCD_DATA_WR, LCD_DATA_PIN);
		}
		
		sbi(LCD_CLK_WR, LCD_CLK_PIN);
    405e:	5c 9a       	sbi	0x0b, 4	; 11
		cbi(LCD_CLK_WR, LCD_CLK_PIN);
    4060:	5c 98       	cbi	0x0b, 4	; 11
	
	cbi(LCD_CLK_WR, LCD_CLK_PIN);
	
	for(i = 0; i < 8; i++)
	{
		if(data & (1 << (7-i)))
    4062:	44 ff       	sbrs	r20, 4
    4064:	41 cf       	rjmp	.-382    	; 0x3ee8 <main+0x2108>
		{
			sbi(LCD_DATA_WR, LCD_DATA_PIN);
    4066:	5d 9a       	sbi	0x0b, 5	; 11
    4068:	40 cf       	rjmp	.-384    	; 0x3eea <main+0x210a>
    406a:	5d 9a       	sbi	0x0b, 5	; 11
    406c:	2f cf       	rjmp	.-418    	; 0x3ecc <main+0x20ec>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    406e:	8f e4       	ldi	r24, 0x4F	; 79
    4070:	9e e4       	ldi	r25, 0x4E	; 78
    4072:	a0 e0       	ldi	r26, 0x00	; 0
    4074:	89 87       	std	Y+9, r24	; 0x09
    4076:	9a 87       	std	Y+10, r25	; 0x0a
    4078:	ab 87       	std	Y+11, r26	; 0x0b
    407a:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <main+0x808>
	char buf[20];
	
	sprintf(buf, "%s", ringModLine);
	if(ringMod != false)
	{
		sprintf(buf + 6, "%s", onString);
    407e:	8f e4       	ldi	r24, 0x4F	; 79
    4080:	9e e4       	ldi	r25, 0x4E	; 78
    4082:	a0 e0       	ldi	r26, 0x00	; 0
    4084:	8f 83       	std	Y+7, r24	; 0x07
    4086:	98 87       	std	Y+8, r25	; 0x08
    4088:	a9 87       	std	Y+9, r26	; 0x09
    408a:	0c 94 25 13 	jmp	0x264a	; 0x264a <main+0x86a>
						lfoWaveForm = WAVE_TRI;
						menuKnobPos[MENU_LFO][3] = 171 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 511)
    408e:	8f 3f       	cpi	r24, 0xFF	; 255
    4090:	b1 e0       	ldi	r27, 0x01	; 1
    4092:	9b 07       	cpc	r25, r27
    4094:	0c f0       	brlt	.+2      	; 0x4098 <main+0x22b8>
    4096:	07 c1       	rjmp	.+526    	; 0x42a6 <main+0x24c6>
				{
					if(lfoWaveForm != WAVE_LSAW)
    4098:	80 91 04 01 	lds	r24, 0x0104
    409c:	82 30       	cpi	r24, 0x02	; 2
    409e:	09 f4       	brne	.+2      	; 0x40a2 <main+0x22c2>
    40a0:	e6 cb       	rjmp	.-2100   	; 0x386e <main+0x1a8e>
					{
						lfoWaveForm = WAVE_LSAW;
    40a2:	82 e0       	ldi	r24, 0x02	; 2
    40a4:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 341 + 85;
    40a8:	8a ea       	ldi	r24, 0xAA	; 170
    40aa:	91 e0       	ldi	r25, 0x01	; 1
    40ac:	90 93 9a 05 	sts	0x059A, r25
    40b0:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    40b4:	87 e0       	ldi	r24, 0x07	; 7
    40b6:	e7 e1       	ldi	r30, 0x17	; 23
    40b8:	f1 e0       	ldi	r31, 0x01	; 1
    40ba:	d5 01       	movw	r26, r10
    40bc:	01 90       	ld	r0, Z+
    40be:	0d 92       	st	X+, r0
    40c0:	8a 95       	dec	r24
    40c2:	e1 f7       	brne	.-8      	; 0x40bc <main+0x22dc>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    40c4:	e4 e8       	ldi	r30, 0x84	; 132
    40c6:	f6 e0       	ldi	r31, 0x06	; 6
    40c8:	09 cd       	rjmp	.-1518   	; 0x3adc <main+0x1cfc>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
			{
				menuChange[MENU_MIX][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_MIX][3] + 10 && adcValue[3] > (menuKnobPos[MENU_MIX][3] > 10 ? menuKnobPos[MENU_MIX][3] - 10 : 0))
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	0c 94 cd 13 	jmp	0x279a	; 0x279a <main+0x9ba>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
			{
				menuChange[MENU_MIX][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_MIX][1] + 10 && adcValue[1] > (menuKnobPos[MENU_MIX][1] > 10 ? menuKnobPos[MENU_MIX][1] - 10 : 0))
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	0c 94 88 13 	jmp	0x2710	; 0x2710 <main+0x930>
			{
				menuChange[MENU_MIX][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_MIX][2] + 10 && adcValue[2] > (menuKnobPos[MENU_MIX][2] > 10 ? menuKnobPos[MENU_MIX][2] - 10 : 0))
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <main+0x970>
				}
			}
			break;

			case MENU_MIX:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_MIX][0] + 10 && adcValue[0] > (menuKnobPos[MENU_MIX][0] > 10 ? menuKnobPos[MENU_MIX][0] - 10 : 0))
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <main+0x8f0>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
			{
				menuChange[MENU_LFO][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_LFO][3] + 10 && adcValue[3] > (menuKnobPos[MENU_LFO][3] > 10 ? menuKnobPos[MENU_LFO][3] - 10 : 0))
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	ae cb       	rjmp	.-2212   	; 0x384c <main+0x1a6c>
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
			{
				menuChange[MENU_OSC1][2] = 1;
				updateADC[2] = false;
			}
			if(updateADC[3] && adcValue[3] < menuKnobPos[MENU_OSC1][3] + 10 && adcValue[3] > (menuKnobPos[MENU_OSC1][3] > 10 ? menuKnobPos[MENU_OSC1][3] - 10 : 0))
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	67 c8       	rjmp	.-3890   	; 0x31c4 <main+0x13e4>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
			{
				menuChange[MENU_OSC1][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_OSC1][1] + 10 && adcValue[1] > (menuKnobPos[MENU_OSC1][1] > 10 ? menuKnobPos[MENU_OSC1][1] - 10 : 0))
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	23 c8       	rjmp	.-4026   	; 0x3142 <main+0x1362>
			{
				menuChange[MENU_OSC1][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_OSC1][2] + 10 && adcValue[2] > (menuKnobPos[MENU_OSC1][2] > 10 ? menuKnobPos[MENU_OSC1][2] - 10 : 0))
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	3f c8       	rjmp	.-3970   	; 0x3180 <main+0x13a0>
					{
						lfoRoute = ROUTE_OSC2;
						lfoMenuRouteUpdate();
					}					
				}
				else if(adcValue[0] < 279)
    4102:	87 31       	cpi	r24, 0x17	; 23
    4104:	a1 e0       	ldi	r26, 0x01	; 1
    4106:	9a 07       	cpc	r25, r26
    4108:	0c f0       	brlt	.+2      	; 0x410c <main+0x232c>
    410a:	ef c0       	rjmp	.+478    	; 0x42ea <main+0x250a>
				{
					if(lfoRoute != ROUTE_CENTS1)
    410c:	80 91 b6 05 	lds	r24, 0x05B6
    4110:	82 30       	cpi	r24, 0x02	; 2
    4112:	11 f4       	brne	.+4      	; 0x4118 <main+0x2338>
    4114:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS1;
    4118:	82 e0       	ldi	r24, 0x02	; 2
    411a:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    411e:	87 e0       	ldi	r24, 0x07	; 7
    4120:	e5 e3       	ldi	r30, 0x35	; 53
    4122:	f1 e0       	ldi	r31, 0x01	; 1
    4124:	d5 01       	movw	r26, r10
    4126:	01 90       	ld	r0, Z+
    4128:	0d 92       	st	X+, r0
    412a:	8a 95       	dec	r24
    412c:	e1 f7       	brne	.-8      	; 0x4126 <main+0x2346>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    412e:	ec e6       	ldi	r30, 0x6C	; 108
    4130:	f6 e0       	ldi	r31, 0x06	; 6
    4132:	47 cc       	rjmp	.-1906   	; 0x39c2 <main+0x1be2>
				}
			}
			break;
			
			case MENU_LFO:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	29 cb       	rjmp	.-2478   	; 0x378c <main+0x19ac>
						osc2WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC2][3] = 219;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    413a:	86 3b       	cpi	r24, 0xB6	; 182
    413c:	b1 e0       	ldi	r27, 0x01	; 1
    413e:	9b 07       	cpc	r25, r27
    4140:	0c f0       	brlt	.+2      	; 0x4144 <main+0x2364>
    4142:	51 c0       	rjmp	.+162    	; 0x41e6 <main+0x2406>
				{
					if(osc2WaveForm != WAVE_LSAW)
    4144:	80 91 02 01 	lds	r24, 0x0102
    4148:	82 30       	cpi	r24, 0x02	; 2
    414a:	11 f4       	brne	.+4      	; 0x4150 <main+0x2370>
    414c:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_LSAW;
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 365;
    4156:	8d e6       	ldi	r24, 0x6D	; 109
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	69 cc       	rjmp	.-1838   	; 0x3a2e <main+0x1c4e>
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_LFO][0] + 10 && adcValue[0] > (menuKnobPos[MENU_LFO][0] > 10 ? menuKnobPos[MENU_LFO][0] - 10 : 0))
			{
				menuChange[MENU_LFO][0] = 1;
				updateADC[0] = false;
			}
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	34 cb       	rjmp	.-2456   	; 0x37ca <main+0x19ea>

		//Menu Updates
		switch(menuSelect)
		{
			case MENU_OSC1:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC1][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC1][0] > 10 ? menuKnobPos[MENU_OSC1][0] - 10 : 0))
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	0c 94 82 18 	jmp	0x3104	; 0x3104 <main+0x1324>
				}
			}
			break;
			
			case MENU_OSC2:
			if(updateADC[0] && adcValue[0] < menuKnobPos[MENU_OSC2][0] + 10 && adcValue[0] > (menuKnobPos[MENU_OSC2][0] > 10 ? menuKnobPos[MENU_OSC2][0] - 10 : 0))
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <main+0xe58>
						osc2OctaveShift = -1;
						menuKnobPos[MENU_OSC2][0] = 205+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 615)
    4172:	87 36       	cpi	r24, 0x67	; 103
    4174:	a2 e0       	ldi	r26, 0x02	; 2
    4176:	9a 07       	cpc	r25, r26
    4178:	0c f0       	brlt	.+2      	; 0x417c <main+0x239c>
    417a:	5c c0       	rjmp	.+184    	; 0x4234 <main+0x2454>
				{
					if(osc2OctaveShift != 0)
    417c:	80 91 cb 05 	lds	r24, 0x05CB
    4180:	88 23       	and	r24, r24
    4182:	11 f4       	brne	.+4      	; 0x4188 <main+0x23a8>
    4184:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc2OctaveShift = 0;
    4188:	10 92 cb 05 	sts	0x05CB, r1
						menuKnobPos[MENU_OSC2][0] = 410+102;
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	92 e0       	ldi	r25, 0x02	; 2
    4190:	90 93 8c 05 	sts	0x058C, r25
    4194:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    4198:	86 e0       	ldi	r24, 0x06	; 6
    419a:	e2 e5       	ldi	r30, 0x52	; 82
    419c:	f1 e0       	ldi	r31, 0x01	; 1
    419e:	d5 01       	movw	r26, r10
    41a0:	01 90       	ld	r0, Z+
    41a2:	0d 92       	st	X+, r0
    41a4:	8a 95       	dec	r24
    41a6:	e1 f7       	brne	.-8      	; 0x41a0 <main+0x23c0>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    41a8:	1f 92       	push	r1
    41aa:	1f 92       	push	r1
    41ac:	0c 94 36 18 	jmp	0x306c	; 0x306c <main+0x128c>
						osc1WaveForm = WAVE_TRI;
						menuKnobPos[MENU_OSC1][3] = 219;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 438)
    41b0:	86 3b       	cpi	r24, 0xB6	; 182
    41b2:	b1 e0       	ldi	r27, 0x01	; 1
    41b4:	9b 07       	cpc	r25, r27
    41b6:	44 f5       	brge	.+80     	; 0x4208 <main+0x2428>
				{
					if(osc1WaveForm != WAVE_LSAW)
    41b8:	80 91 03 01 	lds	r24, 0x0103
    41bc:	82 30       	cpi	r24, 0x02	; 2
    41be:	11 f4       	brne	.+4      	; 0x41c4 <main+0x23e4>
    41c0:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_LSAW;
    41c4:	82 e0       	ldi	r24, 0x02	; 2
    41c6:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 365;
    41ca:	8d e6       	ldi	r24, 0x6D	; 109
    41cc:	91 e0       	ldi	r25, 0x01	; 1
    41ce:	bb cc       	rjmp	.-1674   	; 0x3b46 <main+0x1d66>
			if(updateADC[1] && adcValue[1] < menuKnobPos[MENU_LFO][1] + 10 && adcValue[1] > (menuKnobPos[MENU_LFO][1] > 10 ? menuKnobPos[MENU_LFO][1] - 10 : 0))
			{
				menuChange[MENU_LFO][1] = 1;
				updateADC[1] = false;
			}
			if(updateADC[2] && adcValue[2] < menuKnobPos[MENU_LFO][2] + 10 && adcValue[2] > (menuKnobPos[MENU_LFO][2] > 10 ? menuKnobPos[MENU_LFO][2] - 10 : 0))
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	19 cb       	rjmp	.-2510   	; 0x3808 <main+0x1a28>
	char buf[20];
	
	sprintf(buf, "%s", osc2SyncLine);
	if(osc2Sync != false)
	{
		sprintf(buf + 8, "%s", onString);
    41d6:	8f e4       	ldi	r24, 0x4F	; 79
    41d8:	9e e4       	ldi	r25, 0x4E	; 78
    41da:	a0 e0       	ldi	r26, 0x00	; 0
    41dc:	89 87       	std	Y+9, r24	; 0x09
    41de:	9a 87       	std	Y+10, r25	; 0x0a
    41e0:	ab 87       	std	Y+11, r26	; 0x0b
    41e2:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <main+0xaee>
						osc2WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC2][3] = 365;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    41e6:	88 34       	cpi	r24, 0x48	; 72
    41e8:	22 e0       	ldi	r18, 0x02	; 2
    41ea:	92 07       	cpc	r25, r18
    41ec:	0c f0       	brlt	.+2      	; 0x41f0 <main+0x2410>
    41ee:	bb c0       	rjmp	.+374    	; 0x4366 <main+0x2586>
				{
					if(osc2WaveForm != WAVE_RSAW)
    41f0:	80 91 02 01 	lds	r24, 0x0102
    41f4:	83 30       	cpi	r24, 0x03	; 3
    41f6:	11 f4       	brne	.+4      	; 0x41fc <main+0x241c>
    41f8:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_RSAW;
    41fc:	83 e0       	ldi	r24, 0x03	; 3
    41fe:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 511;
    4202:	8f ef       	ldi	r24, 0xFF	; 255
    4204:	91 e0       	ldi	r25, 0x01	; 1
    4206:	13 cc       	rjmp	.-2010   	; 0x3a2e <main+0x1c4e>
						osc1WaveForm = WAVE_LSAW;
						menuKnobPos[MENU_OSC1][3] = 365;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 584)
    4208:	88 34       	cpi	r24, 0x48	; 72
    420a:	22 e0       	ldi	r18, 0x02	; 2
    420c:	92 07       	cpc	r25, r18
    420e:	0c f0       	brlt	.+2      	; 0x4212 <main+0x2432>
    4210:	bb c0       	rjmp	.+374    	; 0x4388 <main+0x25a8>
				{
					if(osc1WaveForm != WAVE_RSAW)
    4212:	80 91 03 01 	lds	r24, 0x0103
    4216:	83 30       	cpi	r24, 0x03	; 3
    4218:	11 f4       	brne	.+4      	; 0x421e <main+0x243e>
    421a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_RSAW;
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 511;
    4224:	8f ef       	ldi	r24, 0xFF	; 255
    4226:	91 e0       	ldi	r25, 0x01	; 1
    4228:	8e cc       	rjmp	.-1764   	; 0x3b46 <main+0x1d66>
			{
				if(adcValue[3] < 146)
				{
					if(osc2WaveForm != WAVE_SINE)
					{
						osc2WaveForm = WAVE_SINE;
    422a:	10 92 02 01 	sts	0x0102, r1
						menuKnobPos[MENU_OSC2][3] = 73;
    422e:	89 e4       	ldi	r24, 0x49	; 73
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	fd cb       	rjmp	.-2054   	; 0x3a2e <main+0x1c4e>
						osc2OctaveShift = 0;
						menuKnobPos[MENU_OSC2][0] = 410+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 820)
    4234:	84 33       	cpi	r24, 0x34	; 52
    4236:	a3 e0       	ldi	r26, 0x03	; 3
    4238:	9a 07       	cpc	r25, r26
    423a:	0c f0       	brlt	.+2      	; 0x423e <main+0x245e>
    423c:	b6 c0       	rjmp	.+364    	; 0x43aa <main+0x25ca>
				{
					if(osc2OctaveShift != 1)
    423e:	80 91 cb 05 	lds	r24, 0x05CB
    4242:	81 30       	cpi	r24, 0x01	; 1
    4244:	11 f4       	brne	.+4      	; 0x424a <main+0x246a>
    4246:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc2OctaveShift = 1;
    424a:	21 e0       	ldi	r18, 0x01	; 1
    424c:	20 93 cb 05 	sts	0x05CB, r18
						menuKnobPos[MENU_OSC2][0] = 615+102;
    4250:	8d ec       	ldi	r24, 0xCD	; 205
    4252:	92 e0       	ldi	r25, 0x02	; 2
				else if(adcValue[0] < 1023)
				{
					if(osc2OctaveShift != 2)
					{
						osc2OctaveShift = 2;
						menuKnobPos[MENU_OSC2][0] = 820+102;
    4254:	90 93 8c 05 	sts	0x058C, r25
    4258:	80 93 8b 05 	sts	0x058B, r24

inline void osc2MenuOctaveUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", octaveLine);
    425c:	86 e0       	ldi	r24, 0x06	; 6
    425e:	e2 e5       	ldi	r30, 0x52	; 82
    4260:	f1 e0       	ldi	r31, 0x01	; 1
    4262:	d5 01       	movw	r26, r10
    4264:	01 90       	ld	r0, Z+
    4266:	0d 92       	st	X+, r0
    4268:	8a 95       	dec	r24
    426a:	e1 f7       	brne	.-8      	; 0x4264 <main+0x2484>
	sprintf(buf + 5, "%d", osc2OctaveShift);
    426c:	1f 92       	push	r1
    426e:	0c 94 35 18 	jmp	0x306a	; 0x306a <main+0x128a>
			{
				if(adcValue[3] < 171)
				{
					if(lfoWaveForm != WAVE_SINE)
					{
						lfoWaveForm = WAVE_SINE;
    4272:	10 92 04 01 	sts	0x0104, r1
						menuKnobPos[MENU_LFO][3] = 85;
    4276:	85 e5       	ldi	r24, 0x55	; 85
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	90 93 9a 05 	sts	0x059A, r25
    427e:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    4282:	87 e0       	ldi	r24, 0x07	; 7
    4284:	e7 e1       	ldi	r30, 0x17	; 23
    4286:	f1 e0       	ldi	r31, 0x01	; 1
    4288:	d5 01       	movw	r26, r10
    428a:	01 90       	ld	r0, Z+
    428c:	0d 92       	st	X+, r0
    428e:	8a 95       	dec	r24
    4290:	e1 f7       	brne	.-8      	; 0x428a <main+0x24aa>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    4292:	e0 e8       	ldi	r30, 0x80	; 128
    4294:	f6 e0       	ldi	r31, 0x06	; 6
    4296:	22 cc       	rjmp	.-1980   	; 0x3adc <main+0x1cfc>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    4298:	8f e4       	ldi	r24, 0x4F	; 79
    429a:	9e e4       	ldi	r25, 0x4E	; 78
    429c:	a0 e0       	ldi	r26, 0x00	; 0
    429e:	8f 83       	std	Y+7, r24	; 0x07
    42a0:	98 87       	std	Y+8, r25	; 0x08
    42a2:	a9 87       	std	Y+9, r26	; 0x09
    42a4:	ad ce       	rjmp	.-678    	; 0x4000 <main+0x2220>
						lfoWaveForm = WAVE_LSAW;
						menuKnobPos[MENU_LFO][3] = 341 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 682)
    42a6:	8a 3a       	cpi	r24, 0xAA	; 170
    42a8:	22 e0       	ldi	r18, 0x02	; 2
    42aa:	92 07       	cpc	r25, r18
    42ac:	f4 f5       	brge	.+124    	; 0x432a <main+0x254a>
				{
					if(lfoWaveForm != WAVE_RSAW)
    42ae:	80 91 04 01 	lds	r24, 0x0104
    42b2:	83 30       	cpi	r24, 0x03	; 3
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <main+0x24d8>
    42b6:	db ca       	rjmp	.-2634   	; 0x386e <main+0x1a8e>
					{
						lfoWaveForm = WAVE_RSAW;
    42b8:	83 e0       	ldi	r24, 0x03	; 3
    42ba:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 511 + 85;
    42be:	84 e5       	ldi	r24, 0x54	; 84
    42c0:	92 e0       	ldi	r25, 0x02	; 2
    42c2:	90 93 9a 05 	sts	0x059A, r25
    42c6:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    42ca:	87 e0       	ldi	r24, 0x07	; 7
    42cc:	e7 e1       	ldi	r30, 0x17	; 23
    42ce:	f1 e0       	ldi	r31, 0x01	; 1
    42d0:	d5 01       	movw	r26, r10
    42d2:	01 90       	ld	r0, Z+
    42d4:	0d 92       	st	X+, r0
    42d6:	8a 95       	dec	r24
    42d8:	e1 f7       	brne	.-8      	; 0x42d2 <main+0x24f2>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    42da:	e6 e8       	ldi	r30, 0x86	; 134
    42dc:	f6 e0       	ldi	r31, 0x06	; 6
    42de:	fe cb       	rjmp	.-2052   	; 0x3adc <main+0x1cfc>
			{
				if(adcValue[3] < 146)
				{
					if(osc1WaveForm != WAVE_SINE)
					{
						osc1WaveForm = WAVE_SINE;
    42e0:	10 92 03 01 	sts	0x0103, r1
						menuKnobPos[MENU_OSC1][3] = 73;
    42e4:	89 e4       	ldi	r24, 0x49	; 73
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	2e cc       	rjmp	.-1956   	; 0x3b46 <main+0x1d66>
					{
						lfoRoute = ROUTE_CENTS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 372)
    42ea:	84 37       	cpi	r24, 0x74	; 116
    42ec:	b1 e0       	ldi	r27, 0x01	; 1
    42ee:	9b 07       	cpc	r25, r27
    42f0:	0c f0       	brlt	.+2      	; 0x42f4 <main+0x2514>
    42f2:	6c c0       	rjmp	.+216    	; 0x43cc <main+0x25ec>
				{
					if(lfoRoute != ROUTE_CENTS2)
    42f4:	80 91 b6 05 	lds	r24, 0x05B6
    42f8:	83 30       	cpi	r24, 0x03	; 3
    42fa:	11 f4       	brne	.+4      	; 0x4300 <main+0x2520>
    42fc:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_CENTS2;
    4300:	83 e0       	ldi	r24, 0x03	; 3
    4302:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    4306:	87 e0       	ldi	r24, 0x07	; 7
    4308:	e5 e3       	ldi	r30, 0x35	; 53
    430a:	f1 e0       	ldi	r31, 0x01	; 1
    430c:	d5 01       	movw	r26, r10
    430e:	01 90       	ld	r0, Z+
    4310:	0d 92       	st	X+, r0
    4312:	8a 95       	dec	r24
    4314:	e1 f7       	brne	.-8      	; 0x430e <main+0x252e>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    4316:	ee e6       	ldi	r30, 0x6E	; 110
    4318:	f6 e0       	ldi	r31, 0x06	; 6
    431a:	53 cb       	rjmp	.-2394   	; 0x39c2 <main+0x1be2>
	char buf[20];
	
	sprintf(buf, "%s", noteSyncLine);
	if(osc1NoteSync != false)
	{
		sprintf(buf + 6, "%s", onString);
    431c:	8f e4       	ldi	r24, 0x4F	; 79
    431e:	9e e4       	ldi	r25, 0x4E	; 78
    4320:	a0 e0       	ldi	r26, 0x00	; 0
    4322:	8f 83       	std	Y+7, r24	; 0x07
    4324:	98 87       	std	Y+8, r25	; 0x08
    4326:	a9 87       	std	Y+9, r26	; 0x09
    4328:	08 ca       	rjmp	.-3056   	; 0x373a <main+0x195a>
						lfoWaveForm = WAVE_RSAW;
						menuKnobPos[MENU_LFO][3] = 511 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 852)
    432a:	84 35       	cpi	r24, 0x54	; 84
    432c:	43 e0       	ldi	r20, 0x03	; 3
    432e:	94 07       	cpc	r25, r20
    4330:	0c f0       	brlt	.+2      	; 0x4334 <main+0x2554>
    4332:	8e c0       	rjmp	.+284    	; 0x4450 <main+0x2670>
				{
					if(lfoWaveForm != WAVE_SQU)
    4334:	80 91 04 01 	lds	r24, 0x0104
    4338:	84 30       	cpi	r24, 0x04	; 4
    433a:	09 f4       	brne	.+2      	; 0x433e <main+0x255e>
    433c:	98 ca       	rjmp	.-2768   	; 0x386e <main+0x1a8e>
					{
						lfoWaveForm = WAVE_SQU;
    433e:	84 e0       	ldi	r24, 0x04	; 4
    4340:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 682 + 85;
    4344:	8f ef       	ldi	r24, 0xFF	; 255
    4346:	92 e0       	ldi	r25, 0x02	; 2
    4348:	90 93 9a 05 	sts	0x059A, r25
    434c:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    4350:	87 e0       	ldi	r24, 0x07	; 7
    4352:	e7 e1       	ldi	r30, 0x17	; 23
    4354:	f1 e0       	ldi	r31, 0x01	; 1
    4356:	d5 01       	movw	r26, r10
    4358:	01 90       	ld	r0, Z+
    435a:	0d 92       	st	X+, r0
    435c:	8a 95       	dec	r24
    435e:	e1 f7       	brne	.-8      	; 0x4358 <main+0x2578>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    4360:	e8 e8       	ldi	r30, 0x88	; 136
    4362:	f6 e0       	ldi	r31, 0x06	; 6
    4364:	bb cb       	rjmp	.-2186   	; 0x3adc <main+0x1cfc>
						osc2WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC2][3] = 511;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    4366:	8a 3d       	cpi	r24, 0xDA	; 218
    4368:	42 e0       	ldi	r20, 0x02	; 2
    436a:	94 07       	cpc	r25, r20
    436c:	0c f0       	brlt	.+2      	; 0x4370 <main+0x2590>
    436e:	46 c0       	rjmp	.+140    	; 0x43fc <main+0x261c>
				{
					if(osc2WaveForm != WAVE_SQU)
    4370:	80 91 02 01 	lds	r24, 0x0102
    4374:	84 30       	cpi	r24, 0x04	; 4
    4376:	11 f4       	brne	.+4      	; 0x437c <main+0x259c>
    4378:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_SQU;
    437c:	84 e0       	ldi	r24, 0x04	; 4
    437e:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
    4382:	81 e9       	ldi	r24, 0x91	; 145
    4384:	92 e0       	ldi	r25, 0x02	; 2
    4386:	53 cb       	rjmp	.-2394   	; 0x3a2e <main+0x1c4e>
						osc1WaveForm = WAVE_RSAW;
						menuKnobPos[MENU_OSC1][3] = 511;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 730)
    4388:	8a 3d       	cpi	r24, 0xDA	; 218
    438a:	42 e0       	ldi	r20, 0x02	; 2
    438c:	94 07       	cpc	r25, r20
    438e:	0c f0       	brlt	.+2      	; 0x4392 <main+0x25b2>
    4390:	7c c0       	rjmp	.+248    	; 0x448a <main+0x26aa>
				{
					if(osc1WaveForm != WAVE_SQU)
    4392:	80 91 03 01 	lds	r24, 0x0103
    4396:	84 30       	cpi	r24, 0x04	; 4
    4398:	11 f4       	brne	.+4      	; 0x439e <main+0x25be>
    439a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_SQU;
    439e:	84 e0       	ldi	r24, 0x04	; 4
    43a0:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
    43a4:	81 e9       	ldi	r24, 0x91	; 145
    43a6:	92 e0       	ldi	r25, 0x02	; 2
    43a8:	ce cb       	rjmp	.-2148   	; 0x3b46 <main+0x1d66>
						osc2OctaveShift = 1;
						menuKnobPos[MENU_OSC2][0] = 615+102;
						osc2MenuOctaveUpdate();
					}
				}
				else if(adcValue[0] < 1023)
    43aa:	8f 3f       	cpi	r24, 0xFF	; 255
    43ac:	93 40       	sbci	r25, 0x03	; 3
    43ae:	14 f0       	brlt	.+4      	; 0x43b4 <main+0x25d4>
    43b0:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
				{
					if(osc2OctaveShift != 2)
    43b4:	80 91 cb 05 	lds	r24, 0x05CB
    43b8:	82 30       	cpi	r24, 0x02	; 2
    43ba:	11 f4       	brne	.+4      	; 0x43c0 <main+0x25e0>
    43bc:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						osc2OctaveShift = 2;
    43c0:	22 e0       	ldi	r18, 0x02	; 2
    43c2:	20 93 cb 05 	sts	0x05CB, r18
						menuKnobPos[MENU_OSC2][0] = 820+102;
    43c6:	8a e9       	ldi	r24, 0x9A	; 154
    43c8:	93 e0       	ldi	r25, 0x03	; 3
    43ca:	44 cf       	rjmp	.-376    	; 0x4254 <main+0x2474>
					{
						lfoRoute = ROUTE_CENTS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 465)
    43cc:	81 3d       	cpi	r24, 0xD1	; 209
    43ce:	21 e0       	ldi	r18, 0x01	; 1
    43d0:	92 07       	cpc	r25, r18
    43d2:	2c f5       	brge	.+74     	; 0x441e <main+0x263e>
				{
					if(lfoRoute != ROUTE_SEMIS1)
    43d4:	80 91 b6 05 	lds	r24, 0x05B6
    43d8:	84 30       	cpi	r24, 0x04	; 4
    43da:	11 f4       	brne	.+4      	; 0x43e0 <main+0x2600>
    43dc:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS1;
    43e0:	84 e0       	ldi	r24, 0x04	; 4
    43e2:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    43e6:	87 e0       	ldi	r24, 0x07	; 7
    43e8:	e5 e3       	ldi	r30, 0x35	; 53
    43ea:	f1 e0       	ldi	r31, 0x01	; 1
    43ec:	d5 01       	movw	r26, r10
    43ee:	01 90       	ld	r0, Z+
    43f0:	0d 92       	st	X+, r0
    43f2:	8a 95       	dec	r24
    43f4:	e1 f7       	brne	.-8      	; 0x43ee <main+0x260e>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    43f6:	e0 e7       	ldi	r30, 0x70	; 112
    43f8:	f6 e0       	ldi	r31, 0x06	; 6
    43fa:	e3 ca       	rjmp	.-2618   	; 0x39c2 <main+0x1be2>
						osc2WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC2][3] = 584 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    43fc:	8c 36       	cpi	r24, 0x6C	; 108
    43fe:	53 e0       	ldi	r21, 0x03	; 3
    4400:	95 07       	cpc	r25, r21
    4402:	0c f0       	brlt	.+2      	; 0x4406 <main+0x2626>
    4404:	52 c0       	rjmp	.+164    	; 0x44aa <main+0x26ca>
				{
					if(osc2WaveForm != WAVE_NOISE)
    4406:	80 91 02 01 	lds	r24, 0x0102
    440a:	85 30       	cpi	r24, 0x05	; 5
    440c:	11 f4       	brne	.+4      	; 0x4412 <main+0x2632>
    440e:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_NOISE;
    4412:	85 e0       	ldi	r24, 0x05	; 5
    4414:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
    4418:	83 e2       	ldi	r24, 0x23	; 35
    441a:	93 e0       	ldi	r25, 0x03	; 3
    441c:	08 cb       	rjmp	.-2544   	; 0x3a2e <main+0x1c4e>
					{
						lfoRoute = ROUTE_SEMIS1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 558)
    441e:	8e 32       	cpi	r24, 0x2E	; 46
    4420:	42 e0       	ldi	r20, 0x02	; 2
    4422:	94 07       	cpc	r25, r20
    4424:	0c f0       	brlt	.+2      	; 0x4428 <main+0x2648>
    4426:	52 c0       	rjmp	.+164    	; 0x44cc <main+0x26ec>
				{
					if(lfoRoute != ROUTE_SEMIS2)
    4428:	80 91 b6 05 	lds	r24, 0x05B6
    442c:	85 30       	cpi	r24, 0x05	; 5
    442e:	11 f4       	brne	.+4      	; 0x4434 <main+0x2654>
    4430:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_SEMIS2;
    4434:	55 e0       	ldi	r21, 0x05	; 5
    4436:	50 93 b6 05 	sts	0x05B6, r21

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    443a:	87 e0       	ldi	r24, 0x07	; 7
    443c:	e5 e3       	ldi	r30, 0x35	; 53
    443e:	f1 e0       	ldi	r31, 0x01	; 1
    4440:	d5 01       	movw	r26, r10
    4442:	01 90       	ld	r0, Z+
    4444:	0d 92       	st	X+, r0
    4446:	8a 95       	dec	r24
    4448:	e1 f7       	brne	.-8      	; 0x4442 <main+0x2662>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    444a:	e2 e7       	ldi	r30, 0x72	; 114
    444c:	f6 e0       	ldi	r31, 0x06	; 6
    444e:	b9 ca       	rjmp	.-2702   	; 0x39c2 <main+0x1be2>
						lfoWaveForm = WAVE_SQU;
						menuKnobPos[MENU_LFO][3] = 682 + 85;
						lfoMenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    4450:	8f 3f       	cpi	r24, 0xFF	; 255
    4452:	93 40       	sbci	r25, 0x03	; 3
    4454:	0c f0       	brlt	.+2      	; 0x4458 <main+0x2678>
    4456:	0b ca       	rjmp	.-3050   	; 0x386e <main+0x1a8e>
				{
					if(lfoWaveForm != WAVE_FLAT)
    4458:	80 91 04 01 	lds	r24, 0x0104
    445c:	86 30       	cpi	r24, 0x06	; 6
    445e:	09 f4       	brne	.+2      	; 0x4462 <main+0x2682>
    4460:	06 ca       	rjmp	.-3060   	; 0x386e <main+0x1a8e>
					{
						lfoWaveForm = WAVE_FLAT;
    4462:	86 e0       	ldi	r24, 0x06	; 6
    4464:	80 93 04 01 	sts	0x0104, r24
						menuKnobPos[MENU_LFO][3] = 852 + 85;
    4468:	89 ea       	ldi	r24, 0xA9	; 169
    446a:	93 e0       	ldi	r25, 0x03	; 3
    446c:	90 93 9a 05 	sts	0x059A, r25
    4470:	80 93 99 05 	sts	0x0599, r24

inline void lfoMenuWaveformUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", waveformLine);
    4474:	87 e0       	ldi	r24, 0x07	; 7
    4476:	e7 e1       	ldi	r30, 0x17	; 23
    4478:	f1 e0       	ldi	r31, 0x01	; 1
    447a:	d5 01       	movw	r26, r10
    447c:	01 90       	ld	r0, Z+
    447e:	0d 92       	st	X+, r0
    4480:	8a 95       	dec	r24
    4482:	e1 f7       	brne	.-8      	; 0x447c <main+0x269c>
	strcat_P(buf, (PGM_P)pgm_read_word(&waveNameTable[lfoWaveForm]));
    4484:	ec e8       	ldi	r30, 0x8C	; 140
    4486:	f6 e0       	ldi	r31, 0x06	; 6
    4488:	29 cb       	rjmp	.-2478   	; 0x3adc <main+0x1cfc>
						osc1WaveForm = WAVE_SQU;
						menuKnobPos[MENU_OSC1][3] = 584 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 876)
    448a:	8c 36       	cpi	r24, 0x6C	; 108
    448c:	53 e0       	ldi	r21, 0x03	; 3
    448e:	95 07       	cpc	r25, r21
    4490:	ac f5       	brge	.+106    	; 0x44fc <main+0x271c>
				{
					if(osc1WaveForm != WAVE_NOISE)
    4492:	80 91 03 01 	lds	r24, 0x0103
    4496:	85 30       	cpi	r24, 0x05	; 5
    4498:	11 f4       	brne	.+4      	; 0x449e <main+0x26be>
    449a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_NOISE;
    449e:	85 e0       	ldi	r24, 0x05	; 5
    44a0:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
    44a4:	83 e2       	ldi	r24, 0x23	; 35
    44a6:	93 e0       	ldi	r25, 0x03	; 3
    44a8:	4e cb       	rjmp	.-2404   	; 0x3b46 <main+0x1d66>
						osc2WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC2][3] = 730 + 73;
						osc2MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    44aa:	8f 3f       	cpi	r24, 0xFF	; 255
    44ac:	93 40       	sbci	r25, 0x03	; 3
    44ae:	14 f0       	brlt	.+4      	; 0x44b4 <main+0x26d4>
    44b0:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
				{
					if(osc2WaveForm != WAVE_FLAT)
    44b4:	80 91 02 01 	lds	r24, 0x0102
    44b8:	86 30       	cpi	r24, 0x06	; 6
    44ba:	11 f4       	brne	.+4      	; 0x44c0 <main+0x26e0>
    44bc:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <main+0xf28>
					{
						osc2WaveForm = WAVE_FLAT;
    44c0:	86 e0       	ldi	r24, 0x06	; 6
    44c2:	80 93 02 01 	sts	0x0102, r24
						menuKnobPos[MENU_OSC2][3] = 876 + 73;
    44c6:	85 eb       	ldi	r24, 0xB5	; 181
    44c8:	93 e0       	ldi	r25, 0x03	; 3
    44ca:	b1 ca       	rjmp	.-2718   	; 0x3a2e <main+0x1c4e>
					{
						lfoRoute = ROUTE_SEMIS2;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 651)
    44cc:	8b 38       	cpi	r24, 0x8B	; 139
    44ce:	a2 e0       	ldi	r26, 0x02	; 2
    44d0:	9a 07       	cpc	r25, r26
    44d2:	2c f5       	brge	.+74     	; 0x451e <main+0x273e>
				{
					if(lfoRoute != ROUTE_PHASE1)
    44d4:	80 91 b6 05 	lds	r24, 0x05B6
    44d8:	86 30       	cpi	r24, 0x06	; 6
    44da:	11 f4       	brne	.+4      	; 0x44e0 <main+0x2700>
    44dc:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE1;
    44e0:	86 e0       	ldi	r24, 0x06	; 6
    44e2:	80 93 b6 05 	sts	0x05B6, r24

inline void lfoMenuRouteUpdate()
{
	char buf[20];
	
	sprintf(buf, "%s", routeLine);
    44e6:	87 e0       	ldi	r24, 0x07	; 7
    44e8:	e5 e3       	ldi	r30, 0x35	; 53
    44ea:	f1 e0       	ldi	r31, 0x01	; 1
    44ec:	d5 01       	movw	r26, r10
    44ee:	01 90       	ld	r0, Z+
    44f0:	0d 92       	st	X+, r0
    44f2:	8a 95       	dec	r24
    44f4:	e1 f7       	brne	.-8      	; 0x44ee <main+0x270e>
	strcat_P(buf, (PGM_P)pgm_read_word(&routeNameTable[lfoRoute]));
    44f6:	e4 e7       	ldi	r30, 0x74	; 116
    44f8:	f6 e0       	ldi	r31, 0x06	; 6
    44fa:	63 ca       	rjmp	.-2874   	; 0x39c2 <main+0x1be2>
						osc1WaveForm = WAVE_NOISE;
						menuKnobPos[MENU_OSC1][3] = 730 + 73;
						osc1MenuWaveformUpdate();
					}
				}
				else if(adcValue[3] < 1023)
    44fc:	8f 3f       	cpi	r24, 0xFF	; 255
    44fe:	93 40       	sbci	r25, 0x03	; 3
    4500:	14 f0       	brlt	.+4      	; 0x4506 <main+0x2726>
    4502:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
				{
					if(osc1WaveForm != WAVE_FLAT)
    4506:	80 91 03 01 	lds	r24, 0x0103
    450a:	86 30       	cpi	r24, 0x06	; 6
    450c:	11 f4       	brne	.+4      	; 0x4512 <main+0x2732>
    450e:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <main+0x1408>
					{
						osc1WaveForm = WAVE_FLAT;
    4512:	86 e0       	ldi	r24, 0x06	; 6
    4514:	80 93 03 01 	sts	0x0103, r24
						menuKnobPos[MENU_OSC1][3] = 876 + 73;
    4518:	85 eb       	ldi	r24, 0xB5	; 181
    451a:	93 e0       	ldi	r25, 0x03	; 3
    451c:	14 cb       	rjmp	.-2520   	; 0x3b46 <main+0x1d66>
					{
						lfoRoute = ROUTE_PHASE1;
						lfoMenuRouteUpdate();
					}
				}
				else if(adcValue[0] < 744)
    451e:	88 3e       	cpi	r24, 0xE8	; 232
    4520:	b2 e0       	ldi	r27, 0x02	; 2
    4522:	9b 07       	cpc	r25, r27
    4524:	6c f4       	brge	.+26     	; 0x4540 <main+0x2760>
				{
					if(lfoRoute != ROUTE_PHASE2)
    4526:	80 91 b6 05 	lds	r24, 0x05B6
    452a:	87 30       	cpi	r24, 0x07	; 7
    452c:	11 f4       	brne	.+4      	; 0x4532 <main+0x2752>
    452e:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_PHASE2;
    4532:	87 e0       	ldi	r24, 0x07	; 7
    4534:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    4538:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z18lfoMenuRouteUpdatev>
    453c:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					}
				}
				else if(adcValue[0] < 837)
    4540:	85 34       	cpi	r24, 0x45	; 69
    4542:	23 e0       	ldi	r18, 0x03	; 3
    4544:	92 07       	cpc	r25, r18
    4546:	6c f4       	brge	.+26     	; 0x4562 <main+0x2782>
				{
					if(lfoRoute != ROUTE_WAVE1)
    4548:	80 91 b6 05 	lds	r24, 0x05B6
    454c:	88 30       	cpi	r24, 0x08	; 8
    454e:	11 f4       	brne	.+4      	; 0x4554 <main+0x2774>
    4550:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE1;
    4554:	88 e0       	ldi	r24, 0x08	; 8
    4556:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    455a:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z18lfoMenuRouteUpdatev>
    455e:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					}
				}
				else if(adcValue[0] < 930)
    4562:	82 3a       	cpi	r24, 0xA2	; 162
    4564:	43 e0       	ldi	r20, 0x03	; 3
    4566:	94 07       	cpc	r25, r20
    4568:	6c f4       	brge	.+26     	; 0x4584 <main+0x27a4>
				{
					if(lfoRoute != ROUTE_WAVE2)
    456a:	80 91 b6 05 	lds	r24, 0x05B6
    456e:	89 30       	cpi	r24, 0x09	; 9
    4570:	11 f4       	brne	.+4      	; 0x4576 <main+0x2796>
    4572:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_WAVE2;
    4576:	89 e0       	ldi	r24, 0x09	; 9
    4578:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    457c:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z18lfoMenuRouteUpdatev>
    4580:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					}
				}
				else if(adcValue[0] < 1023)
    4584:	8f 3f       	cpi	r24, 0xFF	; 255
    4586:	93 40       	sbci	r25, 0x03	; 3
    4588:	14 f0       	brlt	.+4      	; 0x458e <main+0x27ae>
    458a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
				{
					if(lfoRoute != ROUTE_CUTOFF)
    458e:	80 91 b6 05 	lds	r24, 0x05B6
    4592:	8a 30       	cpi	r24, 0x0A	; 10
    4594:	11 f4       	brne	.+4      	; 0x459a <main+0x27ba>
    4596:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>
					{
						lfoRoute = ROUTE_CUTOFF;
    459a:	8a e0       	ldi	r24, 0x0A	; 10
    459c:	80 93 b6 05 	sts	0x05B6, r24
						lfoMenuRouteUpdate();
    45a0:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z18lfoMenuRouteUpdatev>
    45a4:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <main+0x158>

000045a8 <__vector_18>:
		lfsrState ^= 0xB400;
	}
}

ISR(USART_RX_vect)
{
    45a8:	1f 92       	push	r1
    45aa:	0f 92       	push	r0
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	0f 92       	push	r0
    45b0:	11 24       	eor	r1, r1
    45b2:	2f 92       	push	r2
    45b4:	3f 92       	push	r3
    45b6:	4f 92       	push	r4
    45b8:	5f 92       	push	r5
    45ba:	6f 92       	push	r6
    45bc:	7f 92       	push	r7
    45be:	8f 92       	push	r8
    45c0:	9f 92       	push	r9
    45c2:	af 92       	push	r10
    45c4:	bf 92       	push	r11
    45c6:	cf 92       	push	r12
    45c8:	df 92       	push	r13
    45ca:	ef 92       	push	r14
    45cc:	ff 92       	push	r15
    45ce:	0f 93       	push	r16
    45d0:	2f 93       	push	r18
    45d2:	3f 93       	push	r19
    45d4:	4f 93       	push	r20
    45d6:	5f 93       	push	r21
    45d8:	6f 93       	push	r22
    45da:	7f 93       	push	r23
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	2a 97       	sbiw	r28, 0x0a	; 10
    45f2:	de bf       	out	0x3e, r29	; 62
    45f4:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg = UDR0;
    45f6:	80 91 c6 00 	lds	r24, 0x00C6
	
	if(msg & 0x80) //New command
    45fa:	87 fd       	sbrc	r24, 7
    45fc:	be c0       	rjmp	.+380    	; 0x477a <__vector_18+0x1d2>
		
		commandCount = 1;
	}
	else
	{
		commandBytes[commandCount] = msg;
    45fe:	90 91 fa 05 	lds	r25, 0x05FA
    4602:	e9 2f       	mov	r30, r25
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	e5 50       	subi	r30, 0x05	; 5
    4608:	fa 4f       	sbci	r31, 0xFA	; 250
    460a:	80 83       	st	Z, r24
		commandCount++;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	89 0f       	add	r24, r25
    4610:	80 93 fa 05 	sts	0x05FA, r24
		
		if(commandCount == 3)
    4614:	83 30       	cpi	r24, 0x03	; 3
    4616:	41 f1       	breq	.+80     	; 0x4668 <__vector_18+0xc0>
				}
				break;
			}
		}
	}
}
    4618:	2a 96       	adiw	r28, 0x0a	; 10
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	f8 94       	cli
    461e:	de bf       	out	0x3e, r29	; 62
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	cd bf       	out	0x3d, r28	; 61
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	ff 91       	pop	r31
    462a:	ef 91       	pop	r30
    462c:	bf 91       	pop	r27
    462e:	af 91       	pop	r26
    4630:	9f 91       	pop	r25
    4632:	8f 91       	pop	r24
    4634:	7f 91       	pop	r23
    4636:	6f 91       	pop	r22
    4638:	5f 91       	pop	r21
    463a:	4f 91       	pop	r20
    463c:	3f 91       	pop	r19
    463e:	2f 91       	pop	r18
    4640:	0f 91       	pop	r16
    4642:	ff 90       	pop	r15
    4644:	ef 90       	pop	r14
    4646:	df 90       	pop	r13
    4648:	cf 90       	pop	r12
    464a:	bf 90       	pop	r11
    464c:	af 90       	pop	r10
    464e:	9f 90       	pop	r9
    4650:	8f 90       	pop	r8
    4652:	7f 90       	pop	r7
    4654:	6f 90       	pop	r6
    4656:	5f 90       	pop	r5
    4658:	4f 90       	pop	r4
    465a:	3f 90       	pop	r3
    465c:	2f 90       	pop	r2
    465e:	0f 90       	pop	r0
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	0f 90       	pop	r0
    4664:	1f 90       	pop	r1
    4666:	18 95       	reti
		commandBytes[commandCount] = msg;
		commandCount++;
		
		if(commandCount == 3)
		{
			commandCount = 1;
    4668:	21 e0       	ldi	r18, 0x01	; 1
    466a:	20 93 fa 05 	sts	0x05FA, r18
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    466e:	80 91 fb 05 	lds	r24, 0x05FB
    4672:	80 39       	cpi	r24, 0x90	; 144
    4674:	09 f4       	brne	.+2      	; 0x4678 <__vector_18+0xd0>
    4676:	88 c0       	rjmp	.+272    	; 0x4788 <__vector_18+0x1e0>
				commandBytes[0] = NOTE_OFF;

			switch(commandBytes[0])
    4678:	80 38       	cpi	r24, 0x80	; 128
    467a:	71 f6       	brne	.-100    	; 0x4618 <__vector_18+0x70>
				noteUpdate();
				break;
				
				case NOTE_OFF:
				//writeLine(1, "NOTE OFF   ");
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 0;
    467c:	80 91 fc 05 	lds	r24, 0x05FC
    4680:	48 2f       	mov	r20, r24
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	45 51       	subi	r20, 0x15	; 21
    4686:	51 09       	sbc	r21, r1
    4688:	5a 87       	std	Y+10, r21	; 0x0a
    468a:	49 87       	std	Y+9, r20	; 0x09
    468c:	fa 01       	movw	r30, r20
    468e:	ea 5f       	subi	r30, 0xFA	; 250
    4690:	fa 4f       	sbci	r31, 0xFA	; 250
    4692:	10 82       	st	Z, r1
				if(duoMode)
    4694:	80 91 05 01 	lds	r24, 0x0105
    4698:	88 23       	and	r24, r24
    469a:	09 f4       	brne	.+2      	; 0x469e <__vector_18+0xf6>
    469c:	a5 c0       	rjmp	.+330    	; 0x47e8 <__vector_18+0x240>
				{
					if(osc1Busy)
    469e:	80 91 db 05 	lds	r24, 0x05DB
    46a2:	88 23       	and	r24, r24
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <__vector_18+0x100>
    46a6:	b8 cf       	rjmp	.-144    	; 0x4618 <__vector_18+0x70>
					{
						if(osc1Note == osc2Note)
    46a8:	80 91 da 05 	lds	r24, 0x05DA
    46ac:	20 91 c1 05 	lds	r18, 0x05C1
						{
							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    46b0:	90 e0       	ldi	r25, 0x00	; 0
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 0;
				if(duoMode)
				{
					if(osc1Busy)
					{
						if(osc1Note == osc2Note)
    46b2:	82 17       	cp	r24, r18
    46b4:	09 f4       	brne	.+2      	; 0x46b8 <__vector_18+0x110>
    46b6:	11 c2       	rjmp	.+1058   	; 0x4ada <__vector_18+0x532>
								}
							}
						}
						else
						{
							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    46b8:	a9 85       	ldd	r26, Y+9	; 0x09
    46ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    46bc:	a8 17       	cp	r26, r24
    46be:	b9 07       	cpc	r27, r25
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <__vector_18+0x11c>
    46c2:	aa cf       	rjmp	.-172    	; 0x4618 <__vector_18+0x70>
    46c4:	10 c0       	rjmp	.+32     	; 0x46e6 <__vector_18+0x13e>
							{
								while(highNote >= 0)
								{
									if(usedKeys[highNote] == 1)
    46c6:	e0 91 05 05 	lds	r30, 0x0505
    46ca:	ff 27       	eor	r31, r31
    46cc:	e7 fd       	sbrc	r30, 7
    46ce:	f0 95       	com	r31
    46d0:	ea 5f       	subi	r30, 0xFA	; 250
    46d2:	fa 4f       	sbci	r31, 0xFA	; 250
    46d4:	80 81       	ld	r24, Z
    46d6:	81 30       	cpi	r24, 0x01	; 1
    46d8:	09 f4       	brne	.+2      	; 0x46dc <__vector_18+0x134>
    46da:	31 c2       	rjmp	.+1122   	; 0x4b3e <__vector_18+0x596>
										osc1Busy = (osc2Busy = true);
										noteUpdate();
										break;
									}

									highNote--;
    46dc:	80 91 05 05 	lds	r24, 0x0505
    46e0:	81 50       	subi	r24, 0x01	; 1
    46e2:	80 93 05 05 	sts	0x0505, r24
						}
						else
						{
							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
							{
								while(highNote >= 0)
    46e6:	80 91 05 05 	lds	r24, 0x0505
    46ea:	87 ff       	sbrs	r24, 7
    46ec:	ec cf       	rjmp	.-40     	; 0x46c6 <__vector_18+0x11e>
								}
							}

							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
							{
								osc2Busy = false;
    46ee:	10 92 c0 05 	sts	0x05C0, r1

								while(highNote >= 0)
    46f2:	80 91 05 05 	lds	r24, 0x0505
    46f6:	87 ff       	sbrs	r24, 7
    46f8:	0a c0       	rjmp	.+20     	; 0x470e <__vector_18+0x166>
    46fa:	8e cf       	rjmp	.-228    	; 0x4618 <__vector_18+0x70>
										osc1Busy = (osc2Busy = true);
										noteUpdate();
										break;
									}

									highNote--;
    46fc:	80 91 05 05 	lds	r24, 0x0505
    4700:	81 50       	subi	r24, 0x01	; 1
    4702:	80 93 05 05 	sts	0x0505, r24

							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
							{
								osc2Busy = false;

								while(highNote >= 0)
    4706:	80 91 05 05 	lds	r24, 0x0505
    470a:	87 fd       	sbrc	r24, 7
    470c:	85 cf       	rjmp	.-246    	; 0x4618 <__vector_18+0x70>
								{
									if(usedKeys[highNote] == 1)
    470e:	e0 91 05 05 	lds	r30, 0x0505
    4712:	ff 27       	eor	r31, r31
    4714:	e7 fd       	sbrc	r30, 7
    4716:	f0 95       	com	r31
    4718:	ea 5f       	subi	r30, 0xFA	; 250
    471a:	fa 4f       	sbci	r31, 0xFA	; 250
    471c:	80 81       	ld	r24, Z
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	69 f7       	brne	.-38     	; 0x46fc <__vector_18+0x154>
									{
										osc2Note = highNote;
    4722:	90 91 05 05 	lds	r25, 0x0505
    4726:	90 93 c1 05 	sts	0x05C1, r25
										notePlaying = true;
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	80 93 5e 05 	sts	0x055E, r24
										osc1Busy = (osc2Busy = true);
    4730:	80 93 c0 05 	sts	0x05C0, r24
    4734:	80 93 db 05 	sts	0x05DB, r24
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    4738:	80 91 e4 05 	lds	r24, 0x05E4
    473c:	e9 85       	ldd	r30, Y+9	; 0x09
    473e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4740:	e8 0f       	add	r30, r24
    4742:	f1 1d       	adc	r31, r1
    4744:	87 fd       	sbrc	r24, 7
    4746:	fa 95       	dec	r31
    4748:	ee 0f       	add	r30, r30
    474a:	ff 1f       	adc	r31, r31
    474c:	ee 0f       	add	r30, r30
    474e:	ff 1f       	adc	r31, r31
    4750:	ec 55       	subi	r30, 0x5C	; 92
    4752:	fe 4f       	sbci	r31, 0xFE	; 254
    4754:	c0 80       	ld	r12, Z
    4756:	d1 80       	ldd	r13, Z+1	; 0x01
    4758:	e2 80       	ldd	r14, Z+2	; 0x02
    475a:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    475c:	80 91 cb 05 	lds	r24, 0x05CB
    4760:	e0 91 cc 05 	lds	r30, 0x05CC
    4764:	ff 27       	eor	r31, r31
    4766:	e7 fd       	sbrc	r30, 7
    4768:	f0 95       	com	r31
    476a:	e9 0f       	add	r30, r25
    476c:	f1 1d       	adc	r31, r1
    476e:	3c e0       	ldi	r19, 0x0C	; 12
    4770:	83 02       	muls	r24, r19
    4772:	e0 0d       	add	r30, r0
    4774:	f1 1d       	adc	r31, r1
    4776:	11 24       	eor	r1, r1
    4778:	04 c1       	rjmp	.+520    	; 0x4982 <__vector_18+0x3da>
{
	unsigned char msg = UDR0;
	
	if(msg & 0x80) //New command
	{
		commandBytes[0] = msg & 0xF0;
    477a:	80 7f       	andi	r24, 0xF0	; 240
    477c:	80 93 fb 05 	sts	0x05FB, r24
		
		commandCount = 1;
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	80 93 fa 05 	sts	0x05FA, r24
    4786:	48 cf       	rjmp	.-368    	; 0x4618 <__vector_18+0x70>
			writeLine(1, buf);

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
    4788:	80 91 fd 05 	lds	r24, 0x05FD
    478c:	88 23       	and	r24, r24
    478e:	09 f4       	brne	.+2      	; 0x4792 <__vector_18+0x1ea>
    4790:	99 c1       	rjmp	.+818    	; 0x4ac4 <__vector_18+0x51c>

			switch(commandBytes[0])
			{
				case NOTE_ON:
				//writeLine(1, "NOTE ON   ");
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 1;
    4792:	40 91 fc 05 	lds	r20, 0x05FC
    4796:	84 2f       	mov	r24, r20
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	45 97       	sbiw	r24, 0x15	; 21
    479c:	fc 01       	movw	r30, r24
    479e:	ea 5f       	subi	r30, 0xFA	; 250
    47a0:	fa 4f       	sbci	r31, 0xFA	; 250
    47a2:	20 83       	st	Z, r18
				if(commandBytes[1] - MIDI_OFFSET > highNote)
    47a4:	20 91 05 05 	lds	r18, 0x0505
    47a8:	33 27       	eor	r19, r19
    47aa:	27 fd       	sbrc	r18, 7
    47ac:	30 95       	com	r19
    47ae:	28 17       	cp	r18, r24
    47b0:	39 07       	cpc	r19, r25
    47b2:	0c f4       	brge	.+2      	; 0x47b6 <__vector_18+0x20e>
    47b4:	82 c1       	rjmp	.+772    	; 0x4aba <__vector_18+0x512>
    47b6:	8b ee       	ldi	r24, 0xEB	; 235
    47b8:	84 0f       	add	r24, r20
				{
					highNote = commandBytes[1] - MIDI_OFFSET;
				}

				if(duoMode)
    47ba:	90 91 05 01 	lds	r25, 0x0105
    47be:	99 23       	and	r25, r25
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <__vector_18+0x21c>
    47c2:	b3 c0       	rjmp	.+358    	; 0x492a <__vector_18+0x382>
				{
					if(osc1Busy)
    47c4:	90 91 db 05 	lds	r25, 0x05DB
					{
						osc2Note = commandBytes[1] - MIDI_OFFSET; //Move this note to the second osc
    47c8:	80 93 c1 05 	sts	0x05C1, r24
					highNote = commandBytes[1] - MIDI_OFFSET;
				}

				if(duoMode)
				{
					if(osc1Busy)
    47cc:	99 23       	and	r25, r25
    47ce:	09 f4       	brne	.+2      	; 0x47d2 <__vector_18+0x22a>
    47d0:	7d c1       	rjmp	.+762    	; 0x4acc <__vector_18+0x524>
					{
						osc2Note = commandBytes[1] - MIDI_OFFSET; //Move this note to the second osc
							
						if(osc2Note > osc1Note)
    47d2:	20 91 da 05 	lds	r18, 0x05DA
    47d6:	28 17       	cp	r18, r24
    47d8:	08 f0       	brcs	.+2      	; 0x47dc <__vector_18+0x234>
    47da:	7c c1       	rjmp	.+760    	; 0x4ad4 <__vector_18+0x52c>
						{
							char temp = osc2Note;
							osc2Note = osc1Note;
    47dc:	20 93 c1 05 	sts	0x05C1, r18
							osc1Note = temp;
    47e0:	80 93 da 05 	sts	0x05DA, r24
    47e4:	92 2f       	mov	r25, r18
    47e6:	ab c0       	rjmp	.+342    	; 0x493e <__vector_18+0x396>
						}
					}
				}
				else
				{
					if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    47e8:	80 91 da 05 	lds	r24, 0x05DA
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	48 17       	cp	r20, r24
    47f0:	59 07       	cpc	r21, r25
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <__vector_18+0x24e>
    47f4:	11 cf       	rjmp	.-478    	; 0x4618 <__vector_18+0x70>
					{
						notePlaying = false;
    47f6:	10 92 5e 05 	sts	0x055E, r1
						osc1Busy = (osc2Busy = false);
    47fa:	10 92 c0 05 	sts	0x05C0, r1
    47fe:	10 92 db 05 	sts	0x05DB, r1

						while(highNote >= 0)
    4802:	80 91 05 05 	lds	r24, 0x0505
    4806:	87 fd       	sbrc	r24, 7
    4808:	07 cf       	rjmp	.-498    	; 0x4618 <__vector_18+0x70>
    480a:	09 c0       	rjmp	.+18     	; 0x481e <__vector_18+0x276>
								osc1Busy = (osc2Busy = true);
								noteUpdate();
								break;
							}

							highNote--;
    480c:	80 91 05 05 	lds	r24, 0x0505
    4810:	81 50       	subi	r24, 0x01	; 1
    4812:	80 93 05 05 	sts	0x0505, r24
					if(commandBytes[1] - MIDI_OFFSET == osc1Note)
					{
						notePlaying = false;
						osc1Busy = (osc2Busy = false);

						while(highNote >= 0)
    4816:	80 91 05 05 	lds	r24, 0x0505
    481a:	87 fd       	sbrc	r24, 7
    481c:	fd ce       	rjmp	.-518    	; 0x4618 <__vector_18+0x70>
						{
							if(usedKeys[highNote] == 1)
    481e:	e0 91 05 05 	lds	r30, 0x0505
    4822:	ff 27       	eor	r31, r31
    4824:	e7 fd       	sbrc	r30, 7
    4826:	f0 95       	com	r31
    4828:	ea 5f       	subi	r30, 0xFA	; 250
    482a:	fa 4f       	sbci	r31, 0xFA	; 250
    482c:	80 81       	ld	r24, Z
    482e:	81 30       	cpi	r24, 0x01	; 1
    4830:	69 f7       	brne	.-38     	; 0x480c <__vector_18+0x264>
							{
								osc1Note = (osc2Note = highNote);
    4832:	e0 91 05 05 	lds	r30, 0x0505
    4836:	e0 93 c1 05 	sts	0x05C1, r30
    483a:	e0 93 da 05 	sts	0x05DA, r30
								notePlaying = true;
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	80 93 5e 05 	sts	0x055E, r24
								osc1Busy = (osc2Busy = true);
    4844:	80 93 c0 05 	sts	0x05C0, r24
    4848:	80 93 db 05 	sts	0x05DB, r24
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 91 e4 05 	lds	r24, 0x05E4
    4852:	df 01       	movw	r26, r30
    4854:	a8 0f       	add	r26, r24
    4856:	b1 1d       	adc	r27, r1
    4858:	87 fd       	sbrc	r24, 7
    485a:	ba 95       	dec	r27
    485c:	aa 0f       	add	r26, r26
    485e:	bb 1f       	adc	r27, r27
    4860:	aa 0f       	add	r26, r26
    4862:	bb 1f       	adc	r27, r27
    4864:	ac 55       	subi	r26, 0x5C	; 92
    4866:	be 4f       	sbci	r27, 0xFE	; 254
    4868:	cd 90       	ld	r12, X+
    486a:	dd 90       	ld	r13, X+
    486c:	ed 90       	ld	r14, X+
    486e:	fc 90       	ld	r15, X
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    4870:	80 91 cb 05 	lds	r24, 0x05CB
    4874:	90 91 cc 05 	lds	r25, 0x05CC
    4878:	e9 0f       	add	r30, r25
    487a:	f1 1d       	adc	r31, r1
    487c:	97 fd       	sbrc	r25, 7
    487e:	fa 95       	dec	r31
    4880:	5c e0       	ldi	r21, 0x0C	; 12
    4882:	85 02       	muls	r24, r21
    4884:	e0 0d       	add	r30, r0
    4886:	f1 1d       	adc	r31, r1
    4888:	11 24       	eor	r1, r1
    488a:	ee 0f       	add	r30, r30
    488c:	ff 1f       	adc	r31, r31
    488e:	ee 0f       	add	r30, r30
    4890:	ff 1f       	adc	r31, r31
    4892:	ec 55       	subi	r30, 0x5C	; 92
    4894:	fe 4f       	sbci	r31, 0xFE	; 254
    4896:	80 80       	ld	r8, Z
    4898:	91 80       	ldd	r9, Z+1	; 0x01
    489a:	a2 80       	ldd	r10, Z+2	; 0x02
    489c:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    489e:	20 91 e5 05 	lds	r18, 0x05E5
    48a2:	87 e2       	ldi	r24, 0x27	; 39
    48a4:	28 02       	muls	r18, r24
    48a6:	90 01       	movw	r18, r0
    48a8:	11 24       	eor	r1, r1
    48aa:	44 27       	eor	r20, r20
    48ac:	37 fd       	sbrc	r19, 7
    48ae:	40 95       	com	r20
    48b0:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    48b2:	c7 01       	movw	r24, r14
    48b4:	b6 01       	movw	r22, r12
    48b6:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    48ba:	00 e1       	ldi	r16, 0x10	; 16
    48bc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    48c0:	29 83       	std	Y+1, r18	; 0x01
    48c2:	3a 83       	std	Y+2, r19	; 0x02
    48c4:	4b 83       	std	Y+3, r20	; 0x03
    48c6:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    48c8:	29 81       	ldd	r18, Y+1	; 0x01
    48ca:	3a 81       	ldd	r19, Y+2	; 0x02
    48cc:	4b 81       	ldd	r20, Y+3	; 0x03
    48ce:	5c 81       	ldd	r21, Y+4	; 0x04
    48d0:	c2 0e       	add	r12, r18
    48d2:	d3 1e       	adc	r13, r19
    48d4:	e4 1e       	adc	r14, r20
    48d6:	f5 1e       	adc	r15, r21
    48d8:	c0 92 f6 05 	sts	0x05F6, r12
    48dc:	d0 92 f7 05 	sts	0x05F7, r13
    48e0:	e0 92 f8 05 	sts	0x05F8, r14
    48e4:	f0 92 f9 05 	sts	0x05F9, r15

	centsConst = 0x27*osc2CentsShift;
    48e8:	20 91 cd 05 	lds	r18, 0x05CD
    48ec:	47 e2       	ldi	r20, 0x27	; 39
    48ee:	24 02       	muls	r18, r20
    48f0:	90 01       	movw	r18, r0
    48f2:	11 24       	eor	r1, r1
    48f4:	44 27       	eor	r20, r20
    48f6:	37 fd       	sbrc	r19, 7
    48f8:	40 95       	com	r20
    48fa:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    48fc:	c5 01       	movw	r24, r10
    48fe:	b4 01       	movw	r22, r8
    4900:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4904:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4908:	29 83       	std	Y+1, r18	; 0x01
    490a:	3a 83       	std	Y+2, r19	; 0x02
    490c:	4b 83       	std	Y+3, r20	; 0x03
    490e:	5c 83       	std	Y+4, r21	; 0x04
    4910:	6d 83       	std	Y+5, r22	; 0x05
    4912:	7e 83       	std	Y+6, r23	; 0x06
    4914:	8f 83       	std	Y+7, r24	; 0x07
    4916:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    4918:	89 81       	ldd	r24, Y+1	; 0x01
    491a:	9a 81       	ldd	r25, Y+2	; 0x02
    491c:	ab 81       	ldd	r26, Y+3	; 0x03
    491e:	bc 81       	ldd	r27, Y+4	; 0x04
    4920:	88 0e       	add	r8, r24
    4922:	99 1e       	adc	r9, r25
    4924:	aa 1e       	adc	r10, r26
    4926:	bb 1e       	adc	r11, r27
    4928:	7b c0       	rjmp	.+246    	; 0x4a20 <__vector_18+0x478>
						osc1Note = (osc2Note = commandBytes[1] - MIDI_OFFSET);
					}
				}
				else
				{
					osc1Note = commandBytes[1] - MIDI_OFFSET;
    492a:	80 93 da 05 	sts	0x05DA, r24
					osc2Note = osc1Note;
    492e:	80 93 c1 05 	sts	0x05C1, r24

					osc1Busy = (osc2Busy = true);
    4932:	91 e0       	ldi	r25, 0x01	; 1
    4934:	90 93 c0 05 	sts	0x05C0, r25
    4938:	90 93 db 05 	sts	0x05DB, r25
    493c:	98 2f       	mov	r25, r24
				}
				notePlaying = true;
    493e:	21 e0       	ldi	r18, 0x01	; 1
    4940:	20 93 5e 05 	sts	0x055E, r18
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    4944:	e0 91 e4 05 	lds	r30, 0x05E4
    4948:	ff 27       	eor	r31, r31
    494a:	e7 fd       	sbrc	r30, 7
    494c:	f0 95       	com	r31
    494e:	e8 0f       	add	r30, r24
    4950:	f1 1d       	adc	r31, r1
    4952:	ee 0f       	add	r30, r30
    4954:	ff 1f       	adc	r31, r31
    4956:	ee 0f       	add	r30, r30
    4958:	ff 1f       	adc	r31, r31
    495a:	ec 55       	subi	r30, 0x5C	; 92
    495c:	fe 4f       	sbci	r31, 0xFE	; 254
    495e:	c0 80       	ld	r12, Z
    4960:	d1 80       	ldd	r13, Z+1	; 0x01
    4962:	e2 80       	ldd	r14, Z+2	; 0x02
    4964:	f3 80       	ldd	r15, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    4966:	80 91 cb 05 	lds	r24, 0x05CB
    496a:	e0 91 cc 05 	lds	r30, 0x05CC
    496e:	ff 27       	eor	r31, r31
    4970:	e7 fd       	sbrc	r30, 7
    4972:	f0 95       	com	r31
    4974:	e9 0f       	add	r30, r25
    4976:	f1 1d       	adc	r31, r1
    4978:	2c e0       	ldi	r18, 0x0C	; 12
    497a:	82 02       	muls	r24, r18
    497c:	e0 0d       	add	r30, r0
    497e:	f1 1d       	adc	r31, r1
    4980:	11 24       	eor	r1, r1
    4982:	ee 0f       	add	r30, r30
    4984:	ff 1f       	adc	r31, r31
    4986:	ee 0f       	add	r30, r30
    4988:	ff 1f       	adc	r31, r31
    498a:	ec 55       	subi	r30, 0x5C	; 92
    498c:	fe 4f       	sbci	r31, 0xFE	; 254
    498e:	80 80       	ld	r8, Z
    4990:	91 80       	ldd	r9, Z+1	; 0x01
    4992:	a2 80       	ldd	r10, Z+2	; 0x02
    4994:	b3 80       	ldd	r11, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    4996:	20 91 e5 05 	lds	r18, 0x05E5
    499a:	47 e2       	ldi	r20, 0x27	; 39
    499c:	24 02       	muls	r18, r20
    499e:	90 01       	movw	r18, r0
    49a0:	11 24       	eor	r1, r1
    49a2:	44 27       	eor	r20, r20
    49a4:	37 fd       	sbrc	r19, 7
    49a6:	40 95       	com	r20
    49a8:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    49aa:	c7 01       	movw	r24, r14
    49ac:	b6 01       	movw	r22, r12
    49ae:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    49b2:	00 e1       	ldi	r16, 0x10	; 16
    49b4:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    49b8:	29 83       	std	Y+1, r18	; 0x01
    49ba:	3a 83       	std	Y+2, r19	; 0x02
    49bc:	4b 83       	std	Y+3, r20	; 0x03
    49be:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	ab 81       	ldd	r26, Y+3	; 0x03
    49c6:	bc 81       	ldd	r27, Y+4	; 0x04
    49c8:	c8 0e       	add	r12, r24
    49ca:	d9 1e       	adc	r13, r25
    49cc:	ea 1e       	adc	r14, r26
    49ce:	fb 1e       	adc	r15, r27
    49d0:	c0 92 f6 05 	sts	0x05F6, r12
    49d4:	d0 92 f7 05 	sts	0x05F7, r13
    49d8:	e0 92 f8 05 	sts	0x05F8, r14
    49dc:	f0 92 f9 05 	sts	0x05F9, r15

	centsConst = 0x27*osc2CentsShift;
    49e0:	20 91 cd 05 	lds	r18, 0x05CD
    49e4:	97 e2       	ldi	r25, 0x27	; 39
    49e6:	29 02       	muls	r18, r25
    49e8:	90 01       	movw	r18, r0
    49ea:	11 24       	eor	r1, r1
    49ec:	44 27       	eor	r20, r20
    49ee:	37 fd       	sbrc	r19, 7
    49f0:	40 95       	com	r20
    49f2:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    49f4:	c5 01       	movw	r24, r10
    49f6:	b4 01       	movw	r22, r8
    49f8:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    49fc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4a00:	29 83       	std	Y+1, r18	; 0x01
    4a02:	3a 83       	std	Y+2, r19	; 0x02
    4a04:	4b 83       	std	Y+3, r20	; 0x03
    4a06:	5c 83       	std	Y+4, r21	; 0x04
    4a08:	6d 83       	std	Y+5, r22	; 0x05
    4a0a:	7e 83       	std	Y+6, r23	; 0x06
    4a0c:	8f 83       	std	Y+7, r24	; 0x07
    4a0e:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    4a10:	29 81       	ldd	r18, Y+1	; 0x01
    4a12:	3a 81       	ldd	r19, Y+2	; 0x02
    4a14:	4b 81       	ldd	r20, Y+3	; 0x03
    4a16:	5c 81       	ldd	r21, Y+4	; 0x04
    4a18:	82 0e       	add	r8, r18
    4a1a:	93 1e       	adc	r9, r19
    4a1c:	a4 1e       	adc	r10, r20
    4a1e:	b5 1e       	adc	r11, r21
    4a20:	80 92 d6 05 	sts	0x05D6, r8
    4a24:	90 92 d7 05 	sts	0x05D7, r9
    4a28:	a0 92 d8 05 	sts	0x05D8, r10
    4a2c:	b0 92 d9 05 	sts	0x05D9, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    4a30:	40 90 67 05 	lds	r4, 0x0567
    4a34:	50 90 68 05 	lds	r5, 0x0568
    4a38:	60 90 69 05 	lds	r6, 0x0569
    4a3c:	70 90 6a 05 	lds	r7, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4a40:	c7 01       	movw	r24, r14
    4a42:	b6 01       	movw	r22, r12
    4a44:	a3 01       	movw	r20, r6
    4a46:	92 01       	movw	r18, r4
    4a48:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4a4c:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4a50:	c9 01       	movw	r24, r18
    4a52:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    4a54:	80 93 e6 05 	sts	0x05E6, r24
    4a58:	90 93 e7 05 	sts	0x05E7, r25
    4a5c:	a0 93 e8 05 	sts	0x05E8, r26
    4a60:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4a64:	c5 01       	movw	r24, r10
    4a66:	b4 01       	movw	r22, r8
    4a68:	a3 01       	movw	r20, r6
    4a6a:	92 01       	movw	r18, r4
    4a6c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4a70:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4a74:	c9 01       	movw	r24, r18
    4a76:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    4a78:	80 93 ce 05 	sts	0x05CE, r24
    4a7c:	90 93 cf 05 	sts	0x05CF, r25
    4a80:	a0 93 d0 05 	sts	0x05D0, r26
    4a84:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4a88:	60 91 b7 05 	lds	r22, 0x05B7
    4a8c:	70 91 b8 05 	lds	r23, 0x05B8
    4a90:	80 91 b9 05 	lds	r24, 0x05B9
    4a94:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4a98:	a3 01       	movw	r20, r6
    4a9a:	92 01       	movw	r18, r4
    4a9c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4aa0:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4aa4:	c9 01       	movw	r24, r18
    4aa6:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4aa8:	80 93 bb 05 	sts	0x05BB, r24
    4aac:	90 93 bc 05 	sts	0x05BC, r25
    4ab0:	a0 93 bd 05 	sts	0x05BD, r26
    4ab4:	b0 93 be 05 	sts	0x05BE, r27
    4ab8:	af cd       	rjmp	.-1186   	; 0x4618 <__vector_18+0x70>
				case NOTE_ON:
				//writeLine(1, "NOTE ON   ");
				usedKeys[commandBytes[1] - MIDI_OFFSET] = 1;
				if(commandBytes[1] - MIDI_OFFSET > highNote)
				{
					highNote = commandBytes[1] - MIDI_OFFSET;
    4aba:	8b ee       	ldi	r24, 0xEB	; 235
    4abc:	84 0f       	add	r24, r20
    4abe:	80 93 05 05 	sts	0x0505, r24
    4ac2:	7b ce       	rjmp	.-778    	; 0x47ba <__vector_18+0x212>

			sprintf(buf, "%d", commandBytes[2]);
			writeLine(2, buf);*/

			if(commandBytes[0] == NOTE_ON && commandBytes[2] == 0)
				commandBytes[0] = NOTE_OFF;
    4ac4:	80 e8       	ldi	r24, 0x80	; 128
    4ac6:	80 93 fb 05 	sts	0x05FB, r24
    4aca:	d8 cd       	rjmp	.-1104   	; 0x467c <__vector_18+0xd4>
						}

					}
					else
					{
						osc1Note = (osc2Note = commandBytes[1] - MIDI_OFFSET);
    4acc:	80 93 da 05 	sts	0x05DA, r24
    4ad0:	98 2f       	mov	r25, r24
    4ad2:	35 cf       	rjmp	.-406    	; 0x493e <__vector_18+0x396>
    4ad4:	98 2f       	mov	r25, r24
    4ad6:	82 2f       	mov	r24, r18
    4ad8:	32 cf       	rjmp	.-412    	; 0x493e <__vector_18+0x396>
				{
					if(osc1Busy)
					{
						if(osc1Note == osc2Note)
						{
							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    4ada:	48 17       	cp	r20, r24
    4adc:	59 07       	cpc	r21, r25
    4ade:	09 f0       	breq	.+2      	; 0x4ae2 <__vector_18+0x53a>
    4ae0:	9b cd       	rjmp	.-1226   	; 0x4618 <__vector_18+0x70>
							{
								notePlaying = false;
    4ae2:	10 92 5e 05 	sts	0x055E, r1
								osc1Busy = (osc2Busy = false);
    4ae6:	10 92 c0 05 	sts	0x05C0, r1
    4aea:	10 92 db 05 	sts	0x05DB, r1

								while(highNote >= 0)
    4aee:	80 91 05 05 	lds	r24, 0x0505
    4af2:	87 fd       	sbrc	r24, 7
    4af4:	91 cd       	rjmp	.-1246   	; 0x4618 <__vector_18+0x70>
    4af6:	09 c0       	rjmp	.+18     	; 0x4b0a <__vector_18+0x562>
										osc1Busy = (osc2Busy = true);
										noteUpdate();
										break;
									}

									highNote--;
    4af8:	80 91 05 05 	lds	r24, 0x0505
    4afc:	81 50       	subi	r24, 0x01	; 1
    4afe:	80 93 05 05 	sts	0x0505, r24
							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
							{
								notePlaying = false;
								osc1Busy = (osc2Busy = false);

								while(highNote >= 0)
    4b02:	80 91 05 05 	lds	r24, 0x0505
    4b06:	87 fd       	sbrc	r24, 7
    4b08:	87 cd       	rjmp	.-1266   	; 0x4618 <__vector_18+0x70>
								{
									if(usedKeys[highNote] == 1)
    4b0a:	e0 91 05 05 	lds	r30, 0x0505
    4b0e:	ff 27       	eor	r31, r31
    4b10:	e7 fd       	sbrc	r30, 7
    4b12:	f0 95       	com	r31
    4b14:	ea 5f       	subi	r30, 0xFA	; 250
    4b16:	fa 4f       	sbci	r31, 0xFA	; 250
    4b18:	80 81       	ld	r24, Z
    4b1a:	81 30       	cpi	r24, 0x01	; 1
    4b1c:	69 f7       	brne	.-38     	; 0x4af8 <__vector_18+0x550>
									{
										osc1Note = (osc2Note = highNote);
    4b1e:	80 91 05 05 	lds	r24, 0x0505
    4b22:	80 93 c1 05 	sts	0x05C1, r24
    4b26:	80 93 da 05 	sts	0x05DA, r24
										notePlaying = true;
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	80 93 5e 05 	sts	0x055E, r24
										osc1Busy = (osc2Busy = true);
    4b30:	80 93 c0 05 	sts	0x05C0, r24
    4b34:	80 93 db 05 	sts	0x05DB, r24
										noteUpdate();
    4b38:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z10noteUpdatev>
										break;
    4b3c:	6d cd       	rjmp	.-1318   	; 0x4618 <__vector_18+0x70>
							{
								while(highNote >= 0)
								{
									if(usedKeys[highNote] == 1)
									{
										osc1Note = highNote;
    4b3e:	20 90 05 05 	lds	r2, 0x0505
    4b42:	20 92 da 05 	sts	0x05DA, r2
										notePlaying = true;
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	80 93 5e 05 	sts	0x055E, r24
										osc1Busy = (osc2Busy = true);
    4b4c:	80 93 c0 05 	sts	0x05C0, r24
    4b50:	80 93 db 05 	sts	0x05DB, r24
	cbi (TCCR2B, WGM22);
}

void noteUpdate()
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
    4b54:	31 2c       	mov	r3, r1
    4b56:	80 91 e4 05 	lds	r24, 0x05E4
    4b5a:	f1 01       	movw	r30, r2
    4b5c:	e8 0f       	add	r30, r24
    4b5e:	f1 1d       	adc	r31, r1
    4b60:	87 fd       	sbrc	r24, 7
    4b62:	fa 95       	dec	r31
    4b64:	ee 0f       	add	r30, r30
    4b66:	ff 1f       	adc	r31, r31
    4b68:	ee 0f       	add	r30, r30
    4b6a:	ff 1f       	adc	r31, r31
    4b6c:	ec 55       	subi	r30, 0x5C	; 92
    4b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b70:	80 80       	ld	r8, Z
    4b72:	91 80       	ldd	r9, Z+1	; 0x01
    4b74:	a2 80       	ldd	r10, Z+2	; 0x02
    4b76:	b3 80       	ldd	r11, Z+3	; 0x03
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];
    4b78:	80 91 cb 05 	lds	r24, 0x05CB
    4b7c:	e0 91 cc 05 	lds	r30, 0x05CC
    4b80:	ff 27       	eor	r31, r31
    4b82:	e7 fd       	sbrc	r30, 7
    4b84:	f0 95       	com	r31
    4b86:	e2 0f       	add	r30, r18
    4b88:	f1 1d       	adc	r31, r1
    4b8a:	bc e0       	ldi	r27, 0x0C	; 12
    4b8c:	8b 02       	muls	r24, r27
    4b8e:	e0 0d       	add	r30, r0
    4b90:	f1 1d       	adc	r31, r1
    4b92:	11 24       	eor	r1, r1
    4b94:	ee 0f       	add	r30, r30
    4b96:	ff 1f       	adc	r31, r31
    4b98:	ee 0f       	add	r30, r30
    4b9a:	ff 1f       	adc	r31, r31
    4b9c:	ec 55       	subi	r30, 0x5C	; 92
    4b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba0:	c0 80       	ld	r12, Z
    4ba2:	d1 80       	ldd	r13, Z+1	; 0x01
    4ba4:	e2 80       	ldd	r14, Z+2	; 0x02
    4ba6:	f3 80       	ldd	r15, Z+3	; 0x03

	unsigned long centsConst = 0x27*osc1CentsShift;
    4ba8:	20 91 e5 05 	lds	r18, 0x05E5
    4bac:	e7 e2       	ldi	r30, 0x27	; 39
    4bae:	2e 02       	muls	r18, r30
    4bb0:	90 01       	movw	r18, r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	44 27       	eor	r20, r20
    4bb6:	37 fd       	sbrc	r19, 7
    4bb8:	40 95       	com	r20
    4bba:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4bbc:	c5 01       	movw	r24, r10
    4bbe:	b4 01       	movw	r22, r8
    4bc0:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4bc4:	00 e1       	ldi	r16, 0x10	; 16
    4bc6:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4bca:	29 83       	std	Y+1, r18	; 0x01
    4bcc:	3a 83       	std	Y+2, r19	; 0x02
    4bce:	4b 83       	std	Y+3, r20	; 0x03
    4bd0:	5c 83       	std	Y+4, r21	; 0x04
{
	osc1Freq = 	keyFreq[osc1Note + osc1SemisShift];
	osc2Freq = keyFreq[osc2Note + osc2SemisShift + (osc2OctaveShift*12)];

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);
    4bd2:	49 80       	ldd	r4, Y+1	; 0x01
    4bd4:	5a 80       	ldd	r5, Y+2	; 0x02
    4bd6:	6b 80       	ldd	r6, Y+3	; 0x03
    4bd8:	7c 80       	ldd	r7, Y+4	; 0x04
    4bda:	48 0c       	add	r4, r8
    4bdc:	59 1c       	adc	r5, r9
    4bde:	6a 1c       	adc	r6, r10
    4be0:	7b 1c       	adc	r7, r11
    4be2:	40 92 f6 05 	sts	0x05F6, r4
    4be6:	50 92 f7 05 	sts	0x05F7, r5
    4bea:	60 92 f8 05 	sts	0x05F8, r6
    4bee:	70 92 f9 05 	sts	0x05F9, r7

	centsConst = 0x27*osc2CentsShift;
    4bf2:	20 91 cd 05 	lds	r18, 0x05CD
    4bf6:	f7 e2       	ldi	r31, 0x27	; 39
    4bf8:	2f 02       	muls	r18, r31
    4bfa:	90 01       	movw	r18, r0
    4bfc:	11 24       	eor	r1, r1
    4bfe:	44 27       	eor	r20, r20
    4c00:	37 fd       	sbrc	r19, 7
    4c02:	40 95       	com	r20
    4c04:	54 2f       	mov	r21, r20
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4c06:	c7 01       	movw	r24, r14
    4c08:	b6 01       	movw	r22, r12
    4c0a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4c0e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4c12:	29 83       	std	Y+1, r18	; 0x01
    4c14:	3a 83       	std	Y+2, r19	; 0x02
    4c16:	4b 83       	std	Y+3, r20	; 0x03
    4c18:	5c 83       	std	Y+4, r21	; 0x04
    4c1a:	6d 83       	std	Y+5, r22	; 0x05
    4c1c:	7e 83       	std	Y+6, r23	; 0x06
    4c1e:	8f 83       	std	Y+7, r24	; 0x07
    4c20:	98 87       	std	Y+8, r25	; 0x08

	unsigned long centsConst = 0x27*osc1CentsShift;
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);
    4c22:	89 80       	ldd	r8, Y+1	; 0x01
    4c24:	9a 80       	ldd	r9, Y+2	; 0x02
    4c26:	ab 80       	ldd	r10, Y+3	; 0x03
    4c28:	bc 80       	ldd	r11, Y+4	; 0x04
    4c2a:	8c 0c       	add	r8, r12
    4c2c:	9d 1c       	adc	r9, r13
    4c2e:	ae 1c       	adc	r10, r14
    4c30:	bf 1c       	adc	r11, r15
    4c32:	80 92 d6 05 	sts	0x05D6, r8
    4c36:	90 92 d7 05 	sts	0x05D7, r9
    4c3a:	a0 92 d8 05 	sts	0x05D8, r10
    4c3e:	b0 92 d9 05 	sts	0x05D9, r11

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    4c42:	c0 90 67 05 	lds	r12, 0x0567
    4c46:	d0 90 68 05 	lds	r13, 0x0568
    4c4a:	e0 90 69 05 	lds	r14, 0x0569
    4c4e:	f0 90 6a 05 	lds	r15, 0x056A
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4c52:	c3 01       	movw	r24, r6
    4c54:	b2 01       	movw	r22, r4
    4c56:	a7 01       	movw	r20, r14
    4c58:	96 01       	movw	r18, r12
    4c5a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4c5e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4c62:	c9 01       	movw	r24, r18
    4c64:	da 01       	movw	r26, r20
	osc1Freq = osc1Freq + fixedMultiply(osc1Freq, centsConst);

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
    4c66:	80 93 e6 05 	sts	0x05E6, r24
    4c6a:	90 93 e7 05 	sts	0x05E7, r25
    4c6e:	a0 93 e8 05 	sts	0x05E8, r26
    4c72:	b0 93 e9 05 	sts	0x05E9, r27
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4c76:	c5 01       	movw	r24, r10
    4c78:	b4 01       	movw	r22, r8
    4c7a:	a7 01       	movw	r20, r14
    4c7c:	96 01       	movw	r18, r12
    4c7e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4c82:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4c86:	c9 01       	movw	r24, r18
    4c88:	da 01       	movw	r26, r20

	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
    4c8a:	80 93 ce 05 	sts	0x05CE, r24
    4c8e:	90 93 cf 05 	sts	0x05CF, r25
    4c92:	a0 93 d0 05 	sts	0x05D0, r26
    4c96:	b0 93 d1 05 	sts	0x05D1, r27
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4c9a:	60 91 b7 05 	lds	r22, 0x05B7
    4c9e:	70 91 b8 05 	lds	r23, 0x05B8
    4ca2:	80 91 b9 05 	lds	r24, 0x05B9
    4ca6:	90 91 ba 05 	lds	r25, 0x05BA
}

inline unsigned long fixedMultiply(unsigned long &lhs, unsigned long &rhs)
{
	unsigned long long temp = lhs;
	temp *= rhs;
    4caa:	a7 01       	movw	r20, r14
    4cac:	96 01       	movw	r18, r12
    4cae:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__umulsidi3>
	
	return (unsigned long)(temp >> 16);
    4cb2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__lshrdi3>
    4cb6:	c9 01       	movw	r24, r18
    4cb8:	da 01       	movw	r26, r20
	centsConst = 0x27*osc2CentsShift;
	osc2Freq = osc2Freq + fixedMultiply(osc2Freq, centsConst);

	osc1TWord = fixedMultiply(osc1Freq, stepConst);
	osc2TWord = fixedMultiply(osc2Freq, stepConst);
	lfoTWord = fixedMultiply(lfoFreq, stepConst);
    4cba:	80 93 bb 05 	sts	0x05BB, r24
    4cbe:	90 93 bc 05 	sts	0x05BC, r25
    4cc2:	a0 93 bd 05 	sts	0x05BD, r26
    4cc6:	b0 93 be 05 	sts	0x05BE, r27

									highNote--;
								}
							}

							if(commandBytes[1] - MIDI_OFFSET == osc1Note)
    4cca:	29 85       	ldd	r18, Y+9	; 0x09
    4ccc:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cce:	22 15       	cp	r18, r2
    4cd0:	33 05       	cpc	r19, r3
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <__vector_18+0x72e>
    4cd4:	0c cd       	rjmp	.-1512   	; 0x46ee <__vector_18+0x146>
    4cd6:	a0 cc       	rjmp	.-1728   	; 0x4618 <__vector_18+0x70>

00004cd8 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
    4cd8:	1f 92       	push	r1
    4cda:	0f 92       	push	r0
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	0f 92       	push	r0
    4ce0:	11 24       	eor	r1, r1
    4ce2:	2f 93       	push	r18
    4ce4:	3f 93       	push	r19
    4ce6:	4f 93       	push	r20
    4ce8:	8f 93       	push	r24
    4cea:	9f 93       	push	r25
    4cec:	ef 93       	push	r30
    4cee:	ff 93       	push	r31
	adcValue[adcSelect] = ADC;
    4cf0:	40 91 0a 06 	lds	r20, 0x060A
    4cf4:	84 2f       	mov	r24, r20
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	20 91 78 00 	lds	r18, 0x0078
    4cfc:	30 91 79 00 	lds	r19, 0x0079
    4d00:	fc 01       	movw	r30, r24
    4d02:	ee 0f       	add	r30, r30
    4d04:	ff 1f       	adc	r31, r31
    4d06:	ee 5f       	subi	r30, 0xFE	; 254
    4d08:	f9 4f       	sbci	r31, 0xF9	; 249
    4d0a:	31 83       	std	Z+1, r19	; 0x01
    4d0c:	20 83       	st	Z, r18
	updateADC[adcSelect] = true;
    4d0e:	fc 01       	movw	r30, r24
    4d10:	e2 50       	subi	r30, 0x02	; 2
    4d12:	fa 4f       	sbci	r31, 0xFA	; 250
    4d14:	21 e0       	ldi	r18, 0x01	; 1
    4d16:	20 83       	st	Z, r18

	adcSelect++;
    4d18:	4f 5f       	subi	r20, 0xFF	; 255
	
	if(adcSelect > 3)
    4d1a:	44 30       	cpi	r20, 0x04	; 4
    4d1c:	88 f0       	brcs	.+34     	; 0x4d40 <__vector_21+0x68>
	adcSelect = 0;
    4d1e:	10 92 0a 06 	sts	0x060A, r1
    4d22:	40 e0       	ldi	r20, 0x00	; 0
	
	ADMUX = adcSelect;
    4d24:	40 93 7c 00 	sts	0x007C, r20
}
    4d28:	ff 91       	pop	r31
    4d2a:	ef 91       	pop	r30
    4d2c:	9f 91       	pop	r25
    4d2e:	8f 91       	pop	r24
    4d30:	4f 91       	pop	r20
    4d32:	3f 91       	pop	r19
    4d34:	2f 91       	pop	r18
    4d36:	0f 90       	pop	r0
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	0f 90       	pop	r0
    4d3c:	1f 90       	pop	r1
    4d3e:	18 95       	reti
ISR(ADC_vect)
{
	adcValue[adcSelect] = ADC;
	updateADC[adcSelect] = true;

	adcSelect++;
    4d40:	40 93 0a 06 	sts	0x060A, r20
    4d44:	ef cf       	rjmp	.-34     	; 0x4d24 <__vector_21+0x4c>

00004d46 <__vector_9>:
	
	ADMUX = adcSelect;
}

ISR(TIMER2_OVF_vect)
{
    4d46:	1f 92       	push	r1
    4d48:	0f 92       	push	r0
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	0f 92       	push	r0
    4d4e:	11 24       	eor	r1, r1
    4d50:	2f 93       	push	r18
    4d52:	3f 93       	push	r19
    4d54:	4f 93       	push	r20
    4d56:	5f 93       	push	r21
    4d58:	6f 93       	push	r22
    4d5a:	7f 93       	push	r23
    4d5c:	8f 93       	push	r24
    4d5e:	9f 93       	push	r25
    4d60:	af 93       	push	r26
    4d62:	bf 93       	push	r27
    4d64:	ef 93       	push	r30
    4d66:	ff 93       	push	r31
    4d68:	cf 93       	push	r28
    4d6a:	df 93       	push	r29
    4d6c:	00 d0       	rcall	.+0      	; 0x4d6e <__vector_9+0x28>
    4d6e:	00 d0       	rcall	.+0      	; 0x4d70 <__vector_9+0x2a>
    4d70:	cd b7       	in	r28, 0x3d	; 61
    4d72:	de b7       	in	r29, 0x3e	; 62
	if(notePlaying)
    4d74:	80 91 5e 05 	lds	r24, 0x055E
    4d78:	88 23       	and	r24, r24
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <__vector_9+0x38>
    4d7c:	06 c1       	rjmp	.+524    	; 0x4f8a <__vector_9+0x244>
	{
		osc1Phaccu[0] = osc1Phaccu[1];
    4d7e:	80 91 ee 05 	lds	r24, 0x05EE
    4d82:	90 91 ef 05 	lds	r25, 0x05EF
    4d86:	a0 91 f0 05 	lds	r26, 0x05F0
    4d8a:	b0 91 f1 05 	lds	r27, 0x05F1
    4d8e:	80 93 ea 05 	sts	0x05EA, r24
    4d92:	90 93 eb 05 	sts	0x05EB, r25
    4d96:	a0 93 ec 05 	sts	0x05EC, r26
    4d9a:	b0 93 ed 05 	sts	0x05ED, r27
		osc1Phaccu[1] = osc1Phaccu[2];
    4d9e:	80 91 f2 05 	lds	r24, 0x05F2
    4da2:	90 91 f3 05 	lds	r25, 0x05F3
    4da6:	a0 91 f4 05 	lds	r26, 0x05F4
    4daa:	b0 91 f5 05 	lds	r27, 0x05F5
    4dae:	80 93 ee 05 	sts	0x05EE, r24
    4db2:	90 93 ef 05 	sts	0x05EF, r25
    4db6:	a0 93 f0 05 	sts	0x05F0, r26
    4dba:	b0 93 f1 05 	sts	0x05F1, r27
		osc1Phaccu[2] += osc1TWord;
    4dbe:	40 91 e6 05 	lds	r20, 0x05E6
    4dc2:	50 91 e7 05 	lds	r21, 0x05E7
    4dc6:	60 91 e8 05 	lds	r22, 0x05E8
    4dca:	70 91 e9 05 	lds	r23, 0x05E9
    4dce:	80 91 f2 05 	lds	r24, 0x05F2
    4dd2:	90 91 f3 05 	lds	r25, 0x05F3
    4dd6:	a0 91 f4 05 	lds	r26, 0x05F4
    4dda:	b0 91 f5 05 	lds	r27, 0x05F5
    4dde:	84 0f       	add	r24, r20
    4de0:	95 1f       	adc	r25, r21
    4de2:	a6 1f       	adc	r26, r22
    4de4:	b7 1f       	adc	r27, r23
    4de6:	80 93 f2 05 	sts	0x05F2, r24
    4dea:	90 93 f3 05 	sts	0x05F3, r25
    4dee:	a0 93 f4 05 	sts	0x05F4, r26
    4df2:	b0 93 f5 05 	sts	0x05F5, r27

		osc2Phaccu += osc2TWord;
    4df6:	40 91 ce 05 	lds	r20, 0x05CE
    4dfa:	50 91 cf 05 	lds	r21, 0x05CF
    4dfe:	60 91 d0 05 	lds	r22, 0x05D0
    4e02:	70 91 d1 05 	lds	r23, 0x05D1
    4e06:	80 91 d2 05 	lds	r24, 0x05D2
    4e0a:	90 91 d3 05 	lds	r25, 0x05D3
    4e0e:	a0 91 d4 05 	lds	r26, 0x05D4
    4e12:	b0 91 d5 05 	lds	r27, 0x05D5
    4e16:	84 0f       	add	r24, r20
    4e18:	95 1f       	adc	r25, r21
    4e1a:	a6 1f       	adc	r26, r22
    4e1c:	b7 1f       	adc	r27, r23
    4e1e:	80 93 d2 05 	sts	0x05D2, r24
    4e22:	90 93 d3 05 	sts	0x05D3, r25
    4e26:	a0 93 d4 05 	sts	0x05D4, r26
    4e2a:	b0 93 d5 05 	sts	0x05D5, r27
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

inline void lfsrUpdate()
{
	unsigned char lsb = lfsrState & 0x01;
    4e2e:	80 91 00 01 	lds	r24, 0x0100
    4e32:	90 91 01 01 	lds	r25, 0x0101
	lfsrState = lfsrState >> 1;
    4e36:	9c 01       	movw	r18, r24
    4e38:	36 95       	lsr	r19
    4e3a:	27 95       	ror	r18
	
	if(lsb == 1)
    4e3c:	80 fd       	sbrc	r24, 0
    4e3e:	ce c0       	rjmp	.+412    	; 0x4fdc <__vector_9+0x296>
	{
		lfsrState ^= 0xB400;
    4e40:	30 93 01 01 	sts	0x0101, r19
    4e44:	20 93 00 01 	sts	0x0100, r18
		lfsrUpdate();

		unsigned short fraction = 0;
		unsigned short whole = 0;

		osc1Out[0] = osc1Out[1];
    4e48:	80 91 df 05 	lds	r24, 0x05DF
    4e4c:	90 91 e0 05 	lds	r25, 0x05E0
    4e50:	90 93 de 05 	sts	0x05DE, r25
    4e54:	80 93 dd 05 	sts	0x05DD, r24
		osc1Out[1] = osc1Out[2];
    4e58:	80 91 e1 05 	lds	r24, 0x05E1
    4e5c:	90 91 e2 05 	lds	r25, 0x05E2
    4e60:	90 93 e0 05 	sts	0x05E0, r25
    4e64:	80 93 df 05 	sts	0x05DF, r24
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
    4e68:	e0 91 03 01 	lds	r30, 0x0103
    4e6c:	90 91 f4 05 	lds	r25, 0x05F4
    4e70:	80 91 e3 05 	lds	r24, 0x05E3
    4e74:	89 0f       	add	r24, r25
    4e76:	f0 e0       	ldi	r31, 0x00	; 0
    4e78:	ee 0f       	add	r30, r30
    4e7a:	ff 1f       	adc	r31, r31
    4e7c:	ec 5f       	subi	r30, 0xFC	; 252
    4e7e:	fc 4f       	sbci	r31, 0xFC	; 252
    4e80:	01 90       	ld	r0, Z+
    4e82:	f0 81       	ld	r31, Z
    4e84:	e0 2d       	mov	r30, r0
    4e86:	e8 0f       	add	r30, r24
    4e88:	f1 1d       	adc	r31, r1
    4e8a:	e8 59       	subi	r30, 0x98	; 152
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	e4 91       	lpm	r30, Z
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	f0 93 e2 05 	sts	0x05E2, r31
    4e96:	e0 93 e1 05 	sts	0x05E1, r30
		
		if(osc1WaveForm == WAVE_NOISE)
    4e9a:	80 91 03 01 	lds	r24, 0x0103
    4e9e:	85 30       	cpi	r24, 0x05	; 5
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <__vector_9+0x15e>
    4ea2:	9f c0       	rjmp	.+318    	; 0x4fe2 <__vector_9+0x29c>
			osc1Out[2] = lfsrState;

		if(osc2Sync && (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    4ea4:	80 91 c2 05 	lds	r24, 0x05C2
    4ea8:	88 23       	and	r24, r24
    4eaa:	c1 f0       	breq	.+48     	; 0x4edc <__vector_9+0x196>
    4eac:	80 91 f0 05 	lds	r24, 0x05F0
    4eb0:	40 91 ec 05 	lds	r20, 0x05EC
    4eb4:	84 17       	cp	r24, r20
    4eb6:	90 f4       	brcc	.+36     	; 0x4edc <__vector_9+0x196>
    4eb8:	89 17       	cp	r24, r25
    4eba:	80 f4       	brcc	.+32     	; 0x4edc <__vector_9+0x196>
		{
			osc2Phaccu = osc1Phaccu[2];
    4ebc:	80 91 f2 05 	lds	r24, 0x05F2
    4ec0:	90 91 f3 05 	lds	r25, 0x05F3
    4ec4:	a0 91 f4 05 	lds	r26, 0x05F4
    4ec8:	b0 91 f5 05 	lds	r27, 0x05F5
    4ecc:	80 93 d2 05 	sts	0x05D2, r24
    4ed0:	90 93 d3 05 	sts	0x05D3, r25
    4ed4:	a0 93 d4 05 	sts	0x05D4, r26
    4ed8:	b0 93 d5 05 	sts	0x05D5, r27
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
    4edc:	e0 91 02 01 	lds	r30, 0x0102
    4ee0:	80 91 ca 05 	lds	r24, 0x05CA
    4ee4:	90 91 d4 05 	lds	r25, 0x05D4
    4ee8:	89 0f       	add	r24, r25
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	ee 0f       	add	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	ec 5f       	subi	r30, 0xFC	; 252
    4ef2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ef4:	01 90       	ld	r0, Z+
    4ef6:	f0 81       	ld	r31, Z
    4ef8:	e0 2d       	mov	r30, r0
    4efa:	e8 0f       	add	r30, r24
    4efc:	f1 1d       	adc	r31, r1
    4efe:	e8 59       	subi	r30, 0x98	; 152
    4f00:	ff 4f       	sbci	r31, 0xFF	; 255
    4f02:	e4 91       	lpm	r30, Z
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	f0 93 c8 05 	sts	0x05C8, r31
    4f0a:	e0 93 c7 05 	sts	0x05C7, r30
		
		if(osc2WaveForm == WAVE_NOISE)
    4f0e:	80 91 02 01 	lds	r24, 0x0102
    4f12:	85 30       	cpi	r24, 0x05	; 5
    4f14:	09 f4       	brne	.+2      	; 0x4f18 <__vector_9+0x1d2>
    4f16:	5d c0       	rjmp	.+186    	; 0x4fd2 <__vector_9+0x28c>
			osc2Out[2] = lfsrState;

		unsigned long temp = 0;
    4f18:	19 82       	std	Y+1, r1	; 0x01
    4f1a:	1a 82       	std	Y+2, r1	; 0x02
    4f1c:	1b 82       	std	Y+3, r1	; 0x03
    4f1e:	1c 82       	std	Y+4, r1	; 0x04

		osc1Out[2] *= osc1Weight;
    4f20:	20 91 e1 05 	lds	r18, 0x05E1
    4f24:	30 91 e2 05 	lds	r19, 0x05E2
    4f28:	40 91 06 01 	lds	r20, 0x0106
    4f2c:	42 9f       	mul	r20, r18
    4f2e:	c0 01       	movw	r24, r0
    4f30:	43 9f       	mul	r20, r19
    4f32:	90 0d       	add	r25, r0
    4f34:	11 24       	eor	r1, r1
    4f36:	90 93 e2 05 	sts	0x05E2, r25
    4f3a:	80 93 e1 05 	sts	0x05E1, r24
		osc2Out[2] *= osc2Weight;
    4f3e:	20 91 c7 05 	lds	r18, 0x05C7
    4f42:	30 91 c8 05 	lds	r19, 0x05C8
    4f46:	40 91 c9 05 	lds	r20, 0x05C9
    4f4a:	42 9f       	mul	r20, r18
    4f4c:	c0 01       	movw	r24, r0
    4f4e:	43 9f       	mul	r20, r19
    4f50:	90 0d       	add	r25, r0
    4f52:	11 24       	eor	r1, r1
    4f54:	90 93 c8 05 	sts	0x05C8, r25
    4f58:	80 93 c7 05 	sts	0x05C7, r24

		if(ringMod)
    4f5c:	80 91 bf 05 	lds	r24, 0x05BF
			temp = osc1Out[2] ^ osc2Out[2];
    4f60:	20 91 e1 05 	lds	r18, 0x05E1
    4f64:	30 91 e2 05 	lds	r19, 0x05E2
		unsigned long temp = 0;

		osc1Out[2] *= osc1Weight;
		osc2Out[2] *= osc2Weight;

		if(ringMod)
    4f68:	81 11       	cpse	r24, r1
    4f6a:	26 c0       	rjmp	.+76     	; 0x4fb8 <__vector_9+0x272>
			temp = osc1Out[2] ^ osc2Out[2];
		else
			temp = osc1Out[2] + osc2Out[2];
    4f6c:	80 91 c7 05 	lds	r24, 0x05C7
    4f70:	90 91 c8 05 	lds	r25, 0x05C8
    4f74:	82 0f       	add	r24, r18
    4f76:	93 1f       	adc	r25, r19
    4f78:	a0 e0       	ldi	r26, 0x00	; 0
    4f7a:	b0 e0       	ldi	r27, 0x00	; 0
    4f7c:	89 83       	std	Y+1, r24	; 0x01
    4f7e:	9a 83       	std	Y+2, r25	; 0x02
    4f80:	ab 83       	std	Y+3, r26	; 0x03
    4f82:	bc 83       	std	Y+4, r27	; 0x04
			
			case FILTER_BAND:
			break;
		}*/
		
		OCR2A = *((unsigned char*)&temp + 1);
    4f84:	8a 81       	ldd	r24, Y+2	; 0x02
    4f86:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    4f92:	df 91       	pop	r29
    4f94:	cf 91       	pop	r28
    4f96:	ff 91       	pop	r31
    4f98:	ef 91       	pop	r30
    4f9a:	bf 91       	pop	r27
    4f9c:	af 91       	pop	r26
    4f9e:	9f 91       	pop	r25
    4fa0:	8f 91       	pop	r24
    4fa2:	7f 91       	pop	r23
    4fa4:	6f 91       	pop	r22
    4fa6:	5f 91       	pop	r21
    4fa8:	4f 91       	pop	r20
    4faa:	3f 91       	pop	r19
    4fac:	2f 91       	pop	r18
    4fae:	0f 90       	pop	r0
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	0f 90       	pop	r0
    4fb4:	1f 90       	pop	r1
    4fb6:	18 95       	reti

		osc1Out[2] *= osc1Weight;
		osc2Out[2] *= osc2Weight;

		if(ringMod)
			temp = osc1Out[2] ^ osc2Out[2];
    4fb8:	80 91 c7 05 	lds	r24, 0x05C7
    4fbc:	90 91 c8 05 	lds	r25, 0x05C8
    4fc0:	82 27       	eor	r24, r18
    4fc2:	93 27       	eor	r25, r19
    4fc4:	a0 e0       	ldi	r26, 0x00	; 0
    4fc6:	b0 e0       	ldi	r27, 0x00	; 0
    4fc8:	89 83       	std	Y+1, r24	; 0x01
    4fca:	9a 83       	std	Y+2, r25	; 0x02
    4fcc:	ab 83       	std	Y+3, r26	; 0x03
    4fce:	bc 83       	std	Y+4, r27	; 0x04
    4fd0:	d9 cf       	rjmp	.-78     	; 0x4f84 <__vector_9+0x23e>
		}

		osc2Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc2WaveForm] + (unsigned char)(*((unsigned char*)(&osc2Phaccu) + 2) + osc2PhaseShift));
		
		if(osc2WaveForm == WAVE_NOISE)
			osc2Out[2] = lfsrState;
    4fd2:	30 93 c8 05 	sts	0x05C8, r19
    4fd6:	20 93 c7 05 	sts	0x05C7, r18
    4fda:	9e cf       	rjmp	.-196    	; 0x4f18 <__vector_9+0x1d2>
	unsigned char lsb = lfsrState & 0x01;
	lfsrState = lfsrState >> 1;
	
	if(lsb == 1)
	{
		lfsrState ^= 0xB400;
    4fdc:	84 eb       	ldi	r24, 0xB4	; 180
    4fde:	38 27       	eor	r19, r24
    4fe0:	2f cf       	rjmp	.-418    	; 0x4e40 <__vector_9+0xfa>
		osc1Out[0] = osc1Out[1];
		osc1Out[1] = osc1Out[2];
		osc1Out[2] = pgm_read_byte(analogWaveTable + waveformOffset[osc1WaveForm] + (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2) + osc1PhaseShift));
		
		if(osc1WaveForm == WAVE_NOISE)
			osc1Out[2] = lfsrState;
    4fe2:	30 93 e2 05 	sts	0x05E2, r19
    4fe6:	20 93 e1 05 	sts	0x05E1, r18

		if(osc2Sync && (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) <  (unsigned char)(*((unsigned char*)(&osc1Phaccu[0]) + 2)) &&  (unsigned char)(*((unsigned char*)(&osc1Phaccu[1]) + 2)) < (unsigned char)(*((unsigned char*)(&osc1Phaccu[2]) + 2)))
    4fea:	80 91 c2 05 	lds	r24, 0x05C2
    4fee:	88 23       	and	r24, r24
    4ff0:	09 f4       	brne	.+2      	; 0x4ff4 <__vector_9+0x2ae>
    4ff2:	74 cf       	rjmp	.-280    	; 0x4edc <__vector_9+0x196>
    4ff4:	5b cf       	rjmp	.-330    	; 0x4eac <__vector_9+0x166>

00004ff6 <__muldi3>:
    4ff6:	df 93       	push	r29
    4ff8:	cf 93       	push	r28
    4ffa:	1f 93       	push	r17
    4ffc:	0f 93       	push	r16
    4ffe:	9a 9d       	mul	r25, r10
    5000:	f0 2d       	mov	r31, r0
    5002:	21 9f       	mul	r18, r17
    5004:	f0 0d       	add	r31, r0
    5006:	8b 9d       	mul	r24, r11
    5008:	f0 0d       	add	r31, r0
    500a:	8a 9d       	mul	r24, r10
    500c:	e0 2d       	mov	r30, r0
    500e:	f1 0d       	add	r31, r1
    5010:	03 9f       	mul	r16, r19
    5012:	f0 0d       	add	r31, r0
    5014:	02 9f       	mul	r16, r18
    5016:	e0 0d       	add	r30, r0
    5018:	f1 1d       	adc	r31, r1
    501a:	4e 9d       	mul	r20, r14
    501c:	e0 0d       	add	r30, r0
    501e:	f1 1d       	adc	r31, r1
    5020:	5e 9d       	mul	r21, r14
    5022:	f0 0d       	add	r31, r0
    5024:	4f 9d       	mul	r20, r15
    5026:	f0 0d       	add	r31, r0
    5028:	7f 93       	push	r23
    502a:	6f 93       	push	r22
    502c:	bf 92       	push	r11
    502e:	af 92       	push	r10
    5030:	5f 93       	push	r21
    5032:	4f 93       	push	r20
    5034:	d5 01       	movw	r26, r10
    5036:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    503a:	8b 01       	movw	r16, r22
    503c:	ac 01       	movw	r20, r24
    503e:	d7 01       	movw	r26, r14
    5040:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    5044:	eb 01       	movw	r28, r22
    5046:	e8 0f       	add	r30, r24
    5048:	f9 1f       	adc	r31, r25
    504a:	d6 01       	movw	r26, r12
    504c:	0e 94 4b 28 	call	0x5096	; 0x5096 <__muldi3_6>
    5050:	2f 91       	pop	r18
    5052:	3f 91       	pop	r19
    5054:	d6 01       	movw	r26, r12
    5056:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    505a:	c6 0f       	add	r28, r22
    505c:	d7 1f       	adc	r29, r23
    505e:	e8 1f       	adc	r30, r24
    5060:	f9 1f       	adc	r31, r25
    5062:	af 91       	pop	r26
    5064:	bf 91       	pop	r27
    5066:	0e 94 4b 28 	call	0x5096	; 0x5096 <__muldi3_6>
    506a:	2f 91       	pop	r18
    506c:	3f 91       	pop	r19
    506e:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    5072:	c6 0f       	add	r28, r22
    5074:	d7 1f       	adc	r29, r23
    5076:	e8 1f       	adc	r30, r24
    5078:	f9 1f       	adc	r31, r25
    507a:	d6 01       	movw	r26, r12
    507c:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    5080:	e6 0f       	add	r30, r22
    5082:	f7 1f       	adc	r31, r23
    5084:	98 01       	movw	r18, r16
    5086:	be 01       	movw	r22, r28
    5088:	cf 01       	movw	r24, r30
    508a:	11 24       	eor	r1, r1
    508c:	0f 91       	pop	r16
    508e:	1f 91       	pop	r17
    5090:	cf 91       	pop	r28
    5092:	df 91       	pop	r29
    5094:	08 95       	ret

00005096 <__muldi3_6>:
    5096:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    509a:	46 0f       	add	r20, r22
    509c:	57 1f       	adc	r21, r23
    509e:	c8 1f       	adc	r28, r24
    50a0:	d9 1f       	adc	r29, r25
    50a2:	08 f4       	brcc	.+2      	; 0x50a6 <__muldi3_6+0x10>
    50a4:	31 96       	adiw	r30, 0x01	; 1
    50a6:	08 95       	ret

000050a8 <__umulsidi3>:
    50a8:	e8 94       	clt

000050aa <__umulsidi3_helper>:
    50aa:	df 93       	push	r29
    50ac:	cf 93       	push	r28
    50ae:	fc 01       	movw	r30, r24
    50b0:	db 01       	movw	r26, r22
    50b2:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    50b6:	7f 93       	push	r23
    50b8:	6f 93       	push	r22
    50ba:	e9 01       	movw	r28, r18
    50bc:	9a 01       	movw	r18, r20
    50be:	ac 01       	movw	r20, r24
    50c0:	bf 93       	push	r27
    50c2:	af 93       	push	r26
    50c4:	3f 93       	push	r19
    50c6:	2f 93       	push	r18
    50c8:	df 01       	movw	r26, r30
    50ca:	0e 94 27 29 	call	0x524e	; 0x524e <__umulhisi3>
    50ce:	26 f4       	brtc	.+8      	; 0x50d8 <__umulsidi3_helper+0x2e>
    50d0:	6c 1b       	sub	r22, r28
    50d2:	7d 0b       	sbc	r23, r29
    50d4:	82 0b       	sbc	r24, r18
    50d6:	93 0b       	sbc	r25, r19
    50d8:	9e 01       	movw	r18, r28
    50da:	eb 01       	movw	r28, r22
    50dc:	fc 01       	movw	r30, r24
    50de:	0e 94 4b 28 	call	0x5096	; 0x5096 <__muldi3_6>
    50e2:	af 91       	pop	r26
    50e4:	bf 91       	pop	r27
    50e6:	2f 91       	pop	r18
    50e8:	3f 91       	pop	r19
    50ea:	0e 94 4b 28 	call	0x5096	; 0x5096 <__muldi3_6>
    50ee:	be 01       	movw	r22, r28
    50f0:	cf 01       	movw	r24, r30
    50f2:	f9 01       	movw	r30, r18
    50f4:	2f 91       	pop	r18
    50f6:	3f 91       	pop	r19
    50f8:	cf 91       	pop	r28
    50fa:	df 91       	pop	r29
    50fc:	08 95       	ret

000050fe <__umoddi3>:
    50fe:	68 94       	set
    5100:	01 c0       	rjmp	.+2      	; 0x5104 <__udivdi3_umoddi3>

00005102 <__udivdi3>:
    5102:	e8 94       	clt

00005104 <__udivdi3_umoddi3>:
    5104:	8f 92       	push	r8
    5106:	9f 92       	push	r9
    5108:	cf 93       	push	r28
    510a:	df 93       	push	r29
    510c:	0e 94 8d 28 	call	0x511a	; 0x511a <__udivmod64>
    5110:	df 91       	pop	r29
    5112:	cf 91       	pop	r28
    5114:	9f 90       	pop	r9
    5116:	8f 90       	pop	r8
    5118:	08 95       	ret

0000511a <__udivmod64>:
    511a:	88 24       	eor	r8, r8
    511c:	99 24       	eor	r9, r9
    511e:	f4 01       	movw	r30, r8
    5120:	e4 01       	movw	r28, r8
    5122:	b0 e4       	ldi	r27, 0x40	; 64
    5124:	9f 93       	push	r25
    5126:	aa 27       	eor	r26, r26
    5128:	9a 15       	cp	r25, r10
    512a:	8b 04       	cpc	r8, r11
    512c:	9c 04       	cpc	r9, r12
    512e:	ed 05       	cpc	r30, r13
    5130:	fe 05       	cpc	r31, r14
    5132:	cf 05       	cpc	r28, r15
    5134:	d0 07       	cpc	r29, r16
    5136:	a1 07       	cpc	r26, r17
    5138:	98 f4       	brcc	.+38     	; 0x5160 <__udivmod64+0x46>
    513a:	ad 2f       	mov	r26, r29
    513c:	dc 2f       	mov	r29, r28
    513e:	cf 2f       	mov	r28, r31
    5140:	fe 2f       	mov	r31, r30
    5142:	e9 2d       	mov	r30, r9
    5144:	98 2c       	mov	r9, r8
    5146:	89 2e       	mov	r8, r25
    5148:	98 2f       	mov	r25, r24
    514a:	87 2f       	mov	r24, r23
    514c:	76 2f       	mov	r23, r22
    514e:	65 2f       	mov	r22, r21
    5150:	54 2f       	mov	r21, r20
    5152:	43 2f       	mov	r20, r19
    5154:	32 2f       	mov	r19, r18
    5156:	22 27       	eor	r18, r18
    5158:	b8 50       	subi	r27, 0x08	; 8
    515a:	31 f7       	brne	.-52     	; 0x5128 <__udivmod64+0xe>
    515c:	bf 91       	pop	r27
    515e:	27 c0       	rjmp	.+78     	; 0x51ae <__udivmod64+0x94>
    5160:	1b 2e       	mov	r1, r27
    5162:	bf 91       	pop	r27
    5164:	bb 27       	eor	r27, r27
    5166:	22 0f       	add	r18, r18
    5168:	33 1f       	adc	r19, r19
    516a:	44 1f       	adc	r20, r20
    516c:	55 1f       	adc	r21, r21
    516e:	66 1f       	adc	r22, r22
    5170:	77 1f       	adc	r23, r23
    5172:	88 1f       	adc	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	88 1c       	adc	r8, r8
    5178:	99 1c       	adc	r9, r9
    517a:	ee 1f       	adc	r30, r30
    517c:	ff 1f       	adc	r31, r31
    517e:	cc 1f       	adc	r28, r28
    5180:	dd 1f       	adc	r29, r29
    5182:	aa 1f       	adc	r26, r26
    5184:	bb 1f       	adc	r27, r27
    5186:	8a 14       	cp	r8, r10
    5188:	9b 04       	cpc	r9, r11
    518a:	ec 05       	cpc	r30, r12
    518c:	fd 05       	cpc	r31, r13
    518e:	ce 05       	cpc	r28, r14
    5190:	df 05       	cpc	r29, r15
    5192:	a0 07       	cpc	r26, r16
    5194:	b1 07       	cpc	r27, r17
    5196:	48 f0       	brcs	.+18     	; 0x51aa <__udivmod64+0x90>
    5198:	8a 18       	sub	r8, r10
    519a:	9b 08       	sbc	r9, r11
    519c:	ec 09       	sbc	r30, r12
    519e:	fd 09       	sbc	r31, r13
    51a0:	ce 09       	sbc	r28, r14
    51a2:	df 09       	sbc	r29, r15
    51a4:	a0 0b       	sbc	r26, r16
    51a6:	b1 0b       	sbc	r27, r17
    51a8:	21 60       	ori	r18, 0x01	; 1
    51aa:	1a 94       	dec	r1
    51ac:	e1 f6       	brne	.-72     	; 0x5166 <__udivmod64+0x4c>
    51ae:	2e f4       	brtc	.+10     	; 0x51ba <__udivmod64+0xa0>
    51b0:	94 01       	movw	r18, r8
    51b2:	af 01       	movw	r20, r30
    51b4:	be 01       	movw	r22, r28
    51b6:	cd 01       	movw	r24, r26
    51b8:	00 0c       	add	r0, r0
    51ba:	08 95       	ret

000051bc <__ashldi3>:
    51bc:	0f 93       	push	r16
    51be:	08 30       	cpi	r16, 0x08	; 8
    51c0:	90 f0       	brcs	.+36     	; 0x51e6 <__ashldi3+0x2a>
    51c2:	98 2f       	mov	r25, r24
    51c4:	87 2f       	mov	r24, r23
    51c6:	76 2f       	mov	r23, r22
    51c8:	65 2f       	mov	r22, r21
    51ca:	54 2f       	mov	r21, r20
    51cc:	43 2f       	mov	r20, r19
    51ce:	32 2f       	mov	r19, r18
    51d0:	22 27       	eor	r18, r18
    51d2:	08 50       	subi	r16, 0x08	; 8
    51d4:	f4 cf       	rjmp	.-24     	; 0x51be <__ashldi3+0x2>
    51d6:	22 0f       	add	r18, r18
    51d8:	33 1f       	adc	r19, r19
    51da:	44 1f       	adc	r20, r20
    51dc:	55 1f       	adc	r21, r21
    51de:	66 1f       	adc	r22, r22
    51e0:	77 1f       	adc	r23, r23
    51e2:	88 1f       	adc	r24, r24
    51e4:	99 1f       	adc	r25, r25
    51e6:	0a 95       	dec	r16
    51e8:	b2 f7       	brpl	.-20     	; 0x51d6 <__ashldi3+0x1a>
    51ea:	0f 91       	pop	r16
    51ec:	08 95       	ret

000051ee <__ashrdi3>:
    51ee:	97 fb       	bst	r25, 7
    51f0:	10 f8       	bld	r1, 0

000051f2 <__lshrdi3>:
    51f2:	16 94       	lsr	r1
    51f4:	00 08       	sbc	r0, r0
    51f6:	0f 93       	push	r16
    51f8:	08 30       	cpi	r16, 0x08	; 8
    51fa:	98 f0       	brcs	.+38     	; 0x5222 <__lshrdi3+0x30>
    51fc:	08 50       	subi	r16, 0x08	; 8
    51fe:	23 2f       	mov	r18, r19
    5200:	34 2f       	mov	r19, r20
    5202:	45 2f       	mov	r20, r21
    5204:	56 2f       	mov	r21, r22
    5206:	67 2f       	mov	r22, r23
    5208:	78 2f       	mov	r23, r24
    520a:	89 2f       	mov	r24, r25
    520c:	90 2d       	mov	r25, r0
    520e:	f4 cf       	rjmp	.-24     	; 0x51f8 <__lshrdi3+0x6>
    5210:	05 94       	asr	r0
    5212:	97 95       	ror	r25
    5214:	87 95       	ror	r24
    5216:	77 95       	ror	r23
    5218:	67 95       	ror	r22
    521a:	57 95       	ror	r21
    521c:	47 95       	ror	r20
    521e:	37 95       	ror	r19
    5220:	27 95       	ror	r18
    5222:	0a 95       	dec	r16
    5224:	aa f7       	brpl	.-22     	; 0x5210 <__lshrdi3+0x1e>
    5226:	0f 91       	pop	r16
    5228:	08 95       	ret

0000522a <__adddi3>:
    522a:	2a 0d       	add	r18, r10
    522c:	3b 1d       	adc	r19, r11
    522e:	4c 1d       	adc	r20, r12
    5230:	5d 1d       	adc	r21, r13
    5232:	6e 1d       	adc	r22, r14
    5234:	7f 1d       	adc	r23, r15
    5236:	80 1f       	adc	r24, r16
    5238:	91 1f       	adc	r25, r17
    523a:	08 95       	ret

0000523c <__subdi3>:
    523c:	2a 19       	sub	r18, r10
    523e:	3b 09       	sbc	r19, r11
    5240:	4c 09       	sbc	r20, r12
    5242:	5d 09       	sbc	r21, r13
    5244:	6e 09       	sbc	r22, r14
    5246:	7f 09       	sbc	r23, r15
    5248:	80 0b       	sbc	r24, r16
    524a:	91 0b       	sbc	r25, r17
    524c:	08 95       	ret

0000524e <__umulhisi3>:
    524e:	a2 9f       	mul	r26, r18
    5250:	b0 01       	movw	r22, r0
    5252:	b3 9f       	mul	r27, r19
    5254:	c0 01       	movw	r24, r0
    5256:	a3 9f       	mul	r26, r19
    5258:	70 0d       	add	r23, r0
    525a:	81 1d       	adc	r24, r1
    525c:	11 24       	eor	r1, r1
    525e:	91 1d       	adc	r25, r1
    5260:	b2 9f       	mul	r27, r18
    5262:	70 0d       	add	r23, r0
    5264:	81 1d       	adc	r24, r1
    5266:	11 24       	eor	r1, r1
    5268:	91 1d       	adc	r25, r1
    526a:	08 95       	ret

0000526c <strcat_P>:
    526c:	fb 01       	movw	r30, r22
    526e:	dc 01       	movw	r26, r24
    5270:	0d 90       	ld	r0, X+
    5272:	00 20       	and	r0, r0
    5274:	e9 f7       	brne	.-6      	; 0x5270 <strcat_P+0x4>
    5276:	11 97       	sbiw	r26, 0x01	; 1
    5278:	05 90       	lpm	r0, Z+
    527a:	0d 92       	st	X+, r0
    527c:	00 20       	and	r0, r0
    527e:	e1 f7       	brne	.-8      	; 0x5278 <strcat_P+0xc>
    5280:	08 95       	ret

00005282 <sprintf>:
    5282:	ae e0       	ldi	r26, 0x0E	; 14
    5284:	b0 e0       	ldi	r27, 0x00	; 0
    5286:	e7 e4       	ldi	r30, 0x47	; 71
    5288:	f9 e2       	ldi	r31, 0x29	; 41
    528a:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <__prologue_saves__+0x1c>
    528e:	0d 89       	ldd	r16, Y+21	; 0x15
    5290:	1e 89       	ldd	r17, Y+22	; 0x16
    5292:	86 e0       	ldi	r24, 0x06	; 6
    5294:	8c 83       	std	Y+4, r24	; 0x04
    5296:	1a 83       	std	Y+2, r17	; 0x02
    5298:	09 83       	std	Y+1, r16	; 0x01
    529a:	8f ef       	ldi	r24, 0xFF	; 255
    529c:	9f e7       	ldi	r25, 0x7F	; 127
    529e:	9e 83       	std	Y+6, r25	; 0x06
    52a0:	8d 83       	std	Y+5, r24	; 0x05
    52a2:	ae 01       	movw	r20, r28
    52a4:	47 5e       	subi	r20, 0xE7	; 231
    52a6:	5f 4f       	sbci	r21, 0xFF	; 255
    52a8:	6f 89       	ldd	r22, Y+23	; 0x17
    52aa:	78 8d       	ldd	r23, Y+24	; 0x18
    52ac:	ce 01       	movw	r24, r28
    52ae:	01 96       	adiw	r24, 0x01	; 1
    52b0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <vfprintf>
    52b4:	ef 81       	ldd	r30, Y+7	; 0x07
    52b6:	f8 85       	ldd	r31, Y+8	; 0x08
    52b8:	e0 0f       	add	r30, r16
    52ba:	f1 1f       	adc	r31, r17
    52bc:	10 82       	st	Z, r1
    52be:	2e 96       	adiw	r28, 0x0e	; 14
    52c0:	e4 e0       	ldi	r30, 0x04	; 4
    52c2:	0c 94 05 2c 	jmp	0x580a	; 0x580a <__epilogue_restores__+0x1c>

000052c6 <vfprintf>:
    52c6:	ac e0       	ldi	r26, 0x0C	; 12
    52c8:	b0 e0       	ldi	r27, 0x00	; 0
    52ca:	e9 e6       	ldi	r30, 0x69	; 105
    52cc:	f9 e2       	ldi	r31, 0x29	; 41
    52ce:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__prologue_saves__>
    52d2:	7c 01       	movw	r14, r24
    52d4:	6b 01       	movw	r12, r22
    52d6:	8a 01       	movw	r16, r20
    52d8:	fc 01       	movw	r30, r24
    52da:	17 82       	std	Z+7, r1	; 0x07
    52dc:	16 82       	std	Z+6, r1	; 0x06
    52de:	83 81       	ldd	r24, Z+3	; 0x03
    52e0:	81 ff       	sbrs	r24, 1
    52e2:	bd c1       	rjmp	.+890    	; 0x565e <vfprintf+0x398>
    52e4:	ce 01       	movw	r24, r28
    52e6:	01 96       	adiw	r24, 0x01	; 1
    52e8:	4c 01       	movw	r8, r24
    52ea:	f7 01       	movw	r30, r14
    52ec:	93 81       	ldd	r25, Z+3	; 0x03
    52ee:	f6 01       	movw	r30, r12
    52f0:	93 fd       	sbrc	r25, 3
    52f2:	85 91       	lpm	r24, Z+
    52f4:	93 ff       	sbrs	r25, 3
    52f6:	81 91       	ld	r24, Z+
    52f8:	6f 01       	movw	r12, r30
    52fa:	88 23       	and	r24, r24
    52fc:	09 f4       	brne	.+2      	; 0x5300 <vfprintf+0x3a>
    52fe:	ab c1       	rjmp	.+854    	; 0x5656 <vfprintf+0x390>
    5300:	85 32       	cpi	r24, 0x25	; 37
    5302:	39 f4       	brne	.+14     	; 0x5312 <vfprintf+0x4c>
    5304:	93 fd       	sbrc	r25, 3
    5306:	85 91       	lpm	r24, Z+
    5308:	93 ff       	sbrs	r25, 3
    530a:	81 91       	ld	r24, Z+
    530c:	6f 01       	movw	r12, r30
    530e:	85 32       	cpi	r24, 0x25	; 37
    5310:	29 f4       	brne	.+10     	; 0x531c <vfprintf+0x56>
    5312:	b7 01       	movw	r22, r14
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    531a:	e7 cf       	rjmp	.-50     	; 0x52ea <vfprintf+0x24>
    531c:	51 2c       	mov	r5, r1
    531e:	31 2c       	mov	r3, r1
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	20 32       	cpi	r18, 0x20	; 32
    5324:	a0 f4       	brcc	.+40     	; 0x534e <vfprintf+0x88>
    5326:	8b 32       	cpi	r24, 0x2B	; 43
    5328:	69 f0       	breq	.+26     	; 0x5344 <vfprintf+0x7e>
    532a:	30 f4       	brcc	.+12     	; 0x5338 <vfprintf+0x72>
    532c:	80 32       	cpi	r24, 0x20	; 32
    532e:	59 f0       	breq	.+22     	; 0x5346 <vfprintf+0x80>
    5330:	83 32       	cpi	r24, 0x23	; 35
    5332:	69 f4       	brne	.+26     	; 0x534e <vfprintf+0x88>
    5334:	20 61       	ori	r18, 0x10	; 16
    5336:	2c c0       	rjmp	.+88     	; 0x5390 <vfprintf+0xca>
    5338:	8d 32       	cpi	r24, 0x2D	; 45
    533a:	39 f0       	breq	.+14     	; 0x534a <vfprintf+0x84>
    533c:	80 33       	cpi	r24, 0x30	; 48
    533e:	39 f4       	brne	.+14     	; 0x534e <vfprintf+0x88>
    5340:	21 60       	ori	r18, 0x01	; 1
    5342:	26 c0       	rjmp	.+76     	; 0x5390 <vfprintf+0xca>
    5344:	22 60       	ori	r18, 0x02	; 2
    5346:	24 60       	ori	r18, 0x04	; 4
    5348:	23 c0       	rjmp	.+70     	; 0x5390 <vfprintf+0xca>
    534a:	28 60       	ori	r18, 0x08	; 8
    534c:	21 c0       	rjmp	.+66     	; 0x5390 <vfprintf+0xca>
    534e:	27 fd       	sbrc	r18, 7
    5350:	27 c0       	rjmp	.+78     	; 0x53a0 <vfprintf+0xda>
    5352:	30 ed       	ldi	r19, 0xD0	; 208
    5354:	38 0f       	add	r19, r24
    5356:	3a 30       	cpi	r19, 0x0A	; 10
    5358:	78 f4       	brcc	.+30     	; 0x5378 <vfprintf+0xb2>
    535a:	26 ff       	sbrs	r18, 6
    535c:	06 c0       	rjmp	.+12     	; 0x536a <vfprintf+0xa4>
    535e:	fa e0       	ldi	r31, 0x0A	; 10
    5360:	5f 9e       	mul	r5, r31
    5362:	30 0d       	add	r19, r0
    5364:	11 24       	eor	r1, r1
    5366:	53 2e       	mov	r5, r19
    5368:	13 c0       	rjmp	.+38     	; 0x5390 <vfprintf+0xca>
    536a:	8a e0       	ldi	r24, 0x0A	; 10
    536c:	38 9e       	mul	r3, r24
    536e:	30 0d       	add	r19, r0
    5370:	11 24       	eor	r1, r1
    5372:	33 2e       	mov	r3, r19
    5374:	20 62       	ori	r18, 0x20	; 32
    5376:	0c c0       	rjmp	.+24     	; 0x5390 <vfprintf+0xca>
    5378:	8e 32       	cpi	r24, 0x2E	; 46
    537a:	21 f4       	brne	.+8      	; 0x5384 <vfprintf+0xbe>
    537c:	26 fd       	sbrc	r18, 6
    537e:	6b c1       	rjmp	.+726    	; 0x5656 <vfprintf+0x390>
    5380:	20 64       	ori	r18, 0x40	; 64
    5382:	06 c0       	rjmp	.+12     	; 0x5390 <vfprintf+0xca>
    5384:	8c 36       	cpi	r24, 0x6C	; 108
    5386:	11 f4       	brne	.+4      	; 0x538c <vfprintf+0xc6>
    5388:	20 68       	ori	r18, 0x80	; 128
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <vfprintf+0xca>
    538c:	88 36       	cpi	r24, 0x68	; 104
    538e:	41 f4       	brne	.+16     	; 0x53a0 <vfprintf+0xda>
    5390:	f6 01       	movw	r30, r12
    5392:	93 fd       	sbrc	r25, 3
    5394:	85 91       	lpm	r24, Z+
    5396:	93 ff       	sbrs	r25, 3
    5398:	81 91       	ld	r24, Z+
    539a:	6f 01       	movw	r12, r30
    539c:	81 11       	cpse	r24, r1
    539e:	c1 cf       	rjmp	.-126    	; 0x5322 <vfprintf+0x5c>
    53a0:	98 2f       	mov	r25, r24
    53a2:	9f 7d       	andi	r25, 0xDF	; 223
    53a4:	95 54       	subi	r25, 0x45	; 69
    53a6:	93 30       	cpi	r25, 0x03	; 3
    53a8:	28 f4       	brcc	.+10     	; 0x53b4 <vfprintf+0xee>
    53aa:	0c 5f       	subi	r16, 0xFC	; 252
    53ac:	1f 4f       	sbci	r17, 0xFF	; 255
    53ae:	ff e3       	ldi	r31, 0x3F	; 63
    53b0:	f9 83       	std	Y+1, r31	; 0x01
    53b2:	0d c0       	rjmp	.+26     	; 0x53ce <vfprintf+0x108>
    53b4:	83 36       	cpi	r24, 0x63	; 99
    53b6:	31 f0       	breq	.+12     	; 0x53c4 <vfprintf+0xfe>
    53b8:	83 37       	cpi	r24, 0x73	; 115
    53ba:	71 f0       	breq	.+28     	; 0x53d8 <vfprintf+0x112>
    53bc:	83 35       	cpi	r24, 0x53	; 83
    53be:	09 f0       	breq	.+2      	; 0x53c2 <vfprintf+0xfc>
    53c0:	5b c0       	rjmp	.+182    	; 0x5478 <vfprintf+0x1b2>
    53c2:	22 c0       	rjmp	.+68     	; 0x5408 <vfprintf+0x142>
    53c4:	f8 01       	movw	r30, r16
    53c6:	80 81       	ld	r24, Z
    53c8:	89 83       	std	Y+1, r24	; 0x01
    53ca:	0e 5f       	subi	r16, 0xFE	; 254
    53cc:	1f 4f       	sbci	r17, 0xFF	; 255
    53ce:	44 24       	eor	r4, r4
    53d0:	43 94       	inc	r4
    53d2:	51 2c       	mov	r5, r1
    53d4:	54 01       	movw	r10, r8
    53d6:	15 c0       	rjmp	.+42     	; 0x5402 <vfprintf+0x13c>
    53d8:	38 01       	movw	r6, r16
    53da:	f2 e0       	ldi	r31, 0x02	; 2
    53dc:	6f 0e       	add	r6, r31
    53de:	71 1c       	adc	r7, r1
    53e0:	f8 01       	movw	r30, r16
    53e2:	a0 80       	ld	r10, Z
    53e4:	b1 80       	ldd	r11, Z+1	; 0x01
    53e6:	26 ff       	sbrs	r18, 6
    53e8:	03 c0       	rjmp	.+6      	; 0x53f0 <vfprintf+0x12a>
    53ea:	65 2d       	mov	r22, r5
    53ec:	70 e0       	ldi	r23, 0x00	; 0
    53ee:	02 c0       	rjmp	.+4      	; 0x53f4 <vfprintf+0x12e>
    53f0:	6f ef       	ldi	r22, 0xFF	; 255
    53f2:	7f ef       	ldi	r23, 0xFF	; 255
    53f4:	c5 01       	movw	r24, r10
    53f6:	2c 87       	std	Y+12, r18	; 0x0c
    53f8:	0e 94 40 2b 	call	0x5680	; 0x5680 <strnlen>
    53fc:	2c 01       	movw	r4, r24
    53fe:	83 01       	movw	r16, r6
    5400:	2c 85       	ldd	r18, Y+12	; 0x0c
    5402:	2f 77       	andi	r18, 0x7F	; 127
    5404:	22 2e       	mov	r2, r18
    5406:	17 c0       	rjmp	.+46     	; 0x5436 <vfprintf+0x170>
    5408:	38 01       	movw	r6, r16
    540a:	f2 e0       	ldi	r31, 0x02	; 2
    540c:	6f 0e       	add	r6, r31
    540e:	71 1c       	adc	r7, r1
    5410:	f8 01       	movw	r30, r16
    5412:	a0 80       	ld	r10, Z
    5414:	b1 80       	ldd	r11, Z+1	; 0x01
    5416:	26 ff       	sbrs	r18, 6
    5418:	03 c0       	rjmp	.+6      	; 0x5420 <vfprintf+0x15a>
    541a:	65 2d       	mov	r22, r5
    541c:	70 e0       	ldi	r23, 0x00	; 0
    541e:	02 c0       	rjmp	.+4      	; 0x5424 <vfprintf+0x15e>
    5420:	6f ef       	ldi	r22, 0xFF	; 255
    5422:	7f ef       	ldi	r23, 0xFF	; 255
    5424:	c5 01       	movw	r24, r10
    5426:	2c 87       	std	Y+12, r18	; 0x0c
    5428:	0e 94 35 2b 	call	0x566a	; 0x566a <strnlen_P>
    542c:	2c 01       	movw	r4, r24
    542e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5430:	20 68       	ori	r18, 0x80	; 128
    5432:	22 2e       	mov	r2, r18
    5434:	83 01       	movw	r16, r6
    5436:	23 fc       	sbrc	r2, 3
    5438:	1b c0       	rjmp	.+54     	; 0x5470 <vfprintf+0x1aa>
    543a:	83 2d       	mov	r24, r3
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	48 16       	cp	r4, r24
    5440:	59 06       	cpc	r5, r25
    5442:	b0 f4       	brcc	.+44     	; 0x5470 <vfprintf+0x1aa>
    5444:	b7 01       	movw	r22, r14
    5446:	80 e2       	ldi	r24, 0x20	; 32
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    544e:	3a 94       	dec	r3
    5450:	f4 cf       	rjmp	.-24     	; 0x543a <vfprintf+0x174>
    5452:	f5 01       	movw	r30, r10
    5454:	27 fc       	sbrc	r2, 7
    5456:	85 91       	lpm	r24, Z+
    5458:	27 fe       	sbrs	r2, 7
    545a:	81 91       	ld	r24, Z+
    545c:	5f 01       	movw	r10, r30
    545e:	b7 01       	movw	r22, r14
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    5466:	31 10       	cpse	r3, r1
    5468:	3a 94       	dec	r3
    546a:	f1 e0       	ldi	r31, 0x01	; 1
    546c:	4f 1a       	sub	r4, r31
    546e:	51 08       	sbc	r5, r1
    5470:	41 14       	cp	r4, r1
    5472:	51 04       	cpc	r5, r1
    5474:	71 f7       	brne	.-36     	; 0x5452 <vfprintf+0x18c>
    5476:	e5 c0       	rjmp	.+458    	; 0x5642 <vfprintf+0x37c>
    5478:	84 36       	cpi	r24, 0x64	; 100
    547a:	11 f0       	breq	.+4      	; 0x5480 <vfprintf+0x1ba>
    547c:	89 36       	cpi	r24, 0x69	; 105
    547e:	39 f5       	brne	.+78     	; 0x54ce <vfprintf+0x208>
    5480:	f8 01       	movw	r30, r16
    5482:	27 ff       	sbrs	r18, 7
    5484:	07 c0       	rjmp	.+14     	; 0x5494 <vfprintf+0x1ce>
    5486:	60 81       	ld	r22, Z
    5488:	71 81       	ldd	r23, Z+1	; 0x01
    548a:	82 81       	ldd	r24, Z+2	; 0x02
    548c:	93 81       	ldd	r25, Z+3	; 0x03
    548e:	0c 5f       	subi	r16, 0xFC	; 252
    5490:	1f 4f       	sbci	r17, 0xFF	; 255
    5492:	08 c0       	rjmp	.+16     	; 0x54a4 <vfprintf+0x1de>
    5494:	60 81       	ld	r22, Z
    5496:	71 81       	ldd	r23, Z+1	; 0x01
    5498:	88 27       	eor	r24, r24
    549a:	77 fd       	sbrc	r23, 7
    549c:	80 95       	com	r24
    549e:	98 2f       	mov	r25, r24
    54a0:	0e 5f       	subi	r16, 0xFE	; 254
    54a2:	1f 4f       	sbci	r17, 0xFF	; 255
    54a4:	2f 76       	andi	r18, 0x6F	; 111
    54a6:	b2 2e       	mov	r11, r18
    54a8:	97 ff       	sbrs	r25, 7
    54aa:	09 c0       	rjmp	.+18     	; 0x54be <vfprintf+0x1f8>
    54ac:	90 95       	com	r25
    54ae:	80 95       	com	r24
    54b0:	70 95       	com	r23
    54b2:	61 95       	neg	r22
    54b4:	7f 4f       	sbci	r23, 0xFF	; 255
    54b6:	8f 4f       	sbci	r24, 0xFF	; 255
    54b8:	9f 4f       	sbci	r25, 0xFF	; 255
    54ba:	20 68       	ori	r18, 0x80	; 128
    54bc:	b2 2e       	mov	r11, r18
    54be:	2a e0       	ldi	r18, 0x0A	; 10
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	a4 01       	movw	r20, r8
    54c4:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__ultoa_invert>
    54c8:	a8 2e       	mov	r10, r24
    54ca:	a8 18       	sub	r10, r8
    54cc:	44 c0       	rjmp	.+136    	; 0x5556 <vfprintf+0x290>
    54ce:	85 37       	cpi	r24, 0x75	; 117
    54d0:	29 f4       	brne	.+10     	; 0x54dc <vfprintf+0x216>
    54d2:	2f 7e       	andi	r18, 0xEF	; 239
    54d4:	b2 2e       	mov	r11, r18
    54d6:	2a e0       	ldi	r18, 0x0A	; 10
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	25 c0       	rjmp	.+74     	; 0x5526 <vfprintf+0x260>
    54dc:	f2 2f       	mov	r31, r18
    54de:	f9 7f       	andi	r31, 0xF9	; 249
    54e0:	bf 2e       	mov	r11, r31
    54e2:	8f 36       	cpi	r24, 0x6F	; 111
    54e4:	c1 f0       	breq	.+48     	; 0x5516 <vfprintf+0x250>
    54e6:	18 f4       	brcc	.+6      	; 0x54ee <vfprintf+0x228>
    54e8:	88 35       	cpi	r24, 0x58	; 88
    54ea:	79 f0       	breq	.+30     	; 0x550a <vfprintf+0x244>
    54ec:	b4 c0       	rjmp	.+360    	; 0x5656 <vfprintf+0x390>
    54ee:	80 37       	cpi	r24, 0x70	; 112
    54f0:	19 f0       	breq	.+6      	; 0x54f8 <vfprintf+0x232>
    54f2:	88 37       	cpi	r24, 0x78	; 120
    54f4:	21 f0       	breq	.+8      	; 0x54fe <vfprintf+0x238>
    54f6:	af c0       	rjmp	.+350    	; 0x5656 <vfprintf+0x390>
    54f8:	2f 2f       	mov	r18, r31
    54fa:	20 61       	ori	r18, 0x10	; 16
    54fc:	b2 2e       	mov	r11, r18
    54fe:	b4 fe       	sbrs	r11, 4
    5500:	0d c0       	rjmp	.+26     	; 0x551c <vfprintf+0x256>
    5502:	8b 2d       	mov	r24, r11
    5504:	84 60       	ori	r24, 0x04	; 4
    5506:	b8 2e       	mov	r11, r24
    5508:	09 c0       	rjmp	.+18     	; 0x551c <vfprintf+0x256>
    550a:	24 ff       	sbrs	r18, 4
    550c:	0a c0       	rjmp	.+20     	; 0x5522 <vfprintf+0x25c>
    550e:	9f 2f       	mov	r25, r31
    5510:	96 60       	ori	r25, 0x06	; 6
    5512:	b9 2e       	mov	r11, r25
    5514:	06 c0       	rjmp	.+12     	; 0x5522 <vfprintf+0x25c>
    5516:	28 e0       	ldi	r18, 0x08	; 8
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	05 c0       	rjmp	.+10     	; 0x5526 <vfprintf+0x260>
    551c:	20 e1       	ldi	r18, 0x10	; 16
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	02 c0       	rjmp	.+4      	; 0x5526 <vfprintf+0x260>
    5522:	20 e1       	ldi	r18, 0x10	; 16
    5524:	32 e0       	ldi	r19, 0x02	; 2
    5526:	f8 01       	movw	r30, r16
    5528:	b7 fe       	sbrs	r11, 7
    552a:	07 c0       	rjmp	.+14     	; 0x553a <vfprintf+0x274>
    552c:	60 81       	ld	r22, Z
    552e:	71 81       	ldd	r23, Z+1	; 0x01
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	0c 5f       	subi	r16, 0xFC	; 252
    5536:	1f 4f       	sbci	r17, 0xFF	; 255
    5538:	06 c0       	rjmp	.+12     	; 0x5546 <vfprintf+0x280>
    553a:	60 81       	ld	r22, Z
    553c:	71 81       	ldd	r23, Z+1	; 0x01
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	0e 5f       	subi	r16, 0xFE	; 254
    5544:	1f 4f       	sbci	r17, 0xFF	; 255
    5546:	a4 01       	movw	r20, r8
    5548:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__ultoa_invert>
    554c:	a8 2e       	mov	r10, r24
    554e:	a8 18       	sub	r10, r8
    5550:	fb 2d       	mov	r31, r11
    5552:	ff 77       	andi	r31, 0x7F	; 127
    5554:	bf 2e       	mov	r11, r31
    5556:	b6 fe       	sbrs	r11, 6
    5558:	0b c0       	rjmp	.+22     	; 0x5570 <vfprintf+0x2aa>
    555a:	2b 2d       	mov	r18, r11
    555c:	2e 7f       	andi	r18, 0xFE	; 254
    555e:	a5 14       	cp	r10, r5
    5560:	50 f4       	brcc	.+20     	; 0x5576 <vfprintf+0x2b0>
    5562:	b4 fe       	sbrs	r11, 4
    5564:	0a c0       	rjmp	.+20     	; 0x557a <vfprintf+0x2b4>
    5566:	b2 fc       	sbrc	r11, 2
    5568:	08 c0       	rjmp	.+16     	; 0x557a <vfprintf+0x2b4>
    556a:	2b 2d       	mov	r18, r11
    556c:	2e 7e       	andi	r18, 0xEE	; 238
    556e:	05 c0       	rjmp	.+10     	; 0x557a <vfprintf+0x2b4>
    5570:	7a 2c       	mov	r7, r10
    5572:	2b 2d       	mov	r18, r11
    5574:	03 c0       	rjmp	.+6      	; 0x557c <vfprintf+0x2b6>
    5576:	7a 2c       	mov	r7, r10
    5578:	01 c0       	rjmp	.+2      	; 0x557c <vfprintf+0x2b6>
    557a:	75 2c       	mov	r7, r5
    557c:	24 ff       	sbrs	r18, 4
    557e:	0d c0       	rjmp	.+26     	; 0x559a <vfprintf+0x2d4>
    5580:	fe 01       	movw	r30, r28
    5582:	ea 0d       	add	r30, r10
    5584:	f1 1d       	adc	r31, r1
    5586:	80 81       	ld	r24, Z
    5588:	80 33       	cpi	r24, 0x30	; 48
    558a:	11 f4       	brne	.+4      	; 0x5590 <vfprintf+0x2ca>
    558c:	29 7e       	andi	r18, 0xE9	; 233
    558e:	09 c0       	rjmp	.+18     	; 0x55a2 <vfprintf+0x2dc>
    5590:	22 ff       	sbrs	r18, 2
    5592:	06 c0       	rjmp	.+12     	; 0x55a0 <vfprintf+0x2da>
    5594:	73 94       	inc	r7
    5596:	73 94       	inc	r7
    5598:	04 c0       	rjmp	.+8      	; 0x55a2 <vfprintf+0x2dc>
    559a:	82 2f       	mov	r24, r18
    559c:	86 78       	andi	r24, 0x86	; 134
    559e:	09 f0       	breq	.+2      	; 0x55a2 <vfprintf+0x2dc>
    55a0:	73 94       	inc	r7
    55a2:	23 fd       	sbrc	r18, 3
    55a4:	13 c0       	rjmp	.+38     	; 0x55cc <vfprintf+0x306>
    55a6:	20 ff       	sbrs	r18, 0
    55a8:	06 c0       	rjmp	.+12     	; 0x55b6 <vfprintf+0x2f0>
    55aa:	5a 2c       	mov	r5, r10
    55ac:	73 14       	cp	r7, r3
    55ae:	18 f4       	brcc	.+6      	; 0x55b6 <vfprintf+0x2f0>
    55b0:	53 0c       	add	r5, r3
    55b2:	57 18       	sub	r5, r7
    55b4:	73 2c       	mov	r7, r3
    55b6:	73 14       	cp	r7, r3
    55b8:	68 f4       	brcc	.+26     	; 0x55d4 <vfprintf+0x30e>
    55ba:	b7 01       	movw	r22, r14
    55bc:	80 e2       	ldi	r24, 0x20	; 32
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	2c 87       	std	Y+12, r18	; 0x0c
    55c2:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    55c6:	73 94       	inc	r7
    55c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    55ca:	f5 cf       	rjmp	.-22     	; 0x55b6 <vfprintf+0x2f0>
    55cc:	73 14       	cp	r7, r3
    55ce:	10 f4       	brcc	.+4      	; 0x55d4 <vfprintf+0x30e>
    55d0:	37 18       	sub	r3, r7
    55d2:	01 c0       	rjmp	.+2      	; 0x55d6 <vfprintf+0x310>
    55d4:	31 2c       	mov	r3, r1
    55d6:	24 ff       	sbrs	r18, 4
    55d8:	12 c0       	rjmp	.+36     	; 0x55fe <vfprintf+0x338>
    55da:	b7 01       	movw	r22, r14
    55dc:	80 e3       	ldi	r24, 0x30	; 48
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	2c 87       	std	Y+12, r18	; 0x0c
    55e2:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    55e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    55e8:	22 ff       	sbrs	r18, 2
    55ea:	17 c0       	rjmp	.+46     	; 0x561a <vfprintf+0x354>
    55ec:	21 ff       	sbrs	r18, 1
    55ee:	03 c0       	rjmp	.+6      	; 0x55f6 <vfprintf+0x330>
    55f0:	88 e5       	ldi	r24, 0x58	; 88
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	02 c0       	rjmp	.+4      	; 0x55fa <vfprintf+0x334>
    55f6:	88 e7       	ldi	r24, 0x78	; 120
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	b7 01       	movw	r22, r14
    55fc:	0c c0       	rjmp	.+24     	; 0x5616 <vfprintf+0x350>
    55fe:	82 2f       	mov	r24, r18
    5600:	86 78       	andi	r24, 0x86	; 134
    5602:	59 f0       	breq	.+22     	; 0x561a <vfprintf+0x354>
    5604:	21 fd       	sbrc	r18, 1
    5606:	02 c0       	rjmp	.+4      	; 0x560c <vfprintf+0x346>
    5608:	80 e2       	ldi	r24, 0x20	; 32
    560a:	01 c0       	rjmp	.+2      	; 0x560e <vfprintf+0x348>
    560c:	8b e2       	ldi	r24, 0x2B	; 43
    560e:	27 fd       	sbrc	r18, 7
    5610:	8d e2       	ldi	r24, 0x2D	; 45
    5612:	b7 01       	movw	r22, r14
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    561a:	a5 14       	cp	r10, r5
    561c:	38 f4       	brcc	.+14     	; 0x562c <vfprintf+0x366>
    561e:	b7 01       	movw	r22, r14
    5620:	80 e3       	ldi	r24, 0x30	; 48
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    5628:	5a 94       	dec	r5
    562a:	f7 cf       	rjmp	.-18     	; 0x561a <vfprintf+0x354>
    562c:	aa 94       	dec	r10
    562e:	f4 01       	movw	r30, r8
    5630:	ea 0d       	add	r30, r10
    5632:	f1 1d       	adc	r31, r1
    5634:	80 81       	ld	r24, Z
    5636:	b7 01       	movw	r22, r14
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    563e:	a1 10       	cpse	r10, r1
    5640:	f5 cf       	rjmp	.-22     	; 0x562c <vfprintf+0x366>
    5642:	33 20       	and	r3, r3
    5644:	09 f4       	brne	.+2      	; 0x5648 <vfprintf+0x382>
    5646:	51 ce       	rjmp	.-862    	; 0x52ea <vfprintf+0x24>
    5648:	b7 01       	movw	r22, r14
    564a:	80 e2       	ldi	r24, 0x20	; 32
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <fputc>
    5652:	3a 94       	dec	r3
    5654:	f6 cf       	rjmp	.-20     	; 0x5642 <vfprintf+0x37c>
    5656:	f7 01       	movw	r30, r14
    5658:	86 81       	ldd	r24, Z+6	; 0x06
    565a:	97 81       	ldd	r25, Z+7	; 0x07
    565c:	02 c0       	rjmp	.+4      	; 0x5662 <vfprintf+0x39c>
    565e:	8f ef       	ldi	r24, 0xFF	; 255
    5660:	9f ef       	ldi	r25, 0xFF	; 255
    5662:	2c 96       	adiw	r28, 0x0c	; 12
    5664:	e2 e1       	ldi	r30, 0x12	; 18
    5666:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <__epilogue_restores__>

0000566a <strnlen_P>:
    566a:	fc 01       	movw	r30, r24
    566c:	05 90       	lpm	r0, Z+
    566e:	61 50       	subi	r22, 0x01	; 1
    5670:	70 40       	sbci	r23, 0x00	; 0
    5672:	01 10       	cpse	r0, r1
    5674:	d8 f7       	brcc	.-10     	; 0x566c <strnlen_P+0x2>
    5676:	80 95       	com	r24
    5678:	90 95       	com	r25
    567a:	8e 0f       	add	r24, r30
    567c:	9f 1f       	adc	r25, r31
    567e:	08 95       	ret

00005680 <strnlen>:
    5680:	fc 01       	movw	r30, r24
    5682:	61 50       	subi	r22, 0x01	; 1
    5684:	70 40       	sbci	r23, 0x00	; 0
    5686:	01 90       	ld	r0, Z+
    5688:	01 10       	cpse	r0, r1
    568a:	d8 f7       	brcc	.-10     	; 0x5682 <strnlen+0x2>
    568c:	80 95       	com	r24
    568e:	90 95       	com	r25
    5690:	8e 0f       	add	r24, r30
    5692:	9f 1f       	adc	r25, r31
    5694:	08 95       	ret

00005696 <fputc>:
    5696:	0f 93       	push	r16
    5698:	1f 93       	push	r17
    569a:	cf 93       	push	r28
    569c:	df 93       	push	r29
    569e:	18 2f       	mov	r17, r24
    56a0:	09 2f       	mov	r16, r25
    56a2:	eb 01       	movw	r28, r22
    56a4:	8b 81       	ldd	r24, Y+3	; 0x03
    56a6:	81 fd       	sbrc	r24, 1
    56a8:	03 c0       	rjmp	.+6      	; 0x56b0 <fputc+0x1a>
    56aa:	8f ef       	ldi	r24, 0xFF	; 255
    56ac:	9f ef       	ldi	r25, 0xFF	; 255
    56ae:	20 c0       	rjmp	.+64     	; 0x56f0 <fputc+0x5a>
    56b0:	82 ff       	sbrs	r24, 2
    56b2:	10 c0       	rjmp	.+32     	; 0x56d4 <fputc+0x3e>
    56b4:	4e 81       	ldd	r20, Y+6	; 0x06
    56b6:	5f 81       	ldd	r21, Y+7	; 0x07
    56b8:	2c 81       	ldd	r18, Y+4	; 0x04
    56ba:	3d 81       	ldd	r19, Y+5	; 0x05
    56bc:	42 17       	cp	r20, r18
    56be:	53 07       	cpc	r21, r19
    56c0:	7c f4       	brge	.+30     	; 0x56e0 <fputc+0x4a>
    56c2:	e8 81       	ld	r30, Y
    56c4:	f9 81       	ldd	r31, Y+1	; 0x01
    56c6:	9f 01       	movw	r18, r30
    56c8:	2f 5f       	subi	r18, 0xFF	; 255
    56ca:	3f 4f       	sbci	r19, 0xFF	; 255
    56cc:	39 83       	std	Y+1, r19	; 0x01
    56ce:	28 83       	st	Y, r18
    56d0:	10 83       	st	Z, r17
    56d2:	06 c0       	rjmp	.+12     	; 0x56e0 <fputc+0x4a>
    56d4:	e8 85       	ldd	r30, Y+8	; 0x08
    56d6:	f9 85       	ldd	r31, Y+9	; 0x09
    56d8:	81 2f       	mov	r24, r17
    56da:	09 95       	icall
    56dc:	89 2b       	or	r24, r25
    56de:	29 f7       	brne	.-54     	; 0x56aa <fputc+0x14>
    56e0:	2e 81       	ldd	r18, Y+6	; 0x06
    56e2:	3f 81       	ldd	r19, Y+7	; 0x07
    56e4:	2f 5f       	subi	r18, 0xFF	; 255
    56e6:	3f 4f       	sbci	r19, 0xFF	; 255
    56e8:	3f 83       	std	Y+7, r19	; 0x07
    56ea:	2e 83       	std	Y+6, r18	; 0x06
    56ec:	81 2f       	mov	r24, r17
    56ee:	90 2f       	mov	r25, r16
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	1f 91       	pop	r17
    56f6:	0f 91       	pop	r16
    56f8:	08 95       	ret

000056fa <__ultoa_invert>:
    56fa:	fa 01       	movw	r30, r20
    56fc:	aa 27       	eor	r26, r26
    56fe:	28 30       	cpi	r18, 0x08	; 8
    5700:	51 f1       	breq	.+84     	; 0x5756 <__ultoa_invert+0x5c>
    5702:	20 31       	cpi	r18, 0x10	; 16
    5704:	81 f1       	breq	.+96     	; 0x5766 <__ultoa_invert+0x6c>
    5706:	e8 94       	clt
    5708:	6f 93       	push	r22
    570a:	6e 7f       	andi	r22, 0xFE	; 254
    570c:	6e 5f       	subi	r22, 0xFE	; 254
    570e:	7f 4f       	sbci	r23, 0xFF	; 255
    5710:	8f 4f       	sbci	r24, 0xFF	; 255
    5712:	9f 4f       	sbci	r25, 0xFF	; 255
    5714:	af 4f       	sbci	r26, 0xFF	; 255
    5716:	b1 e0       	ldi	r27, 0x01	; 1
    5718:	3e d0       	rcall	.+124    	; 0x5796 <__ultoa_invert+0x9c>
    571a:	b4 e0       	ldi	r27, 0x04	; 4
    571c:	3c d0       	rcall	.+120    	; 0x5796 <__ultoa_invert+0x9c>
    571e:	67 0f       	add	r22, r23
    5720:	78 1f       	adc	r23, r24
    5722:	89 1f       	adc	r24, r25
    5724:	9a 1f       	adc	r25, r26
    5726:	a1 1d       	adc	r26, r1
    5728:	68 0f       	add	r22, r24
    572a:	79 1f       	adc	r23, r25
    572c:	8a 1f       	adc	r24, r26
    572e:	91 1d       	adc	r25, r1
    5730:	a1 1d       	adc	r26, r1
    5732:	6a 0f       	add	r22, r26
    5734:	71 1d       	adc	r23, r1
    5736:	81 1d       	adc	r24, r1
    5738:	91 1d       	adc	r25, r1
    573a:	a1 1d       	adc	r26, r1
    573c:	20 d0       	rcall	.+64     	; 0x577e <__ultoa_invert+0x84>
    573e:	09 f4       	brne	.+2      	; 0x5742 <__ultoa_invert+0x48>
    5740:	68 94       	set
    5742:	3f 91       	pop	r19
    5744:	2a e0       	ldi	r18, 0x0A	; 10
    5746:	26 9f       	mul	r18, r22
    5748:	11 24       	eor	r1, r1
    574a:	30 19       	sub	r19, r0
    574c:	30 5d       	subi	r19, 0xD0	; 208
    574e:	31 93       	st	Z+, r19
    5750:	de f6       	brtc	.-74     	; 0x5708 <__ultoa_invert+0xe>
    5752:	cf 01       	movw	r24, r30
    5754:	08 95       	ret
    5756:	46 2f       	mov	r20, r22
    5758:	47 70       	andi	r20, 0x07	; 7
    575a:	40 5d       	subi	r20, 0xD0	; 208
    575c:	41 93       	st	Z+, r20
    575e:	b3 e0       	ldi	r27, 0x03	; 3
    5760:	0f d0       	rcall	.+30     	; 0x5780 <__ultoa_invert+0x86>
    5762:	c9 f7       	brne	.-14     	; 0x5756 <__ultoa_invert+0x5c>
    5764:	f6 cf       	rjmp	.-20     	; 0x5752 <__ultoa_invert+0x58>
    5766:	46 2f       	mov	r20, r22
    5768:	4f 70       	andi	r20, 0x0F	; 15
    576a:	40 5d       	subi	r20, 0xD0	; 208
    576c:	4a 33       	cpi	r20, 0x3A	; 58
    576e:	18 f0       	brcs	.+6      	; 0x5776 <__ultoa_invert+0x7c>
    5770:	49 5d       	subi	r20, 0xD9	; 217
    5772:	31 fd       	sbrc	r19, 1
    5774:	40 52       	subi	r20, 0x20	; 32
    5776:	41 93       	st	Z+, r20
    5778:	02 d0       	rcall	.+4      	; 0x577e <__ultoa_invert+0x84>
    577a:	a9 f7       	brne	.-22     	; 0x5766 <__ultoa_invert+0x6c>
    577c:	ea cf       	rjmp	.-44     	; 0x5752 <__ultoa_invert+0x58>
    577e:	b4 e0       	ldi	r27, 0x04	; 4
    5780:	a6 95       	lsr	r26
    5782:	97 95       	ror	r25
    5784:	87 95       	ror	r24
    5786:	77 95       	ror	r23
    5788:	67 95       	ror	r22
    578a:	ba 95       	dec	r27
    578c:	c9 f7       	brne	.-14     	; 0x5780 <__ultoa_invert+0x86>
    578e:	00 97       	sbiw	r24, 0x00	; 0
    5790:	61 05       	cpc	r22, r1
    5792:	71 05       	cpc	r23, r1
    5794:	08 95       	ret
    5796:	9b 01       	movw	r18, r22
    5798:	ac 01       	movw	r20, r24
    579a:	0a 2e       	mov	r0, r26
    579c:	06 94       	lsr	r0
    579e:	57 95       	ror	r21
    57a0:	47 95       	ror	r20
    57a2:	37 95       	ror	r19
    57a4:	27 95       	ror	r18
    57a6:	ba 95       	dec	r27
    57a8:	c9 f7       	brne	.-14     	; 0x579c <__ultoa_invert+0xa2>
    57aa:	62 0f       	add	r22, r18
    57ac:	73 1f       	adc	r23, r19
    57ae:	84 1f       	adc	r24, r20
    57b0:	95 1f       	adc	r25, r21
    57b2:	a0 1d       	adc	r26, r0
    57b4:	08 95       	ret

000057b6 <__prologue_saves__>:
    57b6:	2f 92       	push	r2
    57b8:	3f 92       	push	r3
    57ba:	4f 92       	push	r4
    57bc:	5f 92       	push	r5
    57be:	6f 92       	push	r6
    57c0:	7f 92       	push	r7
    57c2:	8f 92       	push	r8
    57c4:	9f 92       	push	r9
    57c6:	af 92       	push	r10
    57c8:	bf 92       	push	r11
    57ca:	cf 92       	push	r12
    57cc:	df 92       	push	r13
    57ce:	ef 92       	push	r14
    57d0:	ff 92       	push	r15
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	cd b7       	in	r28, 0x3d	; 61
    57dc:	de b7       	in	r29, 0x3e	; 62
    57de:	ca 1b       	sub	r28, r26
    57e0:	db 0b       	sbc	r29, r27
    57e2:	0f b6       	in	r0, 0x3f	; 63
    57e4:	f8 94       	cli
    57e6:	de bf       	out	0x3e, r29	; 62
    57e8:	0f be       	out	0x3f, r0	; 63
    57ea:	cd bf       	out	0x3d, r28	; 61
    57ec:	09 94       	ijmp

000057ee <__epilogue_restores__>:
    57ee:	2a 88       	ldd	r2, Y+18	; 0x12
    57f0:	39 88       	ldd	r3, Y+17	; 0x11
    57f2:	48 88       	ldd	r4, Y+16	; 0x10
    57f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    57f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    57f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    57fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    57fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    57fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    5800:	b9 84       	ldd	r11, Y+9	; 0x09
    5802:	c8 84       	ldd	r12, Y+8	; 0x08
    5804:	df 80       	ldd	r13, Y+7	; 0x07
    5806:	ee 80       	ldd	r14, Y+6	; 0x06
    5808:	fd 80       	ldd	r15, Y+5	; 0x05
    580a:	0c 81       	ldd	r16, Y+4	; 0x04
    580c:	1b 81       	ldd	r17, Y+3	; 0x03
    580e:	aa 81       	ldd	r26, Y+2	; 0x02
    5810:	b9 81       	ldd	r27, Y+1	; 0x01
    5812:	ce 0f       	add	r28, r30
    5814:	d1 1d       	adc	r29, r1
    5816:	0f b6       	in	r0, 0x3f	; 63
    5818:	f8 94       	cli
    581a:	de bf       	out	0x3e, r29	; 62
    581c:	0f be       	out	0x3f, r0	; 63
    581e:	cd bf       	out	0x3d, r28	; 61
    5820:	ed 01       	movw	r28, r26
    5822:	08 95       	ret

00005824 <_exit>:
    5824:	f8 94       	cli

00005826 <__stop_program>:
    5826:	ff cf       	rjmp	.-2      	; 0x5826 <__stop_program>
